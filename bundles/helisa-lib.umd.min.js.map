{"version":3,"sources":["../esm2015/projects/helisa-lib/src/lib/components/input-with-button/input-with-button.component.ts","../esm2015/projects/helisa-lib/src/lib/components/toast-helisa/toast-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/toast-helisa/toast-type.enum.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa-type.enum.ts","../esm2015/projects/helisa-lib/src/lib/components/toast-helisa/toast-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa.service.ts","../../../node_modules/tslib/tslib.es6.js","../esm2015/projects/helisa-lib/src/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/input-helisa/input-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa.interface.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa-connect.component.ts","../esm2015/projects/helisa-lib/src/lib/components/date-helisa/date-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa-connect.ts","../esm2015/projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","../esm2015/projects/helisa-lib/src/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","../projects/helisa-lib/src/lib/directives/options-scroll.directive.ts","../projects/helisa-lib/src/lib/directives/tooltip.directive.ts","../projects/helisa-lib/src/lib/directives/external-link.directive.ts","../esm2015/projects/helisa-lib/src/lib/components/combo-box-helisa/combo-box-helisa.component.ts","../projects/helisa-lib/src/lib/pipes/external-link.pipe.ts","../esm2015/projects/helisa-lib/src/lib/components/paging-tree-helisa/paging-tree-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-helisa-type.enum.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-data-helisa.component.ts","../../projects/helisa-lib/src/lib/helisa-lib.module.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-data-helisa.service.ts"],"names":["InputWithButtonComponent","this","placeholder","inputFormControl","FormControl","Validators","required","requiredMessage","value","isFocused","done","EventEmitter","cancel","prototype","ngOnInit","setValue","nameField","nativeElement","focus","onDone","valid","emit","onCancel","Component","args","selector","template","Input","ViewChild","static","Output","ToastHelisaComponent","data","Inject","MAT_SNACK_BAR_DATA","ToastType","AlertHelisaType","ToastHelisaService","snackBar","durationInSeconds","showToast","type","message","subMessages","openFromComponent","duration","Injectable","providedIn","MatSnackBar","AlertHelisaComponent","dialogRef","_this","content","title","okLabel","undefined","cancelLabel","hasCancel","CONFIRMATION","disableClose","keydownEvents","subscribe","event","code","close","MatDialogRef","MAT_DIALOG_DATA","AlertHelisaService","dialog","openDialog","open","width","afterClosed","MatDialog","Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","DependencyTableHelisaService","tables","Subject","infoTables","Array","emitVisibilityButton$","emitVisibilityButton","asObservable","emitVisibilityAllButtons$","emitVisibilityAllButtons","emitIsCellSelection$","emitIsCellSelection","emitChangeColumns$","emitChangeColumns","emitEnabledButton$","emitEnabledButton","emitTotal","emitNextPage","getTables","updateDependency","configTable","withRemoveDependency","slice","order","isRemote","dataSource","count","Error","setTotal","addPage","selectIndexRow","config","indexRowSelect","changeEnabledButton","changeVisibilityButton","changeVisibilityAllButtons","show","changeisCellSelection","changeColumnsByTable","TypeResizeEnum","TableHelisaService","emitChangeSource","totalReturn","nextPageReturn","emitVisibleButton$","emitVisibleButton","total","table","obj","page","change","InputHelisaType","enableResize","typeResize","ONLY_CELLS","uuid","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","showToolTip","selected","selectToImport","selectObject","nextPage","sort","drop","addRow","selectCell","bookClicked","afterViewInit","selectedObject","hideDelay","showDelay","resizeConfig","ResizeConfig","modeImportEnabled","defineProperty","viewTables","toArray","index","addRowButton","showButton","isDisabled","toolTipText","text","forEach","element","isCellSelection","columns","getService","_a","splice","apply","item","reload","onSelectedDependency","onSelectedDependencyImport","onNextPage","onTotal","onSort","onDrop","onAddRow","selectedCell","onBookClicked","onAfterViewInitTable","resizeResponse","quantityTable","providers","ViewChildren","ColumnType","EventScope","TotalType","ChangeColumnConfigurationType","TableHelisaType","InputHelisaComponent","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","NEGATIVE_SIGN","floatLabel","autocompleteMode","isSearch","_showCurrencyZerosDecimal","disabled","_type","DEFAULT","blur","formControlMask","realValue","inputFormReal","isUserChange","newShowCurrencyZerosDecimal","changeValue","newType","formControl","registerOnDisabledChange","disable","enable","valueChanges","statusChange","status","getMaskedValue","onFocus","setValidators","validator","onlySelf","statusChanges","setErrors","key","markAsTouched","inputText","ngAfterViewInit","search","ngModelChange","isFinishOrStart","position","selectionStart","getRealValue","selectionEnd","str","isFinish","PHONE","maskedStr","IDENTITY","j","NUMERIC","addZeroDecimals","DOUBLE","getMaskedValueDouble","POSITIVEORNEGATIVEDOUBLE","isNegativeValue","indexOf","newStr","replace","indexDecimalSeparator","decimals","substring","realStr","str_1","str_1_1","strItem","match","getRealValueDouble","haveDot","str_2","str_2_1","$event","Number","select","target","RowType","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","isLastPage","isUsed","getBody","columnConfig","TableHelisaComponent","MatTableDataSource","displayedColumns","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","LOCAL","scrollCount","hasSubtitle","indexRowStartDrag","lastIndexRowDrag","dataBeforeDrag","dataSource$","scrollX","scrollY","showTitle","isDragged","emptyMessageForColumn","isEnabled","addBookButton","tableIndex","showFooter","showSearch","reloadColumnConfig","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","SORT","matTable","renderRows","w","REMOTE","tableHelisaConnectComponent","goNextPage","columnConfiguration","rawData","idRowSelected","selectRow","rowType","ROW","columnCount","countSubtitle_1","showBookButton_1","subtitle","subtitleTemp","visible","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","groupFooter_1","changeData_1","haveGroup_1","totalType","TOTAL","searchable","groupable","a","b","result","compare","row","GROUP_FOOTER","GROUP_TITLE","addTotalGroup","rowTotal","ws","getGroupDescription","isGroupTitle","isRow","isGroupFooter","map","SUM","COUNT","AVERAGE","getValueTooltip","searchText","lastSearch","isUser","scope","USER","CODE_CALL","onScroll","isScrollY","scrollTop","scrollLeft","scrollHeight","body","dblClickCell","selectedCells","isSelectable","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToColumn","configColumnClass","getClassToRow","classToRow","configRowStylesFromColumn","founds","filter","classRow","rowIndex","getRowIndex","pageY","array","moveItemInArray","stopPropagation","tableKeydown","preventDefault","keyActionImport","arrowsEvents","currentIndex","findIndex","newSelection","reverse","Math","abs","dragger","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","showMessageEmpty","filteredData","getMessageEmtpy","getIfButtonDisabled","getToolTipButtonMessage","isResizingTable","BOTH","ONLY_TABLES","isResizingCell","getIdForHelTable","getIdForCellTable","MatSort","MatTable","read","ElementRef","TypeCalendarEnum","moment","moment_","DateHelisaComponent","dateFormControl","date","Date","dateFormat","locale","errorMessage","showErrorMessage","showDatePicker","isClosed","typeCalendar","NORMAL","isFromInputEvent","invalidFormat","dateToVisualize","formHandler","incomingDate","format","openDatePicker","timeout","setTimeout","datePickerShow","onKey","onBlur","isValid","toDate","clearTimeout","getStartView","typeCalendarEnum","MONTH_YEAR","STRICT","pipe","tap","trim","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","incommingDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","getDateToControl","TreeHelisaService","emitNodeSelected","BehaviorSubject","nodeSelected","emitDataSource","dataSourceObservable","emitExpandAllNodes","nodeExpand","emitCollapseAllNodes","nodeCollapse","emitRefreshTree","refreshTreeObservable","emitRefreshTreeWithPagination","refreshTreeWithPaginationObservable","emitExpandOneNode","expandOneNodeObservable","emitCollapseOneNode","collapseOneNodeObservable","changeNodeSelected","idResidentialArea","changeDataSource","expandAllNodes","expand","collapseAllNodes","collapse","refreshTree","refreshTreeWithPagination","expandOneNode","node","collapseOneNode","TreeHelisaConnect","TreeHelisaComponent","treeHelisaService","router","elementRef","selectedOptions","Map","removed","edited","added","collapseParent","rangeScrolled","dobleClick","keypressDelete","keypressInsert","checkedOptionNode","uncheckedOptionNode","clickAddNode","clickEditNode","clickDeleteNode","treeControl","NestedTreeControl","MatTreeNestedDataSource","isSingleClick","currentNode","dataNodes","getDescription","parent","res","selectedNode","id","selectNode","tree","expandAll","collapseAll","onRedirect","offsetHeight","onEdit","onAdd","onDelete","onEdited","_.remove","isEditable","onDblClick","onKeyDown","moveDownIntoTree","moveUpIntoTree","indexOfParent","hasChild","t","datasourceData","treeHelisaConnect","isSelected","fillParent","reorderByOrderIndex","upSelectNode","getNodeById","expandAllParents","_b","_c","childrenNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","has","reloadSelectedOptions","get","options","option","set","queue","curr","shift","_.orderBy","x","orderIndex","console","log","Router","HostListener","AutocompleteHelisaService","setDataSource","AutocompleteHelisaComponent","autocompleteHelisaService","myControl","selectedValueEmmiter","isLoading","onScrollObservable","debounceTime","throttleTime","filteredOptions","of","startWith","_checkRegex","_filter","displayFn","displayText","filterValue_1","toLowerCase","onSelected","selectedValue","getNextPage","OptionsScrollDirective","autoComplete","thresholdPercent","optionsScroll","destroy","lastScrollTop","opened","removeScrollEventListener","panel","addEventListener","bind","takeUntil","closed","removeEventListener","ngOnDestroy","complete","st","pageYOffset","scrollEvent","threshold","clientHeight","Directive","MatAutocomplete","HelTooltipDirective","tooltip","elemRef","mouseover","currentContent","innerText","toUpperCase","toString","isEllipsisActive","offsetWidth","scrollWidth","MatTooltip","ExternalLinkDirective","platformId","relAttr","targetAttr","hrefAttr","ngOnChanges","href","isLinkExternal","isPlatformBrowser","includes","location","hostname","PLATFORM_ID","HostBinding","ComboBoxHelisaState","ExternalLinkPipe","transform","_i","Pipe","PagingTreeInitialMode","ComboBoxHelisaComponent","selectEmitter","enabled","pageSize","haveNextPage","state","CLOSED","listable","getData","SELECT","selectItem","selectedItem","changeToInsert","INSERT","insert","editable","AlertInformationType","PagingTreeHelisaComponent","visibleLimit","visibleSize","treeMode","EXPAND","visibleObjects","allNode","isModeAssociation","afterLoadData","paramMode","reset","paramService","service","items","loadData","searchNode","sortItems","createNode","reSort","loadNextVisibleObjects","getUniqueId","getNodeInformationById","getIdField","object","scrollToItem","idString","document","getElementById","scrollIntoView","behavior","block","inline","lAdy","stack","idParent","getIdParentField","unshift","response","last","pop","parentInformation","nodeInformation","haveChildren","level","expanded","preorder","size","getNodeInformation","getClassAssociation","getLevelClass","getRowClassAssociation","nodeFrom","collapseNode","expandNode","isScrollToItem","showNextPage","removeItem","removeById","idParent_1","Set","add","beginIndex","itemSearch","lastIndex","deletedItems","parentHaveChildren_1","deletedItem","delete","searchItem","addItem","indexParent","updateItem","nodeA","nodeB","ContentChild","TITLE_BY_ALERT_TYPE","CONTENT_BY_ALERT_TYPE","OK_LABEL_BY_ALERT_TYPE","CANCEL_LABEL_BY_ALERT_TYPE","AlertInformationDataHelisaComponent","alertType","DEFINE_COMMERCIAL_STRUCTURE","DEFINE_PARKING_STRUCTURE","DEFINE_RESIDENCIAL_STRUCTURE","hasTitle","AUTHORIZATION_TRANSACTION","DELETE_DATA","LOST_DATA","UNCOMPLETED_DATA","hasContent","CONFIRM_DELETE_DATA","INFORMATION_NOT_VALID","UNCOMPLETED_SELECTED_DATA","NO_SEARCH_RESULTS","hasButtons","hasCancelButton","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","AlertInformationDataHelisaService"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'hel-input-with-button',\n  templateUrl: './input-with-button.component.html',\n  styleUrls: ['./input-with-button.component.sass']\n})\nexport class InputWithButtonComponent implements OnInit {\n\n  @Input() placeholder: string = '';\n  @Input() inputFormControl: FormControl = new FormControl('', Validators.required);\n  @Input() requiredMessage: string = 'El campo es requerido';\n  @Input() value: string = '';\n  @Input() isFocused: boolean = false;\n  @ViewChild('inputText', {static: true}) nameField: ElementRef;\n\n  @Output() done: EventEmitter<string> = new EventEmitter<string>();\n  @Output() cancel: EventEmitter<void> = new EventEmitter<void>();\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n    if (this.value !== '') {\n      this.inputFormControl.setValue(this.value);\n    }\n    this.nameField.nativeElement.focus();\n  }\n\n\n  onDone(): void {\n    if (this.inputFormControl.valid) {\n      this.done.emit(this.inputFormControl.value);\n    }\n  }\n\n  onCancel(): void {\n    this.cancel.emit();\n  }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\nimport { ToastType } from './toast-type.enum';\n\n// @dynamic\n@Component({\n  selector: 'hel-toast',\n  templateUrl: './toast-helisa.component.html',\n  styleUrls: ['./toast-helisa.component.sass']\n})\nexport class ToastHelisaComponent implements OnInit {\n\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: {type: ToastType, message: string, subMessages?: string[]}) { }\n\n  ngOnInit(): void {}\n\n}\n","export enum ToastType {\n    DONE = 'done',\n    ERROR = 'error',\n    INFO = 'info'\n}\n","export enum AlertHelisaType {\n    ERROR = 'ERROR',\n    CONFIRMATION = 'CONFIRMATION'\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ToastType } from './toast-type.enum';\nimport { ToastHelisaComponent } from './toast-helisa.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastHelisaService {\n\n  durationInSeconds: number = 5;\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  showToast(type: ToastType, message: string, subMessages?: string[]): void {\n    subMessages = subMessages ? subMessages : [];\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\n      data: {message, type, subMessages},\n      duration: this.durationInSeconds * 1000\n    });\n  }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AlertHelisaType } from './alert-helisa-type.enum';\n\ninterface AlertHelisaProperties {\n  title: string;\n  content: string;\n  type: AlertHelisaType;\n  okLabel: string;\n  cancelLabel: string;\n}\n\n@Component({\n  selector: 'hel-alert',\n  templateUrl: './alert-helisa.component.html',\n  styleUrls: ['./alert-helisa.component.sass']\n})\nexport class AlertHelisaComponent implements OnInit {\n\n  content: string;\n  title: string;\n  hasCancel: boolean;\n  okLabel: string;\n  cancelLabel: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertHelisaProperties\n  ) {\n    this.content = data.content;\n    this.title = data.title;\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = 'aceptar';\n    }\n    this.cancelLabel = data.cancelLabel;\n    if (this.cancelLabel === undefined) {\n      this.cancelLabel = 'cancelar';\n    }\n    this.hasCancel = data.type === AlertHelisaType.CONFIRMATION;\n    dialogRef.disableClose = true;\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent): void => {\n      if (event.code === 'Escape') {\n        this.dialogRef.close(this.onCancel());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { AlertHelisaType } from './alert-helisa-type.enum';\nimport { AlertHelisaComponent } from './alert-helisa.component';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(type: AlertHelisaType, title: string, content: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertHelisaComponent> = this.dialog.open(AlertHelisaComponent, {\n      width: '250px',\n      data: { title, content, type, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport {ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa, EmptyMessageColumn} from '../table-helisa/table-helisa.interface';\nimport { EventDependency} from './dependency-table-helisa.component';\n\nexport interface ConfigTable<T> {\n  columns: Array<ColumnConfig>;\n  isRemote: boolean;\n  dataSource?: Array<T>;\n  count?: number;\n  order?: number;\n  showTitle?: boolean;\n  indexRowSelect?: number;\n  isDragged?: boolean;\n  addRowButton?: AddRowButton;\n  configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\n  configColumnClass?: Array<string>,\n  isCellSelection?: boolean;\n  addBookButton?: boolean;\n  emptyMessageForColumn?: EmptyMessageColumn;\n}\n\n@Injectable()\nexport class DependencyTableHelisaService<T> {\n\n\n  tables: Subject<ConfigTable<T>[]> = new Subject();\n  infoTables: Array<ConfigTable<T>> = new Array();\n\n  private emitVisibilityButton$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\n  emitVisibilityButton: Observable<EventDependency<boolean>> = this.emitVisibilityButton$.asObservable();\n\n  private emitVisibilityAllButtons$: Subject<boolean> = new Subject<boolean>();\n  emitVisibilityAllButtons: Observable<boolean> = this.emitVisibilityAllButtons$.asObservable();\n\n  private emitIsCellSelection$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\n  emitIsCellSelection: Observable<EventDependency<boolean>> = this.emitIsCellSelection$.asObservable();\n\n  private emitChangeColumns$: Subject<EventDependency<ColumnConfig[]>> = new Subject<EventDependency<ColumnConfig[]>>();\n  emitChangeColumns: Observable<EventDependency<ColumnConfig[]>> = this.emitChangeColumns$.asObservable();\n\n  private emitEnabledButton$: Subject<EventDependency<{isDisabled: boolean, text: string}>> = new Subject<EventDependency<{isDisabled: boolean, text: string}>>();\n  emitEnabledButton: Observable<EventDependency<{isDisabled: boolean, text: string}>> = this.emitEnabledButton$.asObservable();\n\n  emitTotal: Subject<EventDependency<TotalTableHelisa>> = new Subject<EventDependency<TotalTableHelisa>>();\n  emitNextPage: Subject<EventDependency<T[]>> = new Subject<EventDependency<T[]>>();\n\n  constructor() { }\n\n  /**\n   * retorna un Observable<ConfigTable[]>\n   */\n  getTables(): Observable<ConfigTable<T>[]> {\n    return this.tables;\n  }\n\n  /**\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\n   * También remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\n   * @param configTable Objeto que contiene la configuración para la tabla.\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\n   */\n  updateDependency(configTable: ConfigTable<T>, withRemoveDependency: boolean = false): void {\n    if (withRemoveDependency) {\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\n    }\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\n      configTable.order = this.infoTables.length;\n    }\n    this.infoTables[configTable.order] = configTable;\n    if (configTable.isRemote) {\n      configTable.dataSource = null;\n      if (configTable.count === null) {\n        throw new Error('hace falta el count');\n      }\n    } else {\n      if (configTable.dataSource === null) {\n        throw new Error('hace falta el dataSource');\n      }\n      configTable.count = configTable.dataSource.length;\n    }\n    this.tables.next(this.infoTables);\n  }\n\n  /**\n   * Emite un evento de total con la información para la tabla correspondiente\n   * @param event wrapper que contiene el indice de la tabla y la información de la pagina\n   */\n  setTotal(event: EventDependency<TotalTableHelisa>): void {\n    this.emitTotal.next(event);\n  }\n\n  /**\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\n   * @param event wrapper que contiene el indice de la tabla y la información de la pagina\n   */\n  addPage(event: EventDependency<T[]>): void {\n    this.emitNextPage.next(event);\n  }\n\n  selectIndexRow(config: ConfigTable<T>): void {\n    if (this.infoTables[config.order]) {\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\n      this.tables.next(this.infoTables);\n    }\n  }\n\n\n  /**\n   * * Deshabilita el botón y le pone un titulo sobre el over\n   * @param event para indicar el index de la tabla y en \"data\" true o false\n   */\n  changeEnabledButton(event: EventDependency<{isDisabled: boolean, text: string}>): void {\n    this.emitEnabledButton$.next(event);\n  }\n\n  /**\n   * Muestra o esconde el boton una tabla en especifico\n   * @param event para indicar el index de la tabla y en \"data\" true o false\n   */\n   changeVisibilityButton(event: EventDependency<boolean>): void {\n    this.emitVisibilityButton$.next(event);\n  }\n\n\n  /**\n   * Esconde los botones de todas las tablas\n   * @param show indicar si se muestran o no todos los botones de las tablas\n   */\n  changeVisibilityAllButtons(show: boolean): void {\n    this.emitVisibilityAllButtons$.next(show);\n  }\n\n  /**\n   * Para habilitar el manejo de selección de celda\n   * @param event para indicar el index de la tabla y en \"data\" true o false\n   */\n  changeisCellSelection(event: EventDependency<boolean>): void {\n    this.emitIsCellSelection$.next(event);\n  }\n\n   /**\n    * Para habilitar el cambio de columnas\n    * @param event para indicar el index de la tabla y en \"data\" columnas\n    */\n  changeColumnsByTable( event: EventDependency<ColumnConfig[]>): void {\n    this.emitChangeColumns$.next(event);\n  }\n\n}\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input } from '@angular/core';\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\nimport { Cell, ColumnConfig, EventColumn, RequestTableHelisa, SelectObject, TotalTableHelisa } from '../table-helisa/table-helisa.interface';\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\n\nexport interface EventDependency<T> {\n  index: number;\n  data: T;\n}\n\nexport enum TypeResizeEnum {\n  BOTH,\n  ONLY_CELLS,\n  ONLY_TABLES\n}\n\nexport class ResizeConfig {\n  enableResize: boolean;\n  typeResize: TypeResizeEnum;\n  uuid: string;\n\n  constructor() {\n    this.enableResize = false;\n    this.typeResize = TypeResizeEnum.ONLY_CELLS;\n    this.uuid = 'testing';\n  }\n}\n\nexport class ResizeResponse {\n  quantityTable!: number;\n  uuid: string;\n}\n\n@Component({\n  selector: 'hel-dependency-table',\n  templateUrl: './dependency-table-helisa.component.html',\n  styleUrls: ['./dependency-table-helisa.component.sass'],\n  providers: [DependencyTableHelisaService]\n})\nexport class DependencyTableHelisaComponent<T> implements OnInit {\n\n  tables: Array<ConfigTable<T>> = [];\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<T>>;\n  @Input() showToolTip: boolean = true;\n\n  /**\n   * deprecated, use selectObject\n   */\n  @Output() selected: EventEmitter<EventDependency<T>> = new EventEmitter<EventDependency<T>>();\n  @Output() selectToImport: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() selectObject: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() nextPage: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() total: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() sort: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() drop: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\n  @Output() selectCell: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() bookClicked: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() afterViewInit: EventEmitter<ResizeResponse> = new EventEmitter<ResizeResponse>();\n  selectedObject: EventDependency<{}> = null;\n\n\n  /**\n   * Tiempo antes de ocultarla el mensaje del tooltip\n   */\n  @Input() hideDelay: number = 600;\n\n  /**\n   * Tiempo antes de mostra el mensaje del tooltip\n   */\n  @Input() showDelay: number = 500;\n  @Input() resizeConfig: ResizeConfig = new ResizeConfig();\n  @Input() modeImportEnabled: boolean = false;\n\n\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService<T>, private tableService: TableHelisaService<T>) {\n  }\n\n  get modeImportingEnabled(): boolean {\n    return this.modeImportEnabled;\n  }\n\n  get resizingConfig(): ResizeConfig {\n    return this.resizeConfig;\n  }\n\n  ngOnInit(): void {\n    this.getTables();\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\n      (event: EventDependency<T[]>): void => {\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\n      }\n    );\n\n    this.dependencyTableHelisaService.emitTotal.subscribe(\n      (event: EventDependency<TotalTableHelisa>): void => {\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\n      }\n    );\n\n    // Observable para mostrar o esconder el boton de una tabla\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\n      (data: EventDependency<boolean>): void => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (!!table) {\n            table.addRowButton.showButton = data.data;\n          }\n        }\n      }\n    );\n\n    // Observable para habilitar o deshabilitar el botón y mostrar titulo\n    this.dependencyTableHelisaService.emitEnabledButton.subscribe(\n      (data: EventDependency<{ isDisabled: boolean, text: string }>): void => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (!!table) {\n            table.addRowButton.isDisabled = data.data.isDisabled;\n            table.addRowButton.toolTipText = data.data.text;\n          }\n        }\n      }\n    );\n\n    // Observable para mostrar o esconder los botones de todas las tablas\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\n      (data: boolean): void => {\n        if (data !== undefined && data != null) {\n          this.tables.forEach((element: ConfigTable<T>): void => {\n            if (!!element.addRowButton) {\n              element.addRowButton.showButton = data;\n            }\n          });\n        }\n      }\n    );\n\n    // Observable para manejo de selección de celdas\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\n      (data: EventDependency<boolean>): void => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (table) {\n            table.isCellSelection = data.data;\n          }\n        }\n      });\n\n    // Observable para manejo de columnas\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\n      (data: EventDependency<ColumnConfig[]>): void => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (table) {\n            table.columns = data.data;\n          }\n        }\n      });\n  }\n\n  /**\n   * retorna el servicio que gestiona el componente.\n   */\n  getService(): DependencyTableHelisaService<T> {\n    return this.dependencyTableHelisaService;\n  }\n\n  /**\n   * Obtiene un observable con las tablas dependientes desde el servicio.\n   */\n  getTables(): void {\n    this.dependencyTableHelisaService.getTables()\n      .subscribe((tables: ConfigTable<T>[]): void => {\n        this.tables.splice(0, this.tables.length, ...tables);\n        this.viewTables.forEach((item: TableHelisaComponent<T>): void => {\n          item.reload();\n        });\n      }\n      );\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla seleccionada\n   * @param data retorna la fila que fue seleccionada\n   */\n  onSelectedDependency(index: number, event: SelectObject<T>): void {\n    this.selectedObject = { index, data: event };\n    this.selected.emit({ index, data: event.value });\n    this.selectObject.emit({ index, data: event });\n  }\n\n  onSelectedDependencyImport(index: number, event: SelectObject<T>): void {\n    this.selectToImport.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onNextPage(index: number, event: RequestTableHelisa<T>): void {\n    this.nextPage.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onTotal(index: number, event: EventColumn): void {\n    this.total.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onSort(index: number, event: EventColumn): void {\n    this.sort.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onDrop(index: number, event: EventDependency<T>): void {\n    this.drop.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe añadir una nueva fila\n   * @param index indica el indice de la tabla de la cual se dispara el evento\n   */\n  onAddRow(index: number): void {\n    this.addRow.emit(index);\n  }\n\n  selectedCell(index: number, event: Cell<T>): void {\n    if (this.tables[index].isCellSelection) {\n      this.selectCell.emit({ index, data: event });\n    }\n  }\n\n  onBookClicked(index: number, event: EventDependency<T>): void {\n    this.bookClicked.emit({ index, data: event });\n  }\n\n  onAfterViewInitTable(resizeResponse: ResizeResponse): void {\n    if (this.resizeConfig.enableResize) {\n      this.afterViewInit.emit({\n        quantityTable: this.tables.length,\n        uuid: resizeResponse.uuid\n      } as ResizeResponse);\n    }\n  }\n\n  // tableKeydown(event: KeyboardEvent): void {\n  //   if (this.modeImportEnabled) {\n  //     if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n  //       event.preventDefault();\n  //       event.stopPropagation();\n  //       // this.selectToImport.emit({ value: this.selectedObject, scope: EventScope.USER, keyActionImport: event.key });\n  //     }\n  //   }\n  //   if (!this.isCellSelection) {\n  //     this.arrowsEvents(event);\n  //   }\n  // }\n}\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {TotalTableHelisa} from './table-helisa.interface';\nimport {TableHelisaComponent} from './table-helisa.component';\n\nexport interface TableHelisaServiceInfo<T> {\n  obj: T;\n  table?: {} | TableHelisaComponent<T>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableHelisaService<T> {\n\n  private emitChangeSource: Subject<TableHelisaServiceInfo<TotalTableHelisa>> = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\n  private emitNextPage: Subject<TableHelisaServiceInfo<T[]>> = new Subject<TableHelisaServiceInfo<T[]>>();\n\n  totalReturn: Observable<TableHelisaServiceInfo<TotalTableHelisa>> = this.emitChangeSource.asObservable();\n  nextPageReturn: Observable<TableHelisaServiceInfo<T[]>> = this.emitNextPage.asObservable();\n\n  private emitVisibleButton$: Subject<boolean> = new Subject<boolean>();\n  private emitEnabledButton$: Subject<{isDisabled: boolean, text  :string}> = new Subject<{isDisabled: boolean, text  :string}>();\n  /**\n   * Observable para saber si se debe mostrar o esconder el boton de add row\n   */\n  emitVisibleButton: Observable<boolean> = this.emitVisibleButton$.asObservable();\n\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<TotalTableHelisa>): void {\n    this.emitChangeSource.next({obj: total, table});\n  }\n\n  addPage(page: T[], table?: TableHelisaComponent<T>): void {\n    this.emitNextPage.next({obj: page, table});\n  }\n\n  /**\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\n   * @param change indicar si se muestra o no el boton de add row de la tabla\n   */\n  changeVisibilityButton(change: boolean): void {\n    this.emitVisibleButton$.next(change);\n  }\n\n  /**\n   * para modificar el estado del boton de add row de la tabla\n   * @param change indicar si se muestra o no el boton de add row de la tabla\n   */\n   changeEnabledButton(change: {isDisabled: boolean, text: string}): void {\n    this.emitEnabledButton$.next(change);\n  }\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nexport enum InputHelisaType {\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE, POSITIVEORNEGATIVEDOUBLE, PHONE\n}\n\n@Component({\n  selector: 'hel-input',\n  templateUrl: './input-helisa.component.html',\n  styleUrls: ['./input-helisa.component.sass']\n})\nexport class InputHelisaComponent implements OnInit, AfterViewInit {\n\n  private readonly DECIMAL_SEPARATOR: string = '.';\n  private readonly THOUSAND_SEPARATOR: string = ',';\n  private readonly NEGATIVE_SIGN: string = '-';\n\n  @Input() placeholder: string = '';\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\n  @Input() minlength: number;\n  @Input() maxlength: number;\n\n  /** Activar o desactivar el autocompletado\n   * (Caracteristica de los navegadores para campos comunes como\n   * Direccion , Usuario, Password ... etc)\n   */\n  @Input() autocompleteMode: boolean = false;\n\n  // Mostrar o no el icono de buscar\n  @Input() isSearch: boolean = false;\n  // @Input() inputFormControl: FormControl = new FormControl('');\n  @Input() isFocused: boolean = false;\n  // Esto agrega en el tipo DOUBLE, NUMERIC y POSITIVEORNEGATIVEDOUBLE  dos ceros al final si no los tiene y es true\n  _showCurrencyZerosDecimal: boolean = false;\n\n  /**\n   * Deprecated\n   */\n  @Input() disabled: boolean = false;\n  _type: InputHelisaType = InputHelisaType.DEFAULT;\n\n  /**\n   * Deprecated\n   */\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\n\n  // tslint:disable-next-line:no-any\n  @Output() blur: EventEmitter<any> = new EventEmitter();\n\n  formControlMask: FormControl = new FormControl('');\n  private realValue: string = '';\n  private inputFormReal: FormControl = new FormControl('');\n  private isUserChange: boolean = false;\n\n  @ViewChild('inputText', {static: true}) inputText: ElementRef;\n\n  constructor() {\n  }\n\n  @Input()\n  set showCurrencyZerosDecimal(newShowCurrencyZerosDecimal: boolean) {\n    this._showCurrencyZerosDecimal = newShowCurrencyZerosDecimal;\n    this.changeValue(this.inputFormReal.value, true);\n  }\n\n  @Input()\n  set type(newType: InputHelisaType) {\n    this._type = newType;\n    this.changeValue(this.inputFormReal.value, true);\n  }\n\n  @Input()\n  set inputFormControl(formControl: FormControl) {\n    this.inputFormReal = formControl;\n    this.inputFormReal.registerOnDisabledChange(((isDisabled: boolean): void => {\n      if (isDisabled) {\n        this.formControlMask.disable();\n      } else {\n        this.formControlMask.enable();\n      }\n    }));\n    this.inputFormReal.valueChanges.subscribe((data: string): void => {\n      this.statusChange(this.inputFormReal.status);\n      if (this.getMaskedValue(data, !this.isUserChange) !== this.formControlMask.value) {\n        this.changeValue(data, !this.isUserChange);\n        if (this.isFocused) {\n          this.onFocus(null);\n        }\n      }\n      this.isUserChange = false;\n    });\n    this.formControlMask.setValidators(this.inputFormReal.validator);\n    this.changeValue(this.inputFormReal.value, true);\n    // disable control\n    if (formControl.disabled) {\n      this.formControlMask.disable({ onlySelf: true });\n    }\n    this.inputFormReal.statusChanges.subscribe(\n      (data: string): void => {\n        this.statusChange(data);\n        if (this.isFocused) {\n          this.onFocus(null);\n        }\n      }\n    );\n  }\n\n\n  private statusChange(data: string): void {\n    if (data === 'INVALID') {\n      this.formControlMask.setErrors({ key: 'Error de validación.' });\n      this.formControlMask.markAsTouched();\n    } else {\n      this.formControlMask.setErrors(null);\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.isFocused) {\n      this.inputText.nativeElement.focus();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // this.isParentDisabled();\n  }\n\n  /*isParentDisabled(): void {\n    setTimeout(() => {\n      if (this.nameInput.nativeElement.closest('.hw-disabled-mode')) {\n        this.disabled = true;\n      } else {\n        this.disabled = false;\n      }\n    });\n  }*/\n\n  search(): void {\n    this.setValue.emit(this.realValue);\n  }\n\n  ngModelChange(event: string): void {\n    this.isUserChange = true;\n    this.changeValue(event, false);\n  }\n\n  private changeValue(event: string, isFinishOrStart: boolean): void {\n    if (event != null) {\n      event = event + '';\n    }\n    let position: number = this.inputText.nativeElement.selectionStart;\n    const length: number = event ? event.length : 0;\n    this.realValue = this.getRealValue(event);\n    if (this.getMaskedValue(this.realValue, isFinishOrStart) !== this.formControlMask.value) {\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue, isFinishOrStart));\n      position += this.inputText.nativeElement.value.length - length;\n      this.inputText.nativeElement.selectionStart = position;\n      this.inputText.nativeElement.selectionEnd = position;\n    }\n    if (this.inputFormReal.value !== this.realValue) {\n      this.inputFormReal.setValue(this.realValue);\n    }\n  }\n\n  private getMaskedValue(str: string, isFinish: boolean): string {\n    if (str == null) {\n      return str;\n    }\n    str = str + '';\n    if (this._type === InputHelisaType.DEFAULT || this._type === InputHelisaType.PHONE) {\n      return str;\n    }\n    let maskedStr: string = '';\n    if (this._type === InputHelisaType.IDENTITY) {\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n    }\n    if (this._type === InputHelisaType.NUMERIC) {\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n      maskedStr = this.addZeroDecimals(maskedStr, isFinish);\n    }\n    if (this._type === InputHelisaType.DOUBLE) {\n      maskedStr = this.getMaskedValueDouble(str);\n      maskedStr = this.addZeroDecimals(maskedStr, isFinish);\n    }\n    if (this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {\n      const isNegativeValue: boolean = str.indexOf(this.NEGATIVE_SIGN) === 0;\n      const newStr: string = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;\n      maskedStr = this.getMaskedValueDouble(newStr);\n      if (isNegativeValue) {\n        maskedStr = this.NEGATIVE_SIGN + maskedStr;\n      }\n      maskedStr = this.addZeroDecimals(maskedStr, isFinish);\n    }\n    return maskedStr;\n  }\n\n  private addZeroDecimals(maskedStr: string, isFinish: boolean): string {\n    if (this._showCurrencyZerosDecimal && isFinish) {\n      const indexDecimalSeparator: number = maskedStr.indexOf(this.DECIMAL_SEPARATOR);\n      if (indexDecimalSeparator < 0) {\n        maskedStr += '.00';\n      } else {\n        let decimals: string = maskedStr.substring(indexDecimalSeparator);\n        while (decimals.length < 3) {\n          decimals += '0';\n        }\n        maskedStr = maskedStr.substring(0, indexDecimalSeparator) + decimals;\n      }\n    }\n    return maskedStr;\n  }\n\n  private getMaskedValueDouble(str: string): string {\n    let maskedStr: string = '';\n    if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {\n      for (let i: number = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {\n        maskedStr += str[i];\n      }\n    }\n    for (let i: number = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1,\n      j: number = 0; i >= 0; i--, j++) {\n\n      if (j > 0 && j % 3 === 0) {\n        maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\n      }\n      maskedStr = str[i] + maskedStr;\n    }\n    return maskedStr;\n  }\n\n  private getRealValue(str: string): string {\n    if (str == null) {\n      return str;\n    }\n    str = str + '';\n    let realStr: string = '';\n    if (this._type === InputHelisaType.DEFAULT) {\n      return str;\n    }\n    if (this._type === InputHelisaType.IDENTITY || this._type === InputHelisaType.NUMERIC || this._type === InputHelisaType.PHONE) {\n      for (const strItem of str) {\n        if (strItem.match('[0-9]')) {\n          realStr += strItem;\n        }\n      }\n    }\n    if (this._type === InputHelisaType.DOUBLE) {\n      realStr = this.getRealValueDouble(str);\n    }\n    if (this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {\n      const isNegativeValue: boolean = str.indexOf(this.NEGATIVE_SIGN) === 0;\n      const newStr: string = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;\n      realStr = this.getRealValueDouble(newStr)\n      if (isNegativeValue) {\n        realStr = this.NEGATIVE_SIGN + realStr;\n      }\n    }\n    return realStr;\n  }\n\n  getRealValueDouble(str: string): string {\n    let realStr: string = '';\n    let haveDot: boolean = false;\n\n      for (const strItem of str) {\n        if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {\n          realStr += strItem;\n        }\n        haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);\n      }\n    return realStr;\n  }\n\n  onFocus($event: FocusEvent): void {\n    if ((this._type === InputHelisaType.NUMERIC || this._type === InputHelisaType.DOUBLE || this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) &&\n      Number(this.getRealValue(this.inputText.nativeElement.value)) === 0) {\n      this.inputText.nativeElement.select();\n    }\n  }\n\n  change(event: Event): void {\n    this.changeValue((event.target as HTMLInputElement).value, true);\n  }\n}\n","import { SortDirection } from '@angular/material/sort';\nimport { RowData } from './table-helisa.component';\n\nexport enum ColumnType {\n  NORMAL, URL\n}\n\nexport interface ColumnConfig {\n  name: string;\n  title?: string;\n  visible?: boolean;\n  sortable?: boolean;\n  groupable?: boolean;\n  totalType?: TotalType;\n  searchable?: boolean;\n  sortDirection?: SortDirection;\n  subtitle?: string;\n  colspanTitle?: number;\n  colspanSubtitle?: number;\n  columnStyle?: string;\n  columnType?: ColumnType;\n  isSelectable?: boolean;\n}\n\nexport interface AddRowButton {\n  text: string;\n  showButton: boolean;\n  isDisabled?: boolean;\n  toolTipText?: string;\n}\n\nexport interface EmptyMessageColumn {\n  text: string;\n  isEnabled: boolean;\n}\n\nexport enum EventScope {\n  USER, CODE_CALL\n}\n\nexport enum TotalType {\n  SUM, AVERAGE, COUNT\n}\n\nexport enum ChangeColumnConfigurationType {\n  SORT, UNKNOWN, TOTAL\n}\n\nexport interface EventColumn {\n  column: ColumnConfig;\n  columnConfigurations: Array<ColumnConfig>;\n  type: ChangeColumnConfigurationType;\n}\n\nexport interface TotalTableHelisa {\n  column: ColumnConfig;\n  value: number;\n}\n\nexport interface TotalGroup {\n  sum: number;\n  count: number;\n}\n\nexport interface EventSearch {\n  text: string;\n  columnConfigurations: Array<ColumnConfig>;\n}\n\nexport interface RequestTableHelisa<T> {\n  page: number;\n  body: {} | T;\n}\n\nexport interface DropElement<T> {\n value: T;\n order: number;\n}\n\nexport interface SelectObject<T> {\n  value: T;\n  scope: EventScope;\n  keyActionImport?: string;\n}\n\nexport enum TableHelisaType {\n  REMOTE, LOCAL\n}\n\n\nexport interface Cell<T> {\n  column: ColumnConfig;\n  row: RowData<T> | T;\n }\n\nexport interface ConfigCellStyles<T> {\n   cellData: T;\n   classCell: string;\n }\n\nexport interface ConfigRowStyles<T> {\n  column: ColumnConfig;\n  data: {} | T;\n  classRow: string;\n}\n\n// @dynamic\nexport class ColumnConfigUtil<T> {\n\n  getValue(obj: T, column: ColumnConfig): T | number | string {\n    return column.name.split('.').reduce((o: T, field: string): T | string => o && o[field], obj);\n  }\n}\n\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, DoCheck } from '@angular/core';\nimport { MatSort, Sort } from '@angular/material/sort';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\n\nimport {\n  AddRowButton,\n  Cell,\n  ChangeColumnConfigurationType,\n  ColumnConfig,\n  ColumnConfigUtil,\n  ConfigCellStyles,\n  ConfigRowStyles,\n  DropElement,\n  EventColumn,\n  EventScope,\n  EventSearch,\n  RequestTableHelisa,\n  SelectObject,\n  TableHelisaType,\n  TotalGroup,\n  TotalType,\n  ColumnType,\n  TotalTableHelisa,\n  EmptyMessageColumn\n} from './table-helisa.interface';\nimport { TableHelisaService, TableHelisaServiceInfo } from './table-helisa.service';\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ResizeConfig, ResizeResponse, TypeResizeEnum } from '../dependency-table-helisa/dependency-table-helisa.component';\n\nexport interface RowData<T> {\n  data: {} | T;\n  rowType: RowType;\n}\n\nenum RowType {\n  GROUP_TITLE, GROUP_FOOTER, ROW\n}\n\n\n\n@Component({\n  selector: 'hel-table',\n  templateUrl: './table-helisa.component.html',\n  styleUrls: ['./table-helisa.component.sass']\n})\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\n\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\n  totalData: Array<number>;\n  rawData: Array<T>;\n  data: MatTableDataSource<RowData<T>> = new MatTableDataSource<RowData<T>>([]);\n  displayedColumns: string[] = [];\n  displayedColumnsWithTitle: string[] = [];\n  displayedColumnsWithSubtitle: string[] = [];\n  displayedColumnsWithFooter: string[] = [];\n  columnConfig: Array<ColumnConfig>;\n  selectedObject: T;\n  lastSearch: string;\n  type: TableHelisaType = TableHelisaType.LOCAL;\n  indexRowSelect: number;\n  private scrollCount: number = 0;\n  hasSubtitle: boolean = false;\n  private indexRowStartDrag: number = -1;\n  private lastIndexRowDrag: number = -1;\n  private dataBeforeDrag: { data: RowData<T>[] } = null;\n  private dataSource$: Array<T> = [];\n  private scrollX: number = 0;\n  private scrollY: number = 0;\n\n  @ViewChild(MatSort, { static: true }) matSort: MatSort;\n  @ViewChild(MatTable, { static: true }) matTable: MatTable<T>;\n  @ViewChild(MatTable, { read: ElementRef, static: true }) matTableElement: ElementRef;\n  @ViewChild('containerTable', { static: true }) containerTable: ElementRef;\n\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\n\n  /**\n   * Deprecado, cambiar por electObject\n   */\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\n  @Output() selectCell: EventEmitter<Cell<T>> = new EventEmitter<Cell<T>>();\n  @Output() selectToImport: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\n  @Output() nextPage: EventEmitter<RequestTableHelisa<T>> = new EventEmitter<RequestTableHelisa<T>>();\n  @Input() showTitle: boolean = true;\n  @Input() isCellSelection: boolean = false;\n  @Input() count: number;\n  @Input() configCellStyles: Array<ConfigCellStyles<T>>;\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\n  @Input() configColumnClass: Array<string>;\n  @Input() selectedCells: Cell<T>;\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\n  @Input() isDragged: boolean = false;\n  @Input() addRowButton: AddRowButton = { showButton: false, text: '', isDisabled: false, toolTipText: '' };\n  @Input() emptyMessageForColumn: EmptyMessageColumn = { isEnabled: false, text: '' };\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\n  @Input() addBookButton: boolean = false;\n  @Input() showToolTip: boolean = true;\n  @Input() tableIndex: number = 0;\n  @Input() resizeConfig: ResizeConfig = new ResizeConfig();\n  @Output() afterViewInit: EventEmitter<ResizeResponse> = new EventEmitter<ResizeResponse>();\n  showFooter: boolean = false;\n  showSearch: boolean = false;\n\n\n\n  /**\n   * Tiempo antes de ocultarla el mensaje del tooltip\n   */\n  @Input() hideDelay: number = 600;\n\n  /**\n   * Tiempo antes de mostra el mensaje del tooltip\n   */\n  @Input() showDelay: number = 500;\n  @Input() modeImportEnabled: boolean = false;\n\n  constructor(private tableService: TableHelisaService<T>) { }\n\n  ngOnInit(): void {\n    this.reloadColumnConfig();\n    this.tableService.nextPageReturn.subscribe(\n      (data: TableHelisaServiceInfo<T[]>): void => {\n        if (!data.table || data.table === this) {\n          this.receivePage(data.obj);\n        }\n      }\n    );\n    this.tableService.totalReturn.subscribe((info: TableHelisaServiceInfo<TotalTableHelisa>): void => {\n      if (info) {\n        this.columnConfig.forEach((column: ColumnConfig, idx: number): void => {\n          if (column === info.obj.column) {\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\n          }\n        });\n      }\n    });\n    this.matSort.sortChange.subscribe(\n      (event: Sort): void => {\n        const column: ColumnConfig = this.columnConfig.find((c: ColumnConfig): boolean => c.name === event.active);\n        column.sortDirection = event.direction;\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\n      }\n    );\n\n    this.tableService.emitVisibleButton.subscribe(\n      (data: boolean): void => {\n        if (data !== undefined && data != null) {\n          this.addRowButton.showButton = data;\n        }\n      }\n    );\n    this.reload();\n  }\n\n  ngAfterViewInit(): void {\n    if (this.isCellSelection) {\n      this.matTable.renderRows();\n    }\n    if (this.resizeConfig.enableResize) {\n      this.afterViewInit.emit({\n        uuid: this.resizeConfig.uuid\n      } as ResizeResponse);\n    }\n  }\n\n  @Input()\n  set isRemote(w: boolean) {\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\n    if (this.type === TableHelisaType.REMOTE) {\n      this.goNextPage();\n    } else {\n      this.tableHelisaConnectComponent.page++;\n    }\n  }\n\n  @Input()\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\n    this.columnConfig = columnConfiguration;\n    this.reload();\n    this.reloadColumnConfig();\n  }\n\n  @Input()\n  set dataSource(dataSource: Array<T>) {\n    this.dataSource$ = dataSource;\n    this.rawData = dataSource;\n    this.reload();\n  }\n\n  get dataSource(): Array<T> {\n    return this.dataSource$;\n  }\n\n  @Input()\n  set selectedIndexRow(idRowSelected: number) {\n    this.indexRowSelect = idRowSelected;\n    if (this.rawData && this.rawData.length) {\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\n        this.indexRowSelect = 0;\n      }\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\n    }\n  }\n\n  private reloadColumnConfig(): void {\n    this.hasSubtitle = false;\n    this.displayedColumns.splice(0, this.displayedColumns.length);\n\n    if (this.columnConfig) {\n      if (this.addBookButton) {\n        const columnCount: number = this.columnConfig.length;\n        let countSubtitle: number = 0;\n        let showBookButton: boolean = false;\n        this.columnConfig.forEach((column: ColumnConfig): void => {\n          if (!!column.subtitle) {\n            countSubtitle = countSubtitle + 1;\n          }\n          if ((!showBookButton) && (column.name === 'bookButton')) {\n            showBookButton = true;\n          }\n        });\n        const subtitleTemp: boolean = columnCount === countSubtitle;\n        if (!showBookButton) {\n          this.columnConfig.push({\n            name: 'bookButton',\n            title: '',\n            subtitle: subtitleTemp ? '' : undefined,\n            visible: true\n          });\n        }\n      }\n      this.columnConfig.forEach((column: ColumnConfig): void => {\n        if (column.visible) {\n          this.displayedColumns.push(column.name);\n        }\n        if (!this.hasSubtitle) {\n          this.hasSubtitle = column.subtitle !== undefined;\n        }\n      });\n      if (this.rawData) {\n        this.dataSource = this.rawData;\n      }\n    }\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\n    this.getColumnsWithTitle().forEach((col: string): number => this.displayedColumnsWithTitle.push(col));\n    this.getHeaderSubtitle().forEach((col: string): number => this.displayedColumnsWithSubtitle.push(col));\n    this.footerDisplayedColumns().forEach((col: string): number => this.displayedColumnsWithFooter.push(col));\n  }\n\n  public reload(): void {\n    if (this.columnConfig) {\n      const changeData: Array<RowData<T>> = Array<RowData<T>>();\n      let haveGroup: boolean = false;\n      let groupFooter: Array<TotalGroup>;\n      this.columnConfig.forEach((column: ColumnConfig): void => {\n        if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\n          this.totalData = new Array<number>(this.columnConfig.length);\n          this.showFooter = true;\n          this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\n        }\n        this.showSearch = this.showSearch || column.searchable;\n        haveGroup = haveGroup || column.groupable;\n      });\n      if (haveGroup) {\n        this.rawData = this.rawData.sort((a: T, b: T): number => {\n          let result: number = 0;\n          this.columnConfig.forEach((column: ColumnConfig): void => {\n            if (result === 0) {\n              result = this.compare(a, b);\n            }\n          });\n          return result;\n        });\n      }\n      if (this.rawData) {\n        this.rawData.forEach((row: T): void => {\n          if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data as T, row) !== 0)) {\n            if (groupFooter) {\n              changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\n            }\n            changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\n            groupFooter = new Array<TotalGroup>(this.columnConfig.length);\n          }\n          if (haveGroup) {\n            this.addTotalGroup(groupFooter, row);\n          }\n          changeData.push({ data: row, rowType: RowType.ROW });\n        });\n        this.data = new MatTableDataSource<RowData<T>>(changeData);\n      }\n      if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\n        if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0) {\n          this.indexRowSelect = 0;\n        }\n        this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\n      }\n    }\n  }\n\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: T): void {\n    this.columnConfig.forEach((column: ColumnConfig, index: number): void => {\n      if (column.totalType !== undefined) {\n        if (rowTotal[index] === undefined) {\n          rowTotal[index] = { sum: (new ColumnConfigUtil().getValue(row, column) as number), count: 1 };\n        } else {\n          rowTotal[index].sum += (new ColumnConfigUtil().getValue(row, column) as number);\n          rowTotal[index].count++;\n        }\n      }\n    });\n  }\n\n  private compare(a: T, b: T): number {\n    let ws: number = 0;\n    this.columnConfig.forEach((column: ColumnConfig): void => {\n      if (ws === 0 && column.groupable) {\n        if ((new ColumnConfigUtil().getValue(a, column) as number) < (new ColumnConfigUtil().getValue(b, column) as number)) {\n          ws = -1;\n        } else if ((new ColumnConfigUtil().getValue(a, column) as number) > (new ColumnConfigUtil().getValue(b, column) as number)) {\n          ws = 1;\n        }\n      }\n    });\n    return ws;\n  }\n\n  getGroupDescription(obj: T): string {\n    let result: string = '';\n    this.columnConfig.forEach((column: ColumnConfig): void => {\n      if (column.groupable) {\n        result += (result.length ? ' - ' : '') + (new ColumnConfigUtil().getValue(obj, column));\n      }\n    });\n    return result;\n  }\n\n  isGroupTitle(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.GROUP_TITLE;\n  }\n\n  isRow(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.ROW;\n  }\n\n  isGroupFooter(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.GROUP_FOOTER;\n  }\n\n  footerDisplayedColumns(): Array<string> {\n    return this.displayedColumns.map((name: string): string => 'footer-' + name);\n  }\n\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\n    if (column.totalType === TotalType.SUM) { return data.sum; }\n    if (column.totalType === TotalType.COUNT) { return data.count; }\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\n    return undefined;\n  }\n\n  getValue(obj: T, column: ColumnConfig): T {\n    return new ColumnConfigUtil().getValue(obj, column) as T;\n  }\n\n  getValueTooltip(obj: T, column: ColumnConfig): string {\n    if (this.showToolTip) {\n      return new ColumnConfigUtil().getValue(obj, column) as string;\n    } else {\n      return null;\n    }\n  }\n\n  searchText(text: string): void {\n    this.lastSearch = text;\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\n  }\n\n  selectRow(row: RowData<T>, isUser: boolean, column?: ColumnConfig): void {\n    if (row === undefined || row === null) {\n      return;\n    }\n    if ((column === undefined || column === null) || (!!column && column.name !== 'bookButton')) {\n      this.selectedObject = row.data as T;\n      this.select.emit(this.selectedObject);\n      this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\n    } else if (!!column && column.name === 'bookButton') {\n      if (this.selectedObject !== row.data) {\n        this.selectedObject = row.data as T;\n        this.select.emit(this.selectedObject);\n        this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\n      }\n      this.bookClicked.emit(this.selectedObject);\n    }\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n    let isScrollY: boolean;\n\n    if (this.scrollY !== element.scrollTop) {\n      isScrollY = true;\n      this.scrollY = element.scrollTop;\n      this.scrollX = element.scrollLeft;\n    }\n\n    if (this.scrollX !== element.scrollLeft) {\n      isScrollY = false;\n      this.scrollY = element.scrollTop;\n      this.scrollX = element.scrollLeft;\n    }\n\n    if ((element.scrollHeight - element.scrollTop < 1000) && isScrollY) {\n      this.goNextPage();\n    }\n\n  }\n\n  private goNextPage(): void {\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\n      this.tableHelisaConnectComponent.isUsed = true;\n      this.nextPage.emit({\n        page: this.tableHelisaConnectComponent.nextPage(),\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\n      });\n    }\n  }\n\n  private receivePage(data: T[]): void {\n    if (!this.rawData) {\n      this.rawData = new Array<T>();\n    }\n    this.rawData = this.rawData.concat(data);\n    this.dataSource = this.rawData;\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\n    this.tableHelisaConnectComponent.isUsed = false;\n  }\n\n  dblClickCell(): void {\n    this.selectCell.emit(this.selectedCells as Cell<T>);\n  }\n\n  selectedCell(element: RowData<T>, column: ColumnConfig): void {\n    if (column.isSelectable === undefined || column.isSelectable === null || column.isSelectable) {\n      this.selectRow(element, true, column);\n      this.selectedCells = { column, row: element };\n      this.selectCell.emit(this.selectedCells);\n    }\n  }\n\n  isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean {\n    if (this.isCellSelection && !this.modeImportEnabled) {\n      if (this.selectedCells != null) {\n        if (this.selectedCells.column.name === column.name &&\n          (this.selectedCells.row as RowData<T>).data === row.data) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  getClassToCell(row: T, column: ColumnConfig): string[] {\n    const classToCell: Array<string> = new Array<string>();\n    if (this.modeImportEnabled) {\n      classToCell.push('hw-color-gray');\n    }\n    if (this.configCellStyles) {\n      const found: ConfigCellStyles<T> = this.configCellStyles.find((c: ConfigCellStyles<T>): boolean => {\n        return c.cellData === this.getValue(row, column);\n      });\n      if (found) {\n        classToCell.push(found.classCell);\n      }\n    }\n    if (column.columnStyle) {\n      classToCell.push(column.columnStyle);\n    }\n    return classToCell;\n  }\n\n  getClassToColumn(): string[] {\n    return this.configColumnClass;\n  }\n\n  getClassToRow(row: T): string[] {\n    const classToRow: Array<string> = new Array<string>();\n    if (row === this.selectedObject && !this.isCellSelection) {\n      classToRow.push('');\n    }\n    if (this.configRowStylesFromColumn) {\n      const founds: ConfigRowStyles<T>[] = this.configRowStylesFromColumn.filter((c: ConfigRowStyles<T>): boolean => {\n        return c.data === this.getValue(row, c.column);\n      });\n      if (founds) {\n        founds.forEach((c: ConfigRowStyles<T>): void => {\n          classToRow.push(c.classRow);\n        });\n      }\n    }\n    return classToRow;\n  }\n\n  onDrop(event: MouseEvent): void {\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\n      const rowIndex: number = this.getRowIndex(event.pageY);\n      const array: RowData<T>[] = this.dataBeforeDrag.data;\n      const rawData: T[] = this.rawData;\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\n      this.drop.emit({ value: array[rowIndex].data as T, order: rowIndex });\n      this.rawData = rawData;\n      this.data = new MatTableDataSource(array);\n      event.stopPropagation();\n    }\n  }\n\n  tableKeydown(event: KeyboardEvent): void {\n    if (this.modeImportEnabled) {\n      if (event.code === 'Space' || event.key === 'Insert' || event.key === 'Delete') {\n        event.preventDefault();\n        event.stopPropagation();\n        this.selectToImport.emit({ value: this.selectedObject, scope: EventScope.USER, keyActionImport: event.key });\n      }\n    }\n    if (!this.isCellSelection) {\n      this.arrowsEvents(event);\n    }\n  }\n\n  arrowsEvents(event: KeyboardEvent): void {\n    let currentIndex: number = this.data.data.findIndex((row: RowData<T>): boolean => row.data === this.selectedObject);\n    let newSelection: number = -10;\n    if (event.key === 'ArrowDown') {\n      this.scrollCount++;\n      this.data.data.forEach((row: RowData<T>, index: number): void => {\n        if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\n          newSelection = index;\n        }\n      });\n    }\n    if (event.key === 'ArrowUp') {\n      this.scrollCount--;\n      currentIndex = this.data.data.length - currentIndex - 1;\n      this.data.data.reverse().forEach((row: RowData<T>, index: number): void => {\n        if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\n          newSelection = index;\n        }\n      });\n      this.data.data.reverse();\n      if (newSelection !== -10) {\n        newSelection = this.data.data.length - newSelection - 1;\n      }\n    }\n    if (newSelection !== -10) {\n      this.selectRow(this.data.data[newSelection], true);\n    }\n    if (Math.abs(this.scrollCount) >= 2) {\n      this.scrollCount = 0;\n    } else {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Emite el evento cuando se da click al boton AddRow\n   */\n  onAddRow(): void {\n    this.addRow.emit();\n  }\n\n\n  getHeaderSubtitle(): string[] {\n    const x: string[] = this.columnConfig.map((column: ColumnConfig, index: number): string => {\n      if (column.visible && column.subtitle !== undefined) {\n        return 'subtitle' + index;\n      } else {\n        return null;\n      }\n    }).filter((data: string): boolean => data != null);\n    return x;\n  }\n\n  getColumnsWithTitle(): string[] {\n    return this.columnConfig.filter((column: ColumnConfig): boolean =>\n      column.visible && column.title !== undefined\n    ).map((col: ColumnConfig): string => col.name);\n  }\n\n  dragger(event: MouseEvent): boolean {\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\n      const rowIndex: number = this.getRowIndex(event.pageY);\n      if (rowIndex !== this.lastIndexRowDrag) {\n        this.lastIndexRowDrag = rowIndex;\n        // This can have a memory problem with big data\n        const array: RowData<T>[] = [...this.dataBeforeDrag.data];\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\n        this.data = new MatTableDataSource(array);\n      }\n      event.preventDefault();\n      return true;\n    }\n  }\n\n  startDrag(event: MouseEvent): void {\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\n    this.lastIndexRowDrag = this.indexRowStartDrag;\n    this.dataBeforeDrag = this.data;\n  }\n\n  private getRowIndex(pageY: number): number {\n    let offsetTop: number = 0;\n    let container: HTMLElement = this.containerTable.nativeElement;\n    while ((container !== null) && (offsetTop === 0)) {\n      offsetTop = container.offsetTop;\n      container = container.parentElement;\n    }\n    let rowIndex: number = -1;\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\n    for (let i: number = 0; i < rows.length; i++) {\n      const row: HTMLElement = (rows[i] as HTMLElement);\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop) {\n        rowIndex = i;\n      }\n    }\n    if (rowIndex < 0) { rowIndex = 0; }\n    return rowIndex;\n  }\n\n  get columnType(): typeof ColumnType {\n    return ColumnType;\n  }\n\n  showMessageEmpty(data: MatTableDataSource<RowData<T>>): boolean {\n    if (this.emptyMessageForColumn.isEnabled) {\n      if ((!data.filteredData) || (data.filteredData && data.filteredData.length === 0)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getMessageEmtpy(): string {\n    return this.emptyMessageForColumn.text;\n  }\n\n  getIfButtonDisabled(): boolean {\n    if (this.addRowButton && (this.addRowButton.isDisabled !== undefined && this.addRowButton.isDisabled !== null)) {\n      if (this.addRowButton.isDisabled) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getToolTipButtonMessage(): string {\n    if (this.getIfButtonDisabled()) {\n      return this.addRowButton.toolTipText;\n    }\n    return '';\n  }\n\n  isResizingTable(): boolean {\n    return this.resizeConfig.enableResize && (this.resizeConfig.typeResize === TypeResizeEnum.BOTH || this.resizeConfig.typeResize === TypeResizeEnum.ONLY_TABLES);\n  }\n\n  isResizingCell(): boolean {\n    return this.resizeConfig.enableResize && (this.resizeConfig.typeResize === TypeResizeEnum.BOTH || this.resizeConfig.typeResize === TypeResizeEnum.ONLY_CELLS);\n  }\n\n  getIdForHelTable(): string {\n    return `${this.resizeConfig.uuid}-${this.tableIndex}`;\n  }\n\n  getIdForCellTable(idx: number): string {\n    return `${this.resizeConfig.uuid}-${this.tableIndex}-child-${idx}`;\n  }\n\n}\n","import {ColumnConfig} from './table-helisa.interface';\nimport {Observable} from 'rxjs';\n\n\nexport class TableHelisaConnectComponent<T> {\n  page: number;\n  isLastPage: boolean;\n  isUsed: boolean;\n\n  constructor() {\n    this.page = 0;\n    this.isLastPage = false;\n    this.isUsed = false;\n  }\n\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): {} {\n    return {};\n  }\n\n  nextPage(): number {\n    return this.page++;\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport * as moment_ from 'moment';\nconst moment: typeof moment_ = moment_;\n\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material/datepicker';\nimport { filter, tap } from 'rxjs/operators';\n\nexport enum TypeCalendarEnum {\n  NORMAL = 'norma',\n  MONTH_YEAR = 'mounth-year',\n  STRICT = 'strict'\n}\n\n\n@Component({\n  selector: 'hel-date-helisa',\n  templateUrl: './date-helisa.component.html',\n  styleUrls: ['./date-helisa.component.css'],\n})\nexport class DateHelisaComponent implements OnInit {\n\n  @ViewChild('picker', { static: true }) datePickerShow: MatDatepicker<Date>;\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\n  @Input() dateFormControl: FormControl = new FormControl('');\n  private date: Date = new Date();\n\n  /**\n   * Formato de fecha.\n   * Los formatos validos son aquellos que maneja la libreria momentjs y este: 'DD [de] MMMM [de] YYYY'\n   * https://momentjs.com/docs/#/parsing/string-format/\n   */\n  @Input() dateFormat: string = 'DD/MM/YYYY';\n  @Input() locale: string = 'es';\n  @Input() errorMessage: string = 'La fecha no concuerda con el formato ';\n  @Input() showErrorMessage: boolean = true;\n  @Input() placeholder: string = this.dateFormat;\n  @Input() showDatePicker: boolean = false;\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  @Output() change: EventEmitter<Date> = new EventEmitter<Date>();\n  isClosed: boolean = false;\n  // tslint:disable-next-line:no-any\n  timeout: any;\n  isDisabled: boolean = false;\n  /**\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\n   * será tomado en cuenta\n   */\n  @Input() typeCalendar: TypeCalendarEnum = TypeCalendarEnum.NORMAL;\n\n  dateToVisualize: FormControl;\n\n  /**\n   * Para evitar nuevos eventos miestras se realiza el parseo\n   */\n  private isFromInputEvent: boolean = false;\n\n  /**\n   * Verificar si el formato es valido\n   */\n  invalidFormat: boolean = false;\n  private inputFormReal: FormControl = new FormControl('');\n\n  constructor() { }\n\n  /*\n  * TypeCalendarEnum.MONTH_YEAR = 'MM/YYYY'\n  * TypeCalendarEnum.STRICT = 'DD [de] MMMM [de] YYYY'\n  * */\n  ngOnInit(): void {\n    moment.locale(this.locale);\n    this.dateToVisualize = new FormControl('', this.dateFormControl.validator);\n    this.formHandler();\n    this.inputFormReal = this.dateFormControl;\n    this.inputFormReal.registerOnDisabledChange((isDisabled: boolean): void => {\n      if (isDisabled) {\n        this.isDisabled = true;\n        this.dateToVisualize.disable();\n      } else {\n        this.isDisabled = false;\n        this.dateToVisualize.enable();\n      }\n    });\n\n    /**\n     * establecer valor por defecto de la fecha\n     */\n    if (this.dateFormControl.value !== '' && this.dateFormControl.value !== null) {\n      const incomingDate: string = moment(this.dateFormControl.value, this.dateFormat).format(this.dateFormat);\n      if (incomingDate !== 'Invalid date') {\n        this.dateToVisualize.setValue(incomingDate);\n        this.dateFormControl.setValue(this.dateFormControl.value);\n      }\n    }\n\n  }\n\n  get typeCalendarEnum(): typeof TypeCalendarEnum {\n    return TypeCalendarEnum;\n  }\n\n  openDatePicker(): void {\n    if (this.showDatePicker && !this.isClosed) {\n      this.isClosed = true;\n      this.timeout = setTimeout((): void => {\n        this.datePickerShow.open();\n      }, 2000);\n    }\n  }\n\n  onKey(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      this.onBlur();\n      this.isClosed = true;\n      this.datePickerShow.open();\n    }\n  }\n\n  onBlur(): void {\n    if (moment(this.dateToVisualize.value, this.dateFormat, true).isValid()) {\n      const incomingDate: string = moment(this.dateToVisualize.value, this.dateFormat).format(this.dateFormat);\n      this.dateToVisualize.setValue(incomingDate);\n      this.dateFormControl.setValue(moment(this.dateToVisualize.value, this.dateFormat).toDate());\n      this.change.emit(moment(this.dateToVisualize.value, this.dateFormat).toDate());\n      clearTimeout(this.timeout);\n      this.isClosed = false;\n      if (this.showDatePicker) {\n        this.isClosed = true;\n        this.datePickerShow.open();\n      }\n    }\n  }\n\n\n  /**\n   * Determina como se debe inicializar la visualizacion del calendar\n   */\n  getStartView(): string {\n    // multi-year\n    if (this.typeCalendar === this.typeCalendarEnum.MONTH_YEAR) {\n      return 'multi-year';\n    } else if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\n      return 'month';\n    } else {\n      return 'month';\n    }\n  }\n\n  private formHandler(): void {\n    if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\n      this.dateToVisualize.valueChanges.subscribe((date: string): void => {\n        this.invalidFormat = false;\n        const isValid: boolean = moment(date, this.dateFormat, true).isValid();\n        const result: string = moment(date, this.dateFormat).format(this.dateFormat);\n        if (!!result && (result === 'Invalid date' || !isValid)) {\n          this.invalidFormat = true;\n          return;\n        }\n        if (!!result) {\n          if (!this.isFromInputEvent) {\n            this.isFromInputEvent = true;\n            this.dateToVisualize.setValue(moment(result, this.dateFormat).format(this.dateFormat));\n            this.dateFormControl.setValue(moment(result, this.dateFormat).toDate());\n            this.isFromInputEvent = false;\n          } else {\n            setTimeout((): void => {\n              this.isFromInputEvent = false;\n            }, 1500);\n          }\n\n        }\n      });\n    } else {\n      this.dateToVisualize.valueChanges\n        .pipe(\n          tap((date: string): void => {\n            if (date.trim().length > this.dateFormat.length) {\n              this.invalidFormat = true;\n            } else {\n              this.invalidFormat = false;\n            }\n          }),\n          filter((date: string): boolean => date.length === this.dateFormat.length)\n        )\n        .subscribe((date: string): void => {\n          this.invalidFormat = false;\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\n          const result: string = moment(date, this.dateFormat).format('YYYY-MM-DD');\n\n          if (!!result && (result === 'Invalid date' || !isValid)) {\n            this.invalidFormat = true;\n            return;\n          }\n\n          if (!!result) {\n            if (!this.isFromInputEvent) {\n              this.isFromInputEvent = true;\n              const subString: string[] = result.split('-');\n\n              const year: number = parseFloat(subString[0]);\n              const month: number = parseFloat(subString[1]);\n              const day: number = parseFloat(subString[2]);\n\n              this.date.setFullYear(year);\n              this.date.setDate(day);\n              this.date.setMonth(month - 1); // -1 por que los meses se toman como los indices en un array\n\n              /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\n              if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\n                this.date = moment(this.date).endOf('month').toDate();\n              }\n\n              this.dateToVisualize.setValue(moment(this.date, 'YYYY-MM-DD').format(this.dateFormat));\n              this.dateFormControl.setValue(this.date);\n              this.isFromInputEvent = false;\n            } else {\n              setTimeout((): void => {\n                this.isFromInputEvent = false;\n              }, 1500);\n            }\n\n          }\n        });\n    }\n\n\n    this.dateFormControl.valueChanges\n      .subscribe((date: string): void => {\n        const incommingDate: string = moment(date, this.dateFormat).format(this.dateFormat);\n        if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\n          this.dateToVisualize.setValue(incommingDate);\n        }\n      });\n  }\n\n\n  /**\n   * Evento que se dispara luego seleccionar un mes\n   */\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void {\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\n      datepicker.close();\n      const date: Date = moment(chosenMonthDate).endOf('month').toDate();\n\n      this.dateToVisualize.setValue(moment(date, 'YYYY-MM-DD').format(this.dateFormat));\n      this.dateFormControl.setValue(date);\n      this.change.emit(date);\n    }\n  }\n\n  /**\n   * Evento desde el control touch del calendar\n   */\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>): void {\n    this.dateToVisualize.setValue(moment(event.value, 'YYYY-MM-DD').format(this.dateFormat));\n    this.dateFormControl.setValue(new Date(event.value));\n    this.change.emit(new Date(event.value));\n    this.isClosed = true;\n  }\n\n  getErrorMessage(): string {\n    return this.errorMessage + this.dateFormat;\n  }\n\n  getDateToControl(): Date {\n    return moment(this.dateToVisualize.value, this.dateFormat).toDate();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, BehaviorSubject, Subscriber, Observable } from 'rxjs';\nimport { Node } from './node';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TreeHelisaService {\n\n    // Observable string sources\n    private emitNodeSelected: BehaviorSubject<number | string> = new BehaviorSubject<number | string>(1);\n    // Observable string streams\n    nodeSelected: Observable<string | number> = this.emitNodeSelected.asObservable();\n\n    // Observable string sources\n    private emitDataSource: BehaviorSubject<Node> = new BehaviorSubject<Node>(undefined);\n\n    // Observable string streams\n    dataSourceObservable: Observable<Node> = this.emitDataSource.asObservable();\n\n    // Expand node observable\n    private emitExpandAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n    nodeExpand: Observable<boolean> = this.emitExpandAllNodes.asObservable();\n\n     // Collapse node observable\n     private emitCollapseAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n     nodeCollapse: Observable<boolean> = this.emitCollapseAllNodes.asObservable();\n\n    private emitRefreshTree: Subject<void> = new Subject<void>();\n    refreshTreeObservable: Observable<void> = this.emitRefreshTree.asObservable();\n\n    private emitRefreshTreeWithPagination: Subject<void> = new Subject<void>();\n    refreshTreeWithPaginationObservable: Observable<void> = this.emitRefreshTreeWithPagination.asObservable();\n\n    private emitExpandOneNode: Subject<Node> = new Subject<Node>();\n    expandOneNodeObservable: Observable<Node> = this.emitExpandOneNode.asObservable();\n\n    private emitCollapseOneNode: Subject<Node> = new Subject<Node>();\n    collapseOneNodeObservable: Observable<Node> = this.emitCollapseOneNode.asObservable();\n\n    // Service message commands\n    changeNodeSelected(idResidentialArea: number | string): void {\n        this.emitNodeSelected.next(idResidentialArea);\n    }\n\n    // Service message commands\n    changeDataSource(data: Node): void {\n        this.emitDataSource.next(data);\n    }\n\n    expandAllNodes(expand: boolean): void {\n        this.emitExpandAllNodes.next(expand);\n    }\n\n    collapseAllNodes(collapse: boolean): void {\n        this.emitCollapseAllNodes.next(collapse);\n    }\n\n    refreshTree(): void {\n        this.emitRefreshTree.next();\n    }\n\n\n    refreshTreeWithPagination(): void {\n        this.emitRefreshTreeWithPagination.next();\n    }\n\n\n    expandOneNode(node: Node): void {\n    this.emitExpandOneNode.next(node);\n    }\n\n\n    collapseOneNode(node: Node): void {\n        this.emitCollapseOneNode.next(node);\n    }\n\n    constructor() {\n\n    }\n\n}\n","export class TreeHelisaConnect<T> {\n    page: number;\n    isLastPage: boolean;\n    isUsed: boolean;\n\n    constructor() {\n      this.page = 0;\n      this.isLastPage = false;\n      this.isUsed = false;\n    }\n\n    nextPage(): number {\n      return this.page = this.page + 1;\n    }\n  }\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, HostListener } from '@angular/core';\nimport { NestedTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { MatOptionSelectionChange } from '@angular/material/core';\nimport { MatTreeNestedDataSource, MatTree } from '@angular/material/tree';\nimport { Node } from './node';\nimport { TreeHelisaService } from './tree-helisa.service';\nimport { Router } from '@angular/router';\nimport * as _ from 'lodash';\nimport { TreeHelisaConnect } from './tree-helisa-connect';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nexport interface RequestTreeHelisa {\n  page: number;\n}\n\n@Component({\n  selector: 'hel-tree',\n  templateUrl: './tree-helisa.component.html',\n  styleUrls: ['./tree-helisa.component.sass']\n  // host: { '(document:keyup)': 'onKeyDown($event)' }\n})\nexport class TreeHelisaComponent implements OnInit, AfterViewInit {\n  isDisabled: boolean;\n  selectedNode: number | string | null;\n  //#endregion ====== Variables ========\n\n  constructor(private treeHelisaService: TreeHelisaService, private router: Router, private elementRef: ElementRef) {\n    // cargar datos pasados por el @Input\n    if (!!this.data) {\n      const data: Node = this.data;\n      this.data = null;\n      this.receivePage(data.children);\n    } else {\n      this.dataSource.data = [];\n      this.treeControl.dataNodes = [];\n    }\n  }\n\n  //#region  ====== Variables =============\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\n  formEdit: FormControl;\n  @ViewChild('tree', {static: true}) tree: MatTree<{}>;\n  private selectedOptions: Map<\n    string | number,\n    {\n      formControl: FormControl;\n      editMode: boolean;\n    }\n  > = new Map<\n    string | number,\n    {\n      formControl: FormControl;\n      editMode: boolean;\n    }\n  >();\n  /**\n   * Datos del Arbol\n   */\n  @Input() data: Node;\n\n  /**\n   * Retorna el id del nodo removido\n   */\n  @Output() removed: EventEmitter<string | number> = new EventEmitter<number | string>();\n\n  /**\n   * Retorna un nodo editado\n   */\n  @Output() edited: EventEmitter<Node> = new EventEmitter<Node>();\n\n  /**\n   * Retorna un nodo sin id del nodo , pero si con el parent\n   * para conocer a cual fue añadido\n   */\n  @Output() added: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() collapseParent: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() rangeScrolled: EventEmitter<RequestTreeHelisa> = new EventEmitter<RequestTreeHelisa>();\n  @Output() nodeSelected: EventEmitter<number | string> = new EventEmitter<number | string>();\n  @Output() dobleClick: EventEmitter<number | string> = new EventEmitter<number | string>();\n  @Output() keypressDelete: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() keypressInsert: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() checkedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() uncheckedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() clickAddNode: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() clickEditNode: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() clickDeleteNode: EventEmitter<Node> = new EventEmitter<Node>();\n\n  treeControl: NestedTreeControl<Node> = new NestedTreeControl<Node>((node: Node): Node[] | Observable<Node[]> => node.children);\n  dataSource: MatTreeNestedDataSource<Node> = new MatTreeNestedDataSource<Node>();\n\n  isSingleClick: boolean = true;\n  currentNode: Node = null;\n\n  /**\n   * Obtiene la descripcion completa del nodo\n   * @example Nodo padre,nodo hijo,nodo nieto\n   * @param node Debe tener todos los parent llenos hacia arriba\n   */\n  public static getDescription(node: Node): string {\n    let result: string[] = [node.name];\n    let concat: string = '';\n\n    if (node.parent) {\n      result.push(this.getDescription(node.parent));\n    }\n\n    if (result.length === 1) {\n      return node.name;\n    }\n\n    result = result.reverse();\n\n    for (let i: number = 0; i < result.length; i++) {\n      const element: string = result[i];\n      concat = concat + element + (i === result.length - 1 ? '' : ',');\n    }\n\n    return concat;\n  }\n\n  ngOnInit(): void {\n    // si se cargan datos por medio del servicio\n    this.treeHelisaService.dataSourceObservable.subscribe((res: Node): void => {\n      if (!!res && !!res.children) {\n        this.selectedNode = res.id;\n        this.receivePage(res.children);\n      } else {\n        this.dataSource.data = [];\n        this.treeControl.dataNodes = [];\n      }\n    });\n\n    // Observable, si cambia el nodo seleccionado por medio del servicio\n    this.treeHelisaService.nodeSelected.subscribe((res: string | number): void => {\n      if (!!this.data && !!this.data.children) {\n        this.selectNode(this.data, res);\n      }\n    });\n\n    this.treeHelisaService.refreshTreeObservable.subscribe((res: void): void => {\n      this.refreshTree();\n    });\n\n    this.treeHelisaService.refreshTreeWithPaginationObservable.subscribe((res: void): void => {\n      this.refreshTreeWithPagination();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.treeHelisaService.nodeExpand.subscribe((res: boolean): void => {\n      if (res != null) {\n        if (res) {\n          this.tree.treeControl.expandAll();\n        }\n      }\n    });\n\n    this.treeHelisaService.nodeCollapse.subscribe((res: boolean): void => {\n      if (res !== null) {\n        if (res) {\n          this.tree.treeControl.collapseAll();\n        }\n      }\n    });\n\n    this.treeHelisaService.expandOneNodeObservable.subscribe((res: Node): void => {\n      if (res !== undefined) {\n        this.treeControl.expand(res);\n      }\n    });\n\n    this.treeHelisaService.collapseOneNodeObservable.subscribe((res: Node): void => {\n      if (res !== undefined) {\n        this.treeControl.collapse(res);\n      }\n    });\n  }\n\n  //#region  ====== Events ===========\n  onRedirect(node: Node): void {\n    this.isSingleClick = true;\n    setTimeout((): void => {\n      if (this.isSingleClick) {\n        this.selectNode(node, node.id);\n\n        // if(!!node && !node.children){\n        if (!!node) {\n          this.nodeSelected.emit(node.id);\n          this.currentNode = node;\n        }\n      }\n    }, 350);\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n\n    if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\n      this.goNextPage();\n    }\n  }\n\n  onEdit(node: Node): void {\n    this.clickEditNode.emit(node);\n    /** @Deprecated\n     *  Ya no se edita el nodo ahora solo se emite el evento 'clickEditNode'\n     * retornando el nodo al cual le hicieron click en la opción delete\n     */\n    // node.isEditable = true;\n    // this.isDisabled = true;\n  }\n\n  onAdd(node: Node): void {\n    this.clickAddNode.emit(node);\n    /** @Deprecated\n     *  Ya no se crea y se agrega el nodo ahora solo se emite el evento 'clickAddNode'\n     * retornando el nodo al cual le hicieron click en la opción add\n     */\n    //   // si no tiene hijos instanciar el array\n    //   if (!node.children) {\n    //     node.children = [];\n    //   }\n    //   node.children.push({\n    //     id: Math.random(),\n    //     name: '',\n    //     isSelected: false,\n    //     parent: node,\n    //     isEditable: true\n    //   });\n    //   if (node.children) {\n    //     this.isDisabled = true;\n    //     this.treeHelisaService.expandOneNode(node);\n    //   }\n    //   this.refreshTree();\n  }\n\n  onDelete(node: Node): void {\n    this.clickDeleteNode.emit(node);\n    /** @Deprecated\n     *  Ya no se elimina el nodo ahora solo se emite el evento 'clickDeleteNode'\n     * retornando el nodo al cual le hicieron click en la opción delete\n     */\n    // // Remueve el nodo utilizando la libreria de lodash\n    // _.remove(node.parent.children, node);\n\n    // this.refreshTree();\n    // this.removed.emit(node.id);\n  }\n\n  onEdited(node: Node, value: string): void {\n    node.name = value;\n    if (node.id == null && node.name === '') {\n      _.remove(node.parent.children, node);\n      this.refreshTree();\n    } else if (node.id && node.id != null && node.name.trim() !== '') {\n      this.edited.emit(node);\n      node.isEditable = false;\n      this.selectNode(node, node.id);\n    } else if (node.id == null && node.name.trim() !== '') {\n      this.added.emit(node);\n      node.isEditable = false;\n    }\n    this.isDisabled = false;\n    this.refreshTree();\n  }\n\n  onCancel(node: Node, value: string): void {\n    this.isDisabled = false;\n    // Si no tiene id por ser un nuevo item, lo elimina\n    if (node.id == null) {\n      _.remove(node.parent.children, node);\n      this.refreshTree();\n    }\n\n    node.isEditable = false;\n  }\n\n  onDblClick(node: Node): void {\n    this.isSingleClick = false;\n    this.dobleClick.emit(node.id);\n  }\n\n  @HostListener('document:keyup', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    switch (event.key) {\n      case 'Delete':\n        this.keypressDelete.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\n        break;\n      case 'Insert':\n        this.keypressInsert.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\n        break;\n      case 'ArrowDown':\n        this.moveDownIntoTree();\n        break;\n      case 'ArrowUp':\n        this.moveUpIntoTree();\n        break;\n    }\n  }\n\n  //#endregion ======= Events ========\n\n  //#region  ======== Metodos =============\n\n  private moveUpIntoTree(): number {\n    if (!!this.data) {\n      // si aun no hay ningun node seleccionado selecciona el primero\n      if (this.currentNode == null) {\n        this.selectNode(this.data, this.data.children[0].id);\n        this.currentNode = this.data.children[0];\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n          this.treeHelisaService.expandOneNode(this.currentNode);\n        }\n      } else {\n        if (!!this.currentNode.parent && this.currentNode.id != null) {\n          // obtiene el indice del nodo seleccionado actualmente\n          const index: number = this.currentNode.parent.children.indexOf(this.currentNode);\n\n          if (this.currentNode.parent.id == null && index === 0) {\n            return 0;\n          } else {\n            // si tiene nodos al mismo nivel salta al nodo anterior\n            if (index !== undefined && index === 0) {\n              this.currentNode = this.currentNode.parent;\n              this.selectNode(this.data, this.currentNode.id);\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n                this.treeHelisaService.expandOneNode(this.currentNode);\n              }\n            } else {\n              // si no tiene nodos al mismo nivel salta al nodo padre\n              this.currentNode = this.currentNode.parent.children[index - 1];\n              this.selectNode(this.data, this.currentNode.id);\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n                this.treeHelisaService.expandOneNode(this.currentNode);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private moveDownIntoTree(): void {\n    if (!!this.data) {\n      if (this.currentNode == null) {\n        this.selectNode(this.data, this.data.children[0].id);\n        this.currentNode = this.data.children[0];\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n          this.treeHelisaService.expandOneNode(this.currentNode);\n        }\n      } else {\n        if (!!this.currentNode) {\n          // obtiene el indice del nodo seleccionado actualmente\n          const index: number =\n            !!this.currentNode && !!this.currentNode.parent ? this.currentNode.parent.children.indexOf(this.currentNode) : null;\n\n          // si tiene childrens pasa al primer children\n          if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n            this.currentNode = this.currentNode.children[0];\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          } else if (\n            index !== undefined &&\n            index === this.currentNode.parent.children.length - 1 &&\n            this.currentNode.parent.parent != null &&\n            this.currentNode.parent.parent.children != null &&\n            this.currentNode.parent.parent.children.length > 0\n          ) {\n            const indexOfParent: number = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent);\n            this.currentNode =\n              this.currentNode.parent.parent.children[indexOfParent + 1] === undefined\n                ? this.currentNode\n                : this.currentNode.parent.parent.children[indexOfParent + 1];\n\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          } else {\n            // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\n            this.currentNode = this.currentNode.parent.children[index + 1];\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Verifica si el nodo tiene hijos\n   */\n  hasChild(t: number, node: Node): boolean {\n    return !!node.children && node.children.length > 0;\n  }\n\n  /**\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\n   */\n  private refreshTree(): void {\n    this.data = null;\n    const datasourceData: Node[] = this.dataSource.data;\n    this.dataSource.data = null;\n    this.dataSource.data = datasourceData;\n    this.treeControl.dataNodes = datasourceData;\n  }\n\n  /**\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())\n   */\n  private refreshTreeWithPagination(): void {\n    const datasourceData: Node[] = this.dataSource.data;\n    this.dataSource.data = null;\n    this.dataSource.data = datasourceData;\n    this.treeControl.dataNodes = datasourceData;\n  }\n\n  private goNextPage(): void {\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\n      this.treeHelisaConnect.isUsed = true;\n      this.rangeScrolled.emit({\n        page: this.treeHelisaConnect.nextPage()\n      });\n    }\n  }\n\n  private receivePage(data: Node[]): void {\n    if (!this.data) {\n      this.data = { id: null, name: 'root', isSelected: false };\n    }\n    if (!this.data.children) {\n      this.data.children = new Array<Node>();\n      this.treeHelisaConnect = new TreeHelisaConnect<Node>();\n    }\n    this.data.children = this.data.children.concat(data);\n    this.data.children.forEach((node: Node): void => {\n      this.fillParent(node, this.data);\n    });\n    this.data.children = this.reorderByOrderIndex(this.data.children);\n    this.dataSource.data = this.data.children;\n    this.treeControl.dataNodes = this.data.children;\n    this.treeHelisaConnect.isLastPage = data.length === 0;\n    this.treeHelisaConnect.isUsed = false;\n  }\n\n  /**\n   * Llenan el campo parent de todos los nodos hijos\n   */\n  private fillParent(node: Node, parent: Node): void {\n    node.parent = parent;\n    if (node.children && node.children.length > 0) {\n      node.children.forEach((item: Node): void => {\n        this.fillParent(item, node);\n      });\n    }\n  }\n\n  /**\n   * coloca como true del isSelected del nodo que concuerde con el id\n   */\n  private selectNode(node: Node, id: number | string): Node {\n    if (node == null) {\n      return null;\n    }\n    this.upSelectNode(node);\n    if (!!this.selectedNode) {\n      const nodeSelected: Node = this.getNodeById(this.selectedNode);\n      if (nodeSelected != null) {\n        nodeSelected.isSelected = false;\n        this.selectedNode = null;\n      }\n    }\n    if (node.id !== undefined && node.id === id) {\n      node.isSelected = true;\n      this.expandAllParents(node);\n      this.selectedNode = node.id;\n      return node;\n    } else if (node.children != null) {\n      let i: number;\n      let result: Node = null;\n      for (i = 0; result == null && i < node.children.length; i++) {\n        result = this.selectNode(node.children[i], id);\n      }\n      return result;\n    }\n    return null;\n  }\n\n  private expandAllParents(node: Node): void {\n    if (!!node && !!node.parent) {\n      this.treeHelisaService.expandOneNode(node.parent);\n      this.expandAllParents(node.parent);\n    }\n  }\n\n  /**\n   * Elimina el isSelected de todos los nodos\n   */\n  private upSelectNode(node: Node): void {\n    if (!!node && node.isSelected !== undefined) {\n      node.isSelected = false;\n      if (!!node.children) {\n        for (const childrenNode of node.children) {\n          this.upSelectNode(childrenNode);\n        }\n      }\n    }\n  }\n\n  getClassNode(node: Node): string[] {\n    const classNode: string[] = [];\n    if (node.isSelected) {\n      classNode.push('isSelected');\n    }\n    if (node.classNode) {\n      classNode.push(node.classNode);\n    }\n    return classNode;\n  }\n\n  onEditMode(node: Node, editMode: boolean): void {\n    this.getSelectedOptions(node).editMode = editMode;\n  }\n\n  onSelectOption(event: MatOptionSelectionChange, node: Node): void {\n    node.isCheckedOption = event.source.selected;\n    if (node.isCheckedOption) {\n      this.checkedOptionNode.emit(node.id);\n    } else {\n      this.uncheckedOptionNode.emit(node.id);\n    }\n  }\n\n  getSelectedOptions(\n    node: Node\n  ): {\n    formControl: FormControl;\n    editMode: boolean;\n  } {\n    if (this.selectedOptions.has(node.id)) {\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\n    } else {\n      this.reloadSelectedOptions(node, false);\n    }\n    return this.selectedOptions.get(node.id);\n  }\n\n  private reloadSelectedOptions(node: Node, editMode: boolean): void {\n    const array: Array<string | number | null> = new Array<string | number | null>();\n    node.options.forEach((option: Node): void => {\n      if (option.isCheckedOption) {\n        array.push(option.id);\n      }\n    });\n    const obj: {\n      formControl: FormControl;\n      editMode: boolean;\n    } = { formControl: new FormControl(array), editMode };\n    this.selectedOptions.set(node.id, obj);\n  }\n\n  /**\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\n   * @param id  number | string\n   * @returns Node o null si no hay un nodo con ese id\n   */\n  getNodeById(id: number | string): Node {\n    const queue: Node[] = [...this.dataSource.data];\n    while (queue.length > 0) {\n      const curr: Node = queue.shift();\n      if (curr.id === id) {\n        return curr;\n      } else {\n        if (!!curr.children) {\n          queue.push(...curr.children);\n        }\n      }\n    }\n    return null;\n  }\n\n  reorderByOrderIndex(node: Node[]): Node[] {\n    if (!!node && node.length > 0) {\n      try {\n        node = _.orderBy(node, (x: Node): number => x.orderIndex, ['asc']);\n        node.forEach((element: Node): void => {\n          if (!!element.children && element != null) {\n            element.children = this.reorderByOrderIndex(element.children);\n          }\n        });\n        return node;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  //#endregion ====== Metodos ============\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\n\n@Injectable()\nexport class AutocompleteHelisaService<T> {\n\n  private emitChangeSource: BehaviorSubject<Array<OptionAutocompleteHelisa<T>>> =\n  new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\n\n  public dataSource$: Observable<Array<OptionAutocompleteHelisa<T>>> = this.emitChangeSource.asObservable();\n\n  constructor() { }\n\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>): void {\n    this.emitChangeSource.next(options);\n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable, of, Subject } from 'rxjs';\nimport { map, startWith, throttleTime, debounceTime } from 'rxjs/operators';\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\n\nexport interface OptionAutocompleteHelisa<T> {\n  value: T;\n  displayText: string;\n}\n\n@Component({\n  selector: 'hel-autocomplete',\n  templateUrl: './autocomplete-helisa.component.html',\n  styleUrls: ['./autocomplete-helisa.component.css'],\n  providers: [AutocompleteHelisaService]\n})\nexport class AutocompleteHelisaComponent<T> implements OnInit {\n\n  @Input() myControl: FormControl = new FormControl();\n  @Input() options: Array<OptionAutocompleteHelisa<T>> = new Array<OptionAutocompleteHelisa<T>>();\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\n  selectedValue: OptionAutocompleteHelisa<T>;\n  @Output() selectedValueEmmiter: EventEmitter<T> = new EventEmitter<T>();\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\n  @Input() isRemote: boolean = false;\n  isLoading: boolean = false;\n\n\n  onScrollObservable: Subject<void> = new Subject<void>();\n\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\n  }\n\n  ngOnInit(): void {\n\n    this.onScrollObservable.asObservable()\n    .pipe(\n      debounceTime(500),\n      throttleTime(500)\n    )\n    .subscribe((): void => {\n      this.nextPage.emit();\n    });\n\n    if (this.isRemote) {\n      this.autocompleteHelisaService.dataSource$.subscribe((data: OptionAutocompleteHelisa<T>[]): void => {\n        setTimeout((): void => {\n          this.options = data;\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\n        });\n      });\n    }\n\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map((x: string): string => this._checkRegex(x)),\n      map((value: string): OptionAutocompleteHelisa<T>[] => this._filter(value))\n    );\n\n  }\n\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {\n    return option ? option.displayText : undefined;\n  }\n\n  getService(): AutocompleteHelisaService<T> {\n    return this.autocompleteHelisaService;\n  }\n\n\n  /** Elimina caracteres extraños */\n  private _checkRegex(value: string): string {\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '');\n    return value;\n  }\n\n  private _filter(value: string): OptionAutocompleteHelisa<T>[] {\n    if (!(value)) {\n      if (!this.isRemote) {\n        const filterValue: string[] = value.toLowerCase().split(' ');\n        return this.options.filter((option: OptionAutocompleteHelisa<T>): boolean => {\n          let ws: boolean = true;\n          filterValue.forEach((text: string): boolean => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\n          return ws;\n        }).splice(0, 5);\n      } else {\n        return this.options;\n      }\n    }\n  }\n\n  public onSelected(event: {option: {value: OptionAutocompleteHelisa<T>}}): void {\n    this.selectedValue = event.option.value;\n    this.selectedValueEmmiter.emit(this.selectedValue.value);\n  }\n\n  getNextPage(): void {\n    this.onScrollObservable.next();\n  }\n}\n","import { Directive, EventEmitter, Input, Output, OnDestroy } from '@angular/core';\nimport { MatAutocomplete } from '@angular/material/autocomplete';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n\nexport interface IAutoCompleteScrollEvent {\n  autoComplete: MatAutocomplete;\n  scrollEvent: Event;\n}\n\n\n@Directive({\n  selector: 'mat-autocomplete[optionsScroll]'\n})\nexport class OptionsScrollDirective implements OnDestroy {\n\n  /**\n   * This value would different depends of styles\n   */\n  @Input() thresholdPercent: number = .9;\n  @Output() optionsScroll: EventEmitter<IAutoCompleteScrollEvent> = new EventEmitter<IAutoCompleteScrollEvent>();\n  destroy: Subject<void> = new Subject<void>();\n  lastScrollTop: number = 0;\n\n  constructor(public autoComplete: MatAutocomplete) {\n    this.autoComplete.opened.pipe(\n      tap((): void => {\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\n        // Note: The panel will be available on next tick\n        // Note: The panel wil NOT open if there are no options to display\n        setTimeout((): void => {\n          // Note: remove listner just for safety, in case the close event is skipped.\n          this.removeScrollEventListener();\n          if (!!this.autoComplete &&\n            !!this.autoComplete.panel &&\n            !!this.autoComplete.panel.nativeElement) {\n            this.autoComplete.panel.nativeElement\n              .addEventListener('scroll', this.onScroll.bind(this), false);\n          }\n        });\n      }),\n      takeUntil(this.destroy)).subscribe();\n\n    this.autoComplete.closed.pipe(\n      tap((): void => this.removeScrollEventListener()),\n      takeUntil(this.destroy)).subscribe();\n  }\n\n  private removeScrollEventListener(): void {\n    if (!!this.autoComplete &&\n      !!this.autoComplete.panel &&\n      !!this.autoComplete.panel.nativeElement) {\n      this.autoComplete.panel.nativeElement\n        .removeEventListener('scroll', this.onScroll);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.next();\n    this.destroy.complete();\n\n    this.removeScrollEventListener();\n  }\n\n\n  onScroll(event: Event): void {\n    // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\n    const st: number = (event.target as Window).pageYOffset || (event.target as Element).scrollTop;\n    if (st > this.lastScrollTop) {\n      // downscroll code\n      if (this.thresholdPercent === undefined) {\n        this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\n      } else {\n        const threshold: number = this.thresholdPercent * 100 * (event.target as Element).scrollHeight / 100;\n        const current: number = (event.target as Element).scrollTop + (event.target as Element).clientHeight;\n        if (current > threshold) {\n          this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\n        }\n      }\n    } else {\n      // upscroll code\n    }\n    this.lastScrollTop = st <= 0 ? 0 : st;\n  }\n\n}\n","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\n\n@Directive({\n    selector: '[helTooltip]',\n    providers: [MatTooltip]\n})\nexport class HelTooltipDirective {\n\n    tooltip: MatTooltip;\n\n    /**\n     * Mensaje a mostrar\n     */\n    @Input('helTooltip') message: string;\n\n    /**\n     * Tiempo antes de ocultarla el mensaje\n     */\n    @Input() hideDelay: number = 600;\n\n    /**\n     * Tiempo antes de mostra el mensaje\n     */\n    @Input() showDelay: number = 500;\n\n\n    constructor(tooltip: MatTooltip, private elemRef: ElementRef) {\n      this.tooltip = tooltip;\n    }\n\n    @HostListener('mouseover') mouseover(): void {\n      const currentContent: string = this.elemRef.nativeElement.innerText;\n\n      if (!!currentContent && !!this.message) {\n        if ((currentContent.toUpperCase() !== this.message.toString().toUpperCase()) || this.isEllipsisActive(this.elemRef.nativeElement)) {\n          this.tooltip.message = this.message;\n        }\n      }\n\n      this.tooltip.showDelay =  this.showDelay;\n      this.tooltip.hideDelay = this.hideDelay;\n    }\n\n\n    private isEllipsisActive(e: {offsetWidth: number , scrollWidth: number}): boolean {\n      return (e.offsetWidth < e.scrollWidth);\n    }\n}\n","import { Directive, HostBinding, PLATFORM_ID, Inject, Input, OnChanges } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Directive({\n  selector: 'a[href]',\n})\nexport class ExternalLinkDirective implements OnChanges {\n  @HostBinding('attr.rel') relAttr: string = '';\n  @HostBinding('attr.target') targetAttr: string = '';\n  @HostBinding('attr.href') hrefAttr: string = '';\n  @Input() href: string;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n\n  ngOnChanges(): void {\n\n    this.hrefAttr = this.href;\n\n    if (this.isLinkExternal()) {\n      this.relAttr = 'noopener';\n      this.targetAttr = '_blank';\n    }\n  }\n\n  private isLinkExternal(): boolean {\n    return isPlatformBrowser(this.platformId) && !this.href.includes(location.hostname);\n  }\n}\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {ComboBoxListable} from './interface/combo-box-listable';\nimport {ComboBoxEditable} from './interface/combo-box-editable';\n\nexport enum ComboBoxHelisaState {\n  CLOSED,\n  SELECT,\n  INSERT\n}\n\n@Component({\n  selector: 'lib-combo-box-helisa',\n  templateUrl: './combo-box-helisa.component.html',\n  styleUrls: ['./combo-box-helisa.component.css']\n})\nexport class ComboBoxHelisaComponent<TYPE> implements OnInit, AfterViewInit {\n\n  @Input() editable: ComboBoxEditable<TYPE>;\n  @Input() listable: ComboBoxListable<TYPE>;\n  @Input() placeholder: string = 'Sin seleccionar';\n  @Input() selectedItem: TYPE;\n  @Output() selectEmitter: EventEmitter<TYPE> = new EventEmitter<TYPE>();\n  @Input() enabled: boolean = true;\n\n  private page: number = 0;\n  private pageSize: number = 50;\n  private haveNextPage: boolean = true;\n  state: ComboBoxHelisaState = ComboBoxHelisaState.CLOSED;\n\n  rows: TYPE[] = [];\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    this.getNextPage();\n  }\n\n  private getNextPage(): void {\n    if (this.haveNextPage) {\n      this.listable.getData(this.page++, this.pageSize).subscribe((rows: TYPE[]): void => {\n        rows.forEach((item: TYPE): number => this.rows.push(item));\n        this.haveNextPage = rows.length > 0;\n      });\n    }\n  }\n\n  get comboBoxHelisaState(): typeof ComboBoxHelisaState {\n    return ComboBoxHelisaState;\n  }\n\n  onFocus(): void {\n    if (this.enabled) {\n      this.state = ComboBoxHelisaState.SELECT;\n    }\n  }\n\n  selectItem(row: TYPE): void {\n    this.selectedItem = row;\n    this.selectEmitter.emit(row);\n    this.state = ComboBoxHelisaState.CLOSED;\n  }\n\n  changeToInsert(): void {\n    this.state = ComboBoxHelisaState.INSERT;\n  }\n\n  insert(event: string): void {\n    if (event.trim().length > 0) {\n      this.editable.insert(event).subscribe(\n        (data: TYPE): void => {\n          this.rows.push(data);\n          this.state = ComboBoxHelisaState.SELECT;\n        }\n      );\n    } else {\n      this.state = ComboBoxHelisaState.SELECT;\n    }\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n    if (element.scrollHeight - element.scrollTop < 1000) {\n      this.getNextPage();\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'externalLink'\n})\nexport class ExternalLinkPipe implements PipeTransform {\n    transform(value: string, ...args: string[]): string {\n        return '//' + value;\n    }\n}\n","import { AfterViewInit, Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport enum PagingTreeInitialMode {\n  COLLAPSE,\n  EXPAND\n}\n\nexport interface PagingTreeHelisaListable<T> {\n  get(lastChildOrder: number, size: number): Observable<T[]>;\n\n  getIdField(): string;\n\n  getIdParentField(): string;\n\n  compare(a: T, b: T): number;\n}\n\ninterface HelisaNode<T> {\n  object: T;\n  level: number;\n  haveChildren: boolean;\n  expanded: boolean;\n  visible: boolean;\n  preorder: number;\n}\n\nexport interface HelisaNodeData<T> {\n  readonly object: T;\n  readonly level: number;\n  readonly haveChildren: boolean;\n  readonly expanded: boolean;\n  readonly visible: boolean;\n  readonly preorder: number;\n}\n\n@Component({\n  selector: 'hel-paging-tree',\n  templateUrl: './paging-tree-helisa.component.html',\n  styleUrls: ['./paging-tree-helisa.component.css']\n})\nexport class PagingTreeHelisaComponent<T> implements OnInit, AfterViewInit {\n\n  private pageSize: number = 200000;\n  private visibleLimit: number = 0;\n  private visibleSize: number = 100;\n  private treeMode: PagingTreeInitialMode = PagingTreeInitialMode.EXPAND;\n  private visibleObjects: Array<T> = [];\n  private service: PagingTreeHelisaListable<T>;\n  private searchNode: Map<string, HelisaNode<T>>;\n  private allNode: Array<HelisaNode<T>> = [];\n\n  @Input() isModeAssociation: boolean = false;\n\n  @Output()\n  afterLoadData: EventEmitter<void> = new EventEmitter<void>();\n\n  @ContentChild('nodeComponent')\n  nodeComponent: TemplateRef<{ data: T, node: HelisaNodeData<T> }>;\n\n  @ContentChild('otherColumnsComponent')\n  otherColumnsComponent: TemplateRef<{ data: T, node: HelisaNodeData<T> }>;\n\n  @ContentChild('otherTitlesColumnsComponent')\n  otherTitlesColumnsComponent: TemplateRef<{ data: T, node: HelisaNodeData<T> }>;\n\n  @ContentChild('nodeTitle')\n  nodeTitle: TemplateRef<any>;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  @Input()\n  set mode(paramMode: PagingTreeInitialMode) {\n    this.treeMode = paramMode;\n    this.reset();\n  }\n\n  @Input()\n  set pagingTreeHelisaListable(paramService: PagingTreeHelisaListable<T>) {\n    this.service = paramService;\n    this.reset();\n  }\n\n  public reset(): void {\n    if (this.service) {\n      this.service.get(0, this.pageSize).subscribe((items: T[]): void => this.loadData(items));\n    }\n  }\n\n  private loadData(items: T[]): void {\n    this.searchNode = new Map<string, HelisaNode<T>>();\n    this.visibleObjects = [];\n    this.allNode = [];\n    items = this.sortItems(items);\n    this.searchNode = new Map<string, HelisaNode<T>>();\n    items.forEach((item: T): void => {\n      const node: HelisaNode<T> = this.createNode(item);\n      this.allNode.push(node);\n    });\n    this.reSort();\n    this.loadNextVisibleObjects(null);\n    this.afterLoadData.emit();\n  }\n\n  getUniqueId(item: T): string {\n    return this.getNodeInformationById(item[this.service.getIdField()]).object[this.service.getIdField()];\n  }\n\n  scrollToItem(item: T): void {\n    const idString: string = this.getUniqueId(item);\n    if (idString) {\n      const element = document.getElementById(idString);\n      if (!!element) {\n        element.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"start\",\n          inline: \"nearest\"\n        });\n      }\n    }\n  }\n\n  private sortItems(items: T[]): T[] {\n    const lAdy: Map<string, T[]> = new Map<string, T[]>();\n    const stack: T[] = [];\n    items.forEach((item: T): void => {\n      const idParent: string = item[this.service.getIdParentField()];\n      if (!idParent) {\n        stack.unshift(item);\n      } else {\n        if (!lAdy.has(idParent)) {\n          lAdy.set(idParent, []);\n        }\n        lAdy.get(idParent).push(item);\n      }\n    });\n    const response: T[] = new Array<T>(items.length);\n    let index: number = 0;\n    while (stack.length > 0) {\n      const last: T = stack.pop();\n      response[index++] = last;\n      const children: T[] = lAdy.get(last[this.service.getIdField()]);\n      if (children) {\n        for (let i: number = children.length - 1; i >= 0; i--) {\n          stack.push(children[i]);\n        }\n      }\n    }\n    return response;\n  }\n\n  private createNode(item: T): HelisaNode<T> {\n    if (this.searchNode.has(item[this.service.getIdField()])) {\n      throw Error('Ya existe el nodo.');\n    }\n    const parentInformation: HelisaNode<T> = this.getNodeInformationById(item[this.service.getIdParentField()]);\n    const nodeInformation: HelisaNode<T> = {\n      object: item,\n      haveChildren: false,\n      level: parentInformation ? parentInformation.level + 1 : 0,\n      expanded: this.treeMode === PagingTreeInitialMode.EXPAND,\n      visible: false,\n      preorder: this.searchNode.size + 1,\n    };\n    this.searchNode.set(item[this.service.getIdField()], nodeInformation);\n    if (parentInformation) {\n      parentInformation.haveChildren = true;\n    }\n    return nodeInformation;\n  }\n\n  public getNodeInformationById(id: string): HelisaNode<T> {\n    return this.searchNode.get(id);\n  }\n\n  public getNodeInformation(item: T): HelisaNode<T> {\n    return this.searchNode.get(item[this.service.getIdField()]);\n  }\n\n  getClassAssociation(): string {\n    return (this.isModeAssociation ? 'width-custom-1' : 'width-custom-full');\n  }\n\n  getLevelClass(item: T): string {\n    return 'padding-level-' + this.getNodeInformationById(item[this.service.getIdField()]).level;\n  }\n\n  getRowClassAssociation(): string {\n    return (this.isModeAssociation ? 'helisa-tree-row-association' : '');\n  }\n\n  private loadNextVisibleObjects(nodeFrom: T): void {\n    const visibleObjects: T[] = [];\n    this.visibleObjects.forEach((item: T): void => {\n      if (this.getNodeInformation(item)) {\n        if (nodeFrom && this.getNodeInformation(nodeFrom).preorder >= this.getNodeInformation(item).preorder) {\n          visibleObjects.push(item);\n        } else {\n          this.getNodeInformationById(item[this.service.getIdField()]).visible = false;\n        }\n      }\n    });\n    this.visibleLimit = visibleObjects.length + this.visibleSize;\n    this.allNode.forEach((item: HelisaNode<T>): void => {\n      if (visibleObjects.length < this.visibleLimit &&\n        (!nodeFrom || this.getNodeInformation(nodeFrom).preorder < item.preorder)) {\n        const idParent: string = item.object[this.service.getIdParentField()];\n        if (!idParent) {\n          visibleObjects.push(item.object);\n          item.visible = true;\n        } else {\n          const parentInformation: HelisaNode<T> = this.getNodeInformationById(idParent);\n          if (parentInformation.visible && parentInformation.expanded) {\n            visibleObjects.push(item.object);\n            item.visible = true;\n          }\n        }\n      }\n    });\n    this.visibleObjects = visibleObjects;\n  }\n\n  collapseNode(item: T): void {\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = false;\n    this.loadNextVisibleObjects(item);\n  }\n\n  expandNode(item: T, isScrollToItem: boolean = false): void {\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = true;\n    this.loadNextVisibleObjects(item);\n    if (isScrollToItem) {\n      this.scrollToItem(item);\n    }\n  }\n\n  showNextPage(): void {\n    if (this.visibleObjects.length > 0) {\n      this.loadNextVisibleObjects(this.visibleObjects[this.visibleObjects.length - 1]);\n    }\n  }\n\n  get visibleData(): ReadonlyArray<T> {\n    return this.visibleObjects;\n  }\n\n  removeItem(item: T): void {\n    this.removeById(item[this.service.getIdField()]);\n  }\n\n  removeById(id: string): void {\n    if (this.getNodeInformationById(id)) {\n      const idParent: string = this.getNodeInformationById(id).object[this.service.getIdParentField()];\n      const set: Set<string> = new Set<string>();\n      set.add(id);\n      const beginIndex: number = this.allNode.findIndex(\n        (itemSearch: HelisaNode<T>): boolean => itemSearch.object[this.service.getIdField()] === id\n      );\n      let lastIndex: number = this.allNode.length;\n      for (let i: number = beginIndex + 1; i < this.allNode.length; i++) {\n        const itemSearch: T = this.allNode[i].object;\n        if (set.has(itemSearch[this.service.getIdParentField()])) {\n          set.add(itemSearch[this.service.getIdField()]);\n        } else {\n          lastIndex = i;\n          break;\n        }\n      }\n      const deletedItems: HelisaNode<T>[] = this.allNode.splice(beginIndex, lastIndex - beginIndex);\n      let parentHaveChildren: boolean = false;\n      deletedItems.forEach((deletedItem: HelisaNode<T>): boolean => this.searchNode.delete(deletedItem.object[this.service.getIdField()]));\n      this.allNode.forEach((searchItem: HelisaNode<T>, index: number): void => {\n        searchItem.preorder = index + 1;\n        if (searchItem.object[this.service.getIdParentField()] === idParent) {\n          parentHaveChildren = true;\n        }\n      });\n      if (idParent) {\n        this.getNodeInformationById(idParent).haveChildren = parentHaveChildren;\n      }\n      this.loadNextVisibleObjects(beginIndex > 0 ? this.allNode[beginIndex - 1].object : null);\n    }\n  }\n\n  addItem(item: T): void {\n    const indexParent: number = this.allNode.findIndex((node: HelisaNode<T>): boolean => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\n    if (indexParent >= 0) {\n      this.allNode.push(this.createNode(item));\n      this.allNode[indexParent].haveChildren = true;\n      this.reSort();\n      this.expandNode(this.allNode[indexParent].object);\n    } else {\n      throw Error('No existe el padre.');\n    }\n  }\n\n  updateItem(item: T): void {\n    if (this.getNodeInformation(item)) {\n      this.getNodeInformation(item).object = item;\n      this.reSort();\n      const indexParent: number = this.allNode.findIndex(\n        (node: HelisaNode<T>): boolean => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\n      if (indexParent >= 0) {\n        this.expandNode(this.allNode[indexParent].object);\n      } else {\n        this.loadNextVisibleObjects(null);\n      }\n    }\n  }\n\n  private reSort(): void {\n    const items: T[] = this.allNode.map((node: HelisaNode<T>): T => node.object);\n    items.sort((a: T, b: T): number => this.service.compare(a, b));\n    const preorder: T[] = this.sortItems(items);\n    preorder.forEach((object: T, index: number): number => this.getNodeInformation(object).preorder = index + 1);\n    this.allNode.sort((nodeA: HelisaNode<T>, nodeB: HelisaNode<T>): number => nodeA.preorder - nodeB.preorder);\n  }\n}\n","export enum AlertInformationType {\n    AUTHORIZATION_TRANSACTION,\n    CONFIRM_DELETE_DATA,\n    DELETE_DATA,\n    INFORMATION_NOT_VALID,\n    LOST_DATA,\n    UNCOMPLETED_DATA,\n    UNCOMPLETED_SELECTED_DATA,\n    DEFINE_COMMERCIAL_STRUCTURE,\n    DEFINE_PARKING_STRUCTURE,\n    DEFINE_RESIDENCIAL_STRUCTURE,\n    NO_SEARCH_RESULTS\n  }\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AlertInformationType } from './alert-information-helisa-type.enum';\n\ninterface AlertInformationDataHelisaProperties {\n  alertType: AlertInformationType;\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\n}\n\nconst TITLE_BY_ALERT_TYPE: string[] = ['!Esta transacción requiere autorización!',\n                                       '',\n                                       '¿Está seguro que debe anular esta información?',\n                                       '',\n                                       '¿Está seguro de querer perder lo ya hecho?',\n                                       'No ha suministrado la información necesaria.',\n                                       '',\n                                       '',\n                                       '',\n                                       ''\n                                      ];\nconst CONTENT_BY_ALERT_TYPE: string[] = ['',\n                                         '¿Esta seguro que desea eliminar esta información?',\n                                         'Al anular este concepto, quedará la huella de todo lo que se hizo apoyados en su información. No es una eliminación tácita, es suprimir su uso en adelante.',\n                                         'Rectifique. Hay información no válida',\n                                         'Si no está seguro, puede continuar o \"aplicar\" y posteriormente cuando tenga clara las respuestas, usando la opción de modificar podrá completar el concepto.',\n                                         'Si insite en grabar así, este concepto no será utilizable hasta su conclusión satisfactoria, que deberá completar posteriormente modificando el concepto.',\n                                         'Elemento sin información requerida. Modifíquelo para completarlo.',\n                                         'Primero defina la estructura comercial en configuración.',\n                                         'Primero defina la estructura zona de parqueaderos en configuración.',\n                                         'Primero defina la estructura física residencial en configuración.',\n                                         'No fueron encontradas coincidencias con el criterio de búsqueda.',\n                                        ];\nconst OK_LABEL_BY_ALERT_TYPE: string[] = ['Solicitarla',\n                                          'Lo asumo',\n                                          'Lo asumo',\n                                          '',\n                                          'Lo asumo',\n                                          'Lo asumo',\n                                          'Aceptar',\n                                          '',\n                                          '',\n                                          ''\n                                         ];\nconst CANCEL_LABEL_BY_ALERT_TYPE: string[] = ['Negarla',\n                                              'Me retracto',\n                                              'Me retracto',\n                                              '',\n                                              'Me retracto',\n                                              'Me retracto',\n                                              '',\n                                              '',\n                                              '',\n                                              ''\n                                             ];\n\n@Component({\n  selector: 'hel-alert-information-data-helisa',\n  templateUrl: './alert-information-data-helisa.component.html',\n  styleUrls: ['./alert-information-data-helisa.component.sass']\n})\nexport class AlertInformationDataHelisaComponent implements OnInit {\n\n  alertType: AlertInformationType;\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertInformationDataHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertInformationDataHelisaProperties\n  ) {\n    this.alertType = data.alertType;\n    this.title = data.title;\n    if (this.title === undefined) {\n      this.title = TITLE_BY_ALERT_TYPE[this.alertType];\n    }\n    this.content = data.content;\n    if (this.content === undefined) {\n      this.content = CONTENT_BY_ALERT_TYPE[this.alertType];\n    }\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = OK_LABEL_BY_ALERT_TYPE[this.alertType];\n    }\n    this.cancelLabel = data.cancelLabel;\n    if (this.cancelLabel === undefined) {\n      this.cancelLabel = CANCEL_LABEL_BY_ALERT_TYPE[this.alertType];\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.alertType === AlertInformationType.DEFINE_COMMERCIAL_STRUCTURE || this.alertType === AlertInformationType.DEFINE_PARKING_STRUCTURE ||\n        this.alertType === AlertInformationType.DEFINE_RESIDENCIAL_STRUCTURE) {\n      setTimeout((): void => {\n        this.dialogRef.close();\n      }, 3000);\n    }\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  hasTitle(): boolean {\n    return this.alertType === AlertInformationType.AUTHORIZATION_TRANSACTION || this.alertType === AlertInformationType.DELETE_DATA ||\n           this.alertType === AlertInformationType.LOST_DATA || this.alertType === AlertInformationType.UNCOMPLETED_DATA;\n  }\n\n  hasContent(): boolean {\n    return this.alertType === AlertInformationType.CONFIRM_DELETE_DATA || this.alertType === AlertInformationType.DELETE_DATA ||\n           this.alertType === AlertInformationType.INFORMATION_NOT_VALID || this.alertType === AlertInformationType.LOST_DATA ||\n           this.alertType === AlertInformationType.UNCOMPLETED_DATA || this.alertType === AlertInformationType.UNCOMPLETED_SELECTED_DATA ||\n           this.alertType === AlertInformationType.DEFINE_COMMERCIAL_STRUCTURE || this.alertType === AlertInformationType.DEFINE_PARKING_STRUCTURE ||\n           this.alertType === AlertInformationType.DEFINE_RESIDENCIAL_STRUCTURE || this.alertType === AlertInformationType.NO_SEARCH_RESULTS;\n  }\n\n  hasButtons(): boolean {\n    return this.alertType === AlertInformationType.AUTHORIZATION_TRANSACTION || this.alertType === AlertInformationType.CONFIRM_DELETE_DATA ||\n           this.alertType === AlertInformationType.DELETE_DATA || this.alertType === AlertInformationType.LOST_DATA ||\n           this.alertType === AlertInformationType.UNCOMPLETED_DATA || this.alertType === AlertInformationType.UNCOMPLETED_SELECTED_DATA;\n  }\n\n  hasCancelButton(): boolean {\n    return this.alertType !== AlertInformationType.UNCOMPLETED_SELECTED_DATA;\n  }\n}\n","import {DragDropModule} from '@angular/cdk/drag-drop';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatNativeDateModule, MatOptionModule } from '@angular/material/core';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\nimport { TableHelisaService } from './components/table-helisa/table-helisa.service';\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\nimport { TreeHelisaService } from './components/tree-helisa/tree-helisa.service';\nimport { ExternalLinkDirective } from './directives/external-link.directive';\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\nimport { HelTooltipDirective } from './directives/tooltip.directive';\nimport { ExternalLinkPipe } from './pipes/external-link.pipe';\nimport { ComboBoxHelisaComponent } from './components/combo-box-helisa/combo-box-helisa.component';\nimport { PagingTreeHelisaComponent } from './components/paging-tree-helisa/paging-tree-helisa.component';\nimport { AlertInformationDataHelisaComponent } from './components/alert-information-data-helisa/alert-information-data-helisa.component';\n\n@NgModule({\n  declarations: [\n    InputWithButtonComponent,\n    ToastHelisaComponent,\n    AlertHelisaComponent,\n    DependencyTableHelisaComponent,\n    InputHelisaComponent,\n    TableHelisaComponent,\n    TreeHelisaComponent,\n    DateHelisaComponent,\n    AutocompleteHelisaComponent,\n    OptionsScrollDirective,\n    HelTooltipDirective,\n    ExternalLinkDirective,\n    ExternalLinkPipe,\n    ComboBoxHelisaComponent,\n    PagingTreeHelisaComponent,\n    AlertInformationDataHelisaComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatListModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatCardModule,\n    LayoutModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTabsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatStepperModule,\n    MatChipsModule,\n    DragDropModule,\n    MatTreeModule\n  ],\n  exports: [\n    InputWithButtonComponent,\n    ToastHelisaComponent,\n    AlertHelisaComponent,\n    DependencyTableHelisaComponent,\n    InputHelisaComponent,\n    TableHelisaComponent,\n    TreeHelisaComponent,\n    DateHelisaComponent,\n    AutocompleteHelisaComponent,\n    OptionsScrollDirective,\n    HelTooltipDirective,\n    ExternalLinkDirective,\n    ExternalLinkPipe,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatListModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatCardModule,\n    LayoutModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTabsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatStepperModule,\n    MatChipsModule,\n    DragDropModule,\n    MatTreeModule,\n    ComboBoxHelisaComponent,\n    PagingTreeHelisaComponent,\n    AlertInformationDataHelisaComponent\n  ],\n  providers: [TableHelisaService, TreeHelisaService]\n})\nexport class HelisaLibModule { }\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { AlertInformationDataHelisaComponent} from './alert-information-data-helisa.component';\nimport { AlertInformationType } from './alert-information-helisa-type.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertInformationDataHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(alertType: AlertInformationType, title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertInformationDataHelisaComponent> = this.dialog.open(AlertInformationDataHelisaComponent, {\n      width: '250px',\n      data: { alertType, title, content, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n"]}