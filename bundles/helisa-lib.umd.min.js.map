{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","node_modules/tslib/tslib.es6.js","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","ng://helisa-lib/lib/directives/options-scroll.directive.ts","ng://helisa-lib/lib/directives/tooltip.directive.ts","ng://helisa-lib/lib/directives/external-link.directive.ts","ng://helisa-lib/lib/pipes/external-link.pipe.ts","ng://helisa-lib/lib/components/alert-uncompleted-data-helisa/alert-uncompleted-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-lost-data-helisa/alert-lost-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-delete-data-helisa/alert-delete-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-uncompleted-selected-data-helisa/alert-uncompleted-selected-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-information-not-valid-helisa/alert-information-not-valid-helisa.component.ts","ng://helisa-lib/lib/components/combo-box-helisa/combo-box-helisa.component.ts","ng://helisa-lib/lib/components/alert-authorization-transaction-helisa/alert-authorization-transaction-helisa.component.ts","ng://helisa-lib/lib/components/paging-tree-helisa/paging-tree-helisa.component.ts","ng://helisa-lib/lib/components/alert-confirm-delete-data-helisa/alert-confirm-delete-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-define-residential-physical-structure-helisa/alert-define-residential-physical-structure-helisa.component.ts","ng://helisa-lib/lib/components/alert-define-commercial-structure-helisa/alert-define-commercial-structure-helisa.component.ts","ng://helisa-lib/lib/components/alert-define-parking-structure-helisa/alert-define-parking-structure-helisa.component.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/alert-uncompleted-data-helisa/alert-uncompleted-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-lost-data-helisa/alert-lost-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-delete-data-helisa/alert-delete-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-uncompleted-selected-data-helisa/alert-uncompleted-selected-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-information-not-valid-helisa/alert-information-not-valid-helisa.service.ts","ng://helisa-lib/lib/components/alert-authorization-transaction-helisa/alert-authorization-transaction-helisa.service.ts","ng://helisa-lib/lib/components/alert-confirm-delete-data-helisa/alert-confirm-delete-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-define-residential-physical-structure-helisa/alert-define-residential-physical-structure-helisa.service.ts","ng://helisa-lib/lib/components/alert-define-commercial-structure-helisa/alert-define-commercial-structure-helisa.service.ts","ng://helisa-lib/lib/components/alert-define-parking-structure-helisa/alert-define-parking-structure-helisa.service.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","nameField","nativeElement","focus","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","ViewChild","Output","placeholder","FormControl","Validators","required","requiredMessage","isFocused","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","subMessages","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","_this","content","title","okLabel","undefined","cancelLabel","hasCancel","AlertHelisaType","disableClose","keydownEvents","subscribe","event","code","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","Error","next","setTotal","emitTotal","addPage","emitNextPage","selectIndexRow","config","indexRowSelect","changeVisibilityButton","emitVisibilityButton$","changeVisibilityAllButtons","show","emitVisibilityAllButtons$","changeisCellSelection","emitIsCellSelection$","changeColumnsByTable","emitChangeColumns$","Subject","Array","emitVisibilityButton","asObservable","emitVisibilityAllButtons","emitIsCellSelection","emitChangeColumns","TableHelisaService","total","table","emitChangeSource","obj","page","change","emitVisibleButton$","totalReturn","nextPageReturn","emitVisibleButton","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","viewTables","toArray","index","addRowButton","showButton","forEach","element","isCellSelection","columns","getService","onSelectedDependency","selectedObject","selected","selectObject","onNextPage","nextPage","onTotal","onSort","sort","onDrop","drop","onAddRow","addRow","selectedCell","selectCell","onBookClicked","bookClicked","providers","ViewChildren","showToolTip","hideDelay","showDelay","__values","o","s","Symbol","iterator","m","i","call","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","DEFAULT","IDENTITY","NUMERIC","DOUBLE","InputHelisaComponent","Object","defineProperty","formControl","inputFormReal","registerOnDisabledChange","isDisabled","formControlMask","disable","enable","valueChanges","statusChange","status","getMaskedValue","onFocus","setValidators","validator","disabled","onlySelf","statusChanges","setErrors","key","nameInput","ngAfterViewInit","search","realValue","position","selectionStart","getRealValue","selectionEnd","str","InputHelisaType","maskedStr","j","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","indexOf","realStr","str_1","tslib_1.__values","str_1_1","strItem","match","str_2","str_2_1","haveDot","str_3","str_3_1","$event","Number","select","floatLabel","autocompleteMode","isSearch","blur","NORMAL","URL","USER","CODE_CALL","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","matTable","renderRows","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","columnConfiguration","hasSubtitle","displayedColumns","splice","addBookButton","columnCount","countSubtitle_1","showBookButton_1","subtitle","subtitleTemp","visible","rawData","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","dataSource$","prepareDataSource","idRowSelected","selectRow","rowType","RowType","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","addTotalGroup","MatTableDataSource","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","map","TotalType","getValueTooltip","searchText","text","lastSearch","isUser","scope","EventScope","onScroll","isScrollY","scrollY","scrollTop","scrollX","scrollLeft","scrollHeight","body","dblClickCell","selectedCells","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToRow","classToRow","configRowStylesFromColumn","classRow","isDragged","indexRowStartDrag","rowIndex","getRowIndex","pageY","array","dataBeforeDrag","moveItemInArray","stopPropagation","tableKeydown","currentIndex_1","findIndex","newSelection_1","scrollCount","reverse","Math","abs","preventDefault","filter","dragger","lastIndexRowDrag","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","ColumnType","MatSort","MatTable","read","ElementRef","showTitle","moment","moment_","MONTH_YEAR","STRICT","DateHelisaComponent","locale","dateToVisualize","dateFormControl","formHandler","incomingDate","dateFormat","format","TypeCalendarEnum","openDatePicker","showDatePicker","isClosed","timeout","setTimeout","datePickerShow","onKey","onBlur","clearTimeout","getStartView","typeCalendar","typeCalendarEnum","date","invalidFormat","isValid","isFromInputEvent","toDate","pipe","tap","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","incommingDate","invalidDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","Date","errorMessage","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","expandAllNodes","expand","emitExpandAllNodes","collapseAllNodes","collapse","emitCollapseAllNodes","refreshTree","emitRefreshTree","refreshTreeWithPagination","emitRefreshTreeWithPagination","expandOneNode","node","emitExpandOneNode","collapseOneNode","emitCollapseOneNode","BehaviorSubject","nodeSelected","dataSourceObservable","nodeExpand","nodeCollapse","refreshTreeObservable","refreshTreeWithPaginationObservable","expandOneNodeObservable","collapseOneNodeObservable","TreeHelisaConnect","TreeHelisaComponent","getDescription","parent","treeHelisaService","res","selectedNode","id","treeControl","dataNodes","selectNode","tree","expandAll","collapseAll","onRedirect","isSingleClick","currentNode","offsetHeight","onEdit","clickEditNode","onAdd","clickAddNode","onDelete","clickDeleteNode","onEdited","_.remove","trim","edited","isEditable","added","onDblClick","dobleClick","onKeyDown","keypressDelete","keypressInsert","moveDownIntoTree","moveUpIntoTree","indexOfParent","hasChild","t","datasourceData","treeHelisaConnect","rangeScrolled","isSelected","fillParent","reorderByOrderIndex","upSelectNode","getNodeById","expandAllParents","_b","_c","childrenNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","checkedOptionNode","uncheckedOptionNode","selectedOptions","has","reloadSelectedOptions","get","options","option","set","queue","curr","shift","apply","_.orderBy","x","orderIndex","console","log","Router","HostListener","router","elementRef","Map","removed","collapseParent","NestedTreeControl","MatTreeNestedDataSource","AutocompleteHelisaService","setDataSource","AutocompleteHelisaComponent","onScrollObservable","debounceTime","throttleTime","autocompleteHelisaService","filteredOptions","of","myControl","startWith","_checkRegex","_filter","displayFn","displayText","replace","filterValue_1","toLowerCase","onSelected","selectedValue","selectedValueEmmiter","getNextPage","isLoading","OptionsScrollDirective","removeScrollEventListener","autoComplete","panel","removeEventListener","ngOnDestroy","destroy","complete","st","pageYOffset","lastScrollTop","thresholdPercent","optionsScroll","scrollEvent","clientHeight","Directive","MatAutocomplete","opened","addEventListener","bind","takeUntil","closed","HelTooltipDirective","mouseover","currentContent","elemRef","innerText","toUpperCase","toString","isEllipsisActive","tooltip","offsetWidth","scrollWidth","MatTooltip","ExternalLinkDirective","ngOnChanges","hrefAttr","href","isLinkExternal","relAttr","targetAttr","isPlatformBrowser","platformId","includes","location","hostname","PLATFORM_ID","HostBinding","ExternalLinkPipe","transform","_i","Pipe","AlertUncompletedDataHelisaComponent","AlertLostDataHelisaComponent","AlertDeleteDataHelisaComponent","decorators","AlertUncompletedSelectedDataHelisaComponent","AlertInformationNotValidHelisaComponent","CLOSED","SELECT","INSERT","ComboBoxHelisaComponent","haveNextPage","listable","getData","pageSize","ComboBoxHelisaState","enabled","state","selectItem","selectedItem","selectEmitter","changeToInsert","insert","editable","AlertAuthorizationTransactionHelisaComponent","COLLAPSE","EXPAND","PagingTreeHelisaComponent","paramMode","treeMode","reset","paramService","service","items","loadData","searchNode","visibleObjects","allNode","sortItems","createNode","loadNextVisibleObjects","afterLoadData","lAdy","stack","idParent","getIdParentField","unshift","response","last","pop","getIdField","parentInformation","getNodeInformationById","nodeInformation","object","haveChildren","level","expanded","PagingTreeInitialMode","preorder","size","getNodeInformation","getLevelClass","nodeFrom","visibleLimit","visibleSize","collapseNode","expandNode","showNextPage","removeItem","removeById","idParent_1","Set","add","beginIndex","itemSearch","lastIndex","deletedItems","parentHaveChildren_1","deletedItem","delete","searchItem","addItem","indexParent","reSort","updateItem","nodeA","nodeB","ContentChild","AlertConfirmDeleteDataHelisaComponent","AlertDefineResidentialPhysicalStructureHelisaComponent","AlertDefineCommercialStructureHelisaComponent","AlertDefineParkingStructureHelisaComponent","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","AlertUncompletedDataHelisaService","AlertLostDataHelisaService","AlertDeleteDataHelisaService","AlertUncompletedSelectedDataHelisaService","AlertInformationNotValidHelisaService","AlertAuthorizationTransactionHelisaService","AlertConfirmDeleteDataHelisaService","AlertDefineResidentialPhysicalStructureHelisaService","AlertDefineCommercialStructureHelisaService","AlertDefineParkingStructureHelisaService","DONE","INFO"],"mappings":"2wEAAA,IAAAA,GAuBEA,EAAAC,UAAAC,SAAA,WACqB,KAAfC,KAAKC,OACPD,KAAKE,iBAAiBC,SAASH,KAAKC,OAEtCD,KAAKI,UAAUC,cAAcC,SAI/BT,EAAAC,UAAAS,OAAA,WACMP,KAAKE,iBAAiBM,OACxBR,KAAKS,KAAKC,KAAKV,KAAKE,iBAAiBD,QAIzCJ,EAAAC,UAAAa,SAAA,WACEX,KAAKY,OAAOF,4BAnCfG,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,wBACVC,SAAA,yfAKCC,EAAAA,gCACAA,EAAAA,+BACAA,EAAAA,qBACAA,EAAAA,yBACAA,EAAAA,yBACAC,EAAAA,UAASJ,KAAA,CAAC,2BAEVK,EAAAA,uBACAA,EAAAA,UAuBHtB,GApBE,SAAAA,IAXSG,KAAAoB,YAAsB,GACtBpB,KAAAE,iBAAgC,IAAImB,EAAAA,YAAY,GAAIC,EAAAA,WAAWC,UAC/DvB,KAAAwB,gBAA0B,wBAC1BxB,KAAAC,MAAgB,GAChBD,KAAAyB,WAAqB,EAGpBzB,KAAAS,KAA6B,IAAIiB,EAAAA,aACjC1B,KAAAY,OAA6B,IAAIc,EAAAA,aCb7C,IAAAC,GASEA,EAAA7B,UAAAC,SAAA,iCATDc,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,oYAKaY,EAAAA,OAAMd,KAAA,CAACe,EAAAA,yBAItBF,GAJE,SAAAA,EAA+CG,GAAA9B,KAAA8B,KAAAA,ECZjD,IAAAC,GAcEA,EAAAjC,UAAAkC,UAAA,SAAUC,EAAiBC,EAAiBC,GAC1CA,EAAcA,GAA4B,GAC1CnC,KAAKoC,SAASC,kBAAkBV,EAAsB,CACpDG,KAAM,CAACI,QAAOA,EAAED,KAAIA,EAAEE,YAAWA,GACjCG,SAAmC,IAAzBtC,KAAKuC,yCAbpBC,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,oDALLC,EAAAA,8IAWP,SAAAX,EAAoBK,GAAApC,KAAAoC,SAAAA,EAFpBpC,KAAAuC,kBAA4B,SCT1BI,MAAQ,QACRC,aAAe,gBCFnBC,GAgDEA,EAAA/C,UAAAC,SAAA,aAGA8C,EAAA/C,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,6BAxClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,0XAbOgC,EAAAA,gDA0BJpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBA2BZJ,GA7BE,SAAAA,EACSC,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QACpBnD,KAAKoD,MAAQtB,EAAKsB,MAClBpD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,WAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,YAErBvD,KAAKwD,UAAY1B,EAAKG,OAASwB,EAAgBb,aAC/CE,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,cC3ClC,IAAAoD,GAeEA,EAAAjE,UAAAkE,WAAA,SAAW/B,EAAuBmB,EAAeD,EAAiBE,EAAkBE,GAMlF,OALsDvD,KAAKiE,OAAOC,KAAKrB,EAAsB,CAC3FsB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAElB,KAAIA,EAAEoB,QAAOA,EAAEE,YAAWA,KAGnCa,mCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,oDARL4B,EAAAA,0IAYP,SAAAN,EAAmBE,GAAAjE,KAAAiE,OAAAA,ECOrB,IAAAK,GA2BEA,EAAAxE,UAAAyE,UAAA,WACE,OAAOvE,KAAKwE,QASdF,EAAAxE,UAAA2E,iBAAA,SAAiBC,EAA6BC,GAQ5C,QAR4C,IAAAA,IAAAA,GAAA,GACxCA,IACF3E,KAAK4E,WAAa5E,KAAK4E,WAAWC,MAAM,EAAIH,EAAYI,MAAYJ,EAAYI,MAAhB,MAE7DJ,EAAYI,OAASJ,EAAYI,OAAS9E,KAAK4E,WAAWG,UAC7DL,EAAYI,MAAQ9E,KAAK4E,WAAWG,SAEtC/E,KAAK4E,WAAWF,EAAYI,OAASJ,GACrBM,UAEd,IADAN,EAAYO,WAAa,QACrBP,EAAYQ,MACd,MAAM,IAAIC,MAAM,2BAEb,CACL,GAA+B,OAA3BT,EAAYO,WACd,MAAM,IAAIE,MAAM,4BAElBT,EAAYQ,MAAQR,EAAYO,WAAWF,OAE7C/E,KAAKwE,OAAOY,KAAKpF,KAAK4E,aAOxBN,EAAAxE,UAAAuF,SAAA,SAASxB,GACP7D,KAAKsF,UAAUF,KAAKvB,IAOtBS,EAAAxE,UAAAyF,QAAA,SAAQ1B,GACN7D,KAAKwF,aAAaJ,KAAKvB,IAGzBS,EAAAxE,UAAA2F,eAAA,SAAeC,GACT1F,KAAK4E,WAAWc,EAAOZ,SACzB9E,KAAK4E,WAAWc,EAAOZ,OAAOa,eAAiBD,EAAOC,eACtD3F,KAAKwE,OAAOY,KAAKpF,KAAK4E,cAS1BN,EAAAxE,UAAA8F,uBAAA,SAAuB/B,GACrB7D,KAAK6F,sBAAsBT,KAAKvB,IAQlCS,EAAAxE,UAAAgG,2BAAA,SAA2BC,GACzB/F,KAAKgG,0BAA0BZ,KAAKW,IAOtCzB,EAAAxE,UAAAmG,sBAAA,SAAsBpC,GACpB7D,KAAKkG,qBAAqBd,KAAKvB,IAOjCS,EAAAxE,UAAAqG,qBAAA,SAAsBtC,GACpB7D,KAAKoG,mBAAmBhB,KAAKvB,wBAjHhCrB,EAAAA,mDAoHD8B,GA9FE,SAAAA,IAlBAtE,KAAAwE,OAAoC,IAAI6B,EAAAA,QACxCrG,KAAA4E,WAAoC,IAAI0B,MAEhCtG,KAAA6F,sBAA2D,IAAIQ,EAAAA,QACvErG,KAAAuG,qBAA6DvG,KAAK6F,sBAAsBW,eAEhFxG,KAAAgG,0BAA8C,IAAIK,EAAAA,QAC1DrG,KAAAyG,yBAAgDzG,KAAKgG,0BAA0BQ,eAEvExG,KAAAkG,qBAA0D,IAAIG,EAAAA,QACtErG,KAAA0G,oBAA4D1G,KAAKkG,qBAAqBM,eAE9ExG,KAAAoG,mBAA+D,IAAIC,EAAAA,QAC3ErG,KAAA2G,kBAAiE3G,KAAKoG,mBAAmBI,eAEzFxG,KAAAsF,UAAwD,IAAIe,EAAAA,QAC5DrG,KAAAwF,aAA8C,IAAIa,EAAAA,QC9BpD,IAAAO,GAiBEA,EAAA9G,UAAAuF,SAAA,SAASwB,EAAyBC,GAChC9G,KAAK+G,iBAAiB3B,KAAK,CAAC4B,IAAKH,EAAOC,MAAKA,KAG/CF,EAAA9G,UAAAyF,QAAA,SAAQ0B,EAAWH,GACjB9G,KAAKwF,aAAaJ,KAAK,CAAC4B,IAAKC,EAAMH,MAAKA,KAO1CF,EAAA9G,UAAA8F,uBAAA,SAAuBsB,GACrBlH,KAAKmH,mBAAmB/B,KAAK8B,wBA9BhC1E,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,iHADd,SAAAmE,IAKU5G,KAAA+G,iBAAsE,IAAIV,EAAAA,QAC1ErG,KAAAwF,aAAqD,IAAIa,EAAAA,QAEjErG,KAAAoH,YAAoEpH,KAAK+G,iBAAiBP,eAC1FxG,KAAAqH,eAA0DrH,KAAKwF,aAAagB,eAEpExG,KAAAmH,mBAAuC,IAAId,EAAAA,QAInDrG,KAAAsH,kBAAyCtH,KAAKmH,mBAAmBX,eCZnE,IAAAe,GAwCEA,EAAAzH,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACEA,KAAKuE,YACLvE,KAAKwH,6BAA6BhC,aAAa5B,UAAS,SACrDC,GACCX,EAAKuE,aAAalC,QAAQ1B,EAAM/B,KAAMoB,EAAKwE,WAAWC,UAAU9D,EAAM+D,UAI1E5H,KAAKwH,6BAA6BlC,UAAU1B,UAAS,SAClDC,GACCX,EAAKuE,aAAapC,SAASxB,EAAM/B,KAAMoB,EAAKwE,WAAW7D,EAAM+D,UAKjE5H,KAAKwH,6BAA6BjB,qBAAqB3C,UAAS,SAC7D9B,GACC,GAAMA,GAAQA,EAAK8F,QAAUtE,UAAW,KAChCwD,EAAwB5D,EAAKsB,OAAO1C,EAAK8F,OACzCd,IACJA,EAAMe,aAAaC,WAAahG,EAAKA,SAO7C9B,KAAKwH,6BAA6Bf,yBAAyB7C,UAAS,SACjE9B,GACKA,IAASwB,WAAqB,MAARxB,GACxBoB,EAAKsB,OAAOuD,QAAO,SAAEC,GACbA,EAAQH,eACZG,EAAQH,aAAaC,WAAahG,OAQ5C9B,KAAKwH,6BAA6Bd,oBAAoB9C,UAAS,SAC5D9B,GACC,GAAMA,GAAQA,EAAK8F,QAAUtE,UAAW,KAChCwD,EAAwB5D,EAAKsB,OAAO1C,EAAK8F,OAC3Cd,IACFA,EAAMmB,gBAAkBnG,EAAKA,SAMrC9B,KAAKwH,6BAA6Bb,kBAAkB/C,UAAS,SAC1D9B,GACC,GAAMA,GAAQA,EAAK8F,QAAUtE,UAAW,KAChCwD,EAAwB5D,EAAKsB,OAAO1C,EAAK8F,OAC3Cd,IACFA,EAAMoB,QAAUpG,EAAKA,UAS/ByF,EAAAzH,UAAAqI,WAAA,WACE,OAAOnI,KAAKwH,8BAMdD,EAAAzH,UAAAyE,UAAA,WAAA,IAAArB,EAAAlD,KACEA,KAAKwH,6BAA6BjD,YAC/BX,UAAS,SAAEY,GACVtB,EAAKsB,OAASA,KAUpB+C,EAAAzH,UAAAsI,qBAAA,SAAqBR,EAAe/D,GAClC7D,KAAKqI,eAAiB,CAAET,MAAKA,EAAE9F,KAAM+B,GACrC7D,KAAKsI,SAAS5H,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,EAAM5D,QACxCD,KAAKuI,aAAa7H,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAQxC0D,EAAAzH,UAAA0I,WAAA,SAAWZ,EAAe/D,GACxB7D,KAAKyI,SAAS/H,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAQpC0D,EAAAzH,UAAA4I,QAAA,SAAQd,EAAe/D,GACrB7D,KAAK6G,MAAMnG,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAQjC0D,EAAAzH,UAAA6I,OAAA,SAAOf,EAAe/D,GACpB7D,KAAK4I,KAAKlI,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAQhC0D,EAAAzH,UAAA+I,OAAA,SAAOjB,EAAe/D,GACpB7D,KAAK8I,KAAKpI,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAOhC0D,EAAAzH,UAAAiJ,SAAA,SAASnB,GACP5H,KAAKgJ,OAAOtI,KAAKkH,IAGnBL,EAAAzH,UAAAmJ,aAAA,SAAarB,EAAe/D,GACtB7D,KAAKwE,OAAOoD,GAAOK,iBACrBjI,KAAKkJ,WAAWxI,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAIxC0D,EAAAzH,UAAAqJ,cAAA,SAAcvB,EAAe/D,GAC3B7D,KAAKoJ,YAAY1I,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,yBAtLxChD,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uBACVC,SAAA,u7BAEAqI,UAAW,CAAC/E,4DAhBLA,SAEAsC,yCAmBN0C,EAAAA,aAAYxI,KAAA,CAAC,mCACbG,EAAAA,wBAKAE,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,uBACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,0BAOAF,EAAAA,yBAKAA,EAAAA,SAqJHsG,GAlJE,SAAAA,EAAoBC,EAAuEC,GAAvEzH,KAAAwH,6BAAAA,EAAuExH,KAAAyH,aAAAA,EA9B3FzH,KAAAwE,OAAgC,GAEvBxE,KAAAuJ,aAAuB,EAKtBvJ,KAAAsI,SAA6C,IAAI5G,EAAAA,aACjD1B,KAAAuI,aAAsD,IAAI7G,EAAAA,aAC1D1B,KAAAyI,SAAkD,IAAI/G,EAAAA,aACtD1B,KAAA6G,MAA+C,IAAInF,EAAAA,aACnD1B,KAAA4I,KAA8C,IAAIlH,EAAAA,aAClD1B,KAAA8I,KAA8C,IAAIpH,EAAAA,aAClD1B,KAAAgJ,OAA+B,IAAItH,EAAAA,aACnC1B,KAAAkJ,WAAoD,IAAIxH,EAAAA,aACxD1B,KAAAoJ,YAAqD,IAAI1H,EAAAA,aACnE1B,KAAAqI,eAAsC,KAM7BrI,KAAAwJ,UAAoB,IAKpBxJ,KAAAyJ,UAAoB,IClC/B,SA+FgBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBA,OAAOC,SAAUC,EAAIH,GAAKD,EAAEC,GAAII,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAEE,KAAKN,GACrB,GAAIA,GAAyB,iBAAbA,EAAE5E,OAAqB,MAAO,CAC1CK,KAAM,WAEF,OADIuE,GAAKK,GAAKL,EAAE5E,SAAQ4E,OAAI,GACrB,CAAE1J,MAAO0J,GAAKA,EAAEK,KAAMvJ,MAAOkJ,KAG5C,MAAM,IAAIO,UAAUN,EAAI,0BAA4B,mCAGxD,SAAgBO,EAAOR,EAAGS,GACtB,IAAIL,EAAsB,mBAAXF,QAAyBF,EAAEE,OAAOC,UACjD,IAAKC,EAAG,OAAOJ,EACf,IAAmBU,EAAYC,EAA3BN,EAAID,EAAEE,KAAKN,GAAOY,EAAK,GAC3B,IACI,WAAc,IAANH,GAAsB,EAANA,QAAcC,EAAIL,EAAE5E,QAAQ3E,MAAM8J,EAAGC,KAAKH,EAAEpK,OAExE,MAAOwK,GAASH,EAAI,CAAEG,MAAOA,WAEzB,IACQJ,IAAMA,EAAE5J,OAASsJ,EAAIC,EAAU,YAAID,EAAEE,KAAKD,WAExC,GAAIM,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGX,SAAgBG,IACZ,IAAK,IAAIH,EAAK,GAAIP,EAAI,EAAGA,EAAIW,UAAU5F,OAAQiF,IAC3CO,EAAKA,EAAGK,OAAOT,EAAOQ,UAAUX,KACpC,OAAOO,SCzITM,QAAA,EAASC,SAAA,EAAUC,QAAA,EAASC,OAAA,+FAG9B,IAAAC,GA+CEC,OAAAC,eACIF,EAAAnL,UAAA,mBAAgB,KADpB,SACqBsL,GADrB,IAAAlI,EAAAlD,KAEEA,KAAKqL,cAAgBD,EACrBpL,KAAKqL,cAAcC,yBAAwB,SAAGC,GACzCA,EACDrI,EAAKsI,gBAAgBC,UAErBvI,EAAKsI,gBAAgBE,WAEzB1L,KAAKqL,cAAcM,aAAa/H,UAAS,SAAE9B,GACzCoB,EAAK0I,aAAa1I,EAAKmI,cAAcQ,QACjC3I,EAAK4I,eAAehK,KAAUoB,EAAKsI,gBAAgBvL,QACrDiD,EAAKgE,OAAOpF,GACRoB,EAAKzB,WACPyB,EAAK6I,QAAQ,SAInB/L,KAAKwL,gBAAgBQ,cAAchM,KAAKqL,cAAcY,WACtDjM,KAAKkH,OAAOlH,KAAKqL,cAAcpL,OAE3BmL,EAAYc,UACdlM,KAAKwL,gBAAgBC,QAAQ,CAAEU,UAAU,IAE3CnM,KAAKqL,cAAce,cAAcxI,UAAS,SACvC9B,GACCoB,EAAK0I,aAAa9J,GACdoB,EAAKzB,WACPyB,EAAK6I,QAAQ,yCAObd,EAAAnL,UAAA8L,aAAR,SAAqB9J,GACN,YAATA,EACF9B,KAAKwL,gBAAgBa,UAAU,CAAEC,IAAK,yBAEtCtM,KAAKwL,gBAAgBa,UAAU,OAInCpB,EAAAnL,UAAAC,SAAA,WACMC,KAAKyB,WACPzB,KAAKuM,UAAUlM,cAAcC,SAIjC2K,EAAAnL,UAAA0M,gBAAA,aAcAvB,EAAAnL,UAAA2M,OAAA,WACEzM,KAAKG,SAASO,KAAKV,KAAK0M,YAG1BzB,EAAAnL,UAAAoH,OAAA,SAAOrD,GACQ,MAATA,IACFA,GAAgB,QAEd8I,EAAmB3M,KAAKuM,UAAUlM,cAAcuM,eAC9C7H,EAAiBlB,EAAQA,EAAMkB,OAAS,EAC9C/E,KAAK0M,UAAY1M,KAAK6M,aAAahJ,GAC/B7D,KAAK8L,eAAe9L,KAAK0M,aAAe1M,KAAKwL,gBAAgBvL,QAC/DD,KAAKwL,gBAAgBrL,SAASH,KAAK8L,eAAe9L,KAAK0M,YACvDC,GAAY3M,KAAKuM,UAAUlM,cAAcJ,MAAM8E,OAASA,EACxD/E,KAAKuM,UAAUlM,cAAcuM,eAAiBD,EAC9C3M,KAAKuM,UAAUlM,cAAcyM,aAAeH,GAE9C3M,KAAKqL,cAAclL,SAASH,KAAK0M,YAG3BzB,EAAAnL,UAAAgM,eAAR,SAAuBiB,GACrB,GAAW,MAAPA,EACF,OAAOA,EAGT,GADAA,GAAY,GACR/M,KAAKiC,OAAS+K,EAAgBnC,QAChC,OAAOkC,MAELE,EAAoB,GACxB,GAAIjN,KAAKiC,OAAS+K,EAAgBlC,SAChC,IAAK,IAAId,EAAY+C,EAAIhI,OAAS,EAAGmI,EAAY,EAAQ,GAALlD,EAAQA,IAAKkD,IACvD,EAAJA,GAASA,EAAI,GAAM,IACrBD,EAAYjN,KAAKmN,kBAAoBF,GAEvCA,EAAYF,EAAI/C,GAAKiD,EAGzB,GAAIjN,KAAKiC,OAAS+K,EAAgBjC,QAChC,IAASf,EAAY+C,EAAIhI,OAAS,EAAGmI,EAAY,EAAQ,GAALlD,EAAQA,IAAKkD,IACvD,EAAJA,GAASA,EAAI,GAAM,IACrBD,EAAYjN,KAAKoN,mBAAqBH,GAExCA,EAAYF,EAAI/C,GAAKiD,EAGzB,GAAIjN,KAAKiC,OAAS+K,EAAgBhC,OAAQ,CACxC,GAA2C,GAAvC+B,EAAIM,QAAQrN,KAAKmN,mBACnB,IAASnD,EAAY+C,EAAIM,QAAQrN,KAAKmN,mBAAoBnD,EAAI+C,EAAIhI,OAAQiF,IACxEiD,GAAaF,EAAI/C,GAGrB,IAASA,GAAoD,GAAvC+C,EAAIM,QAAQrN,KAAKmN,mBAA0BJ,EAAIM,QAAQrN,KAAKmN,mBAAqBJ,EAAIhI,QAAU,EACnHmI,EAAY,EAAQ,GAALlD,EAAQA,IAAKkD,IAEpB,EAAJA,GAASA,EAAI,GAAM,IACrBD,EAAYjN,KAAKoN,mBAAqBH,GAExCA,EAAYF,EAAI/C,GAAKiD,EAGzB,OAAOA,GAGDhC,EAAAnL,UAAA+M,aAAR,SAAqBE,mBACnB,GAAW,MAAPA,EACF,OAAOA,EAETA,GAAY,OACRO,EAAkB,GACtB,GAAItN,KAAKiC,OAAS+K,EAAgBnC,QAChC,OAAOkC,EAET,GAAI/M,KAAKiC,OAAS+K,EAAgBlC,aAChC,IAAsB,IAAAyC,EAAAC,EAAAT,GAAGU,EAAAF,EAAAnI,QAAAqI,EAAAhN,KAAAgN,EAAAF,EAAAnI,QAAdsI,EAAOD,EAAAxN,OACJ0N,MAAM,WAChBL,GAAWI,uGAIjB,GAAI1N,KAAKiC,OAAS+K,EAAgBjC,YAChC,IAAsB,IAAA6C,EAAAJ,EAAAT,GAAGc,EAAAD,EAAAxI,QAAAyI,EAAApN,KAAAoN,EAAAD,EAAAxI,QAAdsI,EAAOG,EAAA5N,OACJ0N,MAAM,WAChBL,GAAWI,uGAIjB,GAAI1N,KAAKiC,OAAS+K,EAAgBhC,OAAQ,KACpC8C,GAAmB,MAEvB,IAAsB,IAAAC,EAAAP,EAAAT,GAAGiB,EAAAD,EAAA3I,QAAA4I,EAAAvN,KAAAuN,EAAAD,EAAA3I,OAAE,CAAtB,IAAMsI,IAAAA,EAAOM,EAAA/N,OACJ0N,MAAM,UAAcD,IAAY1N,KAAKmN,oBAAuBW,KACtER,GAAWI,GAEbI,EAAUA,GAAYJ,IAAY1N,KAAKmN,wHAG3C,OAAOG,GAGTrC,EAAAnL,UAAAiM,QAAA,SAAQkC,GACDjO,KAAKiC,OAAS+K,EAAgBjC,SAAW/K,KAAKiC,OAAS+K,EAAgBhC,QACR,IAAlEkD,OAAOlO,KAAK6M,aAAa7M,KAAKuM,UAAUlM,cAAcJ,SACtDD,KAAKuM,UAAUlM,cAAc8N,8BApNlCtN,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,8rBAQCC,EAAAA,0BACAA,EAAAA,gCAMAA,EAAAA,wBAGAA,EAAAA,yBAEAA,EAAAA,wBAKAA,EAAAA,oBACAA,EAAAA,wBAKAE,EAAAA,qBAGAA,EAAAA,0BAMAD,EAAAA,UAASJ,KAAA,CAAC,uCAKVG,EAAAA,SAwKHgK,GA3KE,SAAAA,IArCiBjL,KAAAmN,kBAA4B,IAC5BnN,KAAAoN,mBAA6B,IAErCpN,KAAAoB,YAAsB,GACtBpB,KAAAoO,WAA0C,QAM1CpO,KAAAqO,kBAA4B,EAG5BrO,KAAAsO,UAAoB,EAEpBtO,KAAAyB,WAAqB,EAKrBzB,KAAAkM,UAAoB,EACpBlM,KAAAiC,KAAwB+K,EAAgBnC,QAKvC7K,KAAAG,SAAiC,IAAIuB,EAAAA,aAGrC1B,KAAAuO,KAA0B,IAAI7M,EAAAA,aAExC1B,KAAAwL,gBAA+B,IAAInK,EAAAA,YAAY,IACvCrB,KAAA0M,UAAoB,GACpB1M,KAAAqL,cAA6B,IAAIhK,EAAAA,YAAY,WC3CrDmN,OAAA,EAAQC,IAAA,8CAyBRC,KAAA,EAAMC,UAAA,uDAINC,IAAA,EAAKC,QAAA,EAASC,MAAA,0EAIdC,KAAA,EAAMC,QAAA,EAASC,MAAA,4EAwCfC,OAAA,EAAQC,MAAA,+CAqBV,QAEEC,GAAAtP,UAAAuP,SAAA,SAASrI,EAAQsI,GACf,OAAOA,EAAOC,KAAKC,MAAM,KAAKC,OAAM,SAAE9F,EAAM+F,GAAkB,OAAA/F,GAAKA,EAAE+F,IAAQ1I,IAEjFoI,IALA,SAAAA,MC9FA,QAWSO,GAAA7P,UAAA8P,QAAP,SAAeC,EAAmCpD,GAChD,MAAO,IAGTkD,GAAA7P,UAAA2I,SAAA,WACE,OAAOzI,KAAKiH,QAEhB0I,IAbE,SAAAA,KACE3P,KAAKiH,KAAO,EACZjH,KAAK8P,YAAa,EAClB9P,KAAK+P,QAAS,UCuBhBC,YAAA,EAAaC,aAAA,EAAcC,IAAA,wFAK7B,IAAAC,IA4EEA,GAAArQ,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACEA,KAAKyH,aAAaJ,eAAezD,UAAS,SACvC9B,GACMA,EAAKgF,OAAShF,EAAKgF,QAAU5D,GAChCA,EAAKkN,YAAYtO,EAAKkF,OAI5BhH,KAAKyH,aAAaL,YAAYxD,UAAS,SAAEyM,GACnCA,GACFnN,EAAK2M,aAAa9H,QAAO,SAAEuH,EAAsBgB,GAC3ChB,IAAWe,EAAKrJ,IAAIsI,SACtBpM,EAAKqN,UAAUD,GAAOpN,EAAKsN,cAAclB,EAAQ,CAAEmB,IAAKJ,EAAKrJ,IAAI/G,MAAOiF,MAAOhC,EAAKgC,aAK5FlF,KAAK0Q,QAAQC,WAAW/M,UAAS,SAC9BC,OACOyL,EAAuBpM,EAAK2M,aAAae,KAAI,SAAEC,GAAoB,OAAAA,EAAEtB,OAAS1L,EAAMiN,SAC1FxB,EAAOyB,cAAgBlN,EAAMmN,UAC7B9N,EAAK0F,KAAKlI,KAAK,CAAE4O,OAAMA,EAAE2B,qBAAsB/N,EAAK2M,aAAc5N,KAAMiP,GAA8BnC,SAI1G/O,KAAKyH,aAAaH,kBAAkB1D,UAAS,SAC1C9B,GACKA,IAASwB,WAAqB,MAARxB,IACxBoB,EAAK2E,aAAaC,WAAahG,MAOvCqO,GAAArQ,UAAA0M,gBAAA,WACMxM,KAAKiI,iBACPjI,KAAKmR,SAASC,cAIlBlG,OAAAC,eACIgF,GAAArQ,UAAA,WAAQ,KADZ,SACauR,GACXrR,KAAKiC,KAAOoP,EAAIC,GAAgBpC,OAASoC,GAAgBnC,MACzDnP,KAAKuR,4BAA8B,IAAI5B,GACnC3P,KAAKiC,OAASqP,GAAgBpC,OAChClP,KAAKwR,aAELxR,KAAKuR,4BAA4BtK,wCAIrCiE,OAAAC,eACIgF,GAAArQ,UAAA,sBAAmB,KADvB,SACwB2R,GADxB,IAAAvO,EAAAlD,KAME,GAJAA,KAAK0R,aAAc,EACnB1R,KAAK6P,aAAe4B,EACpBzR,KAAK2R,iBAAiBC,OAAO,EAAG5R,KAAK2R,iBAAiB5M,QAElD0M,EAAqB,CACvB,GAAIzR,KAAK6R,cAAe,KAChBC,EAAsBL,EAAoB1M,OAC5CgN,EAAwB,EACxBC,GAA0B,EAC9BP,EAAoB1J,QAAO,SAAEuH,GACrBA,EAAO2C,WACXF,GAAgC,GAE5BC,GAAoC,eAAhB1C,EAAOC,OAC/ByC,GAAiB,SAGfE,EAAwBJ,IAAgBC,EACzCC,GACHP,EAAoBjH,KAAK,CACvB+E,KAAM,aACNnM,MAAO,GACP6O,SAAUC,EAAe,GAAK5O,UAC9B6O,SAAS,IAKfV,EAAoB1J,QAAO,SAAEuH,GACvBA,EAAO6C,SACTjP,EAAKyO,iBAAiBnH,KAAK8E,EAAOC,MAE/BrM,EAAKwO,cACRxO,EAAKwO,YAAcpC,EAAO2C,WAAa3O,aAGvCtD,KAAKoS,UACPpS,KAAKiF,WAAajF,KAAKoS,SAG3BpS,KAAKqS,0BAA0BT,OAAO,EAAG5R,KAAKqS,0BAA0BtN,QACxE/E,KAAKsS,6BAA6BV,OAAO,EAAG5R,KAAKsS,6BAA6BvN,QAC9E/E,KAAKuS,2BAA2BX,OAAO,EAAG5R,KAAKuS,2BAA2BxN,QAC1E/E,KAAKwS,sBAAsBzK,QAAO,SAAE0K,GAAgB,OAAAvP,EAAKmP,0BAA0B7H,KAAKiI,KACxFzS,KAAK0S,oBAAoB3K,QAAO,SAAE0K,GAAgB,OAAAvP,EAAKoP,6BAA6B9H,KAAKiI,KACzFzS,KAAK2S,yBAAyB5K,QAAO,SAAE0K,GAAgB,OAAAvP,EAAKqP,2BAA2B/H,KAAKiI,sCAK9FvH,OAAAC,eACIgF,GAAArQ,UAAA,aAAU,KAMd,WACE,OAAOE,KAAK4S,iBARd,SACe3N,GACbjF,KAAK4S,YAAc3N,EACnBjF,KAAKoS,QAAUnN,EACXjF,KAAKoS,SAAWpS,KAAK6S,qDAO3B3H,OAAAC,eACIgF,GAAArQ,UAAA,mBAAgB,KADpB,SACqBgT,GACnB9S,KAAK2F,eAAiBmN,EAClB9S,KAAKoS,SAAWpS,KAAKoS,QAAQrN,UAC1B+N,GAAiB9S,KAAKoS,QAAQrN,QAAU+N,EAAgB,KAC3D9S,KAAK2F,eAAiB,GAExB3F,KAAK+S,UAAU,CAAEjR,KAAM9B,KAAKoS,QAAQpS,KAAK2F,gBAAiBqN,QAASC,GAAQ/C,MAAO,qCAI9EC,GAAArQ,UAAA+S,kBAAR,WAAA,IAGMK,EAHNhQ,EAAAlD,KACQmT,EAAgC7M,QAClC8M,GAAqB,EAEzBpT,KAAK6P,aAAa9H,QAAO,SAAEuH,GACrBA,EAAO+D,YAAc/P,YAAcJ,EAAKjB,OAASqP,GAAgBnC,OAASjM,EAAKqO,4BAA4BtK,MAAQ,KACrH/D,EAAKqN,UAAY,IAAIjK,MAAcpD,EAAK2M,aAAa9K,QACrD7B,EAAKoQ,YAAa,EAClBpQ,EAAK2D,MAAMnG,KAAK,CAAE4O,OAAMA,EAAE2B,qBAAsB/N,EAAK2M,aAAc5N,KAAMiP,GAA8BjC,SAEzG/L,EAAKqQ,WAAarQ,EAAKqQ,YAAcjE,EAAOkE,WAC5CJ,EAAYA,GAAa9D,EAAOmE,YAE9BL,IACFpT,KAAKoS,QAAUpS,KAAKoS,QAAQxJ,KAAI,SAAE8K,EAAMC,OAClCC,EAAiB,EAMrB,OALA1Q,EAAK2M,aAAa9H,QAAO,SAAEuH,GACV,IAAXsE,IACFA,EAAS1Q,EAAK2Q,QAAQH,EAAGC,MAGtBC,KAGX5T,KAAKoS,QAAQrK,QAAO,SAAE+L,IAChBV,GAAoC,IAAtBD,EAAWpO,QAAmF,IAAnE7B,EAAK2Q,QAAQV,EAAWA,EAAWpO,OAAS,GAAO,KAAO+O,KACjGZ,GACFC,EAAW3I,KAAK,CAAE1I,KAAMoR,EAAaF,QAASC,GAAQhD,eAExDkD,EAAW3I,KAAK,CAAE1I,KAAMgS,EAAKd,QAASC,GAAQjD,cAC9CkD,EAAc,IAAI5M,MAAkBpD,EAAK2M,aAAa9K,SAEpDqO,GAAalQ,EAAK6Q,cAAcb,EAAaY,GACjDX,EAAW3I,KAAK,CAAE1I,KAAMgS,EAAKd,QAASC,GAAQ/C,QAEhDlQ,KAAK8B,KAAO,IAAIkS,EAAAA,mBAA+Bb,GAC3CnT,KAAKoS,SAAWpS,KAAKoS,QAAQrN,QAAU/E,KAAK2F,iBAAmB3F,KAAKqI,kBAClErI,KAAK2F,gBAAkB3F,KAAKoS,QAAQrN,QAAU/E,KAAK2F,eAAiB,KACtE3F,KAAK2F,eAAiB,GAExB3F,KAAK+S,UAAU,CAAEjR,KAAM9B,KAAKoS,QAAQpS,KAAK2F,gBAAiBqN,QAASC,GAAQ/C,MAAO,KAI9EC,GAAArQ,UAAAiU,cAAR,SAAsBE,EAA6BH,GACjD9T,KAAK6P,aAAa9H,QAAO,SAAEuH,EAAsB1H,GAC3C0H,EAAO+D,YAAc/P,YACnB2Q,EAASrM,KAAWtE,UACtB2Q,EAASrM,GAAS,CAAE6I,KAAM,IAAIrB,IAAmBC,SAASyE,EAAKxE,GAAoBpK,MAAO,IAE1F+O,EAASrM,GAAO6I,MAAQ,IAAIrB,IAAmBC,SAASyE,EAAKxE,GAC7D2E,EAASrM,GAAO1C,aAMhBiL,GAAArQ,UAAA+T,QAAR,SAAgBH,EAAMC,OAChBO,EAAa,EAUjB,OATAlU,KAAK6P,aAAa9H,QAAO,SAAEuH,GACd,IAAP4E,GAAY5E,EAAOmE,aAChB,IAAIrE,IAAmBC,SAASqE,EAAGpE,IAAsB,IAAIF,IAAmBC,SAASsE,EAAGrE,GAC/F4E,GAAM,GACI,IAAI9E,IAAmBC,SAASqE,EAAGpE,IAAsB,IAAIF,IAAmBC,SAASsE,EAAGrE,KACtG4E,EAAK,MAIJA,GAGT/D,GAAArQ,UAAAqU,oBAAA,SAAoBnN,OACd4M,EAAiB,GAMrB,OALA5T,KAAK6P,aAAa9H,QAAO,SAAEuH,GACrBA,EAAOmE,YACTG,IAAWA,EAAO7O,OAAS,MAAQ,KAAO,IAAIqK,IAAmBC,SAASrI,EAAKsI,MAG5EsE,GAGTzD,GAAArQ,UAAAsU,aAAA,SAAaxM,EAAeyM,GAC1B,OAAOA,EAAKrB,UAAYC,GAAQjD,aAGlCG,GAAArQ,UAAAwU,MAAA,SAAM1M,EAAeyM,GACnB,OAAOA,EAAKrB,UAAYC,GAAQ/C,KAGlCC,GAAArQ,UAAAyU,cAAA,SAAc3M,EAAeyM,GAC3B,OAAOA,EAAKrB,UAAYC,GAAQhD,cAGlCE,GAAArQ,UAAA6S,uBAAA,WACE,OAAO3S,KAAK2R,iBAAiB6C,IAAG,SAAEjF,GAAiB,MAAA,UAAYA,KAGjEY,GAAArQ,UAAA0Q,cAAA,SAAclB,EAAsBxN,GAClC,OAAIwN,EAAO+D,YAAcoB,GAAU7F,IAAc9M,EAAK2O,IAClDnB,EAAO+D,YAAcoB,GAAU3F,MAAgBhN,EAAKoD,MACpDoK,EAAO+D,YAAcoB,GAAU5F,QAAkB,EAAK/M,EAAK2O,IAAM3O,EAAKoD,MACnE5B,WAGT6M,GAAArQ,UAAAuP,SAAA,SAASrI,EAAQsI,GACf,OAAO,IAAIF,IAAmBC,SAASrI,EAAKsI,IAG9Ca,GAAArQ,UAAA4U,gBAAA,SAAgB1N,EAAQsI,GACtB,OAAItP,KAAKuJ,aACA,IAAI6F,IAAmBC,SAASrI,EAAKsI,GAErC,MAIXa,GAAArQ,UAAA6U,WAAA,SAAWC,GACT5U,KAAK6U,WAAaD,EAClB5U,KAAKyM,OAAO/L,KAAK,CAAEkU,KAAIA,EAAE3D,qBAAsBjR,KAAK6P,gBAGtDM,GAAArQ,UAAAiT,UAAA,SAAUe,EAAiBgB,EAAiBxF,GACtCwE,IAAQxQ,WAAqB,OAARwQ,IAGpBxE,IAAWhM,WAAwB,OAAXgM,GAAuBA,GAA0B,eAAhBA,EAAOC,MACnEvP,KAAKqI,eAAiByL,EAAQ,KAC9B9T,KAAKmO,OAAOzN,KAAKV,KAAKqI,gBACtBrI,KAAKuI,aAAa7H,KAAK,CAAET,MAAOD,KAAKqI,eAAgB0M,MAAOD,EAASE,EAAWtG,KAAOsG,EAAWrG,aACvFW,GAA0B,eAAhBA,EAAOC,OACxBvP,KAAKqI,iBAAmByL,EAAIhS,OAC9B9B,KAAKqI,eAAiByL,EAAQ,KAC9B9T,KAAKmO,OAAOzN,KAAKV,KAAKqI,gBACtBrI,KAAKuI,aAAa7H,KAAK,CAAET,MAAOD,KAAKqI,eAAgB0M,MAAOD,EAASE,EAAWtG,KAAOsG,EAAWrG,aAEpG3O,KAAKoJ,YAAY1I,KAAKV,KAAKqI,mBAI/B8H,GAAArQ,UAAAmV,SAAA,SAASpR,OAEHqR,EADElN,EAA0BnE,EAAY,OAGxC7D,KAAKmV,UAAYnN,EAAQoN,YAC3BF,GAAY,EACZlV,KAAKmV,QAAUnN,EAAQoN,UACvBpV,KAAKqV,QAAUrN,EAAQsN,YAGrBtV,KAAKqV,UAAYrN,EAAQsN,aAC3BJ,GAAY,EACZlV,KAAKmV,QAAUnN,EAAQoN,UACvBpV,KAAKqV,QAAUrN,EAAQsN,YAGpBtN,EAAQuN,aAAevN,EAAQoN,UAAY,KAASF,GACvDlV,KAAKwR,cAKDrB,GAAArQ,UAAA0R,WAAR,WACOxR,KAAKuR,4BAA4BzB,YAAe9P,KAAKuR,4BAA4BxB,SACpF/P,KAAKuR,4BAA4BxB,QAAS,EAC1C/P,KAAKyI,SAAS/H,KAAK,CACjBuG,KAAMjH,KAAKuR,4BAA4B9I,WACvC+M,KAAMxV,KAAKuR,4BAA4B3B,QAAQ5P,KAAK6P,aAAc7P,KAAK6U,gBAKrE1E,GAAArQ,UAAAsQ,YAAR,SAAoBtO,GACb9B,KAAKoS,UACRpS,KAAKoS,QAAU,IAAI9L,OAErBtG,KAAKoS,QAAUpS,KAAKoS,QAAQxH,OAAO9I,GACnC9B,KAAKiF,WAAajF,KAAKoS,QACvBpS,KAAKuR,4BAA4BzB,WAA6B,IAAhBhO,EAAKiD,OACnD/E,KAAKuR,4BAA4BxB,QAAS,GAG5CI,GAAArQ,UAAA2V,aAAA,WACEzV,KAAKkJ,WAAWxI,KAAKV,KAAkB,gBAGzCmQ,GAAArQ,UAAAmJ,aAAA,SAAajB,EAAqBsH,GAChCtP,KAAK+S,UAAU/K,GAAS,EAAMsH,GAE9BtP,KAAK0V,cAAgB,CAAEpG,OAAMA,EAAEwE,IAAK9L,GACpChI,KAAKkJ,WAAWxI,KAAKV,KAAK0V,gBAG5BvF,GAAArQ,UAAA6V,eAAA,SAAe7B,EAAiBxE,GAC9B,SAAItP,KAAKiI,iBACmB,MAAtBjI,KAAK0V,eACH1V,KAAK0V,cAAcpG,OAAOC,OAASD,EAAOC,MAC3CvP,KAAK0V,cAAiB,IAAgB5T,OAASgS,EAAIhS,OAQ5DqO,GAAArQ,UAAA8V,eAAA,SAAe9B,EAAQxE,GAAvB,IAAApM,EAAAlD,KACQ6V,EAA6B,IAAIvP,MACvC,GAAItG,KAAK8V,iBAAkB,KACnBC,EAA6B/V,KAAK8V,iBAAiBlF,KAAI,SAAEC,GAC7D,OAAOA,EAAEmF,WAAa9S,EAAKmM,SAASyE,EAAKxE,KAEvCyG,GACFF,EAAYrL,KAAKuL,EAAME,WAM3B,OAHI3G,EAAO4G,aACTL,EAAYrL,KAAK8E,EAAO4G,aAEnBL,GAGT1F,GAAArQ,UAAAqW,cAAA,SAAcrC,GAAd,IAAA5Q,EAAAlD,KACQoW,EAA4B,IAAI9P,MAItC,GAHIwN,IAAQ9T,KAAKqI,gBAAmBrI,KAAKiI,iBACvCmO,EAAW5L,KAAK,IAEdxK,KAAKqW,0BAA2B,KAC5BN,EAA4B/V,KAAKqW,0BAA0BzF,KAAI,SAAEC,GACrE,OAAOA,EAAE/O,OAASoB,EAAKmM,SAASyE,EAAKjD,EAAEvB,UAErCyG,GACFK,EAAW5L,KAAKuL,EAAMO,UAG1B,OAAOF,GAGTjG,GAAArQ,UAAA+I,OAAA,SAAOhF,GACL,GAAI7D,KAAKuW,WAAuC,GAA1BvW,KAAKwW,kBAAwB,KAC3CC,EAAmBzW,KAAK0W,YAAY7S,EAAM8S,OAC1CC,EAAsB5W,KAAK6W,eAAe/U,KAC1CsQ,EAAepS,KAAKoS,QAC1B0E,EAAAA,gBAAgBF,EAAO5W,KAAKwW,kBAAmBC,GAC/CK,EAAAA,gBAAgB1E,EAASpS,KAAKwW,kBAAmBC,GACjDzW,KAAK8I,KAAKpI,KAAK,CAAET,MAAO2W,EAAMH,GAAc,KAAO3R,MAAO2R,IAC1DzW,KAAKoS,QAAUA,EACfpS,KAAK8B,KAAO,IAAIkS,EAAAA,mBAAmB4C,GACnC/S,EAAMkT,oBAIV5G,GAAArQ,UAAAkX,aAAA,SAAanT,GAAb,IAAAX,EAAAlD,KACE,IAAKA,KAAKiI,gBAAiB,KACrBgP,EAAuBjX,KAAK8B,KAAKA,KAAKoV,UAAS,SAAEpD,GAAoB,OAAAA,EAAIhS,OAASoB,EAAKmF,iBACvF8O,GAAwB,GACV,cAAdtT,EAAMyI,MACRtM,KAAKoX,cACLpX,KAAK8B,KAAKA,KAAKiG,QAAO,SAAE+L,EAAiBlM,IACjB,KAAlBuP,GAAgCF,EAARrP,GAAwBkM,EAAId,UAAYC,GAAQ/C,MAC1EiH,EAAevP,MAIH,YAAd/D,EAAMyI,MACRtM,KAAKoX,cACLH,EAAejX,KAAK8B,KAAKA,KAAKiD,OAASkS,EAAe,EACtDjX,KAAK8B,KAAKA,KAAKuV,UAAUtP,QAAO,SAAE+L,EAAiBlM,IAC3B,KAAlBuP,GAAgCF,EAARrP,GAAwBkM,EAAId,UAAYC,GAAQ/C,MAC1EiH,EAAevP,KAGnB5H,KAAK8B,KAAKA,KAAKuV,WACO,KAAlBF,IACFA,EAAenX,KAAK8B,KAAKA,KAAKiD,OAASoS,EAAe,KAGpC,KAAlBA,GACFnX,KAAK+S,UAAU/S,KAAK8B,KAAKA,KAAKqV,IAAe,GAEb,GAA9BG,KAAKC,IAAIvX,KAAKoX,aAChBpX,KAAKoX,YAAc,EAEnBvT,EAAM2T,mBAQZrH,GAAArQ,UAAAiJ,SAAA,WACE/I,KAAKgJ,OAAOtI,QAIdyP,GAAArQ,UAAA4S,kBAAA,WAQE,OAPoB1S,KAAK6P,aAAa2E,IAAG,SAAElF,EAAsB1H,GAC/D,OAAI0H,EAAO6C,SAAW7C,EAAO2C,WAAa3O,UACjC,WAAasE,EAEb,OAER6P,OAAM,SAAE3V,GAAiB,OAAQ,MAARA,KAI9BqO,GAAArQ,UAAA0S,oBAAA,WACE,OAAOxS,KAAK6P,aAAa4H,OAAM,SAAEnI,GAC/B,OAAAA,EAAO6C,SAAW7C,EAAOlM,QAAUE,YACnCkR,IAAG,SAAE/B,GAAsB,OAAAA,EAAIlD,QAGnCY,GAAArQ,UAAA4X,QAAA,SAAQ7T,GACN,GAAI7D,KAAKuW,WAAuC,GAA1BvW,KAAKwW,kBAAwB,KAC3CC,EAAmBzW,KAAK0W,YAAY7S,EAAM8S,OAChD,GAAIF,IAAazW,KAAK2X,iBAAkB,CACtC3X,KAAK2X,iBAAmBlB,MAElBG,EAAKlM,EAAqB1K,KAAK6W,eAAe/U,MACpDgV,EAAAA,gBAAgBF,EAAO5W,KAAKwW,kBAAmBC,GAC/CzW,KAAK8B,KAAO,IAAIkS,EAAAA,mBAAmB4C,GAGrC,OADA/S,EAAM2T,kBACC,IAIXrH,GAAArQ,UAAA8X,UAAA,SAAU/T,GACR7D,KAAKwW,kBAAoBxW,KAAK0W,YAAY7S,EAAM8S,OAChD3W,KAAK2X,iBAAmB3X,KAAKwW,kBAC7BxW,KAAK6W,eAAiB7W,KAAK8B,MAGrBqO,GAAArQ,UAAA4W,YAAR,SAAoBC,GAGlB,QAFIkB,EAAoB,EACpBC,EAAyB9X,KAAK+X,eAAe1X,cAC3B,OAAdyX,GAAsC,IAAdD,GAC9BA,EAAYC,EAAUD,UACtBC,EAAYA,EAAUE,cAIxB,QAFIvB,GAAoB,EAClBwB,EAAuBjY,KAAKkY,gBAAgB7X,cAAc8X,SAAS,GAAGA,SACnEnO,EAAY,EAAGA,EAAIiO,EAAKlT,OAAQiF,IAEnC2M,EAAQkB,EADcI,EAAKjO,GACH6N,UAAY7X,KAAK+X,eAAe1X,cAAc+U,YACxEqB,EAAWzM,GAIf,OADIyM,EAAW,IAAKA,EAAW,GACxBA,GAGTvL,OAAAC,eAAIgF,GAAArQ,UAAA,aAAU,KAAd,WACE,OAAOsY,wDA1iBVvX,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,m6QAlBO4F,uCA6CN1F,EAAAA,UAASJ,KAAA,CAACuX,EAAAA,2BACVnX,EAAAA,UAASJ,KAAA,CAACwX,EAAAA,mCACVpX,EAAAA,UAASJ,KAAA,CAACwX,EAAAA,SAAU,CAAEC,KAAMC,EAAAA,qCAC5BtX,EAAAA,UAASJ,KAAA,CAAC,gCAEVK,EAAAA,sBACAA,EAAAA,uBACAA,EAAAA,uBAKAA,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,0BACAF,EAAAA,+BACAA,EAAAA,qBACAA,EAAAA,gCACAA,EAAAA,yCACAA,EAAAA,6BACAA,EAAAA,oBACAE,EAAAA,0BACAF,EAAAA,4BACAA,EAAAA,sBACAE,EAAAA,4BACAA,EAAAA,8BACAF,EAAAA,2BACAA,EAAAA,yBASAA,EAAAA,yBAKAA,EAAAA,wBA8CAA,EAAAA,mCAWAA,EAAAA,0BAoDAA,EAAAA,gCAWAA,EAAAA,SA8WHkP,IAneE,SAAAA,GAAoB1I,GAAAzH,KAAAyH,aAAAA,EA/DpBzH,KAAA2R,iBAA6B,GAC7B3R,KAAAqS,0BAAsC,GACtCrS,KAAAsS,6BAAyC,GACzCtS,KAAAuS,2BAAuC,GAIvCvS,KAAAiC,KAAwBqP,GAAgBnC,MAEhCnP,KAAAoX,YAAsB,EAC9BpX,KAAA0R,aAAuB,EACf1R,KAAAwW,mBAA6B,EAC7BxW,KAAA2X,kBAA4B,EAC5B3X,KAAA6W,eAAyC,KACzC7W,KAAA4S,YAAwB,GACxB5S,KAAAqV,QAAkB,EAClBrV,KAAAmV,QAAkB,EAOhBnV,KAAA4I,KAAkC,IAAIlH,EAAAA,aACtC1B,KAAA6G,MAAmC,IAAInF,EAAAA,aACvC1B,KAAAyM,OAAoC,IAAI/K,EAAAA,aAKxC1B,KAAAmO,OAA0B,IAAIzM,EAAAA,aAC9B1B,KAAAkJ,WAAoC,IAAIxH,EAAAA,aACxC1B,KAAAuI,aAA8C,IAAI7G,EAAAA,aAClD1B,KAAAyI,SAAgD,IAAI/G,EAAAA,aACrD1B,KAAAyY,WAAqB,EACrBzY,KAAAiI,iBAA2B,EAK1BjI,KAAA8I,KAAqC,IAAIpH,EAAAA,aAC1C1B,KAAAuW,WAAqB,EACrBvW,KAAA6H,aAA6B,CAAEC,YAAY,EAAO8M,KAAM,IACvD5U,KAAAgJ,OAA6B,IAAItH,EAAAA,aACjC1B,KAAAoJ,YAA+B,IAAI1H,EAAAA,aACpC1B,KAAA6R,eAAyB,EACzB7R,KAAAuJ,aAAuB,EAChCvJ,KAAAsT,YAAsB,EACtBtT,KAAAuT,YAAsB,EAObvT,KAAAwJ,UAAoB,IAKpBxJ,KAAAyJ,UAAoB,QC3GzBiP,GAAyBC,MAM7BnK,OAAS,QACToK,WAAa,cACbC,OAAS,cAyDTC,GAAAhZ,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KAkBE,GAjBA0Y,GAAOK,OAAO/Y,KAAK+Y,QACnB/Y,KAAKgZ,gBAAkB,IAAI3X,EAAAA,YAAY,GAAIrB,KAAKiZ,gBAAgBhN,WAChEjM,KAAKkZ,cACLlZ,KAAKqL,cAAgBrL,KAAKiZ,gBAC1BjZ,KAAKqL,cAAcC,yBAAwB,SAAEC,GACvCA,GACFrI,EAAKqI,YAAa,EAClBrI,EAAK8V,gBAAgBvN,YAErBvI,EAAKqI,YAAa,EAClBrI,EAAK8V,gBAAgBtN,YAOU,KAA/B1L,KAAKiZ,gBAAgBhZ,OAA+C,OAA/BD,KAAKiZ,gBAAgBhZ,MAAgB,KACtEkZ,EAAuBT,GAAO1Y,KAAKiZ,gBAAgBhZ,MAAOD,KAAKoZ,YAAYC,OAAOrZ,KAAKoZ,YACxE,iBAAjBD,IACFnZ,KAAKgZ,gBAAgB7Y,SAASgZ,GAC9BnZ,KAAKiZ,gBAAgB9Y,SAASH,KAAKiZ,gBAAgBhZ,UAMzDiL,OAAAC,eAAI2N,GAAAhZ,UAAA,mBAAgB,KAApB,WACE,OAAOwZ,oCAGTR,GAAAhZ,UAAAyZ,eAAA,WAAA,IAAArW,EAAAlD,KACMA,KAAKwZ,iBAAmBxZ,KAAKyZ,WAC/BzZ,KAAKyZ,UAAW,EAChBzZ,KAAK0Z,QAAUC,WAAU,WACvBzW,EAAK0W,eAAe1V,QACnB,OAIP4U,GAAAhZ,UAAA+Z,MAAA,SAAMhW,GACc,MAAdA,EAAMyI,KAAetM,KAAKwZ,iBAC5BxZ,KAAK8Z,SACL9Z,KAAKyZ,UAAW,EAChBzZ,KAAK4Z,eAAe1V,SAIxB4U,GAAAhZ,UAAAga,OAAA,WACEC,aAAa/Z,KAAK0Z,SAClB1Z,KAAKyZ,UAAW,GAMlBX,GAAAhZ,UAAAka,aAAA,WAEE,OAAIha,KAAKia,eAAiBja,KAAKka,iBAAiBtB,WACvC,cACE5Y,KAAKia,aAAiBja,KAAKka,iBAAiBrB,OAC9C,UAMHC,GAAAhZ,UAAAoZ,YAAR,WAAA,IAAAhW,EAAAlD,KACMA,KAAKia,eAAiBja,KAAKka,iBAAiBrB,OAC9C7Y,KAAKgZ,gBAAgBrN,aAAa/H,UAAS,SAAEuW,GACzCjX,EAAKkX,eAAgB,MACfC,EAAmB3B,GAAOyB,EAAMjX,EAAKkW,YAAY,GAAMiB,UACvDzG,EAAiB8E,GAAOyB,EAAMjX,EAAKkW,YAAYC,OAAOnW,EAAKkW,aAC3DxF,GAAsB,iBAAXA,GAA8ByG,EAIzCzG,IACC1Q,EAAKoX,iBAMRX,WAAU,WACRzW,EAAKoX,kBAAmB,GACvB,OAPHpX,EAAKoX,kBAAmB,EACxBpX,EAAK8V,gBAAgB7Y,SAASuY,GAAO9E,EAAQ1Q,EAAKkW,YAAYC,OAAOnW,EAAKkW,aAC1ElW,EAAK+V,gBAAgB9Y,SAASuY,GAAO9E,EAAQ1Q,EAAKkW,YAAYmB,UAC9DrX,EAAKoX,kBAAmB,IAR1BpX,EAAKkX,eAAgB,IAkB3Bpa,KAAKgZ,gBAAgBrN,aAClB6O,KACCC,EAAAA,IAAG,SAAEN,GACCA,EAAKpV,OAAS7B,EAAKkW,WAAWrU,OAChC7B,EAAKkX,eAAgB,EAErBlX,EAAKkX,eAAgB,IAGzB3C,EAAAA,OAAM,SAAE0C,GAAiB,OAAAA,EAAKpV,SAAW7B,EAAKkW,WAAWrU,UAE1DnB,UAAS,SAAEuW,GACVjX,EAAKkX,eAAgB,MACfC,EAAmB3B,GAAOyB,EAAMjX,EAAKkW,YAAY,GAAMiB,UACvDzG,EAAiB8E,GAAOyB,EAAMjX,EAAKkW,YAAYC,OAAO,cAE5D,IAAMzF,GAAsB,iBAAXA,GAA8ByG,GAK/C,GAAMzG,EACJ,GAAK1Q,EAAKoX,iBAqBRX,WAAU,WACRzW,EAAKoX,kBAAmB,GACvB,UAvBuB,CAC1BpX,EAAKoX,kBAAmB,MAClBI,EAAsB9G,EAAOpE,MAAM,KAEnCmL,EAAeC,WAAWF,EAAU,IACpCG,EAAgBD,WAAWF,EAAU,IACrCI,EAAcF,WAAWF,EAAU,IAEzCxX,EAAKiX,KAAKY,YAAYJ,GACtBzX,EAAKiX,KAAKa,QAAQF,GAClB5X,EAAKiX,KAAKc,SAASJ,EAAQ,GAGvB3X,EAAK+W,eAAiBX,GAAiBV,aACzC1V,EAAKiX,KAAOzB,GAAOxV,EAAKiX,MAAMe,MAAM,SAASX,UAG/CrX,EAAK8V,gBAAgB7Y,SAASuY,GAAOxV,EAAKiX,KAAM,cAAcd,OAAOnW,EAAKkW,aAC1ElW,EAAK+V,gBAAgB9Y,SAAS+C,EAAKiX,MACnCjX,EAAKoX,kBAAmB,QAxB1BpX,EAAKkX,eAAgB,IAoC7Bpa,KAAKiZ,gBAAgBtN,aAClB/H,UAAS,SAAEuW,OACJgB,EAAwBzC,GAAOyB,EAAMjX,EAAKkW,YAAYC,OAAOnW,EAAKkW,YACrC,KAA/BlW,EAAK+V,gBAAgBhZ,OAAkC,iBAAlBkb,GACvCjY,EAAK8V,gBAAgB7Y,SAASgb,GAEhCjY,EAAKkY,YAAY1a,KAAKwC,EAAKkX,kBAQjCtB,GAAAhZ,UAAAub,qBAAA,SAAqBC,EAAiCC,GAEpD,GAAIvb,KAAKia,eAAiBX,GAAiBV,WAAY,CACrD2C,EAAWxY,YACLoX,EAAazB,GAAO4C,GAAiBJ,MAAM,SAASX,SAE1Dva,KAAKgZ,gBAAgB7Y,SAASuY,GAAOyB,EAAM,cAAcd,OAAOrZ,KAAKoZ,aACrEpZ,KAAKiZ,gBAAgB9Y,SAASga,KAOlCrB,GAAAhZ,UAAA0b,WAAA,SAAWvZ,EAAc4B,GACvB7D,KAAKgZ,gBAAgB7Y,SAASuY,GAAO7U,EAAM5D,MAAO,cAAcoZ,OAAOrZ,KAAKoZ,aAC5EpZ,KAAKiZ,gBAAgB9Y,SAAS0D,EAAM5D,OACpCD,KAAKkH,OAAOxG,KAAKmD,EAAM5D,OACvBD,KAAKyZ,UAAW,GAGlBX,GAAAhZ,UAAA2b,gBAAA,WACEzb,KAAKob,YAAY1a,KAAKV,KAAKoa,qCA3O9BvZ,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,SAAA,onCAKCE,EAAAA,UAASJ,KAAA,CAAC,8BACVG,EAAAA,+BACAA,EAAAA,0BAQAA,EAAAA,sBACAA,EAAAA,4BACAA,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,sBACAE,EAAAA,6BASAF,EAAAA,2BAaAE,EAAAA,UAkMH2X,IA/LE,SAAAA,KAvCS9Y,KAAAoO,WAA0C,QAC1CpO,KAAAiZ,gBAA+B,IAAI5X,EAAAA,YAAY,IAChDrB,KAAAma,KAAa,IAAIuB,KAOhB1b,KAAAoZ,WAAqB,aACrBpZ,KAAA+Y,OAAiB,KACjB/Y,KAAA2b,aAAuB,wCACvB3b,KAAAoB,YAAsBpB,KAAKoZ,WAC3BpZ,KAAAwZ,gBAA0B,EACzBxZ,KAAAkH,OAA6B,IAAIxF,EAAAA,aAC3C1B,KAAAyZ,UAAoB,EAGpBzZ,KAAAuL,YAAsB,EAKbvL,KAAAia,aAAiCX,GAAiB9K,OAOnDxO,KAAAsa,kBAA4B,EAKpCta,KAAAoa,eAAyB,EACfpa,KAAAob,YAAqC,IAAI1Z,EAAAA,aAC3C1B,KAAAqL,cAA6B,IAAIhK,EAAAA,YAAY,IC7DvD,IAAAua,IA0CIA,GAAA9b,UAAA+b,mBAAA,SAAmBC,GACf9b,KAAK+b,iBAAiB3W,KAAK0W,IAI/BF,GAAA9b,UAAAkc,iBAAA,SAAiBla,GACb9B,KAAKic,eAAe7W,KAAKtD,IAG7B8Z,GAAA9b,UAAAoc,eAAA,SAAeC,GACXnc,KAAKoc,mBAAmBhX,KAAK+W,IAGjCP,GAAA9b,UAAAuc,iBAAA,SAAiBC,GACbtc,KAAKuc,qBAAqBnX,KAAKkX,IAGnCV,GAAA9b,UAAA0c,YAAA,WACIxc,KAAKyc,gBAAgBrX,QAIzBwW,GAAA9b,UAAA4c,0BAAA,WACI1c,KAAK2c,8BAA8BvX,QAIvCwW,GAAA9b,UAAA8c,cAAA,SAAcC,GACd7c,KAAK8c,kBAAkB1X,KAAKyX,IAI5BjB,GAAA9b,UAAAid,gBAAA,SAAgBF,GACZ7c,KAAKgd,oBAAoB5X,KAAKyX,yBAtErCra,EAAAA,WAAU1B,KAAA,CAAC,CACR2B,WAAY,4JAwEZ,SAAAmZ,KAnEQ5b,KAAA+b,iBAAqD,IAAIkB,EAAAA,gBAAiC,GAElGjd,KAAAkd,aAA4Cld,KAAK+b,iBAAiBvV,eAG1DxG,KAAAic,eAAwC,IAAIgB,EAAAA,gBAAsB3Z,WAG1EtD,KAAAmd,qBAAyCnd,KAAKic,eAAezV,eAGrDxG,KAAAoc,mBAA+C,IAAIa,EAAAA,gBAAyB,MACpFjd,KAAAod,WAAkCpd,KAAKoc,mBAAmB5V,eAGjDxG,KAAAuc,qBAAiD,IAAIU,EAAAA,gBAAyB,MACtFjd,KAAAqd,aAAoCrd,KAAKuc,qBAAqB/V,eAEvDxG,KAAAyc,gBAAiC,IAAIpW,EAAAA,QAC7CrG,KAAAsd,sBAA0Ctd,KAAKyc,gBAAgBjW,eAEvDxG,KAAA2c,8BAA+C,IAAItW,EAAAA,QAC3DrG,KAAAud,oCAAwDvd,KAAK2c,8BAA8BnW,eAEnFxG,KAAA8c,kBAAmC,IAAIzW,EAAAA,QAC/CrG,KAAAwd,wBAA4Cxd,KAAK8c,kBAAkBtW,eAE3DxG,KAAAgd,oBAAqC,IAAI3W,EAAAA,QACjDrG,KAAAyd,0BAA8Czd,KAAKgd,oBAAoBxW,eCvC3E,QAWIkX,GAAA5d,UAAA2I,SAAA,WACE,OAAOzI,KAAKiH,KAAOjH,KAAKiH,KAAO,GAEnCyW,IATE,SAAAA,KACE1d,KAAKiH,KAAO,EACZjH,KAAK8P,YAAa,EAClB9P,KAAK+P,QAAS,UC0FJ4N,GAAAC,eAAd,SAA6Bf,OACvBjJ,EAAmB,CAACiJ,EAAKtN,MACzB3E,EAAiB,GAMrB,GAJIiS,EAAKgB,QACPjK,EAAOpJ,KAAKxK,KAAK4d,eAAef,EAAKgB,SAGjB,IAAlBjK,EAAO7O,OACT,OAAO8X,EAAKtN,KAGdqE,EAASA,EAAOyD,UAEhB,IAAK,IAAIrN,EAAY,EAAGA,EAAI4J,EAAO7O,OAAQiF,IAEzCY,EAASA,EADegJ,EAAO5J,IACFA,IAAM4J,EAAO7O,OAAS,EAAI,GAAK,KAG9D,OAAO6F,GAGT+S,GAAA7d,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KAEEA,KAAK8d,kBAAkBX,qBAAqBvZ,UAAS,SAAEma,GAC/CA,GAASA,EAAI5F,UACjBjV,EAAK8a,aAAeD,EAAIE,GACxB/a,EAAKkN,YAAY2N,EAAI5F,YAErBjV,EAAK+B,WAAWnD,KAAO,GACvBoB,EAAKgb,YAAYC,UAAY,MAKjCne,KAAK8d,kBAAkBZ,aAAatZ,UAAS,SAAEma,GACvC7a,EAAKpB,MAAUoB,EAAKpB,KAAKqW,UAC7BjV,EAAKkb,WAAWlb,EAAKpB,KAAMic,KAI/B/d,KAAK8d,kBAAkBR,sBAAsB1Z,UAAS,SAAEma,GACtD7a,EAAKsZ,gBAGPxc,KAAK8d,kBAAkBP,oCAAoC3Z,UAAS,SAAEma,GACpE7a,EAAKwZ,+BAITiB,GAAA7d,UAAA0M,gBAAA,WAAA,IAAAtJ,EAAAlD,KACEA,KAAK8d,kBAAkBV,WAAWxZ,UAAS,SAAEma,GAChC,MAAPA,GACEA,GACF7a,EAAKmb,KAAKH,YAAYI,cAK5Bte,KAAK8d,kBAAkBT,aAAazZ,UAAS,SAAEma,GACjC,OAARA,GACEA,GACF7a,EAAKmb,KAAKH,YAAYK,gBAK5Bve,KAAK8d,kBAAkBN,wBAAwB5Z,UAAS,SAAEma,GACpDA,IAAQza,WACVJ,EAAKgb,YAAY/B,OAAO4B,KAI5B/d,KAAK8d,kBAAkBL,0BAA0B7Z,UAAS,SAAEma,GACtDA,IAAQza,WACVJ,EAAKgb,YAAY5B,SAASyB,MAMhCJ,GAAA7d,UAAA0e,WAAA,SAAW3B,GAAX,IAAA3Z,EAAAlD,KACEA,KAAKye,eAAgB,EACrB9E,WAAU,WACJzW,EAAKub,gBACPvb,EAAKkb,WAAWvB,EAAMA,EAAKoB,IAGrBpB,IACJ3Z,EAAKga,aAAaxc,KAAKmc,EAAKoB,IAC5B/a,EAAKwb,YAAc7B,KAGtB,MAGLc,GAAA7d,UAAAmV,SAAA,SAASpR,OACDmE,EAA0BnE,EAAY,OAExCmE,EAAQ2W,aAAe3W,EAAQoN,WAAapN,EAAQuN,cACtDvV,KAAKwR,cAITmM,GAAA7d,UAAA8e,OAAA,SAAO/B,GACL7c,KAAK6e,cAAcne,KAAKmc,IAS1Bc,GAAA7d,UAAAgf,MAAA,SAAMjC,GACJ7c,KAAK+e,aAAare,KAAKmc,IAuBzBc,GAAA7d,UAAAkf,SAAA,SAASnC,GACP7c,KAAKif,gBAAgBve,KAAKmc,IAY5Bc,GAAA7d,UAAAof,SAAA,SAASrC,EAAY5c,GACnB4c,EAAKtN,KAAOtP,EACG,MAAX4c,EAAKoB,IAA4B,KAAdpB,EAAKtN,MAC1B4P,EAAAA,OAAStC,EAAKgB,OAAO1F,SAAU0E,GAC/B7c,KAAKwc,eACIK,EAAKoB,IAAiB,MAAXpB,EAAKoB,IAAmC,KAArBpB,EAAKtN,KAAK6P,QACjDpf,KAAKqf,OAAO3e,KAAKmc,GACjBA,EAAKyC,YAAa,EAClBtf,KAAKoe,WAAWvB,EAAMA,EAAKoB,KACP,MAAXpB,EAAKoB,IAAmC,KAArBpB,EAAKtN,KAAK6P,SACtCpf,KAAKuf,MAAM7e,KAAKmc,GAChBA,EAAKyC,YAAa,GAEpBtf,KAAKuL,YAAa,EAClBvL,KAAKwc,eAGPmB,GAAA7d,UAAAa,SAAA,SAASkc,EAAY5c,GACnBD,KAAKuL,YAAa,EAEH,MAAXsR,EAAKoB,KACPkB,EAAAA,OAAStC,EAAKgB,OAAO1F,SAAU0E,GAC/B7c,KAAKwc,eAGPK,EAAKyC,YAAa,GAGpB3B,GAAA7d,UAAA0f,WAAA,SAAW3C,GACT7c,KAAKye,eAAgB,EACrBze,KAAKyf,WAAW/e,KAAKmc,EAAKoB,KAI5BN,GAAA7d,UAAA4f,UADA,SACU7b,GACR,OAAQA,EAAMyI,KACZ,IAAK,SACHtM,KAAK2f,eAAejf,KAAOV,KAAK0e,aAAe1e,KAAK0e,YAAYT,GAAKje,KAAK0e,YAAYT,GAAK,MAC3F,MACF,IAAK,SACHje,KAAK4f,eAAelf,KAAOV,KAAK0e,aAAe1e,KAAK0e,YAAYT,GAAKje,KAAK0e,YAAYT,GAAK,MAC3F,MACF,IAAK,YACHje,KAAK6f,mBACL,MACF,IAAK,UACH7f,KAAK8f,mBASHnC,GAAA7d,UAAAggB,eAAR,WACE,GAAM9f,KAAK8B,KAET,GAAwB,MAApB9B,KAAK0e,YACP1e,KAAKoe,WAAWpe,KAAK8B,KAAM9B,KAAK8B,KAAKqW,SAAS,GAAG8F,IACjDje,KAAK0e,YAAc1e,KAAK8B,KAAKqW,SAAS,GAChCnY,KAAK0e,YAAYvG,UAA+C,EAAnCnY,KAAK0e,YAAYvG,SAASpT,QAC3D/E,KAAK8d,kBAAkBlB,cAAc5c,KAAK0e,kBAG5C,GAAM1e,KAAK0e,YAAYb,QAAiC,MAAvB7d,KAAK0e,YAAYT,GAAY,KAEtDrW,EAAgB5H,KAAK0e,YAAYb,OAAO1F,SAAS9K,QAAQrN,KAAK0e,aAEpE,GAAkC,MAA9B1e,KAAK0e,YAAYb,OAAOI,IAAwB,IAAVrW,EACxC,OAAO,EAGHA,IAAUtE,WAAuB,IAAVsE,EACzB5H,KAAK0e,YAAc1e,KAAK0e,YAAYb,OAOpC7d,KAAK0e,YAAc1e,KAAK0e,YAAYb,OAAO1F,SAASvQ,EAAQ,GAN5D5H,KAAKoe,WAAWpe,KAAK8B,KAAM9B,KAAK0e,YAAYT,IACtCje,KAAK0e,YAAYvG,UAA+C,EAAnCnY,KAAK0e,YAAYvG,SAASpT,QAC3D/E,KAAK8d,kBAAkBlB,cAAc5c,KAAK0e,eAgBhDf,GAAA7d,UAAA+f,iBAAR,WACE,GAAM7f,KAAK8B,KACT,GAAwB,MAApB9B,KAAK0e,YACP1e,KAAKoe,WAAWpe,KAAK8B,KAAM9B,KAAK8B,KAAKqW,SAAS,GAAG8F,IACjDje,KAAK0e,YAAc1e,KAAK8B,KAAKqW,SAAS,GAChCnY,KAAK0e,YAAYvG,UAA+C,EAAnCnY,KAAK0e,YAAYvG,SAASpT,QAC3D/E,KAAK8d,kBAAkBlB,cAAc5c,KAAK0e,kBAG5C,GAAM1e,KAAK0e,YAAa,KAEhB9W,EACF5H,KAAK0e,aAAiB1e,KAAK0e,YAAYb,OAAS7d,KAAK0e,YAAYb,OAAO1F,SAAS9K,QAAQrN,KAAK0e,aAAe,KAGjH,GAAM1e,KAAK0e,YAAYvG,UAA+C,EAAnCnY,KAAK0e,YAAYvG,SAASpT,OAC3D/E,KAAK0e,YAAc1e,KAAK0e,YAAYvG,SAAS,GAC7CnY,KAAKoe,WAAWpe,KAAK8B,KAAM9B,KAAK0e,YAAYT,IACtCje,KAAK0e,YAAYvG,UAA+C,EAAnCnY,KAAK0e,YAAYvG,SAASpT,QAC3D/E,KAAK8d,kBAAkBlB,cAAc5c,KAAK0e,kBAEvC,GACL9W,IAAUtE,WACVsE,IAAU5H,KAAK0e,YAAYb,OAAO1F,SAASpT,OAAS,GAClB,MAAlC/E,KAAK0e,YAAYb,OAAOA,QACmB,MAA3C7d,KAAK0e,YAAYb,OAAOA,OAAO1F,UACkB,EAAjDnY,KAAK0e,YAAYb,OAAOA,OAAO1F,SAASpT,OACxC,KACMgb,EAAwB/f,KAAK0e,YAAYb,OAAOA,OAAO1F,SAAS9K,QAAQrN,KAAK0e,YAAYb,QAC/F7d,KAAK0e,YACH1e,KAAK0e,YAAYb,OAAOA,OAAO1F,SAAS4H,EAAgB,KAAOzc,UAC3DtD,KAAK0e,YACL1e,KAAK0e,YAAYb,OAAOA,OAAO1F,SAAS4H,EAAgB,GAE9D/f,KAAKoe,WAAWpe,KAAK8B,KAAM9B,KAAK0e,YAAYT,IACtCje,KAAK0e,YAAYvG,UAA+C,EAAnCnY,KAAK0e,YAAYvG,SAASpT,QAC3D/E,KAAK8d,kBAAkBlB,cAAc5c,KAAK0e,kBAI5C1e,KAAK0e,YAAc1e,KAAK0e,YAAYb,OAAO1F,SAASvQ,EAAQ,GAC5D5H,KAAKoe,WAAWpe,KAAK8B,KAAM9B,KAAK0e,YAAYT,IACtCje,KAAK0e,YAAYvG,UAA+C,EAAnCnY,KAAK0e,YAAYvG,SAASpT,QAC3D/E,KAAK8d,kBAAkBlB,cAAc5c,KAAK0e,eAWtDf,GAAA7d,UAAAkgB,SAAA,SAASC,EAAWpD,GAClB,QAASA,EAAK1E,UAAmC,EAAvB0E,EAAK1E,SAASpT,QAMlC4Y,GAAA7d,UAAA0c,YAAR,WACExc,KAAK8B,KAAO,SACNoe,EAAyBlgB,KAAKiF,WAAWnD,KAC/C9B,KAAKiF,WAAWnD,KAAO,KACvB9B,KAAKiF,WAAWnD,KAAOoe,EACvBlgB,KAAKke,YAAYC,UAAY+B,GAMvBvC,GAAA7d,UAAA4c,0BAAR,eACQwD,EAAyBlgB,KAAKiF,WAAWnD,KAC/C9B,KAAKiF,WAAWnD,KAAO,KACvB9B,KAAKiF,WAAWnD,KAAOoe,EACvBlgB,KAAKke,YAAYC,UAAY+B,GAGvBvC,GAAA7d,UAAA0R,WAAR,WACOxR,KAAKmgB,kBAAkBrQ,YAAe9P,KAAKmgB,kBAAkBpQ,SAChE/P,KAAKmgB,kBAAkBpQ,QAAS,EAChC/P,KAAKogB,cAAc1f,KAAK,CACtBuG,KAAMjH,KAAKmgB,kBAAkB1X,eAK3BkV,GAAA7d,UAAAsQ,YAAR,SAAoBtO,GAApB,IAAAoB,EAAAlD,KACOA,KAAK8B,OACR9B,KAAK8B,KAAO,CAAEmc,GAAI,KAAM1O,KAAM,OAAQ8Q,YAAY,IAE/CrgB,KAAK8B,KAAKqW,WACbnY,KAAK8B,KAAKqW,SAAW,IAAI7R,MACzBtG,KAAKmgB,kBAAoB,IAAIzC,IAE/B1d,KAAK8B,KAAKqW,SAAWnY,KAAK8B,KAAKqW,SAASvN,OAAO9I,GAC/C9B,KAAK8B,KAAKqW,SAASpQ,QAAO,SAAE8U,GAC1B3Z,EAAKod,WAAWzD,EAAM3Z,EAAKpB,QAG7B9B,KAAK8B,KAAKqW,SAAWnY,KAAKugB,oBAAoBvgB,KAAK8B,KAAKqW,UAExDnY,KAAKiF,WAAWnD,KAAO9B,KAAK8B,KAAKqW,SACjCnY,KAAKke,YAAYC,UAAYne,KAAK8B,KAAKqW,SACvCnY,KAAKmgB,kBAAkBrQ,WAA6B,IAAhBhO,EAAKiD,OACzC/E,KAAKmgB,kBAAkBpQ,QAAS,GAM1B4N,GAAA7d,UAAAwgB,WAAR,SAAmBzD,EAAYgB,GAA/B,IAAA3a,EAAAlD,KACE6c,EAAKgB,OAASA,EACVhB,EAAK1E,UAAmC,EAAvB0E,EAAK1E,SAASpT,QACjC8X,EAAK1E,SAASpQ,QAAO,SAAEsM,GACrBnR,EAAKod,WAAWjM,EAAMwI,MAQpBc,GAAA7d,UAAAse,WAAR,SAAmBvB,EAAYoB,GAC7B,GAAY,MAARpB,EACF,OAAO,KAGT,GADA7c,KAAKwgB,aAAa3D,GACZ7c,KAAKge,aAAc,KACjBd,EAAqBld,KAAKygB,YAAYzgB,KAAKge,cAC7B,MAAhBd,IACFA,EAAamD,YAAa,EAC1BrgB,KAAKge,aAAe,MAGxB,GAAInB,EAAKoB,KAAO3a,WAAauZ,EAAKoB,KAAOA,EAIvC,OAHApB,EAAKwD,YAAa,EAClBrgB,KAAK0gB,iBAAiB7D,GACtB7c,KAAKge,aAAenB,EAAKoB,GAClBpB,EACF,GAAqB,MAAjBA,EAAK1E,SAQhB,OAAO,SAPDnO,OAAC,EACD4J,EAAe,KACnB,IAAK5J,EAAI,EAAa,MAAV4J,GAAkB5J,EAAI6S,EAAK1E,SAASpT,OAAQiF,IACtD4J,EAAS5T,KAAKoe,WAAWvB,EAAK1E,SAASnO,GAAIiU,GAE7C,OAAOrK,GAKH+J,GAAA7d,UAAA4gB,iBAAR,SAAyB7D,GACjBA,GAAUA,EAAKgB,SACnB7d,KAAK8d,kBAAkBlB,cAAcC,EAAKgB,QAC1C7d,KAAK0gB,iBAAiB7D,EAAKgB,UAOvBF,GAAA7d,UAAA0gB,aAAR,SAAqB3D,WACnB,GAAMA,GAAQA,EAAKwD,aAAe/c,YAChCuZ,EAAKwD,YAAa,EACZxD,EAAK1E,cACT,IAA2B,IAAAwI,EAAAnT,EAAAqP,EAAK1E,UAAQyI,EAAAD,EAAAvb,QAAAwb,EAAAngB,KAAAmgB,EAAAD,EAAAvb,OAAE,CAArC,IAAMyb,EAAYD,EAAA3gB,MACrBD,KAAKwgB,aAAaK,0GAM1BlD,GAAA7d,UAAAghB,aAAA,SAAajE,OACLkE,EAAsB,GAO5B,OANIlE,EAAKwD,YACPU,EAAUvW,KAAK,cAEbqS,EAAKkE,WACPA,EAAUvW,KAAKqS,EAAKkE,WAEfA,GAGTpD,GAAA7d,UAAAkhB,WAAA,SAAWnE,EAAYoE,GACrBjhB,KAAKkhB,mBAAmBrE,GAAMoE,SAAWA,GAG3CtD,GAAA7d,UAAAqhB,eAAA,SAAetd,EAAiCgZ,GAC9CA,EAAKuE,gBAAkBvd,EAAMwd,OAAO/Y,SAChCuU,EAAKuE,gBACPphB,KAAKshB,kBAAkB5gB,KAAKmc,EAAKoB,IAEjCje,KAAKuhB,oBAAoB7gB,KAAKmc,EAAKoB,KAIvCN,GAAA7d,UAAAohB,mBAAA,SACErE,GAUA,OALI7c,KAAKwhB,gBAAgBC,IAAI5E,EAAKoB,IAChCje,KAAK0hB,sBAAsB7E,EAAM7c,KAAKwhB,gBAAgBG,IAAI9E,EAAKoB,IAAIgD,UAEnEjhB,KAAK0hB,sBAAsB7E,GAAM,GAE5B7c,KAAKwhB,gBAAgBG,IAAI9E,EAAKoB,KAG/BN,GAAA7d,UAAA4hB,sBAAR,SAA8B7E,EAAYoE,OAClCrK,EAAuC,IAAItQ,MACjDuW,EAAK+E,QAAQ7Z,QAAO,SAAE8Z,GAChBA,EAAOT,iBACTxK,EAAMpM,KAAKqX,EAAO5D,UAGhBjX,EAGF,CAAEoE,YAAa,IAAI/J,EAAAA,YAAYuV,GAAQqK,SAAQA,GACnDjhB,KAAKwhB,gBAAgBM,IAAIjF,EAAKoB,GAAIjX,IAQpC2W,GAAA7d,UAAA2gB,YAAA,SAAYxC,GAEV,QADM8D,EAAKrX,EAAe1K,KAAKiF,WAAWnD,MACpB,EAAfigB,EAAMhd,QAAY,KACjBid,EAAaD,EAAME,QACzB,GAAID,EAAK/D,KAAOA,EACd,OAAO+D,EAEDA,EAAK7J,UACT4J,EAAMvX,KAAI0X,MAAVH,EAAKrX,EAASsX,EAAK7J,WAIzB,OAAO,MAGTwF,GAAA7d,UAAAygB,oBAAA,SAAoB1D,GAApB,IAAA3Z,EAAAlD,KACE,GAAM6c,GAAsB,EAAdA,EAAK9X,OACjB,IAOE,OANA8X,EAAOsF,EAAAA,QAAUtF,EAAI,SAAGuF,GAAY,OAAAA,EAAEC,YAAY,CAAC,SAC9Cta,QAAO,SAAEC,GACNA,EAAQmQ,UAAuB,MAAXnQ,IACxBA,EAAQmQ,SAAWjV,EAAKqd,oBAAoBvY,EAAQmQ,aAGjD0E,EACP,MAAOpS,GACP6X,QAAQC,IAAI9X,0BAvkBnB5J,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,WACVC,SAAA,++MAbO4a,UACA4G,EAAAA,cAL0EhK,EAAAA,6CAyChFtX,EAAAA,UAASJ,KAAA,CAAC,sBAiBVG,EAAAA,uBAKAE,EAAAA,uBAKAA,EAAAA,sBAMAA,EAAAA,+BACAA,EAAAA,8BACAA,EAAAA,6BACAA,EAAAA,2BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,kCACAA,EAAAA,oCACAA,EAAAA,6BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,0BAqMAshB,EAAAA,aAAY3hB,KAAA,CAAC,iBAAkB,CAAC,cAkUnC6c,IAlkBE,SAAAA,GAAoBG,EAA8C4E,EAAwBC,GAExF,GAFkB3iB,KAAA8d,kBAAAA,EAA8C9d,KAAA0iB,OAAAA,EAAwB1iB,KAAA2iB,WAAAA,EAgBlF3iB,KAAAwhB,gBAMJ,IAAIoB,IAeE5iB,KAAA6iB,QAAyC,IAAInhB,EAAAA,aAK7C1B,KAAAqf,OAA6B,IAAI3d,EAAAA,aAMjC1B,KAAAuf,MAA4B,IAAI7d,EAAAA,aAChC1B,KAAA8iB,eAAwC,IAAIphB,EAAAA,aAC5C1B,KAAAogB,cAAiD,IAAI1e,EAAAA,aACrD1B,KAAAkd,aAA8C,IAAIxb,EAAAA,aAClD1B,KAAAyf,WAA4C,IAAI/d,EAAAA,aAChD1B,KAAA2f,eAAuD,IAAIje,EAAAA,aAC3D1B,KAAA4f,eAAuD,IAAIle,EAAAA,aAC3D1B,KAAAshB,kBAA0D,IAAI5f,EAAAA,aAC9D1B,KAAAuhB,oBAA4D,IAAI7f,EAAAA,aAChE1B,KAAA+e,aAAmC,IAAIrd,EAAAA,aACvC1B,KAAA6e,cAAoC,IAAInd,EAAAA,aACxC1B,KAAAif,gBAAsC,IAAIvd,EAAAA,aAEpD1B,KAAAke,YAAuC,IAAI6E,EAAAA,kBAAiB,SAAQlG,GAA4C,OAAAA,EAAK1E,WACrHnY,KAAAiF,WAA4C,IAAI+d,EAAAA,wBAEhDhjB,KAAAye,eAAyB,EACzBze,KAAA0e,YAAoB,KA/DZ1e,KAAK8B,KAAM,KACTA,EAAa9B,KAAK8B,KACxB9B,KAAK8B,KAAO,KACZ9B,KAAKoQ,YAAYtO,EAAKqW,eAEtBnY,KAAKiF,WAAWnD,KAAO,GACvB9B,KAAKke,YAAYC,UAAY,GC9BnC,IAAA8E,IAUEA,GAAAnjB,UAAAojB,cAAA,SAActB,GACZ5hB,KAAK+G,iBAAiB3B,KAAKwc,yBAX9Bpf,EAAAA,oDAcDygB,IANE,SAAAA,KALQjjB,KAAA+G,iBACR,IAAIkW,EAAAA,gBAAoD,IAEjDjd,KAAA4S,YAA8D5S,KAAK+G,iBAAiBP,eCC7F,IAAA2c,IAuBEA,GAAArjB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KAEEA,KAAKojB,mBAAmB5c,eACvBgU,KACC6I,EAAAA,aAAa,KACbC,EAAAA,aAAa,MAEd1f,UAAS,WACRV,EAAKuF,SAAS/H,SAGZV,KAAKgF,UACPhF,KAAKujB,0BAA0B3Q,YAAYhP,UAAS,SAAE9B,GACpD6X,WAAU,WACRzW,EAAK0e,QAAU9f,EACfoB,EAAKsgB,gBAAkBC,EAAAA,GAAkCvgB,EAAK0e,aAKpE5hB,KAAKwjB,gBAAkBxjB,KAAK0jB,UAAU/X,aAAa6O,KACjDmJ,EAAAA,UAAU,IACVnP,EAAAA,IAAG,SAAE4N,GAAc,OAAAlf,EAAK0gB,YAAYxB,KACpC5N,EAAAA,IAAG,SAAEvU,GAAkB,OAAAiD,EAAK2gB,QAAQ5jB,OAKxCkjB,GAAArjB,UAAAgkB,UAAA,SAAUjC,GACR,OAAOA,EAASA,EAAOkC,YAAczgB,WAGvC6f,GAAArjB,UAAAqI,WAAA,WACE,OAAOnI,KAAKujB,2BAKNJ,GAAArjB,UAAA8jB,YAAR,SAAoB3jB,GAElB,OADAA,EAAQA,EAAM+jB,QAAQ,yBAA0B,KAI1Cb,GAAArjB,UAAA+jB,QAAR,SAAgB5jB,GACd,IAAI,EAAU,CACZ,GAAKD,KAAKgF,SAQR,OAAOhF,KAAK4hB,YAPNqC,EAAwBhkB,EAAMikB,cAAc1U,MAAM,KACxD,OAAOxP,KAAK4hB,QAAQnK,OAAM,SAAEoK,OACtB3N,GAAc,EAElB,OADA+P,EAAYlc,QAAO,SAAE6M,GAAiB,OAAAV,EAAKA,GAAwD,GAAlD2N,EAAOkC,YAAYG,cAAc7W,QAAQuH,KACnFV,IACNtC,OAAO,EAAG,KAOZuR,GAAArjB,UAAAqkB,WAAP,SAAkBtgB,GAChB7D,KAAKokB,cAAgBvgB,EAAMge,OAAO5hB,MAClCD,KAAKqkB,qBAAqB3jB,KAAKV,KAAKokB,cAAcnkB,QAGpDkjB,GAAArjB,UAAAwkB,YAAA,WACEtkB,KAAKojB,mBAAmBhe,6BAvF3BvE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,mBACVC,SAAA,yeAEAqI,UAAW,CAAC4Z,8DAXLA,0CAeNhiB,EAAAA,uBACAA,EAAAA,oCAGAE,EAAAA,yBACAA,EAAAA,yBACAF,EAAAA,SA2EHkiB,IArEE,SAAAA,GAAoBI,GAAAvjB,KAAAujB,0BAAAA,EAZXvjB,KAAA0jB,UAAyB,IAAIriB,EAAAA,YAC7BrB,KAAA4hB,QAA8C,IAAItb,MAGjDtG,KAAAqkB,qBAAwC,IAAI3iB,EAAAA,aAC5C1B,KAAAyI,SAA+B,IAAI/G,EAAAA,aACpC1B,KAAAgF,UAAoB,EAC7BhF,KAAAukB,WAAqB,EAGrBvkB,KAAAojB,mBAAoC,IAAI/c,EAAAA,QC7B1C,IAAAme,IAiDUA,GAAA1kB,UAAA2kB,0BAAR,WACQzkB,KAAK0kB,cACP1kB,KAAK0kB,aAAaC,OAClB3kB,KAAK0kB,aAAaC,MAAMtkB,eAC5BL,KAAK0kB,aAAaC,MAAMtkB,cACrBukB,oBAAoB,SAAU5kB,KAAKiV,WAIxCuP,GAAA1kB,UAAA+kB,YAAA,WACE7kB,KAAK8kB,QAAQ1f,OACbpF,KAAK8kB,QAAQC,WAEb/kB,KAAKykB,6BAIPD,GAAA1kB,UAAAmV,SAAA,SAASpR,OAEDmhB,EAAcnhB,EAAY,OAAYohB,aAAgBphB,EAAY,OAAauR,UACjF4P,EAAKhlB,KAAKklB,gBAEPllB,KAAKmlB,mBAAqB7hB,UAC7BtD,KAAKolB,cAAchgB,KAAK,CAAEsf,aAAc1kB,KAAK0kB,aAAcW,YAAaxhB,IAEtB,IAAxB7D,KAAKmlB,iBAA0BthB,EAAY,OAAa0R,aAAe,IACxE1R,EAAY,OAAauR,UAAavR,EAAY,OAAayhB,cAItFtlB,KAAKolB,cAAchgB,KAAK,CAAEsf,aAAc1kB,KAAK0kB,aAAcW,YAAaxhB,KAM9E7D,KAAKklB,cAAgBF,GAAM,EAAI,EAAIA,wBAzEtCO,EAAAA,UAASzkB,KAAA,CAAC,CACTC,SAAU,gFAZHykB,EAAAA,8DAmBNvkB,EAAAA,6BACAE,EAAAA,UAmEHqjB,IA/DE,SAAAA,GAAmBE,GAAnB,IAAAxhB,EAAAlD,KAAmBA,KAAA0kB,aAAAA,EALV1kB,KAAAmlB,iBAA2B,GAC1BnlB,KAAAolB,cAAwD,IAAI1jB,EAAAA,aACtE1B,KAAA8kB,QAAyB,IAAIze,EAAAA,QAC7BrG,KAAAklB,cAAyB,EAGvBllB,KAAK0kB,aAAae,OAAOjL,KACvBC,EAAAA,IAAG,WAIDd,WAAU,WAERzW,EAAKuhB,4BACCvhB,EAAKwhB,cACPxhB,EAAKwhB,aAAaC,OAClBzhB,EAAKwhB,aAAaC,MAAMtkB,eACxB6C,EAAKwhB,aAAaC,MAAMtkB,cACrBqlB,iBAAiB,SAAUxiB,EAAK+R,SAAS0Q,KAAKziB,IAAO,OAIhE0iB,EAAAA,UAAU5lB,KAAK8kB,UAAUlhB,YAE3B5D,KAAK0kB,aAAamB,OAAOrL,KACvBC,EAAAA,IAAG,WAAO,OAAAvX,EAAKuhB,8BACfmB,EAAAA,UAAU5lB,KAAK8kB,UAAUlhB,YC9C/B,IAAAkiB,IA+B+BA,GAAAhmB,UAAAimB,UAA3B,eACQC,EAAyBhmB,KAAKimB,QAAQ5lB,cAAc6lB,UAEpDF,GAAoBhmB,KAAKkC,UACxB8jB,EAAeG,gBAAkBnmB,KAAKkC,QAAQkkB,WAAWD,gBAAkBnmB,KAAKqmB,iBAAiBrmB,KAAKimB,QAAQ5lB,iBACjHL,KAAKsmB,QAAQpkB,QAAUlC,KAAKkC,UAIhClC,KAAKsmB,QAAQ7c,UAAazJ,KAAKyJ,UAC/BzJ,KAAKsmB,QAAQ9c,UAAYxJ,KAAKwJ,WAIxBsc,GAAAhmB,UAAAumB,iBAAR,SAAyB/b,GACvB,OAAQA,EAAEic,YAAcjc,EAAEkc,kCA3C/BjB,EAAAA,UAASzkB,KAAA,CAAC,CACPC,SAAU,eACVsI,UAAW,CAACod,EAAAA,0DAJPA,EAAAA,kBADgCjO,EAAAA,gDAcpCvX,EAAAA,MAAKH,KAAA,CAAC,iCAKNG,EAAAA,yBAKAA,EAAAA,yBAOAwhB,EAAAA,aAAY3hB,KAAA,CAAC,gBAiBlBglB,IArBI,SAAAA,GAAYQ,EAA6BL,GAAAjmB,KAAAimB,QAAAA,EARhCjmB,KAAAwJ,UAAoB,IAKpBxJ,KAAAyJ,UAAoB,IAI3BzJ,KAAKsmB,QAAUA,EC5BrB,IAAAI,IAcEA,GAAA5mB,UAAA6mB,YAAA,WAEE3mB,KAAK4mB,SAAW5mB,KAAK6mB,KAEjB7mB,KAAK8mB,mBACP9mB,KAAK+mB,QAAU,WACf/mB,KAAKgnB,WAAa,WAIdN,GAAA5mB,UAAAgnB,eAAR,WACE,OAAOG,EAAAA,kBAAkBjnB,KAAKknB,cAAgBlnB,KAAK6mB,KAAKM,SAASC,SAASC,gCAtB7E9B,EAAAA,UAASzkB,KAAA,CAAC,CACTC,SAAU,iFAQGa,EAAAA,OAAMd,KAAA,CAACwmB,EAAAA,oDALnBC,EAAAA,YAAWzmB,KAAA,CAAC,gCACZymB,EAAAA,YAAWzmB,KAAA,CAAC,iCACZymB,EAAAA,YAAWzmB,KAAA,CAAC,2BACZG,EAAAA,SAiBHylB,IAfE,SAAAA,GAAyCQ,GAAAlnB,KAAAknB,WAAAA,EALhBlnB,KAAA+mB,QAAkB,GACf/mB,KAAAgnB,WAAqB,GACvBhnB,KAAA4mB,SAAmB,GCT/C,IAAAY,IAMIA,GAAA1nB,UAAA2nB,UAAA,SAAUxnB,OAAe,IAAAa,EAAA,GAAA4mB,EAAA,EAAAA,EAAA/c,UAAA5F,OAAA2iB,IAAA5mB,EAAA4mB,EAAA,GAAA/c,UAAA+c,GACrB,MAAO,KAAOznB,wBALrB0nB,EAAAA,KAAI7mB,KAAA,CAAC,CACFyO,KAAM,mBAMViY,IAPA,SAAAA,UCWAI,IAyCEA,GAAA9nB,UAAAC,SAAA,aAGA6nB,GAAA9nB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BA7ClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oCACVC,SAAA,yWAdOgC,EAAAA,gDA2BJpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAgCZ2kB,IAlCE,SAAAA,GACS9kB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKoD,MAAQtB,EAAKsB,MACdpD,KAAKoD,QAAUE,YACjBtD,KAAKoD,MAtBmB,gDAwB1BpD,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QAzBqB,6JA2B5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,YAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,eAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBCpClCknB,IAwCEA,GAAA/nB,UAAAC,SAAA,aAGA8nB,GAAA/nB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BA5ClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,6BACVC,SAAA,6WAdOgC,EAAAA,gDA0BJpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAgCZ4kB,IAlCE,SAAAA,GACS/kB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKoD,MAAQtB,EAAKsB,MACdpD,KAAKoD,QAAUE,YACjBtD,KAAKoD,MArBmB,8CAuB1BpD,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QAxBqB,iKA0B5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,YAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,eAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBC1ClCmnB,IAuCEA,GAAAhoB,UAAAC,SAAA,aAGA+nB,GAAAhoB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BA3ClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,+BACVC,SAAA,yWAPOgC,EAAAA,oBAkBiC8kB,GAA8BC,WAAA,CAAA,CAAA9lB,KAAnEL,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAgCZ6kB,IAlCE,SAAAA,GACShlB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKoD,MAAQtB,EAAKsB,MACdpD,KAAKoD,QAAUE,YACjBtD,KAAKoD,MApBmB,kDAsB1BpD,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QAvBqB,+JAyB5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,YAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,eAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBC5BlCqnB,IA8BEA,GAAAloB,UAAAC,SAAA,aAGAioB,GAAAloB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BAlClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,6CACVC,SAAA,qPAbOgC,EAAAA,gDAuBJpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAwBZ+kB,IA1BE,SAAAA,GACSllB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QAlBqB,qEAoB5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,WAEjBP,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBC1BlCsnB,IAyBIA,GAAAnoB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACI2Z,WAAU,WACNzW,EAAKJ,UAAUC,SAChB,MAGPklB,GAAAnoB,UAAAa,SAAA,WACIX,KAAK8C,UAAUC,8BAhCtBlC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,yCACVC,SAAA,oHAZKgC,EAAAA,gDAqBApB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAuBhBglB,IAzBI,SAAAA,GACWnlB,EACyBhB,GAFpC,IAAAoB,EAAAlD,KACWA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACjBtD,KAAKmD,QAjBe,yCAmBxBL,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GACd,WAAfA,EAAMC,MACNZ,EAAKJ,UAAUC,MAAMG,EAAKvC,sBC1BxCunB,OAAA,EACAC,OAAA,EACAC,OAAA,wEAGF,IAAAC,IAwBEA,GAAAvoB,UAAAC,SAAA,aAGAsoB,GAAAvoB,UAAA0M,gBAAA,WACExM,KAAKskB,eAGC+D,GAAAvoB,UAAAwkB,YAAR,WAAA,IAAAphB,EAAAlD,KACMA,KAAKsoB,cACPtoB,KAAKuoB,SAASC,QAAQxoB,KAAKiH,OAAQjH,KAAKyoB,UAAU7kB,UAAS,SAAEqU,GAC3DA,EAAKlQ,QAAO,SAAEsM,GAAe,OAAAnR,EAAK+U,KAAKzN,KAAK6J,KAC5CnR,EAAKolB,aAA6B,EAAdrQ,EAAKlT,UAK/BmG,OAAAC,eAAIkd,GAAAvoB,UAAA,sBAAmB,KAAvB,WACE,OAAO4oB,oCAGTL,GAAAvoB,UAAAiM,QAAA,WACM/L,KAAK2oB,UACP3oB,KAAK4oB,MAAQF,GAAoBP,SAIrCE,GAAAvoB,UAAA+oB,WAAA,SAAW/U,GACT9T,KAAK8oB,aAAehV,EACpB9T,KAAK+oB,cAAcroB,KAAKoT,GACxB9T,KAAK4oB,MAAQF,GAAoBR,QAGnCG,GAAAvoB,UAAAkpB,eAAA,WACEhpB,KAAK4oB,MAAQF,GAAoBN,QAGnCC,GAAAvoB,UAAAmpB,OAAA,SAAOplB,GAAP,IAAAX,EAAAlD,KAC4B,EAAtB6D,EAAMub,OAAOra,OACf/E,KAAKkpB,SAASD,OAAOplB,GAAOD,UAAS,SAClC9B,GACCoB,EAAK+U,KAAKzN,KAAK1I,GACfoB,EAAK0lB,MAAQF,GAAoBP,SAIrCnoB,KAAK4oB,MAAQF,GAAoBP,QAIrCE,GAAAvoB,UAAAmV,SAAA,SAASpR,OACDmE,EAA0BnE,EAAY,OACxCmE,EAAQuN,aAAevN,EAAQoN,UAAY,KAC7CpV,KAAKskB,oCA5EVzjB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uBACVC,SAAA,srDAKCC,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,6BACAE,EAAAA,wBACAF,EAAAA,SAmEHonB,IA1DE,SAAAA,KAZSroB,KAAAoB,YAAsB,kBAErBpB,KAAA+oB,cAAoC,IAAIrnB,EAAAA,aACzC1B,KAAA2oB,SAAmB,EAEpB3oB,KAAAiH,KAAe,EACfjH,KAAAyoB,SAAmB,GACnBzoB,KAAAsoB,cAAwB,EAChCtoB,KAAA4oB,MAA6BF,GAAoBR,OAEjDloB,KAAAiY,KAAe,OClBjBkR,IAmCEA,GAAArpB,UAAAC,SAAA,aAGAopB,GAAArpB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BAvClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,6CACVC,SAAA,0VAZuBgC,EAAAA,gDAuBpBpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBA4BZkmB,IA9BE,SAAAA,GACSrmB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKoD,MAAQtB,EAAKsB,MACdpD,KAAKoD,QAAUE,YACjBtD,KAAKoD,MAnBmB,4CAqB1BpD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,eAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,WAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,sBCrChCyoB,SAAA,EACAC,OAAA,qDA+BF,IAAAC,IAyBEA,GAAAxpB,UAAAC,SAAA,aAGAupB,GAAAxpB,UAAA0M,gBAAA,aAGAtB,OAAAC,eACIme,GAAAxpB,UAAA,OAAI,KADR,SACSypB,GACPvpB,KAAKwpB,SAAWD,EAChBvpB,KAAKypB,yCAGPve,OAAAC,eACIme,GAAAxpB,UAAA,2BAAwB,KAD5B,SAC6B4pB,GAC3B1pB,KAAK2pB,QAAUD,EACf1pB,KAAKypB,yCAGAH,GAAAxpB,UAAA2pB,MAAP,WAAA,IAAAvmB,EAAAlD,KACMA,KAAK2pB,SACP3pB,KAAK2pB,QAAQhI,IAAI,EAAG3hB,KAAKyoB,UAAU7kB,UAAS,SAAEgmB,GAAe,OAAA1mB,EAAK2mB,SAASD,MAIvEN,GAAAxpB,UAAA+pB,SAAR,SAAiBD,GAAjB,IAAA1mB,EAAAlD,KACEA,KAAK8pB,WAAa,IAAIlH,IACtB5iB,KAAK+pB,eAAiB,GACtB/pB,KAAKgqB,QAAU,GACfJ,EAAQ5pB,KAAKiqB,UAAUL,GACvB5pB,KAAK8pB,WAAa,IAAIlH,IACtBgH,EAAM7hB,QAAO,SAAEsM,OACPwI,EAAsB3Z,EAAKgnB,WAAW7V,GAC5CnR,EAAK8mB,QAAQxf,KAAKqS,KAEpB7c,KAAKmqB,uBAAuB,MAC5BnqB,KAAKoqB,cAAc1pB,QAGb4oB,GAAAxpB,UAAAmqB,UAAR,SAAkBL,GAAlB,IAAA1mB,EAAAlD,KACQqqB,EAAyB,IAAIzH,IAC7B0H,EAAa,GACnBV,EAAM7hB,QAAO,SAAEsM,OACPkW,EAAmBlW,EAAKnR,EAAKymB,QAAQa,oBACtCD,GAGEF,EAAK5I,IAAI8I,IACZF,EAAKvI,IAAIyI,EAAU,IAErBF,EAAK1I,IAAI4I,GAAU/f,KAAK6J,IALxBiW,EAAMG,QAAQpW,KAUlB,QAFMqW,EAAgB,IAAIpkB,MAASsjB,EAAM7kB,QACrC6C,EAAgB,EACE,EAAf0iB,EAAMvlB,QAAY,KACjB4lB,EAAUL,EAAMM,MACtBF,EAAS9iB,KAAW+iB,MACdxS,EAAgBkS,EAAK1I,IAAIgJ,EAAK3qB,KAAK2pB,QAAQkB,eACjD,GAAI1S,EACF,IAAK,IAAInO,EAAYmO,EAASpT,OAAS,EAAQ,GAALiF,EAAQA,IAChDsgB,EAAM9f,KAAK2N,EAASnO,IAI1B,OAAO0gB,GAGDpB,GAAAxpB,UAAAoqB,WAAR,SAAmB7V,GACjB,GAAIrU,KAAK8pB,WAAWrI,IAAIpN,EAAKrU,KAAK2pB,QAAQkB,eACxC,MAAM1lB,MAAM,0BAER2lB,EAAmC9qB,KAAK+qB,uBAAuB1W,EAAKrU,KAAK2pB,QAAQa,qBACjFQ,EAAiC,CACrCC,OAAQ5W,EACR6W,cAAc,EACdC,MAAOL,EAAoBA,EAAkBK,MAAQ,EAAI,EACzDC,SAAUprB,KAAKwpB,WAAa6B,GAAsBhC,OAClDlX,SAAS,EACTmZ,SAAUtrB,KAAK8pB,WAAWyB,KAAO,GAMnC,OAJAvrB,KAAK8pB,WAAWhI,IAAIzN,EAAKrU,KAAK2pB,QAAQkB,cAAeG,GACjDF,IACFA,EAAkBI,cAAe,GAE5BF,GAGF1B,GAAAxpB,UAAAirB,uBAAP,SAA8B9M,GAC5B,OAAOje,KAAK8pB,WAAWnI,IAAI1D,IAGtBqL,GAAAxpB,UAAA0rB,mBAAP,SAA0BnX,GACxB,OAAOrU,KAAK8pB,WAAWnI,IAAItN,EAAKrU,KAAK2pB,QAAQkB,gBAG/CvB,GAAAxpB,UAAA2rB,cAAA,SAAcpX,GACZ,MAAO,iBAAmBrU,KAAK+qB,uBAAuB1W,EAAKrU,KAAK2pB,QAAQkB,eAAeM,OAGjF7B,GAAAxpB,UAAAqqB,uBAAR,SAA+BuB,GAA/B,IAAAxoB,EAAAlD,KACQ+pB,EAAsB,GAC5B/pB,KAAK+pB,eAAehiB,QAAO,SAAEsM,GACvBnR,EAAKsoB,mBAAmBnX,KACtBqX,GAAYxoB,EAAKsoB,mBAAmBE,GAAUJ,UAAYpoB,EAAKsoB,mBAAmBnX,GAAMiX,SAC1FvB,EAAevf,KAAK6J,GAEpBnR,EAAK6nB,uBAAuB1W,EAAKnR,EAAKymB,QAAQkB,eAAe1Y,SAAU,KAI7EnS,KAAK2rB,aAAe5B,EAAehlB,OAAS/E,KAAK4rB,YACjD5rB,KAAKgqB,QAAQjiB,QAAO,SAAEsM,GACpB,GAAI0V,EAAehlB,OAAS7B,EAAKyoB,gBAC7BD,GAAYxoB,EAAKsoB,mBAAmBE,GAAUJ,SAAWjX,EAAKiX,UAAW,KACrEf,EAAmBlW,EAAK4W,OAAO/nB,EAAKymB,QAAQa,oBAClD,GAAKD,EAGE,KACCO,EAAmC5nB,EAAK6nB,uBAAuBR,GACjEO,EAAkB3Y,SAAW2Y,EAAkBM,WACjDrB,EAAevf,KAAK6J,EAAK4W,QACzB5W,EAAKlC,SAAU,QANjB4X,EAAevf,KAAK6J,EAAK4W,QACzB5W,EAAKlC,SAAU,KAUrBnS,KAAK+pB,eAAiBA,GAGxBT,GAAAxpB,UAAA+rB,aAAA,SAAaxX,GACXrU,KAAK+qB,uBAAuB1W,EAAKrU,KAAK2pB,QAAQkB,eAAeO,UAAW,EACxEprB,KAAKmqB,uBAAuB9V,IAG9BiV,GAAAxpB,UAAAgsB,WAAA,SAAWzX,GACTrU,KAAK+qB,uBAAuB1W,EAAKrU,KAAK2pB,QAAQkB,eAAeO,UAAW,EACxEprB,KAAKmqB,uBAAuB9V,IAG9BiV,GAAAxpB,UAAAisB,aAAA,WACmC,EAA7B/rB,KAAK+pB,eAAehlB,QACtB/E,KAAKmqB,uBAAuBnqB,KAAK+pB,eAAe/pB,KAAK+pB,eAAehlB,OAAS,KAIjFmG,OAAAC,eAAIme,GAAAxpB,UAAA,cAAW,KAAf,WACE,OAAOE,KAAK+pB,gDAGdT,GAAAxpB,UAAAksB,WAAA,SAAW3X,GACTrU,KAAKisB,WAAW5X,EAAKrU,KAAK2pB,QAAQkB,gBAGpCvB,GAAAxpB,UAAAmsB,WAAA,SAAWhO,GAAX,IAAA/a,EAAAlD,KACE,GAAGA,KAAK+qB,uBAAuB9M,GAAK,KAC5BiO,EAAmBlsB,KAAK+qB,uBAAuB9M,GAAIgN,OAAOjrB,KAAK2pB,QAAQa,oBACvE1I,EAAmB,IAAIqK,IAC7BrK,EAAIsK,IAAInO,GAKR,QAJMoO,EAAqBrsB,KAAKgqB,QAAQ9S,UAAS,SAC9CoV,GAA8B,OAAAA,EAAWrB,OAAO/nB,EAAKymB,QAAQkB,gBAAkB5M,IAE9EsO,EAAoBvsB,KAAKgqB,QAAQjlB,OAC5BiF,EAAYqiB,EAAa,EAAGriB,EAAIhK,KAAKgqB,QAAQjlB,OAAQiF,IAAK,KAC3DsiB,EAAgBtsB,KAAKgqB,QAAQhgB,GAAGihB,OACtC,IAAInJ,EAAIL,IAAI6K,EAAWtsB,KAAK2pB,QAAQa,qBAE7B,CACL+B,EAAYviB,EACZ,MAHA8X,EAAIsK,IAAIE,EAAWtsB,KAAK2pB,QAAQkB,mBAM9B2B,EAAgCxsB,KAAKgqB,QAAQpY,OAAOya,EAAYE,EAAYF,GAC9EI,GAA8B,EAClCD,EAAazkB,QAAO,SAAE2kB,GAA+B,OAAAxpB,EAAK4mB,WAAW6C,UAAOD,EAAYzB,OAAO/nB,EAAKymB,QAAQkB,iBAC5G7qB,KAAKgqB,QAAQjiB,QAAO,SAAE6kB,EAA2BhlB,GAC/CglB,EAAWtB,SAAW1jB,EAAQ,EAC3BglB,EAAW3B,OAAO/nB,EAAKymB,QAAQa,sBAAwB0B,IACxDO,GAAqB,KAGtBP,IACDlsB,KAAK+qB,uBAAuBmB,GAAUhB,aAAeuB,GAEvDzsB,KAAKmqB,uBAAoC,EAAbkC,EAAiBrsB,KAAKgqB,QAAQqC,EAAa,GAAGpB,OAAS,QAIvF3B,GAAAxpB,UAAA+sB,QAAA,SAAQxY,GAAR,IAAAnR,EAAAlD,KACQ8sB,EAAsB9sB,KAAKgqB,QAAQ9S,UAAS,SAAE2F,GAAwB,OAAAA,EAAKoO,OAAO/nB,EAAKymB,QAAQkB,gBAAkBxW,EAAKnR,EAAKymB,QAAQa,sBACzI,KAAmB,GAAfsC,GAMF,MAAM3nB,MAAM,uBALZnF,KAAKgqB,QAAQxf,KAAKxK,KAAKkqB,WAAW7V,IAClCrU,KAAKgqB,QAAQ8C,GAAa5B,cAAe,EACzClrB,KAAK+sB,SACL/sB,KAAK8rB,WAAW9rB,KAAKgqB,QAAQ8C,GAAa7B,SAM9C3B,GAAAxpB,UAAAktB,WAAA,SAAW3Y,GAAX,IAAAnR,EAAAlD,KACE,GAAIA,KAAKwrB,mBAAmBnX,GAAO,CACjCrU,KAAKwrB,mBAAmBnX,GAAM4W,OAAS5W,EACvCrU,KAAK+sB,aACCD,EAAsB9sB,KAAKgqB,QAAQ9S,UAAS,SAC/C2F,GAAwB,OAAAA,EAAKoO,OAAO/nB,EAAKymB,QAAQkB,gBAAkBxW,EAAKnR,EAAKymB,QAAQa,sBACrE,GAAfsC,EACF9sB,KAAK8rB,WAAW9rB,KAAKgqB,QAAQ8C,GAAa7B,QAE1CjrB,KAAKmqB,uBAAuB,QAK1Bb,GAAAxpB,UAAAitB,OAAR,WAAA,IAAA7pB,EAAAlD,KACQ4pB,EAAa5pB,KAAKgqB,QAAQxV,IAAG,SAAEqI,GAAwB,OAAAA,EAAKoO,SAClErB,EAAMhhB,KAAI,SAAE8K,EAAMC,GAAS,OAAAzQ,EAAKymB,QAAQ9V,QAAQH,EAAGC,KAC7B3T,KAAKiqB,UAAUL,GAC5B7hB,QAAO,SAAEkjB,EAAWrjB,GAAkB,OAAA1E,EAAKsoB,mBAAmBP,GAAQK,SAAW1jB,EAAQ,IAClG5H,KAAKgqB,QAAQphB,KAAI,SAAEqkB,EAAsBC,GAAyB,OAAAD,EAAM3B,SAAW4B,EAAM5B,iCApP5FzqB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,SAAA,qtCAcCG,EAAAA,8BAGAgsB,EAAAA,aAAYrsB,KAAA,CAAC,+BAYbG,EAAAA,wCAMAA,EAAAA,SAiNHqoB,IAhOE,SAAAA,KAfQtpB,KAAAyoB,SAAmB,IACnBzoB,KAAA2rB,aAAuB,EACvB3rB,KAAA4rB,YAAsB,IACtB5rB,KAAAwpB,SAAkC6B,GAAsBhC,OACxDrpB,KAAA+pB,eAA2B,GAG3B/pB,KAAAgqB,QAAgC,GAGxChqB,KAAAoqB,cAAoC,IAAI1oB,EAAAA,iBChD1C0rB,IAoCEA,GAAAttB,UAAAC,SAAA,aAGAqtB,GAAAttB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BAxClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uCACVC,SAAA,yWANOgC,EAAAA,oBAkBiCoqB,GAAqCrF,WAAA,CAAA,CAAA9lB,KAA1EL,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBA4BZmqB,IA9BE,SAAAA,GACStqB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QApBqB,qDAsB5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,YAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,eAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBCzBlC0sB,IAyBIA,GAAAvtB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACI2Z,WAAU,WACNzW,EAAKJ,UAAUC,SAChB,MAGPsqB,GAAAvtB,UAAAa,SAAA,WACIX,KAAK8C,UAAUC,8BAhCtBlC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,yDACVC,SAAA,oHAZKgC,EAAAA,gDAqBApB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAuBhBoqB,IAzBI,SAAAA,GACWvqB,EACyBhB,GAFpC,IAAAoB,EAAAlD,KACWA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACjBtD,KAAKmD,QAjBe,qEAmBxBL,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GACd,WAAfA,EAAMC,MACNZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBCpB1C2sB,IAyBIA,GAAAxtB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACI2Z,WAAU,WACNzW,EAAKJ,UAAUC,SAChB,MAGPuqB,GAAAxtB,UAAAa,SAAA,WACIX,KAAK8C,UAAUC,8BAhCtBlC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,+CACVC,SAAA,oHAZKgC,EAAAA,gDAqBApB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAuBhBqqB,IAzBI,SAAAA,GACWxqB,EACyBhB,GAFpC,IAAAoB,EAAAlD,KACWA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACjBtD,KAAKmD,QAjBe,4DAmBxBL,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GACd,WAAfA,EAAMC,MACNZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBCpB1C4sB,IAyBIA,GAAAztB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACI2Z,WAAU,WACNzW,EAAKJ,UAAUC,SAChB,MAGPwqB,GAAAztB,UAAAa,SAAA,WACIX,KAAK8C,UAAUC,8BAhCtBlC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,4CACVC,SAAA,oHAZKgC,EAAAA,gDAqBApB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAuBhBsqB,IAzBI,SAAAA,GACWzqB,EACyBhB,GAFpC,IAAAoB,EAAAlD,KACWA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACjBtD,KAAKmD,QAjBe,uEAmBxBL,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GACd,WAAfA,EAAMC,MACNZ,EAAKJ,UAAUC,MAAMG,EAAKvC,cC/B1C,IAAA6sB,yBAoECC,EAAAA,SAAQ3sB,KAAA,CAAC,CACR4sB,aAAc,CACZ7tB,EACA8B,EACAkB,EACA0E,EACA0D,EACAkF,GACAwN,GACA7E,GACAqK,GACAqB,GACAsB,GACAY,GACAc,GACAI,GACAC,GACAC,GACAE,GACAC,GACAI,GACAc,GACAG,GACA8D,GACAC,GACAC,GACAC,IAEFI,QAAS,CACPC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,oBAEAC,EAAAA,sBACAC,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,aACAC,EAAAA,iBACAb,EAAAA,gBACAc,EAAAA,iBACAL,EAAAA,cACAD,EAAAA,cACAO,EAAAA,kBACAJ,EAAAA,cACAK,EAAAA,cACAX,EAAAA,eACAC,EAAAA,gBACAW,EAAAA,eACAC,EAAAA,yBACAC,EAAAA,eACAC,EAAAA,mBACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,oBACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,eACAC,EAAAA,eAEFC,QAAS,CACPjwB,EACA8B,EACAkB,EACA0E,EACA0D,EACAkF,GACAwN,GACA7E,GACAqK,GACAqB,GACAsB,GACAY,GACAc,GACAwG,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,aACAC,EAAAA,iBACAb,EAAAA,gBACAc,EAAAA,iBACAL,EAAAA,cACAD,EAAAA,cACAO,EAAAA,kBACAJ,EAAAA,cACAK,EAAAA,cACAX,EAAAA,eACAC,EAAAA,gBACAW,EAAAA,eACAC,EAAAA,yBACAC,EAAAA,eACAC,EAAAA,mBACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,oBACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,eACAC,EAAAA,cACAjI,GACAC,GACAC,GACAE,GACAC,GACAI,GACAc,GACAG,GACA8D,GACAC,GACAC,GACAC,IAEFlkB,UAAW,CAACzC,EAAoBgV,QAEH4R,IAxI/B,SAAAA,MCpEA,IAAAuC,IAcEA,GAAAjwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OALqEvD,KAAKiE,OAAOC,KAAK0jB,GAAqC,CACzHzjB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA0rB,GAAmB9rB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAA+rB,IAcEA,GAAAlwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OAL8DvD,KAAKiE,OAAOC,KAAK2jB,GAA8B,CAC3G1jB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA2rB,GAAmB/rB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAgsB,IAcEA,GAAAnwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OALgEvD,KAAKiE,OAAOC,KAAK4jB,GAAgC,CAC/G3jB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA4rB,GAAmBhsB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAisB,IAcEA,GAAApwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OAL6EvD,KAAKiE,OAAOC,KAAK8jB,GAA6C,CACzI7jB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA6rB,GAAmBjsB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAksB,IAcEA,GAAArwB,UAAAkE,WAAA,SAAWZ,EAAgBD,GAMzB,OALyEnD,KAAKiE,OAAOC,KAAK+jB,GAAyC,CACjI9jB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,KAGPiB,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA8rB,GAAmBlsB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAmsB,IAYEA,GAAAtwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OAL8EvD,KAAKiE,OAAOC,KAAKilB,GAA8C,CAC3IhlB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDALL4B,EAAAA,8IASP,SAAA+rB,GAAmBnsB,GAAAjE,KAAAiE,OAAAA,ECVrB,IAAAosB,IAcEA,GAAAvwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OALuEvD,KAAKiE,OAAOC,KAAKkpB,GAAuC,CAC7HjpB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAAgsB,GAAmBpsB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAqsB,IAcEA,GAAAxwB,UAAAkE,WAAA,SAAWZ,EAAgBD,GAMzB,OALwFnD,KAAKiE,OAAOC,KAAKmpB,GAAwD,CAC/JlpB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,KAGPiB,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAAisB,GAAmBrsB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAssB,IAcEA,GAAAzwB,UAAAkE,WAAA,SAAWZ,EAAgBD,GAMzB,OAL+EnD,KAAKiE,OAAOC,KAAKopB,GAA+C,CAC7InpB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,KAGPiB,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAAksB,GAAmBtsB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAusB,IAcEA,GAAA1wB,UAAAkE,WAAA,SAAWZ,EAAgBD,GAMzB,OAL4EnD,KAAKiE,OAAOC,KAAKqpB,GAA4C,CACvIppB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,KAGPiB,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAAmsB,GAAmBvsB,GAAAjE,KAAAiE,OAAAA,4FCXjBwsB,KAAO,OACP9tB,MAAQ,QACR+tB,KAAO","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() inputFormControl: FormControl = new FormControl('', Validators.required);\r\n  @Input() requiredMessage: string = 'El campo es requerido';\r\n  @Input() value: string = '';\r\n  @Input() isFocused: boolean = false;\r\n  @ViewChild('inputText') nameField: ElementRef;\r\n\r\n  @Output() done: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() cancel: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.value !== '') {\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n    this.nameField.nativeElement.focus();\r\n  }\r\n\r\n\r\n  onDone(): void {\r\n    if (this.inputFormControl.valid) {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\n\r\n// @dynamic\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: {type: ToastType, message: string, subMessages?: string[]}) { }\r\n\r\n  ngOnInit(): void {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds: number = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type: ToastType, message: string, subMessages?: string[]): void {\r\n    subMessages = subMessages ? subMessages : [];\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message, type, subMessages},\r\n      duration: this.durationInSeconds * 1000\r\n    });\r\n  }\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = 'ERROR',\r\n    CONFIRMATION = 'CONFIRMATION'\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\ninterface AlertHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  type: AlertHelisaType;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: string;\r\n  hasCancel: boolean;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertHelisaProperties\r\n  ) {\r\n    this.content = data.content;\r\n    this.title = data.title;\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'aceptar';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'cancelar';\r\n    }\r\n    this.hasCancel = data.type === AlertHelisaType.CONFIRMATION;\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type: AlertHelisaType, title: string, content: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertHelisaComponent> = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, type, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport {ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency} from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable<T> {\r\n  columns: Array<ColumnConfig>;\r\n  isRemote: boolean;\r\n  dataSource?: Array<T>;\r\n  count?: number;\r\n  order?: number;\r\n  showTitle?: boolean;\r\n  indexRowSelect?: number;\r\n  isDragged?: boolean;\r\n  addRowButton?: AddRowButton;\r\n  configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\r\n  isCellSelection?: boolean;\r\n  addBookButton?: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class DependencyTableHelisaService<T> {\r\n\r\n\r\n  tables: Subject<ConfigTable<T>[]> = new Subject();\r\n  infoTables: Array<ConfigTable<T>> = new Array();\r\n\r\n  private emitVisibilityButton$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitVisibilityButton: Observable<EventDependency<boolean>> = this.emitVisibilityButton$.asObservable();\r\n\r\n  private emitVisibilityAllButtons$: Subject<boolean> = new Subject<boolean>();\r\n  emitVisibilityAllButtons: Observable<boolean> = this.emitVisibilityAllButtons$.asObservable();\r\n\r\n  private emitIsCellSelection$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitIsCellSelection: Observable<EventDependency<boolean>> = this.emitIsCellSelection$.asObservable();\r\n\r\n  private emitChangeColumns$: Subject<EventDependency<ColumnConfig[]>> = new Subject<EventDependency<ColumnConfig[]>>();\r\n  emitChangeColumns: Observable<EventDependency<ColumnConfig[]>> = this.emitChangeColumns$.asObservable();\r\n\r\n  emitTotal: Subject<EventDependency<TotalTableHelisa>> = new Subject<EventDependency<TotalTableHelisa>>();\r\n  emitNextPage: Subject<EventDependency<T[]>> = new Subject<EventDependency<T[]>>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable<T>[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable<T>, withRemoveDependency: boolean = false): void {\r\n    if (withRemoveDependency) {\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if (configTable.isRemote) {\r\n      configTable.dataSource = null;\r\n      if (configTable.count === null) {\r\n        throw new Error('hace falta el count');\r\n      }\r\n    } else {\r\n      if (configTable.dataSource === null) {\r\n        throw new Error('hace falta el dataSource');\r\n      }\r\n      configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  setTotal(event: EventDependency<TotalTableHelisa>): void {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  addPage(event: EventDependency<T[]>): void {\r\n    this.emitNextPage.next(event);\r\n  }\r\n\r\n  selectIndexRow(config: ConfigTable<T>): void {\r\n    if (this.infoTables[config.order]) {\r\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\r\n      this.tables.next(this.infoTables);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Muestra o esconde el boton una tabla en especifico\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeVisibilityButton(event: EventDependency<boolean>): void {\r\n    this.emitVisibilityButton$.next(event);\r\n  }\r\n\r\n\r\n  /**\r\n   * Esconde los botones de todas las tablas\r\n   * @param show indicar si se muestran o no todos los botones de las tablas\r\n   */\r\n  changeVisibilityAllButtons(show: boolean): void {\r\n    this.emitVisibilityAllButtons$.next(show);\r\n  }\r\n\r\n  /**\r\n   * Para habilitar el manejo de selecciÃ³n de celda\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeisCellSelection(event: EventDependency<boolean>): void {\r\n    this.emitIsCellSelection$.next(event);\r\n  }\r\n\r\n   /**\r\n    * Para habilitar el cambio de columnas\r\n    * @param event para indicar el index de la tabla y en \"data\" columnas\r\n    */\r\n  changeColumnsByTable( event: EventDependency<ColumnConfig[]>): void {\r\n    this.emitChangeColumns$.next(event);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\nimport {TotalTableHelisa} from './table-helisa.interface';\r\nimport {TableHelisaComponent} from './table-helisa.component';\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: {} | TableHelisaComponent<T>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource: Subject<TableHelisaServiceInfo<TotalTableHelisa>> = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage: Subject<TableHelisaServiceInfo<T[]>> = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn: Observable<TableHelisaServiceInfo<TotalTableHelisa>> = this.emitChangeSource.asObservable();\r\n  nextPageReturn: Observable<TableHelisaServiceInfo<T[]>> = this.emitNextPage.asObservable();\r\n\r\n  private emitVisibleButton$: Subject<boolean> = new Subject<boolean>();\r\n  /**\r\n   * Observable para saber si se debe mostrar o esconder el boton de add row\r\n   */\r\n  emitVisibleButton: Observable<boolean> = this.emitVisibleButton$.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<TotalTableHelisa>): void {\r\n    this.emitChangeSource.next({obj: total, table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>): void {\r\n    this.emitNextPage.next({obj: page, table});\r\n  }\r\n\r\n  /**\r\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\r\n   * @param change indicar si se muestra o no el boton de add row de la tabla\r\n   */\r\n  changeVisibilityButton(change: boolean): void {\r\n    this.emitVisibleButton$.next(change);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input } from '@angular/core';\r\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\r\nimport { ColumnConfig, RequestTableHelisa, SelectObject, TotalTableHelisa } from '../table-helisa/table-helisa.interface';\r\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\r\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency<T> {\r\n  index: number;\r\n  data: T;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [DependencyTableHelisaService]\r\n})\r\nexport class DependencyTableHelisaComponent<T> implements OnInit {\r\n\r\n  tables: Array<ConfigTable<T>> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<T>>;\r\n  @Input() showToolTip: boolean = true;\r\n\r\n  /**\r\n   * deprecated, use selectObject\r\n   */\r\n  @Output() selected: EventEmitter<EventDependency<T>> = new EventEmitter<EventDependency<T>>();\r\n  @Output() selectObject: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}  | T>>();\r\n  @Output() nextPage: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() total: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() sort: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() drop: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() selectCell: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() bookClicked: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  selectedObject: EventDependency<{}> = null;\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService<T>, private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      (event: EventDependency<T[]>) => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n\r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      (event: EventDependency<TotalTableHelisa>) => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder el boton de una tabla\r\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\r\n      (data: EventDependency<boolean>) => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (!!table) {\r\n            table.addRowButton.showButton = data.data;\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder los botones de todas las tablas\r\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\r\n      (data: boolean) => {\r\n        if (data !== undefined && data != null) {\r\n          this.tables.forEach((element: ConfigTable<T>) => {\r\n            if (!!element.addRowButton) {\r\n              element.addRowButton.showButton = data;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para manejo de selecciÃ³n de celdas\r\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\r\n      (data: EventDependency<boolean>) => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.isCellSelection = data.data;\r\n          }\r\n        }\r\n      });\r\n\r\n    // Observable para manejo de columnas\r\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\r\n      (data: EventDependency<ColumnConfig[]>) => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.columns = data.data;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService(): DependencyTableHelisaService<T> {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables(): void {\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe((tables: ConfigTable<T>[]) => {\r\n        this.tables = tables;\r\n      }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: SelectObject<T>): void {\r\n    this.selectedObject = { index, data: event };\r\n    this.selected.emit({ index, data: event.value });\r\n    this.selectObject.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa<T>): void {\r\n    this.nextPage.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: EventDependency<T>): void {\r\n    this.total.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: EventDependency<T>): void {\r\n    this.sort.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onDrop(index: number, event: EventDependency<T>): void {\r\n    this.drop.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe aÃ±adir una nueva fila\r\n   * @param index indica el indice de la tabla de la cual se dispara el evento\r\n   */\r\n  onAddRow(index: number): void {\r\n    this.addRow.emit(index);\r\n  }\r\n\r\n  selectedCell(index: number, event: EventDependency<T>): void {\r\n    if (this.tables[index].isCellSelection) {\r\n      this.selectCell.emit({ index, data: event });\r\n    }\r\n  }\r\n\r\n  onBookClicked(index: number, event: EventDependency<T>): void {\r\n    this.bookClicked.emit({ index, data: event });\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nexport enum InputHelisaType {\r\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit, AfterViewInit {\r\n\r\n  private readonly DECIMAL_SEPARATOR: string = '.';\r\n  private readonly THOUSAND_SEPARATOR: string = ',';\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n\r\n  /** Activar o desactivar el autocompletado\r\n   * (Caracteristica de los navegadores para campos comunes como\r\n   * Direccion , Usuario, Password ... etc)\r\n   */\r\n  @Input() autocompleteMode: boolean = false;\r\n\r\n  // Mostrar o no el icono de buscar\r\n  @Input() isSearch: boolean = false;\r\n  // @Input() inputFormControl: FormControl = new FormControl('');\r\n  @Input() isFocused: boolean = false;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Input() disabled: boolean = false;\r\n  @Input() type: InputHelisaType = InputHelisaType.DEFAULT;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  // tslint:disable-next-line:no-any\r\n  @Output() blur: EventEmitter<any> = new EventEmitter();\r\n\r\n  formControlMask: FormControl = new FormControl('');\r\n  private realValue: string = '';\r\n  private inputFormReal: FormControl = new FormControl('');\r\n\r\n  @ViewChild('inputText') nameInput: ElementRef;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  @Input()\r\n  set inputFormControl(formControl: FormControl) {\r\n    this.inputFormReal = formControl;\r\n    this.inputFormReal.registerOnDisabledChange(((isDisabled: boolean) => {\r\n      if(isDisabled)\r\n        this.formControlMask.disable();\r\n      else\r\n        this.formControlMask.enable();\r\n    }))\r\n    this.inputFormReal.valueChanges.subscribe((data: string) => {\r\n      this.statusChange(this.inputFormReal.status);\r\n      if (this.getMaskedValue(data) !== this.formControlMask.value) {\r\n        this.change(data);\r\n        if (this.isFocused) {\r\n          this.onFocus(null);\r\n        }\r\n      }\r\n    });\r\n    this.formControlMask.setValidators(this.inputFormReal.validator);\r\n    this.change(this.inputFormReal.value);\r\n    // disable control\r\n    if (formControl.disabled) {\r\n      this.formControlMask.disable({ onlySelf: true });\r\n    }\r\n    this.inputFormReal.statusChanges.subscribe(\r\n      (data: string) => {\r\n        this.statusChange(data);\r\n        if (this.isFocused) {\r\n          this.onFocus(null);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  private statusChange(data: string): void {\r\n    if (data === 'INVALID') {\r\n      this.formControlMask.setErrors({ key: 'Error de validaciÃ³n.' });\r\n    } else {\r\n      this.formControlMask.setErrors(null);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.isFocused) {\r\n      this.nameInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // this.isParentDisabled();\r\n  }\r\n\r\n  /*isParentDisabled(): void {\r\n    setTimeout(() => {\r\n      if (this.nameInput.nativeElement.closest('.hw-disabled-mode')) {\r\n        this.disabled = true;\r\n      } else {\r\n        this.disabled = false;\r\n      }\r\n    });\r\n  }*/\r\n\r\n  search(): void {\r\n    this.setValue.emit(this.realValue);\r\n  }\r\n\r\n  change(event: string): void {\r\n    if (event != null) {\r\n      event = event + '';\r\n    }\r\n    let position: number = this.nameInput.nativeElement.selectionStart;\r\n    const length: number = event ? event.length : 0;\r\n    this.realValue = this.getRealValue(event);\r\n    if (this.getMaskedValue(this.realValue) !== this.formControlMask.value) {\r\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue));\r\n      position += this.nameInput.nativeElement.value.length - length;\r\n      this.nameInput.nativeElement.selectionStart = position;\r\n      this.nameInput.nativeElement.selectionEnd = position;\r\n    }\r\n    this.inputFormReal.setValue(this.realValue);\r\n  }\r\n\r\n  private getMaskedValue(str: string): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    if (this.type === InputHelisaType.DEFAULT) {\r\n      return str;\r\n    }\r\n    let maskedStr: string = '';\r\n    if (this.type === InputHelisaType.IDENTITY) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.NUMERIC) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.DOUBLE) {\r\n      if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {\r\n        for (let i: number = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {\r\n          maskedStr += str[i];\r\n        }\r\n      }\r\n      for (let i: number = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1,\r\n        j: number = 0; i >= 0; i--, j++) {\r\n\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    return maskedStr;\r\n  }\r\n\r\n  private getRealValue(str: string): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    let realStr: string = '';\r\n    if (this.type === InputHelisaType.DEFAULT) {\r\n      return str;\r\n    }\r\n    if (this.type === InputHelisaType.IDENTITY) {\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]')) {\r\n          realStr += strItem;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.NUMERIC) {\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]')) {\r\n          realStr += strItem;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.DOUBLE) {\r\n      let haveDot: boolean = false;\r\n\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {\r\n          realStr += strItem;\r\n        }\r\n        haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);\r\n      }\r\n    }\r\n    return realStr;\r\n  }\r\n\r\n  onFocus($event: FocusEvent): void {\r\n    if ((this.type === InputHelisaType.NUMERIC || this.type === InputHelisaType.DOUBLE) &&\r\n      Number(this.getRealValue(this.nameInput.nativeElement.value)) === 0) {\r\n      this.nameInput.nativeElement.select();\r\n    }\r\n  }\r\n}\r\n","import {SortDirection} from '@angular/material';\r\nimport { RowData } from './table-helisa.component';\r\n\r\nexport enum ColumnType {\r\n  NORMAL, URL\r\n}\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title?: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n  subtitle?: string;\r\n  colspanTitle?: number;\r\n  colspanSubtitle?: number;\r\n  columnStyle?: string;\r\n  columnType?: ColumnType;\r\n}\r\n\r\nexport interface AddRowButton {\r\n  text: string;\r\n  showButton: boolean;\r\n}\r\n\r\nexport enum EventScope {\r\n  USER, CODE_CALL\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa<T> {\r\n  page: number;\r\n  body: {} | T;\r\n}\r\n\r\nexport interface DropElement<T> {\r\n value: T;\r\n order: number;\r\n}\r\n\r\nexport interface SelectObject<T> {\r\n  value: T;\r\n  scope: EventScope;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n\r\nexport interface Cell<T> {\r\n  column: ColumnConfig;\r\n  row: RowData<T> | T;\r\n }\r\n\r\nexport interface ConfigCellStyles<T> {\r\n   cellData: T;\r\n   classCell: string;\r\n }\r\n\r\nexport interface ConfigRowStyles<T> {\r\n  column: ColumnConfig;\r\n  data: {} | T;\r\n  classRow: string;\r\n}\r\n\r\n// @dynamic\r\nexport class ColumnConfigUtil<T> {\r\n\r\n  getValue(obj: T, column: ColumnConfig): T | number | string {\r\n    return column.name.split('.').reduce((o: T, field: string) => o && o[field], obj);\r\n  }\r\n}\r\n\r\n","import {ColumnConfig} from './table-helisa.interface';\r\nimport {Observable} from 'rxjs';\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): {} {\r\n    return {};\r\n  }\r\n\r\n  nextPage(): number {\r\n    return this.page++;\r\n  }\r\n}\r\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef } from '@angular/core';\r\nimport { MatSort, MatTable, MatTableDataSource } from '@angular/material';\r\nimport { Sort } from '@angular/material/typings/sort';\r\n\r\nimport {\r\n  AddRowButton,\r\n  Cell,\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  ConfigCellStyles,\r\n  ConfigRowStyles,\r\n  DropElement,\r\n  EventColumn,\r\n  EventScope,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  SelectObject,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType,\r\n  ColumnType,\r\n  TotalTableHelisa\r\n} from './table-helisa.interface';\r\nimport { TableHelisaService, TableHelisaServiceInfo } from './table-helisa.service';\r\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { of } from 'rxjs';\r\n\r\nexport interface RowData<T> {\r\n  data: {} | T;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData<T>>;\r\n  displayedColumns: string[] = [];\r\n  displayedColumnsWithTitle: string[] = [];\r\n  displayedColumnsWithSubtitle: string[] = [];\r\n  displayedColumnsWithFooter: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n  indexRowSelect: number;\r\n  private scrollCount: number = 0;\r\n  hasSubtitle: boolean = false;\r\n  private indexRowStartDrag: number = -1;\r\n  private lastIndexRowDrag: number = -1;\r\n  private dataBeforeDrag: { data: RowData<T>[] } = null;\r\n  private dataSource$: Array<T> = [];\r\n  private scrollX: number = 0;\r\n  private scrollY: number = 0;\r\n\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n  @ViewChild(MatTable) matTable: MatTable<T>;\r\n  @ViewChild(MatTable, { read: ElementRef }) matTableElement: ElementRef;\r\n  @ViewChild('containerTable') containerTable: ElementRef;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n\r\n  /**\r\n   * Deprecado, cambiar por electObject\r\n   */\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() selectCell: EventEmitter<Cell<T>> = new EventEmitter<Cell<T>>();\r\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa<T>> = new EventEmitter<RequestTableHelisa<T>>();\r\n  @Input() showTitle: boolean = true;\r\n  @Input() isCellSelection: boolean = false;\r\n  @Input() count: number;\r\n  @Input() configCellStyles: Array<ConfigCellStyles<T>>;\r\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\r\n  @Input() selectedCells: Cell<T>;\r\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\r\n  @Input() isDragged: boolean = false;\r\n  @Input() addRowButton: AddRowButton = { showButton: false, text: '' };\r\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\r\n  @Input() addBookButton: boolean = false;\r\n  @Input() showToolTip: boolean = true;\r\n  showFooter: boolean = false;\r\n  showSearch: boolean = false;\r\n\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.tableService.nextPageReturn.subscribe(\r\n      (data: TableHelisaServiceInfo<T[]>) => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe((info: TableHelisaServiceInfo<TotalTableHelisa>) => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column: ColumnConfig, idx: number) => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort) => {\r\n        const column: ColumnConfig = this.columnConfig.find((c: ColumnConfig) => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\r\n      }\r\n    );\r\n\r\n    this.tableService.emitVisibleButton.subscribe(\r\n      (data: boolean) => {\r\n        if (data !== undefined && data != null) {\r\n          this.addRowButton.showButton = data;\r\n        }\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.isCellSelection) {\r\n      this.matTable.renderRows();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.goNextPage();\r\n    } else {\r\n      this.tableHelisaConnectComponent.page++;\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.hasSubtitle = false;\r\n    this.columnConfig = columnConfiguration;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n\r\n    if (columnConfiguration) {\r\n      if (this.addBookButton) {\r\n        const columnCount: number = columnConfiguration.length;\r\n        let countSubtitle: number = 0;\r\n        let showBookButton: boolean = false;\r\n        columnConfiguration.forEach((column: ColumnConfig) => {\r\n          if (!!column.subtitle) {\r\n            countSubtitle = countSubtitle + 1;\r\n          }\r\n          if ((!showBookButton) && (column.name === 'bookButton')) {\r\n            showBookButton = true;\r\n          }\r\n        });\r\n        const subtitleTemp: boolean = columnCount === countSubtitle;\r\n        if (!showBookButton) {\r\n          columnConfiguration.push({\r\n            name: 'bookButton',\r\n            title: '',\r\n            subtitle: subtitleTemp ? '' : undefined ,\r\n            visible: true\r\n          });\r\n        }\r\n      }\r\n\r\n      columnConfiguration.forEach((column: ColumnConfig) => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n        if (!this.hasSubtitle) {\r\n          this.hasSubtitle = column.subtitle !== undefined;\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\r\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\r\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\r\n    this.getColumnsWithTitle().forEach((col: string) => this.displayedColumnsWithTitle.push(col));\r\n    this.getHeaderSubtitle().forEach((col: string) => this.displayedColumnsWithSubtitle.push(col));\r\n    this.footerDisplayedColumns().forEach((col: string) => this.displayedColumnsWithFooter.push(col));\r\n  }\r\n\r\n\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<T>) {\r\n    this.dataSource$ = dataSource;\r\n    this.rawData = dataSource;\r\n    if (this.rawData) { this.prepareDataSource(); }\r\n  }\r\n\r\n  get dataSource(): Array<T> {\r\n    return this.dataSource$;\r\n  }\r\n\r\n  @Input()\r\n  set selectedIndexRow(idRowSelected: number) {\r\n    this.indexRowSelect = idRowSelected;\r\n    if (this.rawData && this.rawData.length) {\r\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private prepareDataSource(): void {\r\n    const changeData: Array<RowData<T>> = Array<RowData<T>>();\r\n    let haveGroup: boolean = false;\r\n    let groupFooter: Array<TotalGroup>;\r\n    this.columnConfig.forEach((column: ColumnConfig) => {\r\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n        this.totalData = new Array<number>(this.columnConfig.length);\r\n        this.showFooter = true;\r\n        this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\r\n      }\r\n      this.showSearch = this.showSearch || column.searchable;\r\n      haveGroup = haveGroup || column.groupable;\r\n    });\r\n    if (haveGroup) {\r\n      this.rawData = this.rawData.sort((a: T, b: T) => {\r\n        let result: number = 0;\r\n        this.columnConfig.forEach((column: ColumnConfig) => {\r\n          if (result === 0) {\r\n            result = this.compare(a, b);\r\n          }\r\n        });\r\n        return result;\r\n      });\r\n    }\r\n    this.rawData.forEach((row: T) => {\r\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data as T, row) !== 0)) {\r\n        if (groupFooter) {\r\n          changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\r\n        }\r\n        changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\r\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n      }\r\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\r\n      changeData.push({ data: row, rowType: RowType.ROW });\r\n    });\r\n    this.data = new MatTableDataSource<RowData<T>>(changeData);\r\n    if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\r\n      if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: T): void {\r\n    this.columnConfig.forEach((column: ColumnConfig, index: number) => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = { sum: (new ColumnConfigUtil().getValue(row, column) as number), count: 1 };\r\n        } else {\r\n          rowTotal[index].sum += (new ColumnConfigUtil().getValue(row, column) as number);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: T, b: T): number {\r\n    let ws: number = 0;\r\n    this.columnConfig.forEach((column: ColumnConfig) => {\r\n      if (ws === 0 && column.groupable) {\r\n        if ((new ColumnConfigUtil().getValue(a, column) as number) < (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = -1;\r\n        } else if ((new ColumnConfigUtil().getValue(a, column) as number) > (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = 1;\r\n        }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: T): string {\r\n    let result: string = '';\r\n    this.columnConfig.forEach((column: ColumnConfig) => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + (new ColumnConfigUtil().getValue(obj, column));\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map((name: string) => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: T, column: ColumnConfig): T {\r\n    return new ColumnConfigUtil().getValue(obj, column) as T;\r\n  }\r\n\r\n  getValueTooltip(obj: T, column: ColumnConfig): string {\r\n    if (this.showToolTip) {\r\n      return new ColumnConfigUtil().getValue(obj, column) as string;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  searchText(text: string): void {\r\n    this.lastSearch = text;\r\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\r\n  }\r\n\r\n  selectRow(row: RowData<T>, isUser: boolean, column?: ColumnConfig): void {\r\n    if (row === undefined || row === null) {\r\n      return;\r\n    }\r\n    if ((column === undefined || column === null) || (!!column && column.name !== 'bookButton')) {\r\n      this.selectedObject = row.data as T;\r\n      this.select.emit(this.selectedObject);\r\n      this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n    } else if (!!column && column.name === 'bookButton') {\r\n      if (this.selectedObject !== row.data) {\r\n        this.selectedObject = row.data as T;\r\n        this.select.emit(this.selectedObject);\r\n        this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n      }\r\n      this.bookClicked.emit(this.selectedObject);\r\n    }\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n    let isScrollY: boolean;\r\n\r\n    if (this.scrollY !== element.scrollTop) {\r\n      isScrollY = true;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if (this.scrollX !== element.scrollLeft) {\r\n      isScrollY = false;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if ((element.scrollHeight - element.scrollTop < 1000) && isScrollY) {\r\n      this.goNextPage();\r\n    }\r\n\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]): void {\r\n    if (!this.rawData) {\r\n      this.rawData = new Array<T>();\r\n    }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n    this.tableHelisaConnectComponent.isUsed = false;\r\n  }\r\n\r\n  dblClickCell(): void {\r\n    this.selectCell.emit(this.selectedCells as Cell<T>);\r\n  }\r\n\r\n  selectedCell(element: RowData<T>, column: ColumnConfig): void {\r\n    this.selectRow(element, true, column);\r\n\r\n    this.selectedCells = { column, row: element };\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean {\r\n    if (this.isCellSelection) {\r\n      if (this.selectedCells != null) {\r\n        if (this.selectedCells.column.name === column.name &&\r\n          (this.selectedCells.row as RowData<T>).data === row.data) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getClassToCell(row: T, column: ColumnConfig): string[] {\r\n    const classToCell: Array<string> = new Array<string>();\r\n    if (this.configCellStyles) {\r\n      const found: ConfigCellStyles<T> = this.configCellStyles.find((c: ConfigCellStyles<T>) => {\r\n        return c.cellData === this.getValue(row, column);\r\n      });\r\n      if (found) {\r\n        classToCell.push(found.classCell);\r\n      }\r\n    }\r\n    if (column.columnStyle) {\r\n      classToCell.push(column.columnStyle);\r\n    }\r\n    return classToCell;\r\n  }\r\n\r\n  getClassToRow(row: T): string[] {\r\n    const classToRow: Array<string> = new Array<string>();\r\n    if (row === this.selectedObject && !this.isCellSelection) {\r\n      classToRow.push('');\r\n    }\r\n    if (this.configRowStylesFromColumn) {\r\n      const found: ConfigRowStyles<T> = this.configRowStylesFromColumn.find((c: ConfigRowStyles<T>) => {\r\n        return c.data === this.getValue(row, c.column);\r\n      });\r\n      if (found) {\r\n        classToRow.push(found.classRow);\r\n      }\r\n    }\r\n    return classToRow;\r\n  }\r\n\r\n  onDrop(event: MouseEvent): void {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      const array: RowData<T>[] = this.dataBeforeDrag.data;\r\n      const rawData: T[] = this.rawData;\r\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\r\n      this.drop.emit({ value: array[rowIndex].data as T, order: rowIndex });\r\n      this.rawData = rawData;\r\n      this.data = new MatTableDataSource(array);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  tableKeydown(event: KeyboardEvent): void {\r\n    if (!this.isCellSelection) {\r\n      let currentIndex: number = this.data.data.findIndex((row: RowData<T>) => row.data === this.selectedObject);\r\n      let newSelection: number = -10;\r\n      if (event.key === 'ArrowDown') {\r\n        this.scrollCount++;\r\n        this.data.data.forEach((row: RowData<T>, index: number) => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n      }\r\n      if (event.key === 'ArrowUp') {\r\n        this.scrollCount--;\r\n        currentIndex = this.data.data.length - currentIndex - 1;\r\n        this.data.data.reverse().forEach((row: RowData<T>, index: number) => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n        this.data.data.reverse();\r\n        if (newSelection !== -10) {\r\n          newSelection = this.data.data.length - newSelection - 1;\r\n        }\r\n      }\r\n      if (newSelection !== -10) {\r\n        this.selectRow(this.data.data[newSelection], true);\r\n      }\r\n      if (Math.abs(this.scrollCount) >= 2) {\r\n        this.scrollCount = 0;\r\n      } else {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emite el evento cuando se da click al boton AddRow\r\n   */\r\n  onAddRow(): void {\r\n    this.addRow.emit();\r\n  }\r\n\r\n\r\n  getHeaderSubtitle(): string[] {\r\n    const x: string[] = this.columnConfig.map((column: ColumnConfig, index: number) => {\r\n      if (column.visible && column.subtitle !== undefined) {\r\n        return 'subtitle' + index;\r\n      } else {\r\n        return null;\r\n      }\r\n    }).filter((data: string) => data != null);\r\n    return x;\r\n  }\r\n\r\n  getColumnsWithTitle(): string[] {\r\n    return this.columnConfig.filter((column: ColumnConfig) =>\r\n      column.visible && column.title !== undefined\r\n    ).map((col: ColumnConfig) => col.name);\r\n  }\r\n\r\n  dragger(event: MouseEvent): boolean {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      if (rowIndex !== this.lastIndexRowDrag) {\r\n        this.lastIndexRowDrag = rowIndex;\r\n        // This can have a memory problem with big data\r\n        const array: RowData<T>[] = [...this.dataBeforeDrag.data];\r\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n        this.data = new MatTableDataSource(array);\r\n      }\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  startDrag(event: MouseEvent): void {\r\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\r\n    this.lastIndexRowDrag = this.indexRowStartDrag;\r\n    this.dataBeforeDrag = this.data;\r\n  }\r\n\r\n  private getRowIndex(pageY: number): number {\r\n    let offsetTop: number = 0;\r\n    let container: HTMLElement = this.containerTable.nativeElement;\r\n    while ((container !== null) && (offsetTop === 0)) {\r\n      offsetTop = container.offsetTop;\r\n      container = container.parentElement;\r\n    }\r\n    let rowIndex: number = -1;\r\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\r\n    for (let i: number = 0; i < rows.length; i++) {\r\n      const row: HTMLElement = (rows[i] as HTMLElement);\r\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop) {\r\n        rowIndex = i;\r\n      }\r\n    }\r\n    if (rowIndex < 0) { rowIndex = 0; }\r\n    return rowIndex;\r\n  }\r\n\r\n  get columnType(): typeof ColumnType {\r\n    return ColumnType;\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input, Output, EventEmitter, ViewChild} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport * as moment_ from 'moment';\r\nconst moment: typeof moment_ = moment_;\r\n\r\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material';\r\nimport { filter, tap } from 'rxjs/operators';\r\n\r\nexport enum TypeCalendarEnum {\r\n  NORMAL = 'norma',\r\n  MONTH_YEAR = 'mounth-year',\r\n  STRICT = 'strict'\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css'],\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n\r\n  @ViewChild('picker') datePickerShow: MatDatepicker<Date>;\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n  private date: Date = new Date();\r\n\r\n  /**\r\n   * Formato de fecha.\r\n   * Los formatos validos son aquellos que maneja la libreria momentjs y este: 'DD [de] MMMM [de] YYYY'\r\n   * https://momentjs.com/docs/#/parsing/string-format/\r\n   */\r\n  @Input() dateFormat: string = 'DD/MM/YYYY';\r\n  @Input() locale: string = 'es';\r\n  @Input() errorMessage: string = 'La fecha no concuerda con el formato ';\r\n  @Input() placeholder: string = this.dateFormat;\r\n  @Input() showDatePicker: boolean = false;\r\n  @Output() change: EventEmitter<Date> = new EventEmitter<Date>();\r\n  isClosed: boolean = false;\r\n  // tslint:disable-next-line:no-any\r\n  timeout: any;\r\n  isDisabled: boolean = false;\r\n  /**\r\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\r\n   * serÃ¡ tomado en cuenta\r\n   */\r\n  @Input() typeCalendar: TypeCalendarEnum = TypeCalendarEnum.NORMAL;\r\n\r\n  dateToVisualize: FormControl;\r\n\r\n  /**\r\n   * Para evitar nuevos eventos miestras se realiza el parseo\r\n   */\r\n  private isFromInputEvent: boolean = false;\r\n\r\n  /**\r\n   * Verificar si el formato es valido\r\n   */\r\n  invalidFormat: boolean = false;\r\n  @Output() invalidDate: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  private inputFormReal: FormControl = new FormControl('');\r\n\r\n  constructor() { }\r\n\r\n  /*\r\n  * TypeCalendarEnum.MONTH_YEAR = 'MM/YYYY'\r\n  * TypeCalendarEnum.STRICT = 'DD [de] MMMM [de] YYYY'\r\n  * */\r\n  ngOnInit(): void {\r\n    moment.locale(this.locale);\r\n    this.dateToVisualize = new FormControl('', this.dateFormControl.validator);\r\n    this.formHandler();\r\n    this.inputFormReal = this.dateFormControl;\r\n    this.inputFormReal.registerOnDisabledChange((isDisabled: boolean) => {\r\n      if (isDisabled) {\r\n        this.isDisabled = true;\r\n        this.dateToVisualize.disable();\r\n      } else {\r\n        this.isDisabled = false;\r\n        this.dateToVisualize.enable();\r\n      }\r\n    });\r\n\r\n    /**\r\n     * establecer valor por defecto de la fecha\r\n     */\r\n    if (this.dateFormControl.value !== '' && this.dateFormControl.value !== null) {\r\n      const incomingDate: string = moment(this.dateFormControl.value, this.dateFormat).format(this.dateFormat);\r\n      if (incomingDate !== 'Invalid date') {\r\n        this.dateToVisualize.setValue(incomingDate);\r\n        this.dateFormControl.setValue(this.dateFormControl.value);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  get typeCalendarEnum(): typeof TypeCalendarEnum {\r\n    return TypeCalendarEnum;\r\n  }\r\n\r\n  openDatePicker(): void {\r\n    if (this.showDatePicker && !this.isClosed) {\r\n      this.isClosed = true;\r\n      this.timeout = setTimeout(() => {\r\n        this.datePickerShow.open();\r\n      }, 2000);\r\n    }\r\n  }\r\n\r\n  onKey(event: KeyboardEvent): void {\r\n    if (event.key === ' ' && this.showDatePicker) {\r\n      this.onBlur();\r\n      this.isClosed = true;\r\n      this.datePickerShow.open();\r\n    }\r\n  }\r\n\r\n  onBlur(): void {\r\n    clearTimeout(this.timeout);\r\n    this.isClosed = false;\r\n  }\r\n\r\n  /**\r\n   * Determina como se debe inicializar la visualizacion del calendar\r\n   */\r\n  getStartView(): string {\r\n    // multi-year\r\n    if (this.typeCalendar === this.typeCalendarEnum.MONTH_YEAR) {\r\n      return 'multi-year';\r\n    } else if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\r\n      return 'month';\r\n    } else {\r\n      return 'month';\r\n    }\r\n  }\r\n\r\n  private formHandler(): void {\r\n    if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\r\n      this.dateToVisualize.valueChanges.subscribe((date: string) => {\r\n          this.invalidFormat = false;\r\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\r\n          const result: string = moment(date, this.dateFormat).format(this.dateFormat);\r\n          if (!!result && (result === 'Invalid date' || !isValid)) {\r\n            this.invalidFormat = true;\r\n            return;\r\n          }\r\n          if (!!result) {\r\n            if (!this.isFromInputEvent) {\r\n              this.isFromInputEvent = true;\r\n              this.dateToVisualize.setValue(moment(result, this.dateFormat).format(this.dateFormat));\r\n              this.dateFormControl.setValue(moment(result, this.dateFormat).toDate());\r\n              this.isFromInputEvent = false;\r\n            } else {\r\n              setTimeout(() => {\r\n                this.isFromInputEvent = false;\r\n              }, 1500);\r\n            }\r\n\r\n          }\r\n        });\r\n    } else {\r\n      this.dateToVisualize.valueChanges\r\n        .pipe(\r\n          tap((date: string) => {\r\n            if (date.length > this.dateFormat.length) {\r\n              this.invalidFormat = true;\r\n            } else {\r\n              this.invalidFormat = false;\r\n            }\r\n          }),\r\n          filter((date: string) => date.length === this.dateFormat.length)\r\n        )\r\n        .subscribe((date: string) => {\r\n          this.invalidFormat = false;\r\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\r\n          const result: string = moment(date, this.dateFormat).format('YYYY-MM-DD');\r\n\r\n          if (!!result && (result === 'Invalid date' || !isValid)) {\r\n            this.invalidFormat = true;\r\n            return;\r\n          }\r\n\r\n          if (!!result) {\r\n            if (!this.isFromInputEvent) {\r\n              this.isFromInputEvent = true;\r\n              const subString: string[] = result.split('-');\r\n\r\n              const year: number = parseFloat(subString[0]);\r\n              const month: number = parseFloat(subString[1]);\r\n              const day: number = parseFloat(subString[2]);\r\n\r\n              this.date.setFullYear(year);\r\n              this.date.setDate(day);\r\n              this.date.setMonth(month - 1); // -1 por que los meses se toman como los indices en un array\r\n\r\n              /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\r\n              if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n                this.date = moment(this.date).endOf('month').toDate();\r\n              }\r\n\r\n              this.dateToVisualize.setValue(moment(this.date, 'YYYY-MM-DD').format(this.dateFormat));\r\n              this.dateFormControl.setValue(this.date);\r\n              this.isFromInputEvent = false;\r\n            } else {\r\n              setTimeout(() => {\r\n                this.isFromInputEvent = false;\r\n              }, 1500);\r\n            }\r\n\r\n          }\r\n        });\r\n    }\r\n\r\n\r\n    this.dateFormControl.valueChanges\r\n      .subscribe((date: string) => {\r\n        const incommingDate: string = moment(date, this.dateFormat).format(this.dateFormat);\r\n        if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\r\n          this.dateToVisualize.setValue(incommingDate);\r\n        }\r\n        this.invalidDate.emit(this.invalidFormat);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Evento que se dispara luego seleccionar un mes\r\n   */\r\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void {\r\n\r\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n      datepicker.close();\r\n      const date: Date = moment(chosenMonthDate).endOf('month').toDate();\r\n\r\n      this.dateToVisualize.setValue(moment(date, 'YYYY-MM-DD').format(this.dateFormat));\r\n      this.dateFormControl.setValue(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evento desde el control touch del calendar\r\n   */\r\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>): void {\r\n    this.dateToVisualize.setValue(moment(event.value, 'YYYY-MM-DD').format(this.dateFormat));\r\n    this.dateFormControl.setValue(event.value);\r\n    this.change.emit(event.value);\r\n    this.isClosed = true;\r\n  }\r\n\r\n  getErrorMessage(): void {\r\n    this.invalidDate.emit(this.invalidFormat);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Subscriber, Observable } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected: BehaviorSubject<number | string> = new BehaviorSubject<number | string>(1);\r\n    // Observable string streams\r\n    nodeSelected: Observable<string | number> = this.emitNodeSelected.asObservable();\r\n\r\n    // Observable string sources\r\n    private emitDataSource: BehaviorSubject<Node> = new BehaviorSubject<Node>(undefined);\r\n\r\n    // Observable string streams\r\n    dataSourceObservable: Observable<Node> = this.emitDataSource.asObservable();\r\n\r\n    // Expand node observable\r\n    private emitExpandAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n    nodeExpand: Observable<boolean> = this.emitExpandAllNodes.asObservable();\r\n\r\n     // Collapse node observable\r\n     private emitCollapseAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n     nodeCollapse: Observable<boolean> = this.emitCollapseAllNodes.asObservable();\r\n\r\n    private emitRefreshTree: Subject<void> = new Subject<void>();\r\n    refreshTreeObservable: Observable<void> = this.emitRefreshTree.asObservable();\r\n\r\n    private emitRefreshTreeWithPagination: Subject<void> = new Subject<void>();\r\n    refreshTreeWithPaginationObservable: Observable<void> = this.emitRefreshTreeWithPagination.asObservable();\r\n\r\n    private emitExpandOneNode: Subject<Node> = new Subject<Node>();\r\n    expandOneNodeObservable: Observable<Node> = this.emitExpandOneNode.asObservable();\r\n\r\n    private emitCollapseOneNode: Subject<Node> = new Subject<Node>();\r\n    collapseOneNodeObservable: Observable<Node> = this.emitCollapseOneNode.asObservable();\r\n\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number | string): void {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n    // Service message commands\r\n    changeDataSource(data: Node): void {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n    expandAllNodes(expand: boolean): void {\r\n        this.emitExpandAllNodes.next(expand);\r\n    }\r\n\r\n    collapseAllNodes(collapse: boolean): void {\r\n        this.emitCollapseAllNodes.next(collapse);\r\n    }\r\n\r\n    refreshTree(): void {\r\n        this.emitRefreshTree.next();\r\n    }\r\n\r\n\r\n    refreshTreeWithPagination(): void {\r\n        this.emitRefreshTreeWithPagination.next();\r\n    }\r\n\r\n\r\n    expandOneNode(node: Node): void {\r\n    this.emitExpandOneNode.next(node);\r\n    }\r\n\r\n\r\n    collapseOneNode(node: Node): void {\r\n        this.emitCollapseOneNode.next(node);\r\n    }\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n}\r\n","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n\r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }\r\n\r\n    nextPage(): number {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }\r\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, HostListener } from '@angular/core';\r\nimport { NestedTreeControl, TreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource, MatTree, MatOptionSelectionChange } from '@angular/material';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass']\r\n  // host: { '(document:keyup)': 'onKeyDown($event)' }\r\n})\r\nexport class TreeHelisaComponent implements OnInit, AfterViewInit {\r\n  isDisabled: boolean;\r\n  selectedNode: number | string | null;\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService: TreeHelisaService, private router: Router, private elementRef: ElementRef) {\r\n    // cargar datos pasados por el @Input\r\n    if (!!this.data) {\r\n      const data: Node = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = [];\r\n      this.treeControl.dataNodes = [];\r\n    }\r\n  }\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit: FormControl;\r\n  @ViewChild('tree') tree: MatTree<{}>;\r\n  private selectedOptions: Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  > = new Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  >();\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data: Node;\r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed: EventEmitter<string | number> = new EventEmitter<number | string>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue aÃ±adido\r\n   */\r\n  @Output() added: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() collapseParent: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled: EventEmitter<RequestTreeHelisa> = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() dobleClick: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() keypressDelete: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() keypressInsert: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() checkedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() uncheckedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() clickAddNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickEditNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickDeleteNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  treeControl: NestedTreeControl<Node> = new NestedTreeControl<Node>((node: Node): Node[] | Observable<Node[]> => node.children);\r\n  dataSource: MatTreeNestedDataSource<Node> = new MatTreeNestedDataSource<Node>();\r\n\r\n  isSingleClick: boolean = true;\r\n  currentNode: Node = null;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node: Node): string {\r\n    let result: string[] = [node.name];\r\n    let concat: string = '';\r\n\r\n    if (node.parent) {\r\n      result.push(this.getDescription(node.parent));\r\n    }\r\n\r\n    if (result.length === 1) {\r\n      return node.name;\r\n    }\r\n\r\n    result = result.reverse();\r\n\r\n    for (let i: number = 0; i < result.length; i++) {\r\n      const element: string = result[i];\r\n      concat = concat + element + (i === result.length - 1 ? '' : ',');\r\n    }\r\n\r\n    return concat;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable.subscribe((res: Node) => {\r\n      if (!!res && !!res.children) {\r\n        this.selectedNode = res.id;\r\n        this.receivePage(res.children);\r\n      } else {\r\n        this.dataSource.data = [];\r\n        this.treeControl.dataNodes = [];\r\n      }\r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected.subscribe((res: string | number) => {\r\n      if (!!this.data && !!this.data.children) {\r\n        this.selectNode(this.data, res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeObservable.subscribe((res: void) => {\r\n      this.refreshTree();\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeWithPaginationObservable.subscribe((res: void) => {\r\n      this.refreshTreeWithPagination();\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.treeHelisaService.nodeExpand.subscribe((res: boolean) => {\r\n      if (res != null) {\r\n        if (res) {\r\n          this.tree.treeControl.expandAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.nodeCollapse.subscribe((res: boolean) => {\r\n      if (res !== null) {\r\n        if (res) {\r\n          this.tree.treeControl.collapseAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.expandOneNodeObservable.subscribe((res: Node) => {\r\n      if (res !== undefined) {\r\n        this.treeControl.expand(res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.collapseOneNodeObservable.subscribe((res: Node) => {\r\n      if (res !== undefined) {\r\n        this.treeControl.collapse(res);\r\n      }\r\n    });\r\n  }\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node: Node): void {\r\n    this.isSingleClick = true;\r\n    setTimeout(() => {\r\n      if (this.isSingleClick) {\r\n        this.selectNode(node, node.id);\r\n\r\n        // if(!!node && !node.children){\r\n        if (!!node) {\r\n          this.nodeSelected.emit(node.id);\r\n          this.currentNode = node;\r\n        }\r\n      }\r\n    }, 350);\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n\r\n    if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node: Node): void {\r\n    this.clickEditNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se edita el nodo ahora solo se emite el evento 'clickEditNode'\r\n     * retornando el nodo al cual le hicieron click en la opciÃ³n delete\r\n     */\r\n    // node.isEditable = true;\r\n    // this.isDisabled = true;\r\n  }\r\n\r\n  onAdd(node: Node): void {\r\n    this.clickAddNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se crea y se agrega el nodo ahora solo se emite el evento 'clickAddNode'\r\n     * retornando el nodo al cual le hicieron click en la opciÃ³n add\r\n     */\r\n    //   // si no tiene hijos instanciar el array\r\n    //   if (!node.children) {\r\n    //     node.children = [];\r\n    //   }\r\n    //   node.children.push({\r\n    //     id: Math.random(),\r\n    //     name: '',\r\n    //     isSelected: false,\r\n    //     parent: node,\r\n    //     isEditable: true\r\n    //   });\r\n    //   if (node.children) {\r\n    //     this.isDisabled = true;\r\n    //     this.treeHelisaService.expandOneNode(node);\r\n    //   }\r\n    //   this.refreshTree();\r\n  }\r\n\r\n  onDelete(node: Node): void {\r\n    this.clickDeleteNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se elimina el nodo ahora solo se emite el evento 'clickDeleteNode'\r\n     * retornando el nodo al cual le hicieron click en la opciÃ³n delete\r\n     */\r\n    // // Remueve el nodo utilizando la libreria de lodash\r\n    // _.remove(node.parent.children, node);\r\n\r\n    // this.refreshTree();\r\n    // this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node: Node, value: string): void {\r\n    node.name = value;\r\n    if (node.id == null && node.name === '') {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    } else if (node.id && node.id != null && node.name.trim() !== '') {\r\n      this.edited.emit(node);\r\n      node.isEditable = false;\r\n      this.selectNode(node, node.id);\r\n    } else if (node.id == null && node.name.trim() !== '') {\r\n      this.added.emit(node);\r\n      node.isEditable = false;\r\n    }\r\n    this.isDisabled = false;\r\n    this.refreshTree();\r\n  }\r\n\r\n  onCancel(node: Node, value: string): void {\r\n    this.isDisabled = false;\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if (node.id == null) {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    }\r\n\r\n    node.isEditable = false;\r\n  }\r\n\r\n  onDblClick(node: Node): void {\r\n    this.isSingleClick = false;\r\n    this.dobleClick.emit(node.id);\r\n  }\r\n\r\n  @HostListener('document:keyup', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    switch (event.key) {\r\n      case 'Delete':\r\n        this.keypressDelete.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'Insert':\r\n        this.keypressInsert.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'ArrowDown':\r\n        this.moveDownIntoTree();\r\n        break;\r\n      case 'ArrowUp':\r\n        this.moveUpIntoTree();\r\n        break;\r\n    }\r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  private moveUpIntoTree(): number {\r\n    if (!!this.data) {\r\n      // si aun no hay ningun node seleccionado selecciona el primero\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode.parent && this.currentNode.id != null) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number = this.currentNode.parent.children.indexOf(this.currentNode);\r\n\r\n          if (this.currentNode.parent.id == null && index === 0) {\r\n            return 0;\r\n          } else {\r\n            // si tiene nodos al mismo nivel salta al nodo anterior\r\n            if (index !== undefined && index === 0) {\r\n              this.currentNode = this.currentNode.parent;\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } else {\r\n              // si no tiene nodos al mismo nivel salta al nodo padre\r\n              this.currentNode = this.currentNode.parent.children[index - 1];\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveDownIntoTree(): void {\r\n    if (!!this.data) {\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number =\r\n            !!this.currentNode && !!this.currentNode.parent ? this.currentNode.parent.children.indexOf(this.currentNode) : null;\r\n\r\n          // si tiene childrens pasa al primer children\r\n          if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n            this.currentNode = this.currentNode.children[0];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else if (\r\n            index !== undefined &&\r\n            index === this.currentNode.parent.children.length - 1 &&\r\n            this.currentNode.parent.parent != null &&\r\n            this.currentNode.parent.parent.children != null &&\r\n            this.currentNode.parent.parent.children.length > 0\r\n          ) {\r\n            const indexOfParent: number = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent);\r\n            this.currentNode =\r\n              this.currentNode.parent.parent.children[indexOfParent + 1] === undefined\r\n                ? this.currentNode\r\n                : this.currentNode.parent.parent.children[indexOfParent + 1];\r\n\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else {\r\n            // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\r\n            this.currentNode = this.currentNode.parent.children[index + 1];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild(t: number, node: Node): boolean {\r\n    return !!node.children && node.children.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\r\n   */\r\n  private refreshTree(): void {\r\n    this.data = null;\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())\r\n   */\r\n  private refreshTreeWithPagination(): void {\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]): void {\r\n    if (!this.data) {\r\n      this.data = { id: null, name: 'root', isSelected: false };\r\n    }\r\n    if (!this.data.children) {\r\n      this.data.children = new Array<Node>();\r\n      this.treeHelisaConnect = new TreeHelisaConnect<Node>();\r\n    }\r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach((node: Node) => {\r\n      this.fillParent(node, this.data);\r\n    });\r\n\r\n    this.data.children = this.reorderByOrderIndex(this.data.children);\r\n\r\n    this.dataSource.data = this.data.children;\r\n    this.treeControl.dataNodes = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   */\r\n  private fillParent(node: Node, parent: Node): void {\r\n    node.parent = parent;\r\n    if (node.children && node.children.length > 0) {\r\n      node.children.forEach((item: Node) => {\r\n        this.fillParent(item, node);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   */\r\n  private selectNode(node: Node, id: number | string): Node {\r\n    if (node == null) {\r\n      return null;\r\n    }\r\n    this.upSelectNode(node);\r\n    if (!!this.selectedNode) {\r\n      const nodeSelected: Node = this.getNodeById(this.selectedNode);\r\n      if (nodeSelected != null) {\r\n        nodeSelected.isSelected = false;\r\n        this.selectedNode = null;\r\n      }\r\n    }\r\n    if (node.id !== undefined && node.id === id) {\r\n      node.isSelected = true;\r\n      this.expandAllParents(node);\r\n      this.selectedNode = node.id;\r\n      return node;\r\n    } else if (node.children != null) {\r\n      let i: number;\r\n      let result: Node = null;\r\n      for (i = 0; result == null && i < node.children.length; i++) {\r\n        result = this.selectNode(node.children[i], id);\r\n      }\r\n      return result;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private expandAllParents(node: Node): void {\r\n    if (!!node && !!node.parent) {\r\n      this.treeHelisaService.expandOneNode(node.parent);\r\n      this.expandAllParents(node.parent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   */\r\n  private upSelectNode(node: Node): void {\r\n    if (!!node && node.isSelected !== undefined) {\r\n      node.isSelected = false;\r\n      if (!!node.children) {\r\n        for (const childrenNode of node.children) {\r\n          this.upSelectNode(childrenNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getClassNode(node: Node): string[] {\r\n    const classNode: string[] = [];\r\n    if (node.isSelected) {\r\n      classNode.push('isSelected');\r\n    }\r\n    if (node.classNode) {\r\n      classNode.push(node.classNode);\r\n    }\r\n    return classNode;\r\n  }\r\n\r\n  onEditMode(node: Node, editMode: boolean): void {\r\n    this.getSelectedOptions(node).editMode = editMode;\r\n  }\r\n\r\n  onSelectOption(event: MatOptionSelectionChange, node: Node): void {\r\n    node.isCheckedOption = event.source.selected;\r\n    if (node.isCheckedOption) {\r\n      this.checkedOptionNode.emit(node.id);\r\n    } else {\r\n      this.uncheckedOptionNode.emit(node.id);\r\n    }\r\n  }\r\n\r\n  getSelectedOptions(\r\n    node: Node\r\n  ): {\r\n    formControl: FormControl;\r\n    editMode: boolean;\r\n  } {\r\n    if (this.selectedOptions.has(node.id)) {\r\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\r\n    } else {\r\n      this.reloadSelectedOptions(node, false);\r\n    }\r\n    return this.selectedOptions.get(node.id);\r\n  }\r\n\r\n  private reloadSelectedOptions(node: Node, editMode: boolean): void {\r\n    const array: Array<string | number | null> = new Array<string | number | null>();\r\n    node.options.forEach((option: Node) => {\r\n      if (option.isCheckedOption) {\r\n        array.push(option.id);\r\n      }\r\n    });\r\n    const obj: {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    } = { formControl: new FormControl(array), editMode };\r\n    this.selectedOptions.set(node.id, obj);\r\n  }\r\n\r\n  /**\r\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\r\n   * @param id  number | string\r\n   * @returns Node o null si no hay un nodo con ese id\r\n   */\r\n  getNodeById(id: number | string): Node {\r\n    const queue: Node[] = [...this.dataSource.data];\r\n    while (queue.length > 0) {\r\n      const curr: Node = queue.shift();\r\n      if (curr.id === id) {\r\n        return curr;\r\n      } else {\r\n        if (!!curr.children) {\r\n          queue.push(...curr.children);\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  reorderByOrderIndex(node: Node[]): Node[] {\r\n    if (!!node && node.length > 0) {\r\n      try {\r\n        node = _.orderBy(node, (x: Node) => x.orderIndex, ['asc']);\r\n        node.forEach((element: Node) => {\r\n          if (!!element.children && element != null) {\r\n            element.children = this.reorderByOrderIndex(element.children);\r\n          }\r\n        });\r\n        return node;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\r\n\r\n@Injectable()\r\nexport class AutocompleteHelisaService<T> {\r\n\r\n  private emitChangeSource: BehaviorSubject<Array<OptionAutocompleteHelisa<T>>> =\r\n  new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\r\n\r\n  public dataSource$: Observable<Array<OptionAutocompleteHelisa<T>>> = this.emitChangeSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>): void {\r\n    this.emitChangeSource.next(options);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { map, startWith, throttleTime, debounceTime } from 'rxjs/operators';\r\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\r\n\r\nexport interface OptionAutocompleteHelisa<T> {\r\n  value: T;\r\n  displayText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-autocomplete',\r\n  templateUrl: './autocomplete-helisa.component.html',\r\n  styleUrls: ['./autocomplete-helisa.component.css'],\r\n  providers: [AutocompleteHelisaService]\r\n})\r\nexport class AutocompleteHelisaComponent<T> implements OnInit {\r\n\r\n  @Input() myControl: FormControl = new FormControl();\r\n  @Input() options: Array<OptionAutocompleteHelisa<T>> = new Array<OptionAutocompleteHelisa<T>>();\r\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\r\n  selectedValue: OptionAutocompleteHelisa<T>;\r\n  @Output() selectedValueEmmiter: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\r\n  @Input() isRemote: boolean = false;\r\n  isLoading: boolean = false;\r\n\r\n\r\n  onScrollObservable: Subject<void> = new Subject<void>();\r\n\r\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.onScrollObservable.asObservable()\r\n    .pipe(\r\n      debounceTime(500),\r\n      throttleTime(500)\r\n    )\r\n    .subscribe(() => {\r\n      this.nextPage.emit();\r\n    });\r\n\r\n    if (this.isRemote) {\r\n      this.autocompleteHelisaService.dataSource$.subscribe((data: OptionAutocompleteHelisa<T>[]) => {\r\n        setTimeout(() => {\r\n          this.options = data;\r\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\r\n        });\r\n      });\r\n    }\r\n\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map((x: string) => this._checkRegex(x)),\r\n      map((value: string) => this._filter(value))\r\n    );\r\n\r\n  }\r\n\r\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {\r\n    return option ? option.displayText : undefined;\r\n  }\r\n\r\n  getService(): AutocompleteHelisaService<T> {\r\n    return this.autocompleteHelisaService;\r\n  }\r\n\r\n\r\n  /** Elimina caracteres extraÃ±os */\r\n  private _checkRegex(value: string): string {\r\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '');\r\n    return value;\r\n  }\r\n\r\n  private _filter(value: string): OptionAutocompleteHelisa<T>[] {\r\n    if (!(value)) {\r\n      if (!this.isRemote) {\r\n        const filterValue: string[] = value.toLowerCase().split(' ');\r\n        return this.options.filter((option: OptionAutocompleteHelisa<T>) => {\r\n          let ws: boolean = true;\r\n          filterValue.forEach((text: string) => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\r\n          return ws;\r\n        }).splice(0, 5);\r\n      } else {\r\n        return this.options;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onSelected(event: {option: {value: OptionAutocompleteHelisa<T>}}): void {\r\n    this.selectedValue = event.option.value;\r\n    this.selectedValueEmmiter.emit(this.selectedValue.value);\r\n  }\r\n\r\n  getNextPage(): void {\r\n    this.onScrollObservable.next();\r\n  }\r\n}\r\n","import { Directive, EventEmitter, Input, Output, OnDestroy} from '@angular/core';\r\nimport { MatAutocomplete} from '@angular/material';\r\nimport { takeUntil, tap} from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\nexport interface IAutoCompleteScrollEvent {\r\n  autoComplete: MatAutocomplete;\r\n  scrollEvent: Event;\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'mat-autocomplete[optionsScroll]'\r\n})\r\nexport class OptionsScrollDirective implements OnDestroy  {\r\n\r\n  /**\r\n   * This value would different depends of styles\r\n   */\r\n  @Input() thresholdPercent: number = .9;\r\n  @Output() optionsScroll: EventEmitter<IAutoCompleteScrollEvent> = new EventEmitter<IAutoCompleteScrollEvent>();\r\n  destroy: Subject<void> = new Subject<void>();\r\n  lastScrollTop: number  = 0;\r\n\r\n  constructor(public autoComplete: MatAutocomplete) {\r\n    this.autoComplete.opened.pipe(\r\n      tap(() => {\r\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\r\n        // Note: The panel will be available on next tick\r\n        // Note: The panel wil NOT open if there are no options to display\r\n        setTimeout(() => {\r\n          // Note: remove listner just for safety, in case the close event is skipped.\r\n          this.removeScrollEventListener();\r\n          if (!!this.autoComplete &&\r\n            !!this.autoComplete.panel &&\r\n            !!this.autoComplete.panel.nativeElement) {\r\n              this.autoComplete.panel.nativeElement\r\n                .addEventListener('scroll', this.onScroll.bind(this), false);\r\n            }\r\n        });\r\n      }),\r\n      takeUntil(this.destroy)).subscribe();\r\n\r\n    this.autoComplete.closed.pipe(\r\n      tap(() => this.removeScrollEventListener()),\r\n      takeUntil(this.destroy)).subscribe();\r\n  }\r\n\r\n  private removeScrollEventListener(): void {\r\n    if (!!this.autoComplete &&\r\n      !!this.autoComplete.panel &&\r\n      !!this.autoComplete.panel.nativeElement) {\r\n    this.autoComplete.panel.nativeElement\r\n      .removeEventListener('scroll', this.onScroll);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy.next();\r\n    this.destroy.complete();\r\n\r\n    this.removeScrollEventListener();\r\n  }\r\n\r\n\r\n  onScroll(event: Event): void {\r\n    // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\r\n    const st: number = (event.target as Window).pageYOffset || (event.target as Element).scrollTop;\r\n    if (st > this.lastScrollTop) {\r\n       // downscroll code\r\n       if (this.thresholdPercent === undefined) {\r\n        this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n      } else {\r\n        const threshold: number = this.thresholdPercent * 100 * (event.target as Element).scrollHeight / 100;\r\n        const current: number = (event.target as Element).scrollTop + (event.target as Element).clientHeight;\r\n        // console.log(`scroll ${current}, threshold: ${threshold}`)\r\n        if (current > threshold) {\r\n          // console.log('load next page');\r\n          this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n        }\r\n      }\r\n    } else {\r\n       // upscroll code\r\n    }\r\n    this.lastScrollTop = st <= 0 ? 0 : st;\r\n  }\r\n\r\n}\r\n","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\r\nimport { MatTooltip } from '@angular/material';\r\n\r\n@Directive({\r\n    selector: '[helTooltip]',\r\n    providers: [MatTooltip]\r\n})\r\nexport class HelTooltipDirective {\r\n\r\n    tooltip: MatTooltip;\r\n\r\n    /**\r\n     * Mensaje a mostrar\r\n     */\r\n    @Input('helTooltip') message: string;\r\n\r\n    /**\r\n     * Tiempo antes de ocultarla el mensaje\r\n     */\r\n    @Input() hideDelay: number = 600;\r\n\r\n    /**\r\n     * Tiempo antes de mostra el mensaje\r\n     */\r\n    @Input() showDelay: number = 500;\r\n\r\n\r\n    constructor(tooltip: MatTooltip, private elemRef: ElementRef) {\r\n      this.tooltip = tooltip;\r\n    }\r\n\r\n    @HostListener('mouseover') mouseover(): void {\r\n      const currentContent: string = this.elemRef.nativeElement.innerText;\r\n\r\n      if (!!currentContent && !!this.message) {\r\n        if ((currentContent.toUpperCase() !== this.message.toString().toUpperCase()) || this.isEllipsisActive(this.elemRef.nativeElement)) {\r\n          this.tooltip.message = this.message;\r\n        }\r\n      }\r\n\r\n      this.tooltip.showDelay =  this.showDelay;\r\n      this.tooltip.hideDelay = this.hideDelay;\r\n    }\r\n\r\n\r\n    private isEllipsisActive(e: {offsetWidth: number , scrollWidth: number}): boolean {\r\n      return (e.offsetWidth < e.scrollWidth);\r\n    }\r\n}\r\n","import { Directive, HostBinding, PLATFORM_ID, Inject, Input, OnChanges } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: 'a[href]',\r\n})\r\nexport class ExternalLinkDirective implements OnChanges {\r\n  @HostBinding('attr.rel') relAttr: string = '';\r\n  @HostBinding('attr.target') targetAttr: string = '';\r\n  @HostBinding('attr.href') hrefAttr: string = '';\r\n  @Input() href: string;\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\r\n\r\n  ngOnChanges(): void {\r\n\r\n    this.hrefAttr = this.href;\r\n\r\n    if (this.isLinkExternal()) {\r\n      this.relAttr = 'noopener';\r\n      this.targetAttr = '_blank';\r\n    }\r\n  }\r\n\r\n  private isLinkExternal(): boolean {\r\n    return isPlatformBrowser(this.platformId) && !this.href.includes(location.hostname);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'externalLink'\r\n})\r\nexport class ExternalLinkPipe implements PipeTransform {\r\n    transform(value: string, ...args: string[]): string {\r\n        return '//' + value;\r\n    }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\ninterface AlertUncompletedDataHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst DEFAULT_TITLE: string = 'No ha suministrado la informaciÃ³n necesaria.';\r\nconst DEFAULT_CONTENT: string = 'Si insite en grabar asÃ­, este concepto no serÃ¡ utilizable hasta su conclusiÃ³n satisfactoria, que deberÃ¡ completar posteriormente modificando en concepto.';\r\n\r\n@Component({\r\n  selector: 'hel-alert-uncompleted-data-helisa',\r\n  templateUrl: './alert-uncompleted-data-helisa.component.html',\r\n  styleUrls: ['./alert-uncompleted-data-helisa.component.sass']\r\n})\r\nexport class AlertUncompletedDataHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertUncompletedDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertUncompletedDataHelisaProperties\r\n  ) {\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = DEFAULT_TITLE;\r\n    }\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Lo asumo';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Me retracto';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\ninterface AlertLostDataHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst DEFAULT_TITLE: string = 'Â¿EstÃ¡ seguro de querer perder lo ya hecho?';\r\nconst DEFAULT_CONTENT: string = 'Si no estÃ¡ seguro, puede continuar o \"aplicar\" y posteriormente cuando tenga clara las respuestas, usando la opciÃ³n de modificar podrÃ¡ completar el concepto.';\r\n\r\n@Component({\r\n  selector: 'hel-alert-lost-data-helisa',\r\n  templateUrl: './alert-lost-data-helisa.component.html',\r\n  styleUrls: ['./alert-lost-data-helisa.component.sass']\r\n})\r\nexport class AlertLostDataHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertLostDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertLostDataHelisaProperties\r\n  ) {\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = DEFAULT_TITLE;\r\n    }\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Lo asumo';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Me retracto';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\nconst DEFAULT_TITLE: string = 'Â¿EstÃ¡ seguro que debe anular esta informaciÃ³n?';\r\nconst DEFAULT_CONTENT: string = 'Al anular este concepto, quedarÃ¡ la huella de todo lo que se hizo apoyados en su informaciÃ³n. No es una eliminaciÃ³n tÃ¡cita, es suprimir su uso en adelante.';\r\n\r\n@Component({\r\n  selector: 'hel-alert-delete-data-helisa',\r\n  templateUrl: './alert-delete-data-helisa.component.html',\r\n  styleUrls: ['./alert-delete-data-helisa.component.sass']\r\n})\r\nexport class AlertDeleteDataHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertDeleteDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertDeleteDataHelisaComponent\r\n  ) {\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = DEFAULT_TITLE;\r\n    }\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Lo asumo';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Me retracto';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import {Component, OnInit, Inject, Input} from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\ninterface AlertUncompletedSelectedDataHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Elemento sin informaciÃ³n requerida. ModifÃ­quelo para completarlo.';\r\n\r\n@Component({\r\n  selector: 'hel-alert-uncompleted-selected-data-helisa',\r\n  templateUrl: './alert-uncompleted-selected-data-helisa.component.html',\r\n  styleUrls: ['./alert-uncompleted-selected-data-helisa.component.sass']\r\n})\r\nexport class AlertUncompletedSelectedDataHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  okLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertUncompletedSelectedDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertUncompletedSelectedDataHelisaProperties\r\n  ) {\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Aceptar';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\ninterface AlertInformationNotValidProperties {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Rectifique. Hay informaciÃ³n no vÃ¡lida';\r\n\r\n@Component({\r\n    selector: 'hel-alert-information-not-valid-helisa',\r\n    templateUrl: './alert-information-not-valid-helisa.component.html',\r\n    styleUrls: ['./alert-information-not-valid-helisa.component.sass']\r\n})\r\nexport class AlertInformationNotValidHelisaComponent implements OnInit {\r\n\r\n    content: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AlertInformationNotValidHelisaComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: AlertInformationNotValidProperties\r\n    ) {\r\n        this.content = data.content;\r\n        if (this.content === undefined) {\r\n            this.content = DEFAULT_CONTENT;\r\n        }\r\n        dialogRef.disableClose = true;\r\n        dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n            if (event.code === 'Escape') {\r\n                this.dialogRef.close(this.onCancel());\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        setTimeout(() => {\r\n            this.dialogRef.close();\r\n        }, 3000);\r\n    }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {ComboBoxListable} from './interface/combo-box-listable';\r\nimport {ComboBoxEditable} from './interface/combo-box-editable';\r\n\r\nexport enum ComboBoxHelisaState {\r\n  CLOSED,\r\n  SELECT,\r\n  INSERT\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-combo-box-helisa',\r\n  templateUrl: './combo-box-helisa.component.html',\r\n  styleUrls: ['./combo-box-helisa.component.css']\r\n})\r\nexport class ComboBoxHelisaComponent<TYPE> implements OnInit, AfterViewInit {\r\n\r\n  @Input() editable: ComboBoxEditable<TYPE>;\r\n  @Input() listable: ComboBoxListable<TYPE>;\r\n  @Input() placeholder: string = 'Sin seleccionar';\r\n  @Input() selectedItem: TYPE;\r\n  @Output() selectEmitter: EventEmitter<TYPE> = new EventEmitter<TYPE>();\r\n  @Input() enabled: boolean = true;\r\n\r\n  private page: number = 0;\r\n  private pageSize: number = 50;\r\n  private haveNextPage: boolean = true;\r\n  state: ComboBoxHelisaState = ComboBoxHelisaState.CLOSED;\r\n\r\n  rows: TYPE[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.getNextPage();\r\n  }\r\n\r\n  private getNextPage(): void {\r\n    if (this.haveNextPage) {\r\n      this.listable.getData(this.page++, this.pageSize).subscribe((rows: TYPE[]) => {\r\n        rows.forEach((item: TYPE) => this.rows.push(item));\r\n        this.haveNextPage = rows.length > 0;\r\n      });\r\n    }\r\n  }\r\n\r\n  get comboBoxHelisaState(): typeof ComboBoxHelisaState {\r\n    return ComboBoxHelisaState;\r\n  }\r\n\r\n  onFocus(): void {\r\n    if (this.enabled) {\r\n      this.state = ComboBoxHelisaState.SELECT;\r\n    }\r\n  }\r\n\r\n  selectItem(row: TYPE): void {\r\n    this.selectedItem = row;\r\n    this.selectEmitter.emit(row);\r\n    this.state = ComboBoxHelisaState.CLOSED;\r\n  }\r\n\r\n  changeToInsert(): void {\r\n    this.state = ComboBoxHelisaState.INSERT;\r\n  }\r\n\r\n  insert(event: string): void {\r\n    if (event.trim().length > 0) {\r\n      this.editable.insert(event).subscribe(\r\n        (data: TYPE) => {\r\n          this.rows.push(data);\r\n          this.state = ComboBoxHelisaState.SELECT;\r\n        }\r\n      );\r\n    } else {\r\n      this.state = ComboBoxHelisaState.SELECT;\r\n    }\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n    if (element.scrollHeight - element.scrollTop < 1000) {\r\n      this.getNextPage();\r\n    }\r\n  }\r\n}\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\n\r\ninterface AlertAuthorizationTransactionHelisaProperties {\r\n  title: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst DEFAULT_TITLE: string = '!Esta transacciÃ³n requiere autorizaciÃ³n!';\r\n\r\n@Component({\r\n  selector: 'hel-alert-authorization-transaction-helisa',\r\n  templateUrl: './alert-authorization-transaction-helisa.component.html',\r\n  styleUrls: ['./alert-authorization-transaction-helisa.component.sass']\r\n})\r\nexport class AlertAuthorizationTransactionHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertAuthorizationTransactionHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertAuthorizationTransactionHelisaProperties\r\n  ) {\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = DEFAULT_TITLE;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Solicitarla';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Negarla';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void  {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import {AfterViewInit, Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\nexport enum PagingTreeInitialMode {\r\n  COLLAPSE,\r\n  EXPAND\r\n}\r\n\r\nexport interface PagingTreeHelisaListable<T> {\r\n  get(lastChildOrder: number, size: number): Observable<T[]>;\r\n\r\n  getIdField(): string;\r\n\r\n  getIdParentField(): string;\r\n\r\n  compare(a: T, b: T): number;\r\n}\r\n\r\ninterface HelisaNode<T> {\r\n  object: T;\r\n  level: number;\r\n  haveChildren: boolean;\r\n  expanded: boolean;\r\n  visible: boolean;\r\n  preorder: number;\r\n}\r\n\r\nexport interface HelisaNodeData<T> {\r\n  readonly object: T;\r\n  readonly level: number;\r\n  readonly haveChildren: boolean;\r\n  readonly expanded: boolean;\r\n  readonly visible: boolean;\r\n  readonly preorder: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-paging-tree',\r\n  templateUrl: './paging-tree-helisa.component.html',\r\n  styleUrls: ['./paging-tree-helisa.component.css']\r\n})\r\nexport class PagingTreeHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private pageSize: number = 200000;\r\n  private visibleLimit: number = 0;\r\n  private visibleSize: number = 100;\r\n  private treeMode: PagingTreeInitialMode = PagingTreeInitialMode.EXPAND;\r\n  private visibleObjects: Array<T> = [];\r\n  private service: PagingTreeHelisaListable<T>;\r\n  private searchNode: Map<string, HelisaNode<T>>;\r\n  private allNode: Array<HelisaNode<T>> = [];\r\n\r\n  @Output()\r\n  afterLoadData: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @ContentChild('nodeComponent')\r\n  nodeComponent: TemplateRef<{ data: T, node: HelisaNodeData<T> }>;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n  }\r\n\r\n  @Input()\r\n  set mode(paramMode: PagingTreeInitialMode) {\r\n    this.treeMode = paramMode;\r\n    this.reset();\r\n  }\r\n\r\n  @Input()\r\n  set pagingTreeHelisaListable(paramService: PagingTreeHelisaListable<T>) {\r\n    this.service = paramService;\r\n    this.reset();\r\n  }\r\n\r\n  public reset(): void {\r\n    if (this.service) {\r\n      this.service.get(0, this.pageSize).subscribe((items: T[]) => this.loadData(items));\r\n    }\r\n  }\r\n\r\n  private loadData(items: T[]): void {\r\n    this.searchNode = new Map<string, HelisaNode<T>>();\r\n    this.visibleObjects = [];\r\n    this.allNode = [];\r\n    items = this.sortItems(items);\r\n    this.searchNode = new Map<string, HelisaNode<T>>();\r\n    items.forEach((item: T) => {\r\n      const node: HelisaNode<T> = this.createNode(item);\r\n      this.allNode.push(node);\r\n    });\r\n    this.loadNextVisibleObjects(null);\r\n    this.afterLoadData.emit();\r\n  }\r\n\r\n  private sortItems(items: T[]): T[] {\r\n    const lAdy: Map<string, T[]> = new Map<string, T[]>();\r\n    const stack: T[] = [];\r\n    items.forEach((item: T) => {\r\n      const idParent: string = item[this.service.getIdParentField()];\r\n      if (!idParent) {\r\n        stack.unshift(item);\r\n      } else {\r\n        if (!lAdy.has(idParent)) {\r\n          lAdy.set(idParent, []);\r\n        }\r\n        lAdy.get(idParent).push(item);\r\n      }\r\n    });\r\n    const response: T[] = new Array<T>(items.length);\r\n    let index: number = 0;\r\n    while (stack.length > 0) {\r\n      const last: T = stack.pop();\r\n      response[index++] = last;\r\n      const children: T[] = lAdy.get(last[this.service.getIdField()]);\r\n      if (children) {\r\n        for (let i: number = children.length - 1; i >= 0; i--) {\r\n          stack.push(children[i]);\r\n        }\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n\r\n  private createNode(item: T): HelisaNode<T> {\r\n    if (this.searchNode.has(item[this.service.getIdField()])) {\r\n      throw Error('Ya existe el nodo.');\r\n    }\r\n    const parentInformation: HelisaNode<T> = this.getNodeInformationById(item[this.service.getIdParentField()]);\r\n    const nodeInformation: HelisaNode<T> = {\r\n      object: item,\r\n      haveChildren: false,\r\n      level: parentInformation ? parentInformation.level + 1 : 0,\r\n      expanded: this.treeMode === PagingTreeInitialMode.EXPAND,\r\n      visible: false,\r\n      preorder: this.searchNode.size + 1,\r\n    };\r\n    this.searchNode.set(item[this.service.getIdField()], nodeInformation);\r\n    if (parentInformation) {\r\n      parentInformation.haveChildren = true;\r\n    }\r\n    return nodeInformation;\r\n  }\r\n\r\n  public getNodeInformationById(id: string): HelisaNode<T> {\r\n    return this.searchNode.get(id);\r\n  }\r\n\r\n  public getNodeInformation(item: T): HelisaNode<T> {\r\n    return this.searchNode.get(item[this.service.getIdField()]);\r\n  }\r\n\r\n  getLevelClass(item: T): string {\r\n    return 'padding-level-' + this.getNodeInformationById(item[this.service.getIdField()]).level;\r\n  }\r\n\r\n  private loadNextVisibleObjects(nodeFrom: T): void {\r\n    const visibleObjects: T[] = [];\r\n    this.visibleObjects.forEach((item: T) => {\r\n      if (this.getNodeInformation(item)) {\r\n        if (nodeFrom && this.getNodeInformation(nodeFrom).preorder >= this.getNodeInformation(item).preorder) {\r\n          visibleObjects.push(item);\r\n        } else {\r\n          this.getNodeInformationById(item[this.service.getIdField()]).visible = false;\r\n        }\r\n      }\r\n    });\r\n    this.visibleLimit = visibleObjects.length + this.visibleSize;\r\n    this.allNode.forEach((item: HelisaNode<T>) => {\r\n      if (visibleObjects.length < this.visibleLimit &&\r\n        (!nodeFrom || this.getNodeInformation(nodeFrom).preorder < item.preorder)) {\r\n        const idParent: string = item.object[this.service.getIdParentField()];\r\n        if (!idParent) {\r\n          visibleObjects.push(item.object);\r\n          item.visible = true;\r\n        } else {\r\n          const parentInformation: HelisaNode<T> = this.getNodeInformationById(idParent);\r\n          if (parentInformation.visible && parentInformation.expanded) {\r\n            visibleObjects.push(item.object);\r\n            item.visible = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    this.visibleObjects = visibleObjects;\r\n  }\r\n\r\n  collapseNode(item: T): void {\r\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = false;\r\n    this.loadNextVisibleObjects(item);\r\n  }\r\n\r\n  expandNode(item: T): void {\r\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = true;\r\n    this.loadNextVisibleObjects(item);\r\n  }\r\n\r\n  showNextPage(): void {\r\n    if (this.visibleObjects.length > 0) {\r\n      this.loadNextVisibleObjects(this.visibleObjects[this.visibleObjects.length - 1]);\r\n    }\r\n  }\r\n\r\n  get visibleData(): ReadonlyArray<T> {\r\n    return this.visibleObjects;\r\n  }\r\n\r\n  removeItem(item: T): void {\r\n    this.removeById(item[this.service.getIdField()]);\r\n  }\r\n\r\n  removeById(id: string): void {\r\n    if(this.getNodeInformationById(id)) {\r\n      const idParent: string = this.getNodeInformationById(id).object[this.service.getIdParentField()];\r\n      const set: Set<string> = new Set<string>();\r\n      set.add(id);\r\n      const beginIndex: number = this.allNode.findIndex(\r\n        (itemSearch: HelisaNode<T>) => itemSearch.object[this.service.getIdField()] === id\r\n      );\r\n      let lastIndex: number = this.allNode.length;\r\n      for (let i: number = beginIndex + 1; i < this.allNode.length; i++) {\r\n        const itemSearch: T = this.allNode[i].object;\r\n        if (set.has(itemSearch[this.service.getIdParentField()])) {\r\n          set.add(itemSearch[this.service.getIdField()]);\r\n        } else {\r\n          lastIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      const deletedItems: HelisaNode<T>[] = this.allNode.splice(beginIndex, lastIndex - beginIndex);\r\n      let parentHaveChildren: boolean = false;\r\n      deletedItems.forEach((deletedItem: HelisaNode<T>) => this.searchNode.delete(deletedItem.object[this.service.getIdField()]));\r\n      this.allNode.forEach((searchItem: HelisaNode<T>, index: number) => {\r\n        searchItem.preorder = index + 1\r\n        if(searchItem.object[this.service.getIdParentField()] === idParent) {\r\n          parentHaveChildren = true;\r\n        }\r\n      });\r\n      if(idParent) {\r\n        this.getNodeInformationById(idParent).haveChildren = parentHaveChildren;\r\n      }\r\n      this.loadNextVisibleObjects(beginIndex > 0 ? this.allNode[beginIndex - 1].object : null);\r\n    }\r\n  }\r\n\r\n  addItem(item: T): void {\r\n    const indexParent: number = this.allNode.findIndex((node: HelisaNode<T>) => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\r\n    if (indexParent >= 0) {\r\n      this.allNode.push(this.createNode(item));\r\n      this.allNode[indexParent].haveChildren = true;\r\n      this.reSort();\r\n      this.expandNode(this.allNode[indexParent].object);\r\n    } else {\r\n      throw Error('No existe el padre.');\r\n    }\r\n  }\r\n\r\n  updateItem(item: T): void {\r\n    if (this.getNodeInformation(item)) {\r\n      this.getNodeInformation(item).object = item;\r\n      this.reSort();\r\n      const indexParent: number = this.allNode.findIndex(\r\n        (node: HelisaNode<T>) => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\r\n      if (indexParent >= 0) {\r\n        this.expandNode(this.allNode[indexParent].object);\r\n      } else {\r\n        this.loadNextVisibleObjects(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  private reSort(): void {\r\n    const items: T[] = this.allNode.map((node: HelisaNode<T>) => node.object);\r\n    items.sort((a: T, b: T) => this.service.compare(a, b));\r\n    const preorder: T[] = this.sortItems(items);\r\n    preorder.forEach((object: T, index: number) => this.getNodeInformation(object).preorder = index + 1);\r\n    this.allNode.sort((nodeA: HelisaNode<T>, nodeB: HelisaNode<T>) => nodeA.preorder - nodeB.preorder);\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\nconst DEFAULT_CONTENT: string = 'Â¿Esta seguro que desea eliminar esta informaciÃ³n?';\r\n\r\n@Component({\r\n  selector: 'hel-alert-confirm-delete-data-helisa',\r\n  templateUrl: './alert-confirm-delete-data-helisa.component.html',\r\n  styleUrls: ['./alert-confirm-delete-data-helisa.component.sass']\r\n})\r\nexport class AlertConfirmDeleteDataHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertConfirmDeleteDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertConfirmDeleteDataHelisaComponent\r\n  ) {\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Lo asumo';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Me retracto';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\ninterface AlertDefineResidentialPhysicalStructureProperties {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Primero defina la estructura fÃ­sica residencial en configuraciÃ³n.';\r\n\r\n@Component({\r\n    selector: 'hel-alert-define-residential-physical-structure-helisa',\r\n    templateUrl: './alert-define-residential-physical-structure-helisa.component.html',\r\n    styleUrls: ['./alert-define-residential-physical-structure-helisa.component.sass']\r\n})\r\nexport class AlertDefineResidentialPhysicalStructureHelisaComponent implements OnInit {\r\n\r\n    content: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AlertDefineResidentialPhysicalStructureHelisaComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: AlertDefineResidentialPhysicalStructureProperties\r\n    ) {\r\n        this.content = data.content;\r\n        if (this.content === undefined) {\r\n            this.content = DEFAULT_CONTENT;\r\n        }\r\n        dialogRef.disableClose = true;\r\n        dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n            if (event.code === 'Escape') {\r\n                this.dialogRef.close(this.onCancel());\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        setTimeout(() => {\r\n            this.dialogRef.close();\r\n        }, 3000);\r\n    }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\ninterface AlertDefineCommercialStructureProperties {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Primero defina la estructura comercial en configuraciÃ³n.';\r\n\r\n@Component({\r\n    selector: 'hel-alert-define-commercial-structure-helisa',\r\n    templateUrl: './alert-define-commercial-structure-helisa.component.html',\r\n    styleUrls: ['./alert-define-commercial-structure-helisa.component.sass']\r\n})\r\nexport class AlertDefineCommercialStructureHelisaComponent implements OnInit {\r\n\r\n    content: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AlertDefineCommercialStructureHelisaComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: AlertDefineCommercialStructureProperties\r\n    ) {\r\n        this.content = data.content;\r\n        if (this.content === undefined) {\r\n            this.content = DEFAULT_CONTENT;\r\n        }\r\n        dialogRef.disableClose = true;\r\n        dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n            if (event.code === 'Escape') {\r\n                this.dialogRef.close(this.onCancel());\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        setTimeout(() => {\r\n            this.dialogRef.close();\r\n        }, 3000);\r\n    }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\ninterface AlertDefineParkingStructureProperties {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Primero defina la estructura zona de parqueaderos en configuraciÃ³n.';\r\n\r\n@Component({\r\n    selector: 'hel-alert-define-parking-structure-helisa',\r\n    templateUrl: './alert-define-parking-structure-helisa.component.html',\r\n    styleUrls: ['./alert-define-parking-structure-helisa.component.sass']\r\n})\r\nexport class AlertDefineParkingStructureHelisaComponent implements OnInit {\r\n\r\n    content: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AlertDefineParkingStructureHelisaComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: AlertDefineParkingStructureProperties\r\n    ) {\r\n        this.content = data.content;\r\n        if (this.content === undefined) {\r\n            this.content = DEFAULT_CONTENT;\r\n        }\r\n        dialogRef.disableClose = true;\r\n        dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n            if (event.code === 'Escape') {\r\n                this.dialogRef.close(this.onCancel());\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        setTimeout(() => {\r\n            this.dialogRef.close();\r\n        }, 3000);\r\n    }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {LayoutModule} from '@angular/cdk/layout';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCheckboxModule,\r\n  MatGridListModule,\r\n  MatInputModule,\r\n  MatMenuModule,\r\n  MatNativeDateModule,\r\n  MatOptionModule,\r\n  MatPaginatorModule,\r\n  MatRadioModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule\r\n} from '@angular/material';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport { TableHelisaService } from './components/table-helisa/table-helisa.service';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport { TreeHelisaService } from './components/tree-helisa/tree-helisa.service';\r\nimport { ExternalLinkDirective } from './directives/external-link.directive';\r\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\r\nimport { HelTooltipDirective } from './directives/tooltip.directive';\r\nimport { ExternalLinkPipe } from './pipes/external-link.pipe';\r\nimport { AlertUncompletedDataHelisaComponent } from './components/alert-uncompleted-data-helisa/alert-uncompleted-data-helisa.component';\r\nimport { AlertLostDataHelisaComponent } from './components/alert-lost-data-helisa/alert-lost-data-helisa.component';\r\nimport { AlertDeleteDataHelisaComponent } from './components/alert-delete-data-helisa/alert-delete-data-helisa.component';\r\nimport {\r\n  AlertUncompletedSelectedDataHelisaComponent\r\n} from './components/alert-uncompleted-selected-data-helisa/alert-uncompleted-selected-data-helisa.component';\r\nimport {\r\n  AlertInformationNotValidHelisaComponent\r\n } from './components/alert-information-not-valid-helisa/alert-information-not-valid-helisa.component';\r\nimport { ComboBoxHelisaComponent } from './components/combo-box-helisa/combo-box-helisa.component';\r\nimport {AlertAuthorizationTransactionHelisaComponent} from './components/alert-authorization-transaction-helisa/alert-authorization-transaction-helisa.component';\r\nimport { PagingTreeHelisaComponent } from './components/paging-tree-helisa/paging-tree-helisa.component';\r\nimport { AlertConfirmDeleteDataHelisaComponent } from './components/alert-confirm-delete-data-helisa/alert-confirm-delete-data-helisa.component';\r\nimport { AlertDefineResidentialPhysicalStructureHelisaComponent } from './components/alert-define-residential-physical-structure-helisa/alert-define-residential-physical-structure-helisa.component';\r\nimport { AlertDefineCommercialStructureHelisaComponent } from './components/alert-define-commercial-structure-helisa/alert-define-commercial-structure-helisa.component';\r\nimport { AlertDefineParkingStructureHelisaComponent } from './components/alert-define-parking-structure-helisa/alert-define-parking-structure-helisa.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe,\r\n    AlertUncompletedDataHelisaComponent,\r\n    AlertLostDataHelisaComponent,\r\n    AlertDeleteDataHelisaComponent,\r\n    AlertUncompletedSelectedDataHelisaComponent,\r\n    AlertInformationNotValidHelisaComponent,\r\n    ComboBoxHelisaComponent,\r\n    AlertAuthorizationTransactionHelisaComponent,\r\n    PagingTreeHelisaComponent,\r\n    AlertConfirmDeleteDataHelisaComponent,\r\n    AlertDefineResidentialPhysicalStructureHelisaComponent,\r\n    AlertDefineCommercialStructureHelisaComponent,\r\n    AlertDefineParkingStructureHelisaComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule,\r\n    AlertUncompletedDataHelisaComponent,\r\n    AlertLostDataHelisaComponent,\r\n    AlertDeleteDataHelisaComponent,\r\n    AlertUncompletedSelectedDataHelisaComponent,\r\n    AlertInformationNotValidHelisaComponent,\r\n    ComboBoxHelisaComponent,\r\n    AlertAuthorizationTransactionHelisaComponent,\r\n    PagingTreeHelisaComponent,\r\n    AlertConfirmDeleteDataHelisaComponent,\r\n    AlertDefineResidentialPhysicalStructureHelisaComponent,\r\n    AlertDefineCommercialStructureHelisaComponent,\r\n    AlertDefineParkingStructureHelisaComponent\r\n  ],\r\n  providers: [TableHelisaService, TreeHelisaService]\r\n})\r\nexport class HelisaLibModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertUncompletedDataHelisaComponent } from './alert-uncompleted-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertUncompletedDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertUncompletedDataHelisaComponent> = this.dialog.open(AlertUncompletedDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertLostDataHelisaComponent } from './alert-lost-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertLostDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertLostDataHelisaComponent> = this.dialog.open(AlertLostDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertDeleteDataHelisaComponent } from './alert-delete-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertDeleteDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertDeleteDataHelisaComponent> = this.dialog.open(AlertDeleteDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport {AlertUncompletedSelectedDataHelisaComponent} from './alert-uncompleted-selected-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertUncompletedSelectedDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertUncompletedSelectedDataHelisaComponent> = this.dialog.open(AlertUncompletedSelectedDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertInformationNotValidHelisaComponent } from './alert-information-not-valid-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertInformationNotValidHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertInformationNotValidHelisaComponent> = this.dialog.open(AlertInformationNotValidHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport {AlertAuthorizationTransactionHelisaComponent} from './alert-authorization-transaction-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertAuthorizationTransactionHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertAuthorizationTransactionHelisaComponent> = this.dialog.open(AlertAuthorizationTransactionHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertConfirmDeleteDataHelisaComponent } from './alert-confirm-delete-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertConfirmDeleteDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertConfirmDeleteDataHelisaComponent> = this.dialog.open(AlertConfirmDeleteDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertDefineResidentialPhysicalStructureHelisaComponent } from './alert-define-residential-physical-structure-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertDefineResidentialPhysicalStructureHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertDefineResidentialPhysicalStructureHelisaComponent> = this.dialog.open(AlertDefineResidentialPhysicalStructureHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertDefineCommercialStructureHelisaComponent } from './alert-define-commercial-structure-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertDefineCommercialStructureHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertDefineCommercialStructureHelisaComponent> = this.dialog.open(AlertDefineCommercialStructureHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertDefineParkingStructureHelisaComponent } from './alert-define-parking-structure-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertDefineParkingStructureHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertDefineParkingStructureHelisaComponent> = this.dialog.open(AlertDefineParkingStructureHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","export enum ToastType {\r\n    DONE = 'done',\r\n    ERROR = 'error',\r\n    INFO = 'info'\r\n}\r\n"]}