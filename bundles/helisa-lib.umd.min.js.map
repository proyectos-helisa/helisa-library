{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts","ng://helisa-lib/lib/components/tree-helisa/tree-color-style.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","Output","placeholder","FormControl","Validators","required","requiredMessage","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","content","title","hasCancel","AlertHelisaType","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","next","setTotal","event","emitTotal","addPage","emitNextPage","Subject","Array","TableHelisaService","total","table","emitChangeSource","obj","page","totalReturn","asObservable","nextPageReturn","DependencyTableHelisaComponent","_this","dependencyTableHelisaService","subscribe","tableService","viewTables","toArray","index","getService","onSelectedDependency","selected","onNextPage","nextPage","onTotal","onSort","sort","providers","ViewChildren","InputHelisaComponent","search","isSearch","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","o","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","forEach","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","Object","defineProperty","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","undefined","columnConfiguration","displayedColumns","splice","visible","push","rawData","prepareDataSource","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","rowType","RowType","addTotalGroup","MatTableDataSource","selectRow","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","footerDisplayedColumns","map","TotalType","searchText","text","lastSearch","selectedObject","select","onScroll","element","target","scrollHeight","scrollTop","body","concat","ViewChild","MatSort","showTitle","DateHelisaComponent","dateFormControl","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","BehaviorSubject","nodeSelected","dataSourceObservable","TreeHelisaConnect","TreeHelisaComponent","treeHelisaService","res","children","selectNode","ngAfterViewInit","onRedirect","node","id","offsetHeight","onEdit","isEditable","onAdd","isSelected","parent","refreshTree","onDelete","_.remove","removed","onEdited","trim","edited","added","getDescription","reverse","i","_data","treeHelisaConnect","rangeScrolled","fillParent","upSelectNode","Router","router","showOptionsNode","collapseParent","treeControl","NestedTreeControl","MatTreeNestedDataSource","hasChild","_","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","DONE","INFO","NODE_RED","NODE_GREEN","NODE_PURPLE","NODE_GRAY"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string =\"\";  \r\n  @Input() inputFormControl:FormControl = new FormControl('',Validators.required);\r\n  @Input() requiredMessage:string = \"El campo es requerido\";\r\n  @Input() value:string = \"\";\r\n\r\n  @Output() done = new EventEmitter<string>();\r\n  @Output() cancel = new EventEmitter<any>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if(this.value != \"\"){\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n  }\r\n\r\n\r\n  onDone(){\r\n    if(this.inputFormControl.valid)\r\n    {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(){\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type:ToastType, message:String){\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message: message, type: type},\r\n      duration: this.durationInSeconds * 1000\r\n    })\r\n  }\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = \"ERROR\",\r\n    CONFIRMATION = \"CONFIRMATION\"\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: String;\r\n  hasCancel: boolean;\r\n\r\n  constructor(public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data) {\r\n      this.content = data.content;\r\n      this.title = data.title;\r\n      this.hasCancel = data.type == AlertHelisaType.CONFIRMATION;\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onCancel(){\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type:AlertHelisaType, title:String, content:String): Observable<any> {\r\n    const dialogRef = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: {title: title, content: content, type:type}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport { ColumnConfig, RequestTableHelisa } from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency } from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable {\r\n  columns: Array<ColumnConfig>,\r\n  isRemote: boolean,\r\n  dataSource?: Array<any>,\r\n  count?: number,\r\n  order?: number,\r\n  showTitle?: boolean\r\n}\r\n\r\n@Injectable() \r\nexport class DependencyTableHelisaService {\r\n  \r\n\r\n  tables: Subject<ConfigTable[]> = new Subject();\r\n  infoTables: Array<ConfigTable> = new Array();\r\n\r\n  emitTotal = new Subject<EventDependency>();\r\n  emitNextPage = new Subject<EventDependency>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable, withRemoveDependency: boolean = false){\r\n    if(withRemoveDependency){\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if(!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if(configTable.isRemote){\r\n      configTable.dataSource = null;\r\n      if(configTable.count === null)\r\n        throw \"hace falta el count\";\r\n    } else {\r\n      if(configTable.dataSource === null)\r\n        throw \"hace falta el dataSource\";\r\n        configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina \r\n   */\r\n  setTotal(event: EventDependency) {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  addPage(event: EventDependency) {\r\n    this.emitNextPage.next(event);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\r\nimport {TotalTableHelisa} from \"./table-helisa.interface\";\r\nimport {TableHelisaComponent} from \"./table-helisa.component\";\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: TableHelisaComponent<any>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn = this.emitChangeSource.asObservable();\r\n  nextPageReturn = this.emitNextPage.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<T>) {\r\n    this.emitChangeSource.next({obj: total, table: table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>) {\r\n    this.emitNextPage.next({obj: page, table: table});\r\n  }\r\n}\r\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren } from '@angular/core';\r\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\r\nimport { ColumnConfig, RequestTableHelisa } from '../table-helisa/table-helisa.interface';\r\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\r\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency{\r\n  index: number,\r\n  data: any\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [ DependencyTableHelisaService ]\r\n})\r\nexport class DependencyTableHelisaComponent implements OnInit {\r\n\r\n  tables: Array<ConfigTable> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<any>>;\r\n  \r\n\r\n  @Output() selected: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() nextPage: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() total: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() sort: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService, private tableService: TableHelisaService<any>) { }\r\n\r\n  ngOnInit() {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      event => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n    \r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      event => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService() : DependencyTableHelisaService {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables(){\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe(tables => {\r\n        this.tables = tables;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: any){\r\n    this.selected.emit({index:index, data:event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa) {\r\n    this.nextPage.emit({index:index, data:event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: any){\r\n    this.total.emit({index:index, data:event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: any){\r\n    this.sort.emit({index:index, data:event});\r\n  }\r\n\r\n\r\n\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormControl} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit {\r\n\r\n  @Input() placeholder = '';\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n  @Input() isSearch = false;\r\n  @Input() inputFormControl: FormControl = new FormControl('');\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  search() {\r\n    this.setValue.emit(this.inputFormControl.value);\r\n  }\r\n\r\n}\r\n","import {SortDirection} from \"@angular/material\";\r\nimport {Observable} from \"rxjs\";\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa {\r\n  page: number;\r\n  body: any;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n//@dynamic\r\nexport abstract class ColumnConfigUtil {\r\n  static getValue(obj: any, column: ColumnConfig): any {\r\n    return column.name.split('.').reduce((o, field) => o && o[field], obj);\r\n  }\r\n}\r\n","import {ColumnConfig} from \"./table-helisa.interface\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): any {\r\n    return {};\r\n  }\r\n\r\n  nextPage() {\r\n    return this.page++;\r\n  }\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {MatSort, MatTableDataSource} from '@angular/material';\r\nimport {Sort} from '@angular/material/typings/sort';\r\nimport {\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  EventColumn,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType\r\n} from './table-helisa.interface';\r\nimport {TableHelisaService} from './table-helisa.service';\r\nimport {TableHelisaConnectComponent} from './table-helisa-connect.component';\r\n\r\ninterface RowData {\r\n  data: any;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData>;\r\n  displayedColumns: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa> = new EventEmitter<RequestTableHelisa>();\r\n  @Input() showTitle = true;\r\n  @Input() count: number;\r\n\r\n  showFooter = false;\r\n  showSearch = false;\r\n\r\n  constructor(private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit() {\r\n    this.tableService.nextPageReturn.subscribe(\r\n      data => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe(info => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column, idx) => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, {sum: info.obj.value, count: this.count});\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort) => {\r\n        const column: ColumnConfig = this.columnConfig.find(c => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT});\r\n      }\r\n    );\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n      this.goNextPage();\r\n    } else { this.tableHelisaConnectComponent = undefined; }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.columnConfig = columnConfiguration;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n    if (columnConfiguration) {\r\n      columnConfiguration.forEach(column => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<any>) {\r\n    this.rawData = dataSource;\r\n    if (this.rawData) { this.prepareDataSource(); }\r\n  }\r\n\r\n  private prepareDataSource() {\r\n    const changeData = Array<RowData>();\r\n    let haveGroup = false;\r\n    let groupFooter: Array<TotalGroup>;\r\n    this.columnConfig.forEach(column => {\r\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n        this.totalData = new Array<number>(this.columnConfig.length);\r\n        this.showFooter = true;\r\n        this.total.emit({column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL});\r\n      }\r\n      this.showSearch = this.showSearch || column.searchable;\r\n      haveGroup = haveGroup || column.groupable;\r\n    });\r\n    if (haveGroup) {\r\n      this.rawData = this.rawData.sort((a, b) => {\r\n        let result = 0;\r\n        this.columnConfig.forEach(column => {\r\n          if (result === 0) {\r\n            result = this.compare(a, b);\r\n          }\r\n        });\r\n        return result;\r\n      });\r\n    }\r\n    this.rawData.forEach(row => {\r\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data, row) !== 0)) {\r\n        if (groupFooter) {\r\n          changeData.push({data: groupFooter, rowType: RowType.GROUP_FOOTER});\r\n        }\r\n        changeData.push({data: row, rowType: RowType.GROUP_TITLE});\r\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n      }\r\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\r\n      changeData.push({data: row, rowType: RowType.ROW});\r\n    });\r\n    this.data = new MatTableDataSource<RowData>(changeData);\r\n    if (this.rawData && this.rawData.length) { this.selectRow({data: this.rawData[0], rowType: RowType.ROW}); }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: any) {\r\n    this.columnConfig.forEach((column, index) => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = {sum: ColumnConfigUtil.getValue(row, column), count: 1};\r\n        } else {\r\n          rowTotal[index].sum += ColumnConfigUtil.getValue(row, column);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: any, b: any): number {\r\n    let ws = 0;\r\n    this.columnConfig.forEach(column => {\r\n      if (ws === 0 && column.groupable) {\r\n        if (ColumnConfigUtil.getValue(a, column) < ColumnConfigUtil.getValue(b, column)) { ws = -1; }\r\n        else if(ColumnConfigUtil.getValue(a, column) > ColumnConfigUtil.getValue(b, column)) { ws = 1; }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: any): string {\r\n    let result = '';\r\n    this.columnConfig.forEach(column => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + ColumnConfigUtil.getValue(obj, column);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index, item): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map(name => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: any, column: ColumnConfig) {\r\n    return ColumnConfigUtil.getValue(obj, column);\r\n  }\r\n\r\n  searchText(text) {\r\n    this.lastSearch = text;\r\n    this.search.emit({text: text, columnConfigurations: this.columnConfig});\r\n  }\r\n\r\n  selectRow(row) {\r\n    this.selectedObject = row.data;\r\n    this.select.emit(this.selectedObject);\r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n    if (element.scrollHeight - element.scrollTop < 1000) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  private goNextPage() {\r\n    if (this.type === TableHelisaType.REMOTE && !this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]) {\r\n    if (!this.rawData) { this.rawData = new Array<T>(); }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n      this.tableHelisaConnectComponent.isUsed = false;\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css']\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected = new BehaviorSubject<number>(1);    \r\n    // Observable string streams\r\n    nodeSelected = this.emitNodeSelected.asObservable();\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number) {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n\r\n\r\n    // Observable string sources\r\n    private emitDataSource = new BehaviorSubject<Node>(undefined);    \r\n    // Observable string streams\r\n    dataSourceObservable = this.emitDataSource.asObservable();\r\n    // Service message commands\r\n    changeDataSource(data:Node) {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n    constructor(){\r\n        \r\n    }\r\n  \r\n}","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n  \r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }          \r\n  \r\n    nextPage() {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit } from '@angular/core';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource } from '@angular/material';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;  \r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass']  \r\n})\r\nexport class TreeHelisaComponent implements OnInit,AfterViewInit {\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit:FormControl;\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data:Node;\r\n\r\n  \r\n  /**\r\n   * Establece si se mostraran las opciones de \r\n   * Creacion, ediciÃ³n y eliminacion del nodo\r\n   */\r\n  @Input() showOptionsNode:boolean = true; \r\n  \r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed = new EventEmitter<number>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue aÃ±adido\r\n   */\r\n  @Output() added = new EventEmitter<Node>();\r\n  @Output() collapseParent = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected = new EventEmitter<number>();\r\n  \r\n  treeControl = new NestedTreeControl<Node>(node => node.children);\r\n  dataSource = new MatTreeNestedDataSource<Node>();\r\n\r\n\r\n\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService:TreeHelisaService,\r\n    private router:Router) {    \r\n      \r\n    //cargar datos pasados por el @Input\r\n    if (!!this.data) {      \r\n      let data = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = []\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  ngOnInit() {     \r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable    \r\n    .subscribe((res) => {            \r\n      if(!!res && !!res.children){              \r\n        this.receivePage(res.children)\r\n      }else{\r\n        this.dataSource.data = [];\r\n      }    \r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected\r\n      .subscribe((res)=>{\r\n        if(!!this.data && !!this.data.children)\r\n        this.selectNode(this.data,res);\r\n      })\r\n   \r\n  }\r\n\r\n  ngAfterViewInit() {\r\n  \r\n  }\r\n\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node:Node){\r\n    this.selectNode(this.data,node.id);    \r\n\r\n    if(!!node && !node.children){\r\n      this.nodeSelected.emit(node.id);\r\n    }\r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n\r\n    if ((element.offsetHeight + element.scrollTop) >= element.scrollHeight) {      \r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node:Node){\r\n    node.isEditable = true;\r\n  }\r\n\r\n  onAdd(node:Node){\r\n    // si no tiene hijos instanciar el array\r\n    if(!node.children){\r\n      node.children = [];\r\n    }\r\n    node.children.push(\r\n      {\r\n        id: null,\r\n        name: \"\",       \r\n        isSelected: false,\r\n        parent : node,\r\n        isEditable : true\r\n      }\r\n    );     \r\n    this.refreshTree();\r\n  }\r\n\r\n  onDelete(node:Node){ \r\n    // Remueve el nodo utilizando la libreria de lodash   \r\n    _.remove(node.parent.children, node);\r\n    \r\n    this.refreshTree();\r\n    this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node:Node,value:any){\r\n    \r\n      node.name = value;\r\n\r\n      if(node.id == null && node.name == \"\"){              \r\n        _.remove(node.parent.children, node);\r\n        this.refreshTree();\r\n      }\r\n      else if(node.id && node.id != null && node.name.trim() !== \"\"){\r\n        this.edited.emit(node);\r\n        node.isEditable = false;\r\n      }else if(!!node.id && node.id == null && node.name.trim() !== \"\"){\r\n        this.added.emit(node);\r\n        node.isEditable = false;\r\n      }         \r\n  }\r\n\r\n  onCancel(node:Node,value:string){\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if(node.id == null){\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();  \r\n    }\r\n\r\n    node.isEditable = false; \r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild = (_: number, node: Node) => !!node.children && node.children.length > 0;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node:Node):string{\r\n      let result:string[]=[node.name];        \r\n      let concat:string=\"\";\r\n\r\n      if(node.parent){          \r\n        result.push(this.getDescription(node.parent))\r\n      }                \r\n\r\n\r\n      if(result.length == 1)\r\n          return node.name;\r\n\r\n      result = result.reverse();\r\n\r\n      for (let i = 0; i < result.length; i++) {            \r\n          let element = result[i];\r\n          concat = concat + element + ((i == result.length-1)?\"\":\",\");                \r\n      }\r\n              \r\n      return concat;\r\n  }\r\n\r\n\r\n  /**\r\n   * Actualiza el arbol\r\n   */\r\n  private refreshTree(){\r\n    let _data = this.dataSource.data; \r\n    this.dataSource.data = null; \r\n    this.dataSource.data = _data; \r\n  }\r\n\r\n  private goNextPage() {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()              \r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]) {    \r\n    if(!this.data){ this.data = {id:null,name:\"root\",isSelected:false}}\r\n    if (!this.data.children) { this.data.children = new Array<Node>(); this.treeHelisaConnect = new TreeHelisaConnect<Node>(); }    \r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach(node=>{\r\n      this.fillParent(node,this.data);\r\n    })\r\n\r\n    this.dataSource.data = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   * @param node \r\n   * @param parent \r\n   */\r\n  private fillParent(node:Node,parent:Node){\r\n\r\n    node.parent = parent;\r\n    if(node.children && node.children.length > 0){\r\n      node.children.forEach(item=>{\r\n        this.fillParent(item,node);   \r\n      })      \r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   * @param node \r\n   * @param id \r\n   */\r\n  private selectNode(node:Node,id:number){ \r\n      \r\n      this.upSelectNode(node)\r\n      \r\n      if(node.id == id){\r\n        node.isSelected = true   \r\n        return node;\r\n      }else if (node.children != null){\r\n           var i;\r\n           var result = null;\r\n           for(i=0; result == null && i < node.children.length; i++){\r\n                result = this.selectNode(node.children[i], id);                \r\n           }\r\n           return result;\r\n      }\r\n      return null; \r\n  }\r\n\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   * @param node \r\n   */\r\n  private upSelectNode(node:Node){\r\n     node.isSelected = false;\r\n     if(!!node.children)\r\n     for(var i=0; i < node.children.length; i++){\r\n         this.upSelectNode(node.children[i]);                \r\n    }\r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\n\r\n\r\n\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatSidenavModule, MatGridListModule,  MatMenuModule, MatRadioModule, MatButtonModule, MatCheckboxModule, MatInputModule, MatOptionModule, MatSnackBarModule, MatTableModule, MatPaginatorModule, MatSortModule } from '@angular/material';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from \"@angular/material\";\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport {TableHelisaService} from \"./components/table-helisa/table-helisa.service\";\r\nimport {\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  EventColumn, TotalType\r\n} from \"./components/table-helisa/table-helisa.interface\";\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport {TreeHelisaService} from \"./components/tree-helisa/tree-helisa.service\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [ \r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n\r\n\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  providers: [\r\n    TableHelisaService,\r\n    TreeHelisaService\r\n  ]\r\n})\r\nexport class HelisaLibModule { }\r\n","export enum ToastType {\r\n    DONE = \"DONE\",\r\n    ERROR = \"ERROR\",\r\n    INFO = \"INFO\"\r\n}\r\n","export enum TREE_COLOR_STYLE{\r\n    NODE_RED = \"red\",\r\n    NODE_GREEN = \"green\",\r\n    NODE_PURPLE = \"purple\",\r\n    NODE_GRAY = \"gray\"\r\n\r\n}"]}