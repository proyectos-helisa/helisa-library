{"version":3,"sources":["../esm2015/projects/helisa-lib/src/lib/components/input-with-button/input-with-button.component.ts","../esm2015/projects/helisa-lib/src/lib/components/toast-helisa/toast-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/toast-helisa/toast-type.enum.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa-type.enum.ts","../esm2015/projects/helisa-lib/src/lib/components/toast-helisa/toast-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa.service.ts","../../../node_modules/tslib/tslib.es6.js","../esm2015/projects/helisa-lib/src/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/input-helisa/input-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa.interface.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa-connect.component.ts","../esm2015/projects/helisa-lib/src/lib/components/date-helisa/date-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa-connect.ts","../esm2015/projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","../esm2015/projects/helisa-lib/src/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","../projects/helisa-lib/src/lib/directives/options-scroll.directive.ts","../projects/helisa-lib/src/lib/directives/tooltip.directive.ts","../projects/helisa-lib/src/lib/directives/external-link.directive.ts","../esm2015/projects/helisa-lib/src/lib/components/combo-box-helisa/combo-box-helisa.component.ts","../projects/helisa-lib/src/lib/pipes/external-link.pipe.ts","../esm2015/projects/helisa-lib/src/lib/components/paging-tree-helisa/paging-tree-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-helisa-type.enum.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-data-helisa.component.ts","../../projects/helisa-lib/src/lib/helisa-lib.module.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-data-helisa.service.ts"],"names":["InputWithButtonComponent","this","placeholder","inputFormControl","FormControl","Validators","required","requiredMessage","value","isFocused","done","EventEmitter","cancel","prototype","ngOnInit","setValue","nameField","nativeElement","focus","onDone","valid","emit","onCancel","Component","args","selector","template","Input","ViewChild","static","Output","ToastHelisaComponent","data","Inject","MAT_SNACK_BAR_DATA","ToastType","AlertHelisaType","ToastHelisaService","snackBar","durationInSeconds","showToast","type","message","subMessages","openFromComponent","duration","Injectable","providedIn","MatSnackBar","AlertHelisaComponent","dialogRef","_this","content","title","okLabel","undefined","cancelLabel","hasCancel","CONFIRMATION","disableClose","keydownEvents","subscribe","event","code","close","MatDialogRef","MAT_DIALOG_DATA","AlertHelisaService","dialog","openDialog","open","width","afterClosed","MatDialog","Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","DependencyTableHelisaService","tables","Subject","infoTables","Array","emitVisibilityButton$","emitVisibilityButton","asObservable","emitVisibilityAllButtons$","emitVisibilityAllButtons","emitIsCellSelection$","emitIsCellSelection","emitChangeColumns$","emitChangeColumns","emitTotal","emitNextPage","getTables","updateDependency","configTable","withRemoveDependency","slice","order","isRemote","dataSource","count","Error","setTotal","addPage","selectIndexRow","config","indexRowSelect","changeVisibilityButton","changeVisibilityAllButtons","show","changeisCellSelection","changeColumnsByTable","TableHelisaService","emitChangeSource","totalReturn","nextPageReturn","emitVisibleButton$","emitVisibleButton","total","table","obj","page","change","InputHelisaType","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","showToolTip","selected","selectObject","nextPage","sort","drop","addRow","selectCell","bookClicked","selectedObject","hideDelay","showDelay","viewTables","toArray","index","addRowButton","showButton","forEach","element","isCellSelection","columns","getService","_a","splice","apply","item","reload","onSelectedDependency","onNextPage","onTotal","onSort","onDrop","onAddRow","selectedCell","onBookClicked","providers","ViewChildren","ColumnType","EventScope","TotalType","ChangeColumnConfigurationType","TableHelisaType","InputHelisaComponent","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","floatLabel","autocompleteMode","isSearch","disabled","DEFAULT","blur","formControlMask","realValue","inputFormReal","defineProperty","formControl","registerOnDisabledChange","isDisabled","disable","enable","valueChanges","statusChange","status","getMaskedValue","onFocus","setValidators","validator","onlySelf","statusChanges","setErrors","key","markAsTouched","inputText","ngAfterViewInit","search","position","selectionStart","getRealValue","selectionEnd","str","maskedStr","IDENTITY","j","NUMERIC","DOUBLE","indexOf","realStr","str_1","str_1_1","strItem","match","str_2","str_2_1","haveDot","str_3","str_3_1","$event","Number","select","RowType","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","isLastPage","isUsed","getBody","columnConfig","TableHelisaComponent","MatTableDataSource","displayedColumns","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","LOCAL","scrollCount","hasSubtitle","indexRowStartDrag","lastIndexRowDrag","dataBeforeDrag","dataSource$","scrollX","scrollY","showTitle","isDragged","text","addBookButton","showFooter","showSearch","reloadColumnConfig","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","SORT","matTable","renderRows","w","REMOTE","tableHelisaConnectComponent","goNextPage","columnConfiguration","rawData","idRowSelected","selectRow","rowType","ROW","columnCount","countSubtitle_1","showBookButton_1","subtitle","subtitleTemp","visible","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","groupFooter_1","changeData_1","haveGroup_1","totalType","TOTAL","searchable","groupable","a","b","result","compare","row","GROUP_FOOTER","GROUP_TITLE","addTotalGroup","rowTotal","ws","getGroupDescription","isGroupTitle","isRow","isGroupFooter","map","SUM","COUNT","AVERAGE","getValueTooltip","searchText","lastSearch","isUser","scope","USER","CODE_CALL","onScroll","isScrollY","target","scrollTop","scrollLeft","scrollHeight","body","dblClickCell","selectedCells","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToRow","classToRow","configRowStylesFromColumn","classRow","rowIndex","getRowIndex","pageY","array","moveItemInArray","stopPropagation","tableKeydown","currentIndex_1","findIndex","newSelection_1","reverse","Math","abs","preventDefault","filter","dragger","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","MatSort","MatTable","read","ElementRef","TypeCalendarEnum","moment","moment_","DateHelisaComponent","dateFormControl","date","Date","dateFormat","locale","errorMessage","showDatePicker","isClosed","typeCalendar","NORMAL","isFromInputEvent","invalidFormat","dateToVisualize","formHandler","incomingDate","format","openDatePicker","timeout","setTimeout","datePickerShow","onKey","onBlur","clearTimeout","getStartView","typeCalendarEnum","MONTH_YEAR","STRICT","isValid","toDate","pipe","tap","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","incommingDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","TreeHelisaService","emitNodeSelected","BehaviorSubject","nodeSelected","emitDataSource","dataSourceObservable","emitExpandAllNodes","nodeExpand","emitCollapseAllNodes","nodeCollapse","emitRefreshTree","refreshTreeObservable","emitRefreshTreeWithPagination","refreshTreeWithPaginationObservable","emitExpandOneNode","expandOneNodeObservable","emitCollapseOneNode","collapseOneNodeObservable","changeNodeSelected","idResidentialArea","changeDataSource","expandAllNodes","expand","collapseAllNodes","collapse","refreshTree","refreshTreeWithPagination","expandOneNode","node","collapseOneNode","TreeHelisaConnect","TreeHelisaComponent","treeHelisaService","router","elementRef","selectedOptions","Map","removed","edited","added","collapseParent","rangeScrolled","dobleClick","keypressDelete","keypressInsert","checkedOptionNode","uncheckedOptionNode","clickAddNode","clickEditNode","clickDeleteNode","treeControl","NestedTreeControl","MatTreeNestedDataSource","isSingleClick","currentNode","dataNodes","getDescription","parent","res","selectedNode","id","selectNode","tree","expandAll","collapseAll","onRedirect","offsetHeight","onEdit","onAdd","onDelete","onEdited","_.remove","trim","isEditable","onDblClick","onKeyDown","moveDownIntoTree","moveUpIntoTree","indexOfParent","hasChild","t","datasourceData","treeHelisaConnect","isSelected","fillParent","reorderByOrderIndex","upSelectNode","getNodeById","expandAllParents","_b","_c","childrenNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","has","reloadSelectedOptions","get","options","option","set","queue","curr","shift","_.orderBy","x","orderIndex","console","log","Router","HostListener","AutocompleteHelisaService","setDataSource","AutocompleteHelisaComponent","autocompleteHelisaService","myControl","selectedValueEmmiter","isLoading","onScrollObservable","debounceTime","throttleTime","filteredOptions","of","startWith","_checkRegex","_filter","displayFn","displayText","replace","filterValue_1","toLowerCase","onSelected","selectedValue","getNextPage","OptionsScrollDirective","autoComplete","thresholdPercent","optionsScroll","destroy","lastScrollTop","opened","removeScrollEventListener","panel","addEventListener","bind","takeUntil","closed","removeEventListener","ngOnDestroy","complete","st","pageYOffset","scrollEvent","threshold","clientHeight","Directive","MatAutocomplete","HelTooltipDirective","tooltip","elemRef","mouseover","currentContent","innerText","toUpperCase","toString","isEllipsisActive","offsetWidth","scrollWidth","MatTooltip","ExternalLinkDirective","platformId","relAttr","targetAttr","hrefAttr","ngOnChanges","href","isLinkExternal","isPlatformBrowser","includes","location","hostname","PLATFORM_ID","HostBinding","ComboBoxHelisaState","ExternalLinkPipe","transform","_i","Pipe","PagingTreeInitialMode","ComboBoxHelisaComponent","selectEmitter","enabled","pageSize","haveNextPage","state","CLOSED","listable","getData","SELECT","selectItem","selectedItem","changeToInsert","INSERT","insert","editable","AlertInformationType","PagingTreeHelisaComponent","visibleLimit","visibleSize","treeMode","EXPAND","visibleObjects","allNode","afterLoadData","paramMode","reset","paramService","service","items","loadData","searchNode","sortItems","createNode","reSort","loadNextVisibleObjects","lAdy","stack","idParent","getIdParentField","unshift","response","last","pop","getIdField","parentInformation","getNodeInformationById","nodeInformation","object","haveChildren","level","expanded","preorder","size","getNodeInformation","getLevelClass","nodeFrom","collapseNode","expandNode","showNextPage","removeItem","removeById","idParent_1","Set","add","beginIndex","itemSearch","lastIndex","deletedItems","parentHaveChildren_1","deletedItem","delete","searchItem","addItem","indexParent","updateItem","nodeA","nodeB","ContentChild","TITLE_BY_ALERT_TYPE","CONTENT_BY_ALERT_TYPE","OK_LABEL_BY_ALERT_TYPE","CANCEL_LABEL_BY_ALERT_TYPE","AlertInformationDataHelisaComponent","alertType","DEFINE_COMMERCIAL_STRUCTURE","DEFINE_PARKING_STRUCTURE","DEFINE_RESIDENCIAL_STRUCTURE","hasTitle","AUTHORIZATION_TRANSACTION","DELETE_DATA","LOST_DATA","UNCOMPLETED_DATA","hasContent","CONFIRM_DELETE_DATA","INFORMATION_NOT_VALID","UNCOMPLETED_SELECTED_DATA","hasButtons","hasCancelButton","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","AlertInformationDataHelisaService"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() inputFormControl: FormControl = new FormControl('', Validators.required);\r\n  @Input() requiredMessage: string = 'El campo es requerido';\r\n  @Input() value: string = '';\r\n  @Input() isFocused: boolean = false;\r\n  @ViewChild('inputText', {static: true}) nameField: ElementRef;\r\n\r\n  @Output() done: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() cancel: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.value !== '') {\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n    this.nameField.nativeElement.focus();\r\n  }\r\n\r\n\r\n  onDone(): void {\r\n    if (this.inputFormControl.valid) {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { ToastType } from './toast-type.enum';\r\n\r\n// @dynamic\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: {type: ToastType, message: string, subMessages?: string[]}) { }\r\n\r\n  ngOnInit(): void {}\r\n\r\n}\r\n","export enum ToastType {\r\n    DONE = 'done',\r\n    ERROR = 'error',\r\n    INFO = 'info'\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = 'ERROR',\r\n    CONFIRMATION = 'CONFIRMATION'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds: number = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type: ToastType, message: string, subMessages?: string[]): void {\r\n    subMessages = subMessages ? subMessages : [];\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message, type, subMessages},\r\n      duration: this.durationInSeconds * 1000\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\ninterface AlertHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  type: AlertHelisaType;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: string;\r\n  hasCancel: boolean;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertHelisaProperties\r\n  ) {\r\n    this.content = data.content;\r\n    this.title = data.title;\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'aceptar';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'cancelar';\r\n    }\r\n    this.hasCancel = data.type === AlertHelisaType.CONFIRMATION;\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent): void => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type: AlertHelisaType, title: string, content: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertHelisaComponent> = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, type, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport {ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency} from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable<T> {\r\n  columns: Array<ColumnConfig>;\r\n  isRemote: boolean;\r\n  dataSource?: Array<T>;\r\n  count?: number;\r\n  order?: number;\r\n  showTitle?: boolean;\r\n  indexRowSelect?: number;\r\n  isDragged?: boolean;\r\n  addRowButton?: AddRowButton;\r\n  configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\r\n  isCellSelection?: boolean;\r\n  addBookButton?: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class DependencyTableHelisaService<T> {\r\n\r\n\r\n  tables: Subject<ConfigTable<T>[]> = new Subject();\r\n  infoTables: Array<ConfigTable<T>> = new Array();\r\n\r\n  private emitVisibilityButton$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitVisibilityButton: Observable<EventDependency<boolean>> = this.emitVisibilityButton$.asObservable();\r\n\r\n  private emitVisibilityAllButtons$: Subject<boolean> = new Subject<boolean>();\r\n  emitVisibilityAllButtons: Observable<boolean> = this.emitVisibilityAllButtons$.asObservable();\r\n\r\n  private emitIsCellSelection$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitIsCellSelection: Observable<EventDependency<boolean>> = this.emitIsCellSelection$.asObservable();\r\n\r\n  private emitChangeColumns$: Subject<EventDependency<ColumnConfig[]>> = new Subject<EventDependency<ColumnConfig[]>>();\r\n  emitChangeColumns: Observable<EventDependency<ColumnConfig[]>> = this.emitChangeColumns$.asObservable();\r\n\r\n  emitTotal: Subject<EventDependency<TotalTableHelisa>> = new Subject<EventDependency<TotalTableHelisa>>();\r\n  emitNextPage: Subject<EventDependency<T[]>> = new Subject<EventDependency<T[]>>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable<T>[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * También remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuración para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable<T>, withRemoveDependency: boolean = false): void {\r\n    if (withRemoveDependency) {\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if (configTable.isRemote) {\r\n      configTable.dataSource = null;\r\n      if (configTable.count === null) {\r\n        throw new Error('hace falta el count');\r\n      }\r\n    } else {\r\n      if (configTable.dataSource === null) {\r\n        throw new Error('hace falta el dataSource');\r\n      }\r\n      configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la información para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la información de la pagina\r\n   */\r\n  setTotal(event: EventDependency<TotalTableHelisa>): void {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la información de la pagina\r\n   */\r\n  addPage(event: EventDependency<T[]>): void {\r\n    this.emitNextPage.next(event);\r\n  }\r\n\r\n  selectIndexRow(config: ConfigTable<T>): void {\r\n    if (this.infoTables[config.order]) {\r\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\r\n      this.tables.next(this.infoTables);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Muestra o esconde el boton una tabla en especifico\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeVisibilityButton(event: EventDependency<boolean>): void {\r\n    this.emitVisibilityButton$.next(event);\r\n  }\r\n\r\n\r\n  /**\r\n   * Esconde los botones de todas las tablas\r\n   * @param show indicar si se muestran o no todos los botones de las tablas\r\n   */\r\n  changeVisibilityAllButtons(show: boolean): void {\r\n    this.emitVisibilityAllButtons$.next(show);\r\n  }\r\n\r\n  /**\r\n   * Para habilitar el manejo de selección de celda\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeisCellSelection(event: EventDependency<boolean>): void {\r\n    this.emitIsCellSelection$.next(event);\r\n  }\r\n\r\n   /**\r\n    * Para habilitar el cambio de columnas\r\n    * @param event para indicar el index de la tabla y en \"data\" columnas\r\n    */\r\n  changeColumnsByTable( event: EventDependency<ColumnConfig[]>): void {\r\n    this.emitChangeColumns$.next(event);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\nimport {TotalTableHelisa} from './table-helisa.interface';\r\nimport {TableHelisaComponent} from './table-helisa.component';\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: {} | TableHelisaComponent<T>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource: Subject<TableHelisaServiceInfo<TotalTableHelisa>> = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage: Subject<TableHelisaServiceInfo<T[]>> = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn: Observable<TableHelisaServiceInfo<TotalTableHelisa>> = this.emitChangeSource.asObservable();\r\n  nextPageReturn: Observable<TableHelisaServiceInfo<T[]>> = this.emitNextPage.asObservable();\r\n\r\n  private emitVisibleButton$: Subject<boolean> = new Subject<boolean>();\r\n  /**\r\n   * Observable para saber si se debe mostrar o esconder el boton de add row\r\n   */\r\n  emitVisibleButton: Observable<boolean> = this.emitVisibleButton$.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<TotalTableHelisa>): void {\r\n    this.emitChangeSource.next({obj: total, table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>): void {\r\n    this.emitNextPage.next({obj: page, table});\r\n  }\r\n\r\n  /**\r\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\r\n   * @param change indicar si se muestra o no el boton de add row de la tabla\r\n   */\r\n  changeVisibilityButton(change: boolean): void {\r\n    this.emitVisibleButton$.next(change);\r\n  }\r\n\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nexport enum InputHelisaType {\r\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit, AfterViewInit {\r\n\r\n  private readonly DECIMAL_SEPARATOR: string = '.';\r\n  private readonly THOUSAND_SEPARATOR: string = ',';\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n\r\n  /** Activar o desactivar el autocompletado\r\n   * (Caracteristica de los navegadores para campos comunes como\r\n   * Direccion , Usuario, Password ... etc)\r\n   */\r\n  @Input() autocompleteMode: boolean = false;\r\n\r\n  // Mostrar o no el icono de buscar\r\n  @Input() isSearch: boolean = false;\r\n  // @Input() inputFormControl: FormControl = new FormControl('');\r\n  @Input() isFocused: boolean = false;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Input() disabled: boolean = false;\r\n  @Input() type: InputHelisaType = InputHelisaType.DEFAULT;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  // tslint:disable-next-line:no-any\r\n  @Output() blur: EventEmitter<any> = new EventEmitter();\r\n\r\n  formControlMask: FormControl = new FormControl('');\r\n  private realValue: string = '';\r\n  private inputFormReal: FormControl = new FormControl('');\r\n\r\n  @ViewChild('inputText', {static: true}) inputText: ElementRef;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  @Input()\r\n  set inputFormControl(formControl: FormControl) {\r\n    this.inputFormReal = formControl;\r\n    this.inputFormReal.registerOnDisabledChange(((isDisabled: boolean): void => {\r\n      if (isDisabled) {\r\n        this.formControlMask.disable();\r\n      } else {\r\n        this.formControlMask.enable();\r\n      }\r\n    }));\r\n    this.inputFormReal.valueChanges.subscribe((data: string): void => {\r\n      this.statusChange(this.inputFormReal.status);\r\n      if (this.getMaskedValue(data) !== this.formControlMask.value) {\r\n        this.change(data);\r\n        if (this.isFocused) {\r\n          this.onFocus(null);\r\n        }\r\n      }\r\n    });\r\n    this.formControlMask.setValidators(this.inputFormReal.validator);\r\n    this.change(this.inputFormReal.value);\r\n    // disable control\r\n    if (formControl.disabled) {\r\n      this.formControlMask.disable({ onlySelf: true });\r\n    }\r\n    this.inputFormReal.statusChanges.subscribe(\r\n      (data: string): void => {\r\n        this.statusChange(data);\r\n        if (this.isFocused) {\r\n          this.onFocus(null);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  private statusChange(data: string): void {\r\n    if (data === 'INVALID') {\r\n      this.formControlMask.setErrors({ key: 'Error de validación.' });\r\n      this.formControlMask.markAsTouched();\r\n    } else {\r\n      this.formControlMask.setErrors(null);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.isFocused) {\r\n      this.inputText.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // this.isParentDisabled();\r\n  }\r\n\r\n  /*isParentDisabled(): void {\r\n    setTimeout(() => {\r\n      if (this.nameInput.nativeElement.closest('.hw-disabled-mode')) {\r\n        this.disabled = true;\r\n      } else {\r\n        this.disabled = false;\r\n      }\r\n    });\r\n  }*/\r\n\r\n  search(): void {\r\n    this.setValue.emit(this.realValue);\r\n  }\r\n\r\n  change(event: string): void {\r\n    if (event != null) {\r\n      event = event + '';\r\n    }\r\n    let position: number = this.inputText.nativeElement.selectionStart;\r\n    const length: number = event ? event.length : 0;\r\n    this.realValue = this.getRealValue(event);\r\n    if (this.getMaskedValue(this.realValue) !== this.formControlMask.value) {\r\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue));\r\n      position += this.inputText.nativeElement.value.length - length;\r\n      this.inputText.nativeElement.selectionStart = position;\r\n      this.inputText.nativeElement.selectionEnd = position;\r\n    }\r\n    this.inputFormReal.setValue(this.realValue);\r\n  }\r\n\r\n  private getMaskedValue(str: string): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    if (this.type === InputHelisaType.DEFAULT) {\r\n      return str;\r\n    }\r\n    let maskedStr: string = '';\r\n    if (this.type === InputHelisaType.IDENTITY) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.NUMERIC) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.DOUBLE) {\r\n      if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {\r\n        for (let i: number = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {\r\n          maskedStr += str[i];\r\n        }\r\n      }\r\n      for (let i: number = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1,\r\n        j: number = 0; i >= 0; i--, j++) {\r\n\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    return maskedStr;\r\n  }\r\n\r\n  private getRealValue(str: string): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    let realStr: string = '';\r\n    if (this.type === InputHelisaType.DEFAULT) {\r\n      return str;\r\n    }\r\n    if (this.type === InputHelisaType.IDENTITY) {\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]')) {\r\n          realStr += strItem;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.NUMERIC) {\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]')) {\r\n          realStr += strItem;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.DOUBLE) {\r\n      let haveDot: boolean = false;\r\n\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {\r\n          realStr += strItem;\r\n        }\r\n        haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);\r\n      }\r\n    }\r\n    return realStr;\r\n  }\r\n\r\n  onFocus($event: FocusEvent): void {\r\n    if ((this.type === InputHelisaType.NUMERIC || this.type === InputHelisaType.DOUBLE) &&\r\n      Number(this.getRealValue(this.inputText.nativeElement.value)) === 0) {\r\n      this.inputText.nativeElement.select();\r\n    }\r\n  }\r\n}\r\n","import {Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input} from '@angular/core';\r\nimport {DependencyTableHelisaService, ConfigTable} from './dependency-table-helisa.service';\r\nimport {Cell, ColumnConfig, EventColumn, RequestTableHelisa, SelectObject, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\r\nimport {TableHelisaService} from '../table-helisa/table-helisa.service';\r\nimport {TableHelisaComponent} from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency<T> {\r\n  index: number;\r\n  data: T;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [DependencyTableHelisaService]\r\n})\r\nexport class DependencyTableHelisaComponent<T> implements OnInit {\r\n\r\n  tables: Array<ConfigTable<T>> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<T>>;\r\n  @Input() showToolTip: boolean = true;\r\n\r\n  /**\r\n   * deprecated, use selectObject\r\n   */\r\n  @Output() selected: EventEmitter<EventDependency<T>> = new EventEmitter<EventDependency<T>>();\r\n  @Output() selectObject: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() nextPage: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() total: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() sort: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() drop: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() selectCell: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() bookClicked: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  selectedObject: EventDependency<{}> = null;\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService<T>, private tableService: TableHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      (event: EventDependency<T[]>): void => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n\r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      (event: EventDependency<TotalTableHelisa>): void => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder el boton de una tabla\r\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\r\n      (data: EventDependency<boolean>): void => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (!!table) {\r\n            table.addRowButton.showButton = data.data;\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder los botones de todas las tablas\r\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\r\n      (data: boolean): void => {\r\n        if (data !== undefined && data != null) {\r\n          this.tables.forEach((element: ConfigTable<T>): void => {\r\n            if (!!element.addRowButton) {\r\n              element.addRowButton.showButton = data;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para manejo de selección de celdas\r\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\r\n      (data: EventDependency<boolean>): void => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.isCellSelection = data.data;\r\n          }\r\n        }\r\n      });\r\n\r\n    // Observable para manejo de columnas\r\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\r\n      (data: EventDependency<ColumnConfig[]>): void => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.columns = data.data;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService(): DependencyTableHelisaService<T> {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables(): void {\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe((tables: ConfigTable<T>[]): void => {\r\n          this.tables.splice(0, this.tables.length, ...tables);\r\n          this.viewTables.forEach((item: TableHelisaComponent<T>): void => {\r\n            item.reload();\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: SelectObject<T>): void {\r\n    this.selectedObject = {index, data: event};\r\n    this.selected.emit({index, data: event.value});\r\n    this.selectObject.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa<T>): void {\r\n    this.nextPage.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: EventColumn): void {\r\n    this.total.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: EventColumn): void {\r\n    this.sort.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onDrop(index: number, event: EventDependency<T>): void {\r\n    this.drop.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe añadir una nueva fila\r\n   * @param index indica el indice de la tabla de la cual se dispara el evento\r\n   */\r\n  onAddRow(index: number): void {\r\n    this.addRow.emit(index);\r\n  }\r\n\r\n  selectedCell(index: number, event: Cell<T>): void {\r\n    if (this.tables[index].isCellSelection) {\r\n      this.selectCell.emit({index, data: event});\r\n    }\r\n  }\r\n\r\n  onBookClicked(index: number, event: EventDependency<T>): void {\r\n    this.bookClicked.emit({index, data: event});\r\n  }\r\n}\r\n","import { SortDirection } from '@angular/material/sort';\r\nimport { RowData } from './table-helisa.component';\r\n\r\nexport enum ColumnType {\r\n  NORMAL, URL\r\n}\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title?: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n  subtitle?: string;\r\n  colspanTitle?: number;\r\n  colspanSubtitle?: number;\r\n  columnStyle?: string;\r\n  columnType?: ColumnType;\r\n}\r\n\r\nexport interface AddRowButton {\r\n  text: string;\r\n  showButton: boolean;\r\n}\r\n\r\nexport enum EventScope {\r\n  USER, CODE_CALL\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa<T> {\r\n  page: number;\r\n  body: {} | T;\r\n}\r\n\r\nexport interface DropElement<T> {\r\n value: T;\r\n order: number;\r\n}\r\n\r\nexport interface SelectObject<T> {\r\n  value: T;\r\n  scope: EventScope;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n\r\nexport interface Cell<T> {\r\n  column: ColumnConfig;\r\n  row: RowData<T> | T;\r\n }\r\n\r\nexport interface ConfigCellStyles<T> {\r\n   cellData: T;\r\n   classCell: string;\r\n }\r\n\r\nexport interface ConfigRowStyles<T> {\r\n  column: ColumnConfig;\r\n  data: {} | T;\r\n  classRow: string;\r\n}\r\n\r\n// @dynamic\r\nexport class ColumnConfigUtil<T> {\r\n\r\n  getValue(obj: T, column: ColumnConfig): T | number | string {\r\n    return column.name.split('.').reduce((o: T, field: string): T | string => o && o[field], obj);\r\n  }\r\n}\r\n\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, DoCheck} from '@angular/core';\r\nimport {MatSort, Sort} from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\n\r\nimport {\r\n  AddRowButton,\r\n  Cell,\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  ConfigCellStyles,\r\n  ConfigRowStyles,\r\n  DropElement,\r\n  EventColumn,\r\n  EventScope,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  SelectObject,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType,\r\n  ColumnType,\r\n  TotalTableHelisa\r\n} from './table-helisa.interface';\r\nimport { TableHelisaService, TableHelisaServiceInfo } from './table-helisa.service';\r\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { of } from 'rxjs';\r\n\r\nexport interface RowData<T> {\r\n  data: {} | T;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData<T>> = new MatTableDataSource<RowData<T>>([]);\r\n  displayedColumns: string[] = [];\r\n  displayedColumnsWithTitle: string[] = [];\r\n  displayedColumnsWithSubtitle: string[] = [];\r\n  displayedColumnsWithFooter: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n  indexRowSelect: number;\r\n  private scrollCount: number = 0;\r\n  hasSubtitle: boolean = false;\r\n  private indexRowStartDrag: number = -1;\r\n  private lastIndexRowDrag: number = -1;\r\n  private dataBeforeDrag: { data: RowData<T>[] } = null;\r\n  private dataSource$: Array<T> = [];\r\n  private scrollX: number = 0;\r\n  private scrollY: number = 0;\r\n\r\n  @ViewChild(MatSort, {static: true}) matSort: MatSort;\r\n  @ViewChild(MatTable, {static: true}) matTable: MatTable<T>;\r\n  @ViewChild(MatTable, { read: ElementRef, static: true }) matTableElement: ElementRef;\r\n  @ViewChild('containerTable', {static: true}) containerTable: ElementRef;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n\r\n  /**\r\n   * Deprecado, cambiar por electObject\r\n   */\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() selectCell: EventEmitter<Cell<T>> = new EventEmitter<Cell<T>>();\r\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa<T>> = new EventEmitter<RequestTableHelisa<T>>();\r\n  @Input() showTitle: boolean = true;\r\n  @Input() isCellSelection: boolean = false;\r\n  @Input() count: number;\r\n  @Input() configCellStyles: Array<ConfigCellStyles<T>>;\r\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\r\n  @Input() selectedCells: Cell<T>;\r\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\r\n  @Input() isDragged: boolean = false;\r\n  @Input() addRowButton: AddRowButton = { showButton: false, text: '' };\r\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\r\n  @Input() addBookButton: boolean = false;\r\n  @Input() showToolTip: boolean = true;\r\n  showFooter: boolean = false;\r\n  showSearch: boolean = false;\r\n\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.reloadColumnConfig();\r\n    this.tableService.nextPageReturn.subscribe(\r\n      (data: TableHelisaServiceInfo<T[]>): void => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe((info: TableHelisaServiceInfo<TotalTableHelisa>): void => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column: ColumnConfig, idx: number): void => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort): void => {\r\n        const column: ColumnConfig = this.columnConfig.find((c: ColumnConfig): boolean => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\r\n      }\r\n    );\r\n\r\n    this.tableService.emitVisibleButton.subscribe(\r\n      (data: boolean): void => {\r\n        if (data !== undefined && data != null) {\r\n          this.addRowButton.showButton = data;\r\n        }\r\n      }\r\n    );\r\n    this.reload();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.isCellSelection) {\r\n      this.matTable.renderRows();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.goNextPage();\r\n    } else {\r\n      this.tableHelisaConnectComponent.page++;\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.columnConfig = columnConfiguration;\r\n    this.reload();\r\n    this.reloadColumnConfig();\r\n  }\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<T>) {\r\n    this.dataSource$ = dataSource;\r\n    this.rawData = dataSource;\r\n    this.reload();\r\n  }\r\n\r\n  get dataSource(): Array<T> {\r\n    return this.dataSource$;\r\n  }\r\n\r\n  @Input()\r\n  set selectedIndexRow(idRowSelected: number) {\r\n    this.indexRowSelect = idRowSelected;\r\n    if (this.rawData && this.rawData.length) {\r\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private reloadColumnConfig(): void {\r\n    this.hasSubtitle = false;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n\r\n    if (this.columnConfig) {\r\n      if (this.addBookButton) {\r\n        const columnCount: number = this.columnConfig.length;\r\n        let countSubtitle: number = 0;\r\n        let showBookButton: boolean = false;\r\n        this.columnConfig.forEach((column: ColumnConfig): void => {\r\n          if (!!column.subtitle) {\r\n            countSubtitle = countSubtitle + 1;\r\n          }\r\n          if ((!showBookButton) && (column.name === 'bookButton')) {\r\n            showBookButton = true;\r\n          }\r\n        });\r\n        const subtitleTemp: boolean = columnCount === countSubtitle;\r\n        if (!showBookButton) {\r\n          this.columnConfig.push({\r\n            name: 'bookButton',\r\n            title: '',\r\n            subtitle: subtitleTemp ? '' : undefined ,\r\n            visible: true\r\n          });\r\n        }\r\n      }\r\n      this.columnConfig.forEach((column: ColumnConfig): void => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n        if (!this.hasSubtitle) {\r\n          this.hasSubtitle = column.subtitle !== undefined;\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\r\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\r\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\r\n    this.getColumnsWithTitle().forEach((col: string): number => this.displayedColumnsWithTitle.push(col));\r\n    this.getHeaderSubtitle().forEach((col: string): number => this.displayedColumnsWithSubtitle.push(col));\r\n    this.footerDisplayedColumns().forEach((col: string): number => this.displayedColumnsWithFooter.push(col));\r\n  }\r\n\r\n  public reload(): void {\r\n    if(this.columnConfig) {\r\n      const changeData: Array<RowData<T>> = Array<RowData<T>>();\r\n      let haveGroup: boolean = false;\r\n      let groupFooter: Array<TotalGroup>;\r\n      this.columnConfig.forEach((column: ColumnConfig): void => {\r\n        if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n          this.totalData = new Array<number>(this.columnConfig.length);\r\n          this.showFooter = true;\r\n          this.total.emit({column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL});\r\n        }\r\n        this.showSearch = this.showSearch || column.searchable;\r\n        haveGroup = haveGroup || column.groupable;\r\n      });\r\n      if (haveGroup) {\r\n        this.rawData = this.rawData.sort((a: T, b: T): number => {\r\n          let result: number = 0;\r\n          this.columnConfig.forEach((column: ColumnConfig): void => {\r\n            if (result === 0) {\r\n              result = this.compare(a, b);\r\n            }\r\n          });\r\n          return result;\r\n        });\r\n      }\r\n      if(this.rawData) {\r\n        this.rawData.forEach((row: T): void => {\r\n          if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data as T, row) !== 0)) {\r\n            if (groupFooter) {\r\n              changeData.push({data: groupFooter, rowType: RowType.GROUP_FOOTER});\r\n            }\r\n            changeData.push({data: row, rowType: RowType.GROUP_TITLE});\r\n            groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n          }\r\n          if (haveGroup) {\r\n            this.addTotalGroup(groupFooter, row);\r\n          }\r\n          changeData.push({data: row, rowType: RowType.ROW});\r\n        });\r\n        this.data = new MatTableDataSource<RowData<T>>(changeData);\r\n      }\r\n      if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\r\n        if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0) {\r\n          this.indexRowSelect = 0;\r\n        }\r\n        this.selectRow({data: this.rawData[this.indexRowSelect], rowType: RowType.ROW}, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: T): void {\r\n    this.columnConfig.forEach((column: ColumnConfig, index: number): void => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = { sum: (new ColumnConfigUtil().getValue(row, column) as number), count: 1 };\r\n        } else {\r\n          rowTotal[index].sum += (new ColumnConfigUtil().getValue(row, column) as number);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: T, b: T): number {\r\n    let ws: number = 0;\r\n    this.columnConfig.forEach((column: ColumnConfig): void => {\r\n      if (ws === 0 && column.groupable) {\r\n        if ((new ColumnConfigUtil().getValue(a, column) as number) < (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = -1;\r\n        } else if ((new ColumnConfigUtil().getValue(a, column) as number) > (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = 1;\r\n        }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: T): string {\r\n    let result: string = '';\r\n    this.columnConfig.forEach((column: ColumnConfig): void => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + (new ColumnConfigUtil().getValue(obj, column));\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map((name: string): string => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: T, column: ColumnConfig): T {\r\n    return new ColumnConfigUtil().getValue(obj, column) as T;\r\n  }\r\n\r\n  getValueTooltip(obj: T, column: ColumnConfig): string {\r\n    if (this.showToolTip) {\r\n      return new ColumnConfigUtil().getValue(obj, column) as string;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  searchText(text: string): void {\r\n    this.lastSearch = text;\r\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\r\n  }\r\n\r\n  selectRow(row: RowData<T>, isUser: boolean, column?: ColumnConfig): void {\r\n    if (row === undefined || row === null) {\r\n      return;\r\n    }\r\n    if ((column === undefined || column === null) || (!!column && column.name !== 'bookButton')) {\r\n      this.selectedObject = row.data as T;\r\n      this.select.emit(this.selectedObject);\r\n      this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n    } else if (!!column && column.name === 'bookButton') {\r\n      if (this.selectedObject !== row.data) {\r\n        this.selectedObject = row.data as T;\r\n        this.select.emit(this.selectedObject);\r\n        this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n      }\r\n      this.bookClicked.emit(this.selectedObject);\r\n    }\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n    let isScrollY: boolean;\r\n\r\n    if (this.scrollY !== element.scrollTop) {\r\n      isScrollY = true;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if (this.scrollX !== element.scrollLeft) {\r\n      isScrollY = false;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if ((element.scrollHeight - element.scrollTop < 1000) && isScrollY) {\r\n      this.goNextPage();\r\n    }\r\n\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]): void {\r\n    if (!this.rawData) {\r\n      this.rawData = new Array<T>();\r\n    }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n    this.tableHelisaConnectComponent.isUsed = false;\r\n  }\r\n\r\n  dblClickCell(): void {\r\n    this.selectCell.emit(this.selectedCells as Cell<T>);\r\n  }\r\n\r\n  selectedCell(element: RowData<T>, column: ColumnConfig): void {\r\n    this.selectRow(element, true, column);\r\n\r\n    this.selectedCells = { column, row: element };\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean {\r\n    if (this.isCellSelection) {\r\n      if (this.selectedCells != null) {\r\n        if (this.selectedCells.column.name === column.name &&\r\n          (this.selectedCells.row as RowData<T>).data === row.data) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getClassToCell(row: T, column: ColumnConfig): string[] {\r\n    const classToCell: Array<string> = new Array<string>();\r\n    if (this.configCellStyles) {\r\n      const found: ConfigCellStyles<T> = this.configCellStyles.find((c: ConfigCellStyles<T>): boolean => {\r\n        return c.cellData === this.getValue(row, column);\r\n      });\r\n      if (found) {\r\n        classToCell.push(found.classCell);\r\n      }\r\n    }\r\n    if (column.columnStyle) {\r\n      classToCell.push(column.columnStyle);\r\n    }\r\n    return classToCell;\r\n  }\r\n\r\n  getClassToRow(row: T): string[] {\r\n    const classToRow: Array<string> = new Array<string>();\r\n    if (row === this.selectedObject && !this.isCellSelection) {\r\n      classToRow.push('');\r\n    }\r\n    if (this.configRowStylesFromColumn) {\r\n      const found: ConfigRowStyles<T> = this.configRowStylesFromColumn.find((c: ConfigRowStyles<T>): boolean => {\r\n        return c.data === this.getValue(row, c.column);\r\n      });\r\n      if (found) {\r\n        classToRow.push(found.classRow);\r\n      }\r\n    }\r\n    return classToRow;\r\n  }\r\n\r\n  onDrop(event: MouseEvent): void {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      const array: RowData<T>[] = this.dataBeforeDrag.data;\r\n      const rawData: T[] = this.rawData;\r\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\r\n      this.drop.emit({ value: array[rowIndex].data as T, order: rowIndex });\r\n      this.rawData = rawData;\r\n      this.data = new MatTableDataSource(array);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  tableKeydown(event: KeyboardEvent): void {\r\n    if (!this.isCellSelection) {\r\n      let currentIndex: number = this.data.data.findIndex((row: RowData<T>): boolean => row.data === this.selectedObject);\r\n      let newSelection: number = -10;\r\n      if (event.key === 'ArrowDown') {\r\n        this.scrollCount++;\r\n        this.data.data.forEach((row: RowData<T>, index: number): void => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n      }\r\n      if (event.key === 'ArrowUp') {\r\n        this.scrollCount--;\r\n        currentIndex = this.data.data.length - currentIndex - 1;\r\n        this.data.data.reverse().forEach((row: RowData<T>, index: number): void => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n        this.data.data.reverse();\r\n        if (newSelection !== -10) {\r\n          newSelection = this.data.data.length - newSelection - 1;\r\n        }\r\n      }\r\n      if (newSelection !== -10) {\r\n        this.selectRow(this.data.data[newSelection], true);\r\n      }\r\n      if (Math.abs(this.scrollCount) >= 2) {\r\n        this.scrollCount = 0;\r\n      } else {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emite el evento cuando se da click al boton AddRow\r\n   */\r\n  onAddRow(): void {\r\n    this.addRow.emit();\r\n  }\r\n\r\n\r\n  getHeaderSubtitle(): string[] {\r\n    const x: string[] = this.columnConfig.map((column: ColumnConfig, index: number): string => {\r\n      if (column.visible && column.subtitle !== undefined) {\r\n        return 'subtitle' + index;\r\n      } else {\r\n        return null;\r\n      }\r\n    }).filter((data: string): boolean => data != null);\r\n    return x;\r\n  }\r\n\r\n  getColumnsWithTitle(): string[] {\r\n    return this.columnConfig.filter((column: ColumnConfig): boolean =>\r\n      column.visible && column.title !== undefined\r\n    ).map((col: ColumnConfig): string => col.name);\r\n  }\r\n\r\n  dragger(event: MouseEvent): boolean {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      if (rowIndex !== this.lastIndexRowDrag) {\r\n        this.lastIndexRowDrag = rowIndex;\r\n        // This can have a memory problem with big data\r\n        const array: RowData<T>[] = [...this.dataBeforeDrag.data];\r\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n        this.data = new MatTableDataSource(array);\r\n      }\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  startDrag(event: MouseEvent): void {\r\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\r\n    this.lastIndexRowDrag = this.indexRowStartDrag;\r\n    this.dataBeforeDrag = this.data;\r\n  }\r\n\r\n  private getRowIndex(pageY: number): number {\r\n    let offsetTop: number = 0;\r\n    let container: HTMLElement = this.containerTable.nativeElement;\r\n    while ((container !== null) && (offsetTop === 0)) {\r\n      offsetTop = container.offsetTop;\r\n      container = container.parentElement;\r\n    }\r\n    let rowIndex: number = -1;\r\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\r\n    for (let i: number = 0; i < rows.length; i++) {\r\n      const row: HTMLElement = (rows[i] as HTMLElement);\r\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop) {\r\n        rowIndex = i;\r\n      }\r\n    }\r\n    if (rowIndex < 0) { rowIndex = 0; }\r\n    return rowIndex;\r\n  }\r\n\r\n  get columnType(): typeof ColumnType {\r\n    return ColumnType;\r\n  }\r\n\r\n}\r\n","import {ColumnConfig} from './table-helisa.interface';\r\nimport {Observable} from 'rxjs';\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): {} {\r\n    return {};\r\n  }\r\n\r\n  nextPage(): number {\r\n    return this.page++;\r\n  }\r\n}\r\n","import {Component, OnInit, Input, Output, EventEmitter, ViewChild} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport * as moment_ from 'moment';\r\nconst moment: typeof moment_ = moment_;\r\n\r\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material/datepicker';\r\nimport { filter, tap } from 'rxjs/operators';\r\n\r\nexport enum TypeCalendarEnum {\r\n  NORMAL = 'norma',\r\n  MONTH_YEAR = 'mounth-year',\r\n  STRICT = 'strict'\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css'],\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n\r\n  @ViewChild('picker', {static: true}) datePickerShow: MatDatepicker<Date>;\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n  private date: Date = new Date();\r\n\r\n  /**\r\n   * Formato de fecha.\r\n   * Los formatos validos son aquellos que maneja la libreria momentjs y este: 'DD [de] MMMM [de] YYYY'\r\n   * https://momentjs.com/docs/#/parsing/string-format/\r\n   */\r\n  @Input() dateFormat: string = 'DD/MM/YYYY';\r\n  @Input() locale: string = 'es';\r\n  @Input() errorMessage: string = 'La fecha no concuerda con el formato ';\r\n  @Input() placeholder: string = this.dateFormat;\r\n  @Input() showDatePicker: boolean = false;\r\n  @Output() change: EventEmitter<Date> = new EventEmitter<Date>();\r\n  isClosed: boolean = false;\r\n  // tslint:disable-next-line:no-any\r\n  timeout: any;\r\n  isDisabled: boolean = false;\r\n  /**\r\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\r\n   * será tomado en cuenta\r\n   */\r\n  @Input() typeCalendar: TypeCalendarEnum = TypeCalendarEnum.NORMAL;\r\n\r\n  dateToVisualize: FormControl;\r\n\r\n  /**\r\n   * Para evitar nuevos eventos miestras se realiza el parseo\r\n   */\r\n  private isFromInputEvent: boolean = false;\r\n\r\n  /**\r\n   * Verificar si el formato es valido\r\n   */\r\n  invalidFormat: boolean = false;\r\n  private inputFormReal: FormControl = new FormControl('');\r\n\r\n  constructor() { }\r\n\r\n  /*\r\n  * TypeCalendarEnum.MONTH_YEAR = 'MM/YYYY'\r\n  * TypeCalendarEnum.STRICT = 'DD [de] MMMM [de] YYYY'\r\n  * */\r\n  ngOnInit(): void {\r\n    moment.locale(this.locale);\r\n    this.dateToVisualize = new FormControl('', this.dateFormControl.validator);\r\n    this.formHandler();\r\n    this.inputFormReal = this.dateFormControl;\r\n    this.inputFormReal.registerOnDisabledChange((isDisabled: boolean): void => {\r\n      if (isDisabled) {\r\n        this.isDisabled = true;\r\n        this.dateToVisualize.disable();\r\n      } else {\r\n        this.isDisabled = false;\r\n        this.dateToVisualize.enable();\r\n      }\r\n    });\r\n\r\n    /**\r\n     * establecer valor por defecto de la fecha\r\n     */\r\n    if (this.dateFormControl.value !== '' && this.dateFormControl.value !== null) {\r\n      const incomingDate: string = moment(this.dateFormControl.value, this.dateFormat).format(this.dateFormat);\r\n      if (incomingDate !== 'Invalid date') {\r\n        this.dateToVisualize.setValue(incomingDate);\r\n        this.dateFormControl.setValue(this.dateFormControl.value);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  get typeCalendarEnum(): typeof TypeCalendarEnum {\r\n    return TypeCalendarEnum;\r\n  }\r\n\r\n  openDatePicker(): void {\r\n    if (this.showDatePicker && !this.isClosed) {\r\n      this.isClosed = true;\r\n      this.timeout = setTimeout((): void => {\r\n        this.datePickerShow.open();\r\n      }, 2000);\r\n    }\r\n  }\r\n\r\n  onKey(event: KeyboardEvent): void {\r\n    if (event.key === ' ' && this.showDatePicker) {\r\n      this.onBlur();\r\n      this.isClosed = true;\r\n      this.datePickerShow.open();\r\n    }\r\n  }\r\n\r\n  onBlur(): void {\r\n    clearTimeout(this.timeout);\r\n    this.isClosed = false;\r\n  }\r\n\r\n  /**\r\n   * Determina como se debe inicializar la visualizacion del calendar\r\n   */\r\n  getStartView(): string {\r\n    // multi-year\r\n    if (this.typeCalendar === this.typeCalendarEnum.MONTH_YEAR) {\r\n      return 'multi-year';\r\n    } else if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\r\n      return 'month';\r\n    } else {\r\n      return 'month';\r\n    }\r\n  }\r\n\r\n  private formHandler(): void {\r\n    if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\r\n      this.dateToVisualize.valueChanges.subscribe((date: string): void => {\r\n          this.invalidFormat = false;\r\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\r\n          const result: string = moment(date, this.dateFormat).format(this.dateFormat);\r\n          if (!!result && (result === 'Invalid date' || !isValid)) {\r\n            this.invalidFormat = true;\r\n            return;\r\n          }\r\n          if (!!result) {\r\n            if (!this.isFromInputEvent) {\r\n              this.isFromInputEvent = true;\r\n              this.dateToVisualize.setValue(moment(result, this.dateFormat).format(this.dateFormat));\r\n              this.dateFormControl.setValue(moment(result, this.dateFormat).toDate());\r\n              this.isFromInputEvent = false;\r\n            } else {\r\n              setTimeout((): void => {\r\n                this.isFromInputEvent = false;\r\n              }, 1500);\r\n            }\r\n\r\n          }\r\n        });\r\n    } else {\r\n      this.dateToVisualize.valueChanges\r\n        .pipe(\r\n          tap((date: string): void => {\r\n            if (date.length > this.dateFormat.length) {\r\n              this.invalidFormat = true;\r\n            } else {\r\n              this.invalidFormat = false;\r\n            }\r\n          }),\r\n          filter((date: string): boolean => date.length === this.dateFormat.length)\r\n        )\r\n        .subscribe((date: string): void => {\r\n          this.invalidFormat = false;\r\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\r\n          const result: string = moment(date, this.dateFormat).format('YYYY-MM-DD');\r\n\r\n          if (!!result && (result === 'Invalid date' || !isValid)) {\r\n            this.invalidFormat = true;\r\n            return;\r\n          }\r\n\r\n          if (!!result) {\r\n            if (!this.isFromInputEvent) {\r\n              this.isFromInputEvent = true;\r\n              const subString: string[] = result.split('-');\r\n\r\n              const year: number = parseFloat(subString[0]);\r\n              const month: number = parseFloat(subString[1]);\r\n              const day: number = parseFloat(subString[2]);\r\n\r\n              this.date.setFullYear(year);\r\n              this.date.setDate(day);\r\n              this.date.setMonth(month - 1); // -1 por que los meses se toman como los indices en un array\r\n\r\n              /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\r\n              if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n                this.date = moment(this.date).endOf('month').toDate();\r\n              }\r\n\r\n              this.dateToVisualize.setValue(moment(this.date, 'YYYY-MM-DD').format(this.dateFormat));\r\n              this.dateFormControl.setValue(this.date);\r\n              this.isFromInputEvent = false;\r\n            } else {\r\n              setTimeout((): void => {\r\n                this.isFromInputEvent = false;\r\n              }, 1500);\r\n            }\r\n\r\n          }\r\n        });\r\n    }\r\n\r\n\r\n    this.dateFormControl.valueChanges\r\n      .subscribe((date: string): void => {\r\n        const incommingDate: string = moment(date, this.dateFormat).format(this.dateFormat);\r\n        if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\r\n          this.dateToVisualize.setValue(incommingDate);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Evento que se dispara luego seleccionar un mes\r\n   */\r\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void {\r\n\r\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n      datepicker.close();\r\n      const date: Date = moment(chosenMonthDate).endOf('month').toDate();\r\n\r\n      this.dateToVisualize.setValue(moment(date, 'YYYY-MM-DD').format(this.dateFormat));\r\n      this.dateFormControl.setValue(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evento desde el control touch del calendar\r\n   */\r\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>): void {\r\n    this.dateToVisualize.setValue(moment(event.value, 'YYYY-MM-DD').format(this.dateFormat));\r\n    this.dateFormControl.setValue(event.value);\r\n    this.change.emit(event.value);\r\n    this.isClosed = true;\r\n  }\r\n\r\n  getErrorMessage(): string {\r\n    return this.errorMessage + this.dateFormat;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Subscriber, Observable } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected: BehaviorSubject<number | string> = new BehaviorSubject<number | string>(1);\r\n    // Observable string streams\r\n    nodeSelected: Observable<string | number> = this.emitNodeSelected.asObservable();\r\n\r\n    // Observable string sources\r\n    private emitDataSource: BehaviorSubject<Node> = new BehaviorSubject<Node>(undefined);\r\n\r\n    // Observable string streams\r\n    dataSourceObservable: Observable<Node> = this.emitDataSource.asObservable();\r\n\r\n    // Expand node observable\r\n    private emitExpandAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n    nodeExpand: Observable<boolean> = this.emitExpandAllNodes.asObservable();\r\n\r\n     // Collapse node observable\r\n     private emitCollapseAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n     nodeCollapse: Observable<boolean> = this.emitCollapseAllNodes.asObservable();\r\n\r\n    private emitRefreshTree: Subject<void> = new Subject<void>();\r\n    refreshTreeObservable: Observable<void> = this.emitRefreshTree.asObservable();\r\n\r\n    private emitRefreshTreeWithPagination: Subject<void> = new Subject<void>();\r\n    refreshTreeWithPaginationObservable: Observable<void> = this.emitRefreshTreeWithPagination.asObservable();\r\n\r\n    private emitExpandOneNode: Subject<Node> = new Subject<Node>();\r\n    expandOneNodeObservable: Observable<Node> = this.emitExpandOneNode.asObservable();\r\n\r\n    private emitCollapseOneNode: Subject<Node> = new Subject<Node>();\r\n    collapseOneNodeObservable: Observable<Node> = this.emitCollapseOneNode.asObservable();\r\n\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number | string): void {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n    // Service message commands\r\n    changeDataSource(data: Node): void {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n    expandAllNodes(expand: boolean): void {\r\n        this.emitExpandAllNodes.next(expand);\r\n    }\r\n\r\n    collapseAllNodes(collapse: boolean): void {\r\n        this.emitCollapseAllNodes.next(collapse);\r\n    }\r\n\r\n    refreshTree(): void {\r\n        this.emitRefreshTree.next();\r\n    }\r\n\r\n\r\n    refreshTreeWithPagination(): void {\r\n        this.emitRefreshTreeWithPagination.next();\r\n    }\r\n\r\n\r\n    expandOneNode(node: Node): void {\r\n    this.emitExpandOneNode.next(node);\r\n    }\r\n\r\n\r\n    collapseOneNode(node: Node): void {\r\n        this.emitCollapseOneNode.next(node);\r\n    }\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n}\r\n","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n\r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }\r\n\r\n    nextPage(): number {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }\r\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, HostListener } from '@angular/core';\r\nimport { NestedTreeControl, TreeControl } from '@angular/cdk/tree';\r\nimport { MatOptionSelectionChange } from '@angular/material/core';\r\nimport { MatTreeNestedDataSource, MatTree } from '@angular/material/tree';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass']\r\n  // host: { '(document:keyup)': 'onKeyDown($event)' }\r\n})\r\nexport class TreeHelisaComponent implements OnInit, AfterViewInit {\r\n  isDisabled: boolean;\r\n  selectedNode: number | string | null;\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService: TreeHelisaService, private router: Router, private elementRef: ElementRef) {\r\n    // cargar datos pasados por el @Input\r\n    if (!!this.data) {\r\n      const data: Node = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = [];\r\n      this.treeControl.dataNodes = [];\r\n    }\r\n  }\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit: FormControl;\r\n  @ViewChild('tree', {static: true}) tree: MatTree<{}>;\r\n  private selectedOptions: Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  > = new Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  >();\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data: Node;\r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed: EventEmitter<string | number> = new EventEmitter<number | string>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue añadido\r\n   */\r\n  @Output() added: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() collapseParent: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled: EventEmitter<RequestTreeHelisa> = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() dobleClick: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() keypressDelete: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() keypressInsert: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() checkedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() uncheckedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() clickAddNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickEditNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickDeleteNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  treeControl: NestedTreeControl<Node> = new NestedTreeControl<Node>((node: Node): Node[] | Observable<Node[]> => node.children);\r\n  dataSource: MatTreeNestedDataSource<Node> = new MatTreeNestedDataSource<Node>();\r\n\r\n  isSingleClick: boolean = true;\r\n  currentNode: Node = null;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node: Node): string {\r\n    let result: string[] = [node.name];\r\n    let concat: string = '';\r\n\r\n    if (node.parent) {\r\n      result.push(this.getDescription(node.parent));\r\n    }\r\n\r\n    if (result.length === 1) {\r\n      return node.name;\r\n    }\r\n\r\n    result = result.reverse();\r\n\r\n    for (let i: number = 0; i < result.length; i++) {\r\n      const element: string = result[i];\r\n      concat = concat + element + (i === result.length - 1 ? '' : ',');\r\n    }\r\n\r\n    return concat;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable.subscribe((res: Node): void => {\r\n      if (!!res && !!res.children) {\r\n        this.selectedNode = res.id;\r\n        this.receivePage(res.children);\r\n      } else {\r\n        this.dataSource.data = [];\r\n        this.treeControl.dataNodes = [];\r\n      }\r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected.subscribe((res: string | number): void => {\r\n      if (!!this.data && !!this.data.children) {\r\n        this.selectNode(this.data, res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeObservable.subscribe((res: void): void => {\r\n      this.refreshTree();\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeWithPaginationObservable.subscribe((res: void): void => {\r\n      this.refreshTreeWithPagination();\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.treeHelisaService.nodeExpand.subscribe((res: boolean): void => {\r\n      if (res != null) {\r\n        if (res) {\r\n          this.tree.treeControl.expandAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.nodeCollapse.subscribe((res: boolean): void => {\r\n      if (res !== null) {\r\n        if (res) {\r\n          this.tree.treeControl.collapseAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.expandOneNodeObservable.subscribe((res: Node): void => {\r\n      if (res !== undefined) {\r\n        this.treeControl.expand(res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.collapseOneNodeObservable.subscribe((res: Node): void => {\r\n      if (res !== undefined) {\r\n        this.treeControl.collapse(res);\r\n      }\r\n    });\r\n  }\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node: Node): void {\r\n    this.isSingleClick = true;\r\n    setTimeout((): void => {\r\n      if (this.isSingleClick) {\r\n        this.selectNode(node, node.id);\r\n\r\n        // if(!!node && !node.children){\r\n        if (!!node) {\r\n          this.nodeSelected.emit(node.id);\r\n          this.currentNode = node;\r\n        }\r\n      }\r\n    }, 350);\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n\r\n    if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node: Node): void {\r\n    this.clickEditNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se edita el nodo ahora solo se emite el evento 'clickEditNode'\r\n     * retornando el nodo al cual le hicieron click en la opción delete\r\n     */\r\n    // node.isEditable = true;\r\n    // this.isDisabled = true;\r\n  }\r\n\r\n  onAdd(node: Node): void {\r\n    this.clickAddNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se crea y se agrega el nodo ahora solo se emite el evento 'clickAddNode'\r\n     * retornando el nodo al cual le hicieron click en la opción add\r\n     */\r\n    //   // si no tiene hijos instanciar el array\r\n    //   if (!node.children) {\r\n    //     node.children = [];\r\n    //   }\r\n    //   node.children.push({\r\n    //     id: Math.random(),\r\n    //     name: '',\r\n    //     isSelected: false,\r\n    //     parent: node,\r\n    //     isEditable: true\r\n    //   });\r\n    //   if (node.children) {\r\n    //     this.isDisabled = true;\r\n    //     this.treeHelisaService.expandOneNode(node);\r\n    //   }\r\n    //   this.refreshTree();\r\n  }\r\n\r\n  onDelete(node: Node): void {\r\n    this.clickDeleteNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se elimina el nodo ahora solo se emite el evento 'clickDeleteNode'\r\n     * retornando el nodo al cual le hicieron click en la opción delete\r\n     */\r\n    // // Remueve el nodo utilizando la libreria de lodash\r\n    // _.remove(node.parent.children, node);\r\n\r\n    // this.refreshTree();\r\n    // this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node: Node, value: string): void {\r\n    node.name = value;\r\n    if (node.id == null && node.name === '') {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    } else if (node.id && node.id != null && node.name.trim() !== '') {\r\n      this.edited.emit(node);\r\n      node.isEditable = false;\r\n      this.selectNode(node, node.id);\r\n    } else if (node.id == null && node.name.trim() !== '') {\r\n      this.added.emit(node);\r\n      node.isEditable = false;\r\n    }\r\n    this.isDisabled = false;\r\n    this.refreshTree();\r\n  }\r\n\r\n  onCancel(node: Node, value: string): void {\r\n    this.isDisabled = false;\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if (node.id == null) {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    }\r\n\r\n    node.isEditable = false;\r\n  }\r\n\r\n  onDblClick(node: Node): void {\r\n    this.isSingleClick = false;\r\n    this.dobleClick.emit(node.id);\r\n  }\r\n\r\n  @HostListener('document:keyup', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    switch (event.key) {\r\n      case 'Delete':\r\n        this.keypressDelete.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'Insert':\r\n        this.keypressInsert.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'ArrowDown':\r\n        this.moveDownIntoTree();\r\n        break;\r\n      case 'ArrowUp':\r\n        this.moveUpIntoTree();\r\n        break;\r\n    }\r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  private moveUpIntoTree(): number {\r\n    if (!!this.data) {\r\n      // si aun no hay ningun node seleccionado selecciona el primero\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode.parent && this.currentNode.id != null) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number = this.currentNode.parent.children.indexOf(this.currentNode);\r\n\r\n          if (this.currentNode.parent.id == null && index === 0) {\r\n            return 0;\r\n          } else {\r\n            // si tiene nodos al mismo nivel salta al nodo anterior\r\n            if (index !== undefined && index === 0) {\r\n              this.currentNode = this.currentNode.parent;\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } else {\r\n              // si no tiene nodos al mismo nivel salta al nodo padre\r\n              this.currentNode = this.currentNode.parent.children[index - 1];\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveDownIntoTree(): void {\r\n    if (!!this.data) {\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number =\r\n            !!this.currentNode && !!this.currentNode.parent ? this.currentNode.parent.children.indexOf(this.currentNode) : null;\r\n\r\n          // si tiene childrens pasa al primer children\r\n          if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n            this.currentNode = this.currentNode.children[0];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else if (\r\n            index !== undefined &&\r\n            index === this.currentNode.parent.children.length - 1 &&\r\n            this.currentNode.parent.parent != null &&\r\n            this.currentNode.parent.parent.children != null &&\r\n            this.currentNode.parent.parent.children.length > 0\r\n          ) {\r\n            const indexOfParent: number = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent);\r\n            this.currentNode =\r\n              this.currentNode.parent.parent.children[indexOfParent + 1] === undefined\r\n                ? this.currentNode\r\n                : this.currentNode.parent.parent.children[indexOfParent + 1];\r\n\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else {\r\n            // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\r\n            this.currentNode = this.currentNode.parent.children[index + 1];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild(t: number, node: Node): boolean {\r\n    return !!node.children && node.children.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\r\n   */\r\n  private refreshTree(): void {\r\n    this.data = null;\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())\r\n   */\r\n  private refreshTreeWithPagination(): void {\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]): void {\r\n    if (!this.data) {\r\n      this.data = { id: null, name: 'root', isSelected: false };\r\n    }\r\n    if (!this.data.children) {\r\n      this.data.children = new Array<Node>();\r\n      this.treeHelisaConnect = new TreeHelisaConnect<Node>();\r\n    }\r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach((node: Node): void => {\r\n      this.fillParent(node, this.data);\r\n    });\r\n\r\n    this.data.children = this.reorderByOrderIndex(this.data.children);\r\n\r\n    this.dataSource.data = this.data.children;\r\n    this.treeControl.dataNodes = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   */\r\n  private fillParent(node: Node, parent: Node): void {\r\n    node.parent = parent;\r\n    if (node.children && node.children.length > 0) {\r\n      node.children.forEach((item: Node): void => {\r\n        this.fillParent(item, node);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   */\r\n  private selectNode(node: Node, id: number | string): Node {\r\n    if (node == null) {\r\n      return null;\r\n    }\r\n    this.upSelectNode(node);\r\n    if (!!this.selectedNode) {\r\n      const nodeSelected: Node = this.getNodeById(this.selectedNode);\r\n      if (nodeSelected != null) {\r\n        nodeSelected.isSelected = false;\r\n        this.selectedNode = null;\r\n      }\r\n    }\r\n    if (node.id !== undefined && node.id === id) {\r\n      node.isSelected = true;\r\n      this.expandAllParents(node);\r\n      this.selectedNode = node.id;\r\n      return node;\r\n    } else if (node.children != null) {\r\n      let i: number;\r\n      let result: Node = null;\r\n      for (i = 0; result == null && i < node.children.length; i++) {\r\n        result = this.selectNode(node.children[i], id);\r\n      }\r\n      return result;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private expandAllParents(node: Node): void {\r\n    if (!!node && !!node.parent) {\r\n      this.treeHelisaService.expandOneNode(node.parent);\r\n      this.expandAllParents(node.parent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   */\r\n  private upSelectNode(node: Node): void {\r\n    if (!!node && node.isSelected !== undefined) {\r\n      node.isSelected = false;\r\n      if (!!node.children) {\r\n        for (const childrenNode of node.children) {\r\n          this.upSelectNode(childrenNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getClassNode(node: Node): string[] {\r\n    const classNode: string[] = [];\r\n    if (node.isSelected) {\r\n      classNode.push('isSelected');\r\n    }\r\n    if (node.classNode) {\r\n      classNode.push(node.classNode);\r\n    }\r\n    return classNode;\r\n  }\r\n\r\n  onEditMode(node: Node, editMode: boolean): void {\r\n    this.getSelectedOptions(node).editMode = editMode;\r\n  }\r\n\r\n  onSelectOption(event: MatOptionSelectionChange, node: Node): void {\r\n    node.isCheckedOption = event.source.selected;\r\n    if (node.isCheckedOption) {\r\n      this.checkedOptionNode.emit(node.id);\r\n    } else {\r\n      this.uncheckedOptionNode.emit(node.id);\r\n    }\r\n  }\r\n\r\n  getSelectedOptions(\r\n    node: Node\r\n  ): {\r\n    formControl: FormControl;\r\n    editMode: boolean;\r\n  } {\r\n    if (this.selectedOptions.has(node.id)) {\r\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\r\n    } else {\r\n      this.reloadSelectedOptions(node, false);\r\n    }\r\n    return this.selectedOptions.get(node.id);\r\n  }\r\n\r\n  private reloadSelectedOptions(node: Node, editMode: boolean): void {\r\n    const array: Array<string | number | null> = new Array<string | number | null>();\r\n    node.options.forEach((option: Node): void => {\r\n      if (option.isCheckedOption) {\r\n        array.push(option.id);\r\n      }\r\n    });\r\n    const obj: {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    } = { formControl: new FormControl(array), editMode };\r\n    this.selectedOptions.set(node.id, obj);\r\n  }\r\n\r\n  /**\r\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\r\n   * @param id  number | string\r\n   * @returns Node o null si no hay un nodo con ese id\r\n   */\r\n  getNodeById(id: number | string): Node {\r\n    const queue: Node[] = [...this.dataSource.data];\r\n    while (queue.length > 0) {\r\n      const curr: Node = queue.shift();\r\n      if (curr.id === id) {\r\n        return curr;\r\n      } else {\r\n        if (!!curr.children) {\r\n          queue.push(...curr.children);\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  reorderByOrderIndex(node: Node[]): Node[] {\r\n    if (!!node && node.length > 0) {\r\n      try {\r\n        node = _.orderBy(node, (x: Node): number => x.orderIndex, ['asc']);\r\n        node.forEach((element: Node): void => {\r\n          if (!!element.children && element != null) {\r\n            element.children = this.reorderByOrderIndex(element.children);\r\n          }\r\n        });\r\n        return node;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\r\n\r\n@Injectable()\r\nexport class AutocompleteHelisaService<T> {\r\n\r\n  private emitChangeSource: BehaviorSubject<Array<OptionAutocompleteHelisa<T>>> =\r\n  new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\r\n\r\n  public dataSource$: Observable<Array<OptionAutocompleteHelisa<T>>> = this.emitChangeSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>): void {\r\n    this.emitChangeSource.next(options);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { map, startWith, throttleTime, debounceTime } from 'rxjs/operators';\r\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\r\n\r\nexport interface OptionAutocompleteHelisa<T> {\r\n  value: T;\r\n  displayText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-autocomplete',\r\n  templateUrl: './autocomplete-helisa.component.html',\r\n  styleUrls: ['./autocomplete-helisa.component.css'],\r\n  providers: [AutocompleteHelisaService]\r\n})\r\nexport class AutocompleteHelisaComponent<T> implements OnInit {\r\n\r\n  @Input() myControl: FormControl = new FormControl();\r\n  @Input() options: Array<OptionAutocompleteHelisa<T>> = new Array<OptionAutocompleteHelisa<T>>();\r\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\r\n  selectedValue: OptionAutocompleteHelisa<T>;\r\n  @Output() selectedValueEmmiter: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\r\n  @Input() isRemote: boolean = false;\r\n  isLoading: boolean = false;\r\n\r\n\r\n  onScrollObservable: Subject<void> = new Subject<void>();\r\n\r\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.onScrollObservable.asObservable()\r\n    .pipe(\r\n      debounceTime(500),\r\n      throttleTime(500)\r\n    )\r\n    .subscribe((): void => {\r\n      this.nextPage.emit();\r\n    });\r\n\r\n    if (this.isRemote) {\r\n      this.autocompleteHelisaService.dataSource$.subscribe((data: OptionAutocompleteHelisa<T>[]): void => {\r\n        setTimeout((): void => {\r\n          this.options = data;\r\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\r\n        });\r\n      });\r\n    }\r\n\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map((x: string): string => this._checkRegex(x)),\r\n      map((value: string): OptionAutocompleteHelisa<T>[] => this._filter(value))\r\n    );\r\n\r\n  }\r\n\r\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {\r\n    return option ? option.displayText : undefined;\r\n  }\r\n\r\n  getService(): AutocompleteHelisaService<T> {\r\n    return this.autocompleteHelisaService;\r\n  }\r\n\r\n\r\n  /** Elimina caracteres extraños */\r\n  private _checkRegex(value: string): string {\r\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '');\r\n    return value;\r\n  }\r\n\r\n  private _filter(value: string): OptionAutocompleteHelisa<T>[] {\r\n    if (!(value)) {\r\n      if (!this.isRemote) {\r\n        const filterValue: string[] = value.toLowerCase().split(' ');\r\n        return this.options.filter((option: OptionAutocompleteHelisa<T>): boolean => {\r\n          let ws: boolean = true;\r\n          filterValue.forEach((text: string): boolean => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\r\n          return ws;\r\n        }).splice(0, 5);\r\n      } else {\r\n        return this.options;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onSelected(event: {option: {value: OptionAutocompleteHelisa<T>}}): void {\r\n    this.selectedValue = event.option.value;\r\n    this.selectedValueEmmiter.emit(this.selectedValue.value);\r\n  }\r\n\r\n  getNextPage(): void {\r\n    this.onScrollObservable.next();\r\n  }\r\n}\r\n","import { Directive, EventEmitter, Input, Output, OnDestroy } from '@angular/core';\r\nimport { MatAutocomplete } from '@angular/material/autocomplete';\r\nimport { takeUntil, tap } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\nexport interface IAutoCompleteScrollEvent {\r\n  autoComplete: MatAutocomplete;\r\n  scrollEvent: Event;\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'mat-autocomplete[optionsScroll]'\r\n})\r\nexport class OptionsScrollDirective implements OnDestroy {\r\n\r\n  /**\r\n   * This value would different depends of styles\r\n   */\r\n  @Input() thresholdPercent: number = .9;\r\n  @Output() optionsScroll: EventEmitter<IAutoCompleteScrollEvent> = new EventEmitter<IAutoCompleteScrollEvent>();\r\n  destroy: Subject<void> = new Subject<void>();\r\n  lastScrollTop: number = 0;\r\n\r\n  constructor(public autoComplete: MatAutocomplete) {\r\n    this.autoComplete.opened.pipe(\r\n      tap((): void => {\r\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\r\n        // Note: The panel will be available on next tick\r\n        // Note: The panel wil NOT open if there are no options to display\r\n        setTimeout((): void => {\r\n          // Note: remove listner just for safety, in case the close event is skipped.\r\n          this.removeScrollEventListener();\r\n          if (!!this.autoComplete &&\r\n            !!this.autoComplete.panel &&\r\n            !!this.autoComplete.panel.nativeElement) {\r\n            this.autoComplete.panel.nativeElement\r\n              .addEventListener('scroll', this.onScroll.bind(this), false);\r\n          }\r\n        });\r\n      }),\r\n      takeUntil(this.destroy)).subscribe();\r\n\r\n    this.autoComplete.closed.pipe(\r\n      tap((): void => this.removeScrollEventListener()),\r\n      takeUntil(this.destroy)).subscribe();\r\n  }\r\n\r\n  private removeScrollEventListener(): void {\r\n    if (!!this.autoComplete &&\r\n      !!this.autoComplete.panel &&\r\n      !!this.autoComplete.panel.nativeElement) {\r\n      this.autoComplete.panel.nativeElement\r\n        .removeEventListener('scroll', this.onScroll);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy.next();\r\n    this.destroy.complete();\r\n\r\n    this.removeScrollEventListener();\r\n  }\r\n\r\n\r\n  onScroll(event: Event): void {\r\n    // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\r\n    const st: number = (event.target as Window).pageYOffset || (event.target as Element).scrollTop;\r\n    if (st > this.lastScrollTop) {\r\n      // downscroll code\r\n      if (this.thresholdPercent === undefined) {\r\n        this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n      } else {\r\n        const threshold: number = this.thresholdPercent * 100 * (event.target as Element).scrollHeight / 100;\r\n        const current: number = (event.target as Element).scrollTop + (event.target as Element).clientHeight;\r\n        // console.log(`scroll ${current}, threshold: ${threshold}`)\r\n        if (current > threshold) {\r\n          // console.log('load next page');\r\n          this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n        }\r\n      }\r\n    } else {\r\n      // upscroll code\r\n    }\r\n    this.lastScrollTop = st <= 0 ? 0 : st;\r\n  }\r\n\r\n}\r\n","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\r\nimport { MatTooltip } from '@angular/material/tooltip';\r\n\r\n@Directive({\r\n    selector: '[helTooltip]',\r\n    providers: [MatTooltip]\r\n})\r\nexport class HelTooltipDirective {\r\n\r\n    tooltip: MatTooltip;\r\n\r\n    /**\r\n     * Mensaje a mostrar\r\n     */\r\n    @Input('helTooltip') message: string;\r\n\r\n    /**\r\n     * Tiempo antes de ocultarla el mensaje\r\n     */\r\n    @Input() hideDelay: number = 600;\r\n\r\n    /**\r\n     * Tiempo antes de mostra el mensaje\r\n     */\r\n    @Input() showDelay: number = 500;\r\n\r\n\r\n    constructor(tooltip: MatTooltip, private elemRef: ElementRef) {\r\n      this.tooltip = tooltip;\r\n    }\r\n\r\n    @HostListener('mouseover') mouseover(): void {\r\n      const currentContent: string = this.elemRef.nativeElement.innerText;\r\n\r\n      if (!!currentContent && !!this.message) {\r\n        if ((currentContent.toUpperCase() !== this.message.toString().toUpperCase()) || this.isEllipsisActive(this.elemRef.nativeElement)) {\r\n          this.tooltip.message = this.message;\r\n        }\r\n      }\r\n\r\n      this.tooltip.showDelay =  this.showDelay;\r\n      this.tooltip.hideDelay = this.hideDelay;\r\n    }\r\n\r\n\r\n    private isEllipsisActive(e: {offsetWidth: number , scrollWidth: number}): boolean {\r\n      return (e.offsetWidth < e.scrollWidth);\r\n    }\r\n}\r\n","import { Directive, HostBinding, PLATFORM_ID, Inject, Input, OnChanges } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: 'a[href]',\r\n})\r\nexport class ExternalLinkDirective implements OnChanges {\r\n  @HostBinding('attr.rel') relAttr: string = '';\r\n  @HostBinding('attr.target') targetAttr: string = '';\r\n  @HostBinding('attr.href') hrefAttr: string = '';\r\n  @Input() href: string;\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\r\n\r\n  ngOnChanges(): void {\r\n\r\n    this.hrefAttr = this.href;\r\n\r\n    if (this.isLinkExternal()) {\r\n      this.relAttr = 'noopener';\r\n      this.targetAttr = '_blank';\r\n    }\r\n  }\r\n\r\n  private isLinkExternal(): boolean {\r\n    return isPlatformBrowser(this.platformId) && !this.href.includes(location.hostname);\r\n  }\r\n}\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {ComboBoxListable} from './interface/combo-box-listable';\r\nimport {ComboBoxEditable} from './interface/combo-box-editable';\r\n\r\nexport enum ComboBoxHelisaState {\r\n  CLOSED,\r\n  SELECT,\r\n  INSERT\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-combo-box-helisa',\r\n  templateUrl: './combo-box-helisa.component.html',\r\n  styleUrls: ['./combo-box-helisa.component.css']\r\n})\r\nexport class ComboBoxHelisaComponent<TYPE> implements OnInit, AfterViewInit {\r\n\r\n  @Input() editable: ComboBoxEditable<TYPE>;\r\n  @Input() listable: ComboBoxListable<TYPE>;\r\n  @Input() placeholder: string = 'Sin seleccionar';\r\n  @Input() selectedItem: TYPE;\r\n  @Output() selectEmitter: EventEmitter<TYPE> = new EventEmitter<TYPE>();\r\n  @Input() enabled: boolean = true;\r\n\r\n  private page: number = 0;\r\n  private pageSize: number = 50;\r\n  private haveNextPage: boolean = true;\r\n  state: ComboBoxHelisaState = ComboBoxHelisaState.CLOSED;\r\n\r\n  rows: TYPE[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.getNextPage();\r\n  }\r\n\r\n  private getNextPage(): void {\r\n    if (this.haveNextPage) {\r\n      this.listable.getData(this.page++, this.pageSize).subscribe((rows: TYPE[]): void => {\r\n        rows.forEach((item: TYPE): number => this.rows.push(item));\r\n        this.haveNextPage = rows.length > 0;\r\n      });\r\n    }\r\n  }\r\n\r\n  get comboBoxHelisaState(): typeof ComboBoxHelisaState {\r\n    return ComboBoxHelisaState;\r\n  }\r\n\r\n  onFocus(): void {\r\n    if (this.enabled) {\r\n      this.state = ComboBoxHelisaState.SELECT;\r\n    }\r\n  }\r\n\r\n  selectItem(row: TYPE): void {\r\n    this.selectedItem = row;\r\n    this.selectEmitter.emit(row);\r\n    this.state = ComboBoxHelisaState.CLOSED;\r\n  }\r\n\r\n  changeToInsert(): void {\r\n    this.state = ComboBoxHelisaState.INSERT;\r\n  }\r\n\r\n  insert(event: string): void {\r\n    if (event.trim().length > 0) {\r\n      this.editable.insert(event).subscribe(\r\n        (data: TYPE): void => {\r\n          this.rows.push(data);\r\n          this.state = ComboBoxHelisaState.SELECT;\r\n        }\r\n      );\r\n    } else {\r\n      this.state = ComboBoxHelisaState.SELECT;\r\n    }\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n    if (element.scrollHeight - element.scrollTop < 1000) {\r\n      this.getNextPage();\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'externalLink'\r\n})\r\nexport class ExternalLinkPipe implements PipeTransform {\r\n    transform(value: string, ...args: string[]): string {\r\n        return '//' + value;\r\n    }\r\n}\r\n","import { AfterViewInit, Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport enum PagingTreeInitialMode {\r\n  COLLAPSE,\r\n  EXPAND\r\n}\r\n\r\nexport interface PagingTreeHelisaListable<T> {\r\n  get(lastChildOrder: number, size: number): Observable<T[]>;\r\n\r\n  getIdField(): string;\r\n\r\n  getIdParentField(): string;\r\n\r\n  compare(a: T, b: T): number;\r\n}\r\n\r\ninterface HelisaNode<T> {\r\n  object: T;\r\n  level: number;\r\n  haveChildren: boolean;\r\n  expanded: boolean;\r\n  visible: boolean;\r\n  preorder: number;\r\n}\r\n\r\nexport interface HelisaNodeData<T> {\r\n  readonly object: T;\r\n  readonly level: number;\r\n  readonly haveChildren: boolean;\r\n  readonly expanded: boolean;\r\n  readonly visible: boolean;\r\n  readonly preorder: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-paging-tree',\r\n  templateUrl: './paging-tree-helisa.component.html',\r\n  styleUrls: ['./paging-tree-helisa.component.css']\r\n})\r\nexport class PagingTreeHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private pageSize: number = 200000;\r\n  private visibleLimit: number = 0;\r\n  private visibleSize: number = 100;\r\n  private treeMode: PagingTreeInitialMode = PagingTreeInitialMode.EXPAND;\r\n  private visibleObjects: Array<T> = [];\r\n  private service: PagingTreeHelisaListable<T>;\r\n  private searchNode: Map<string, HelisaNode<T>>;\r\n  private allNode: Array<HelisaNode<T>> = [];\r\n\r\n  @Output()\r\n  afterLoadData: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @ContentChild('nodeComponent')\r\n  nodeComponent: TemplateRef<{ data: T, node: HelisaNodeData<T> }>;\r\n\r\n  @ContentChild('nodeTitle')\r\n  nodeTitle: TemplateRef<any>;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n  }\r\n\r\n  @Input()\r\n  set mode(paramMode: PagingTreeInitialMode) {\r\n    this.treeMode = paramMode;\r\n    this.reset();\r\n  }\r\n\r\n  @Input()\r\n  set pagingTreeHelisaListable(paramService: PagingTreeHelisaListable<T>) {\r\n    this.service = paramService;\r\n    this.reset();\r\n  }\r\n\r\n  public reset(): void {\r\n    if (this.service) {\r\n      this.service.get(0, this.pageSize).subscribe((items: T[]): void => this.loadData(items));\r\n    }\r\n  }\r\n\r\n  private loadData(items: T[]): void {\r\n    this.searchNode = new Map<string, HelisaNode<T>>();\r\n    this.visibleObjects = [];\r\n    this.allNode = [];\r\n    items = this.sortItems(items);\r\n    this.searchNode = new Map<string, HelisaNode<T>>();\r\n    items.forEach((item: T): void => {\r\n      const node: HelisaNode<T> = this.createNode(item);\r\n      this.allNode.push(node);\r\n    });\r\n    this.reSort();\r\n    this.loadNextVisibleObjects(null);\r\n    this.afterLoadData.emit();\r\n  }\r\n\r\n  private sortItems(items: T[]): T[] {\r\n    const lAdy: Map<string, T[]> = new Map<string, T[]>();\r\n    const stack: T[] = [];\r\n    items.forEach((item: T): void => {\r\n      const idParent: string = item[this.service.getIdParentField()];\r\n      if (!idParent) {\r\n        stack.unshift(item);\r\n      } else {\r\n        if (!lAdy.has(idParent)) {\r\n          lAdy.set(idParent, []);\r\n        }\r\n        lAdy.get(idParent).push(item);\r\n      }\r\n    });\r\n    const response: T[] = new Array<T>(items.length);\r\n    let index: number = 0;\r\n    while (stack.length > 0) {\r\n      const last: T = stack.pop();\r\n      response[index++] = last;\r\n      const children: T[] = lAdy.get(last[this.service.getIdField()]);\r\n      if (children) {\r\n        for (let i: number = children.length - 1; i >= 0; i--) {\r\n          stack.push(children[i]);\r\n        }\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n\r\n  private createNode(item: T): HelisaNode<T> {\r\n    if (this.searchNode.has(item[this.service.getIdField()])) {\r\n      throw Error('Ya existe el nodo.');\r\n    }\r\n    const parentInformation: HelisaNode<T> = this.getNodeInformationById(item[this.service.getIdParentField()]);\r\n    const nodeInformation: HelisaNode<T> = {\r\n      object: item,\r\n      haveChildren: false,\r\n      level: parentInformation ? parentInformation.level + 1 : 0,\r\n      expanded: this.treeMode === PagingTreeInitialMode.EXPAND,\r\n      visible: false,\r\n      preorder: this.searchNode.size + 1,\r\n    };\r\n    this.searchNode.set(item[this.service.getIdField()], nodeInformation);\r\n    if (parentInformation) {\r\n      parentInformation.haveChildren = true;\r\n    }\r\n    return nodeInformation;\r\n  }\r\n\r\n  public getNodeInformationById(id: string): HelisaNode<T> {\r\n    return this.searchNode.get(id);\r\n  }\r\n\r\n  public getNodeInformation(item: T): HelisaNode<T> {\r\n    return this.searchNode.get(item[this.service.getIdField()]);\r\n  }\r\n\r\n  getLevelClass(item: T): string {\r\n    return 'padding-level-' + this.getNodeInformationById(item[this.service.getIdField()]).level;\r\n  }\r\n\r\n  private loadNextVisibleObjects(nodeFrom: T): void {\r\n    const visibleObjects: T[] = [];\r\n    this.visibleObjects.forEach((item: T): void => {\r\n      if (this.getNodeInformation(item)) {\r\n        if (nodeFrom && this.getNodeInformation(nodeFrom).preorder >= this.getNodeInformation(item).preorder) {\r\n          visibleObjects.push(item);\r\n        } else {\r\n          this.getNodeInformationById(item[this.service.getIdField()]).visible = false;\r\n        }\r\n      }\r\n    });\r\n    this.visibleLimit = visibleObjects.length + this.visibleSize;\r\n    this.allNode.forEach((item: HelisaNode<T>): void => {\r\n      if (visibleObjects.length < this.visibleLimit &&\r\n        (!nodeFrom || this.getNodeInformation(nodeFrom).preorder < item.preorder)) {\r\n        const idParent: string = item.object[this.service.getIdParentField()];\r\n        if (!idParent) {\r\n          visibleObjects.push(item.object);\r\n          item.visible = true;\r\n        } else {\r\n          const parentInformation: HelisaNode<T> = this.getNodeInformationById(idParent);\r\n          if (parentInformation.visible && parentInformation.expanded) {\r\n            visibleObjects.push(item.object);\r\n            item.visible = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    this.visibleObjects = visibleObjects;\r\n  }\r\n\r\n  collapseNode(item: T): void {\r\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = false;\r\n    this.loadNextVisibleObjects(item);\r\n  }\r\n\r\n  expandNode(item: T): void {\r\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = true;\r\n    this.loadNextVisibleObjects(item);\r\n  }\r\n\r\n  showNextPage(): void {\r\n    if (this.visibleObjects.length > 0) {\r\n      this.loadNextVisibleObjects(this.visibleObjects[this.visibleObjects.length - 1]);\r\n    }\r\n  }\r\n\r\n  get visibleData(): ReadonlyArray<T> {\r\n    return this.visibleObjects;\r\n  }\r\n\r\n  removeItem(item: T): void {\r\n    this.removeById(item[this.service.getIdField()]);\r\n  }\r\n\r\n  removeById(id: string): void {\r\n    if (this.getNodeInformationById(id)) {\r\n      const idParent: string = this.getNodeInformationById(id).object[this.service.getIdParentField()];\r\n      const set: Set<string> = new Set<string>();\r\n      set.add(id);\r\n      const beginIndex: number = this.allNode.findIndex(\r\n        (itemSearch: HelisaNode<T>): boolean => itemSearch.object[this.service.getIdField()] === id\r\n      );\r\n      let lastIndex: number = this.allNode.length;\r\n      for (let i: number = beginIndex + 1; i < this.allNode.length; i++) {\r\n        const itemSearch: T = this.allNode[i].object;\r\n        if (set.has(itemSearch[this.service.getIdParentField()])) {\r\n          set.add(itemSearch[this.service.getIdField()]);\r\n        } else {\r\n          lastIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      const deletedItems: HelisaNode<T>[] = this.allNode.splice(beginIndex, lastIndex - beginIndex);\r\n      let parentHaveChildren: boolean = false;\r\n      deletedItems.forEach((deletedItem: HelisaNode<T>): boolean => this.searchNode.delete(deletedItem.object[this.service.getIdField()]));\r\n      this.allNode.forEach((searchItem: HelisaNode<T>, index: number): void => {\r\n        searchItem.preorder = index + 1;\r\n        if (searchItem.object[this.service.getIdParentField()] === idParent) {\r\n          parentHaveChildren = true;\r\n        }\r\n      });\r\n      if (idParent) {\r\n        this.getNodeInformationById(idParent).haveChildren = parentHaveChildren;\r\n      }\r\n      this.loadNextVisibleObjects(beginIndex > 0 ? this.allNode[beginIndex - 1].object : null);\r\n    }\r\n  }\r\n\r\n  addItem(item: T): void {\r\n    const indexParent: number = this.allNode.findIndex((node: HelisaNode<T>): boolean => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\r\n    if (indexParent >= 0) {\r\n      this.allNode.push(this.createNode(item));\r\n      this.allNode[indexParent].haveChildren = true;\r\n      this.reSort();\r\n      this.expandNode(this.allNode[indexParent].object);\r\n    } else {\r\n      throw Error('No existe el padre.');\r\n    }\r\n  }\r\n\r\n  updateItem(item: T): void {\r\n    if (this.getNodeInformation(item)) {\r\n      this.getNodeInformation(item).object = item;\r\n      this.reSort();\r\n      const indexParent: number = this.allNode.findIndex(\r\n        (node: HelisaNode<T>): boolean => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\r\n      if (indexParent >= 0) {\r\n        this.expandNode(this.allNode[indexParent].object);\r\n      } else {\r\n        this.loadNextVisibleObjects(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  private reSort(): void {\r\n    const items: T[] = this.allNode.map((node: HelisaNode<T>): T => node.object);\r\n    items.sort((a: T, b: T): number => this.service.compare(a, b));\r\n    const preorder: T[] = this.sortItems(items);\r\n    preorder.forEach((object: T, index: number): number => this.getNodeInformation(object).preorder = index + 1);\r\n    this.allNode.sort((nodeA: HelisaNode<T>, nodeB: HelisaNode<T>): number => nodeA.preorder - nodeB.preorder);\r\n  }\r\n}\r\n","export enum AlertInformationType {\r\n    AUTHORIZATION_TRANSACTION,\r\n    CONFIRM_DELETE_DATA,\r\n    DELETE_DATA,\r\n    INFORMATION_NOT_VALID,\r\n    LOST_DATA,\r\n    UNCOMPLETED_DATA,\r\n    UNCOMPLETED_SELECTED_DATA,\r\n    DEFINE_COMMERCIAL_STRUCTURE,\r\n    DEFINE_PARKING_STRUCTURE,\r\n    DEFINE_RESIDENCIAL_STRUCTURE\r\n  }\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AlertInformationType } from './alert-information-helisa-type.enum';\r\n\r\ninterface AlertInformationDataHelisaProperties {\r\n  alertType: AlertInformationType;\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst TITLE_BY_ALERT_TYPE: string[] = ['!Esta transacción requiere autorización!',\r\n                                       '',\r\n                                       '¿Está seguro que debe anular esta información?',\r\n                                       '',\r\n                                       '¿Está seguro de querer perder lo ya hecho?',\r\n                                       'No ha suministrado la información necesaria.',\r\n                                       '',\r\n                                       '',\r\n                                       '',\r\n                                       ''\r\n                                      ];\r\nconst CONTENT_BY_ALERT_TYPE: string[] = ['',\r\n                                         '¿Esta seguro que desea eliminar esta información?',\r\n                                         'Al anular este concepto, quedará la huella de todo lo que se hizo apoyados en su información. No es una eliminación tácita, es suprimir su uso en adelante.',\r\n                                         'Rectifique. Hay información no válida',\r\n                                         'Si no está seguro, puede continuar o \"aplicar\" y posteriormente cuando tenga clara las respuestas, usando la opción de modificar podrá completar el concepto.',\r\n                                         'Si insite en grabar así, este concepto no será utilizable hasta su conclusión satisfactoria, que deberá completar posteriormente modificando el concepto.',\r\n                                         'Elemento sin información requerida. Modifíquelo para completarlo.',\r\n                                         'Primero defina la estructura comercial en configuración.',\r\n                                         'Primero defina la estructura zona de parqueaderos en configuración.',\r\n                                         'Primero defina la estructura física residencial en configuración.'\r\n                                        ];\r\nconst OK_LABEL_BY_ALERT_TYPE: string[] = ['Solicitarla',\r\n                                          'Lo asumo',\r\n                                          'Lo asumo',\r\n                                          '',\r\n                                          'Lo asumo',\r\n                                          'Lo asumo',\r\n                                          'Aceptar',\r\n                                          '',\r\n                                          '',\r\n                                          ''\r\n                                         ];\r\nconst CANCEL_LABEL_BY_ALERT_TYPE: string[] = ['Negarla',\r\n                                              'Me retracto',\r\n                                              'Me retracto',\r\n                                              '',\r\n                                              'Me retracto',\r\n                                              'Me retracto',\r\n                                              '',\r\n                                              '',\r\n                                              '',\r\n                                              ''\r\n                                             ];\r\n\r\n@Component({\r\n  selector: 'hel-alert-information-data-helisa',\r\n  templateUrl: './alert-information-data-helisa.component.html',\r\n  styleUrls: ['./alert-information-data-helisa.component.sass']\r\n})\r\nexport class AlertInformationDataHelisaComponent implements OnInit {\r\n\r\n  alertType: AlertInformationType;\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertInformationDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertInformationDataHelisaProperties\r\n  ) {\r\n    this.alertType = data.alertType;\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = TITLE_BY_ALERT_TYPE[this.alertType];\r\n    }\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = CONTENT_BY_ALERT_TYPE[this.alertType];\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = OK_LABEL_BY_ALERT_TYPE[this.alertType];\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = CANCEL_LABEL_BY_ALERT_TYPE[this.alertType];\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent): void => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.alertType === AlertInformationType.DEFINE_COMMERCIAL_STRUCTURE || this.alertType === AlertInformationType.DEFINE_PARKING_STRUCTURE ||\r\n        this.alertType === AlertInformationType.DEFINE_RESIDENCIAL_STRUCTURE) {\r\n      setTimeout((): void => {\r\n        this.dialogRef.close();\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  hasTitle(): boolean {\r\n    return this.alertType === AlertInformationType.AUTHORIZATION_TRANSACTION || this.alertType === AlertInformationType.DELETE_DATA ||\r\n           this.alertType === AlertInformationType.LOST_DATA || this.alertType === AlertInformationType.UNCOMPLETED_DATA;\r\n  }\r\n\r\n  hasContent(): boolean {\r\n    return this.alertType === AlertInformationType.CONFIRM_DELETE_DATA || this.alertType === AlertInformationType.DELETE_DATA ||\r\n           this.alertType === AlertInformationType.INFORMATION_NOT_VALID || this.alertType === AlertInformationType.LOST_DATA ||\r\n           this.alertType === AlertInformationType.UNCOMPLETED_DATA || this.alertType === AlertInformationType.UNCOMPLETED_SELECTED_DATA ||\r\n           this.alertType === AlertInformationType.DEFINE_COMMERCIAL_STRUCTURE || this.alertType === AlertInformationType.DEFINE_PARKING_STRUCTURE ||\r\n           this.alertType === AlertInformationType.DEFINE_RESIDENCIAL_STRUCTURE;\r\n  }\r\n\r\n  hasButtons(): boolean {\r\n    return this.alertType === AlertInformationType.AUTHORIZATION_TRANSACTION || this.alertType === AlertInformationType.CONFIRM_DELETE_DATA ||\r\n           this.alertType === AlertInformationType.DELETE_DATA || this.alertType === AlertInformationType.LOST_DATA ||\r\n           this.alertType === AlertInformationType.UNCOMPLETED_DATA || this.alertType === AlertInformationType.UNCOMPLETED_SELECTED_DATA;\r\n  }\r\n\r\n  hasCancelButton(): boolean {\r\n    return this.alertType !== AlertInformationType.UNCOMPLETED_SELECTED_DATA;\r\n  }\r\n}\r\n","import {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {LayoutModule} from '@angular/cdk/layout';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatNativeDateModule, MatOptionModule } from '@angular/material/core';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport { TableHelisaService } from './components/table-helisa/table-helisa.service';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport { TreeHelisaService } from './components/tree-helisa/tree-helisa.service';\r\nimport { ExternalLinkDirective } from './directives/external-link.directive';\r\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\r\nimport { HelTooltipDirective } from './directives/tooltip.directive';\r\nimport { ExternalLinkPipe } from './pipes/external-link.pipe';\r\nimport { ComboBoxHelisaComponent } from './components/combo-box-helisa/combo-box-helisa.component';\r\nimport { PagingTreeHelisaComponent } from './components/paging-tree-helisa/paging-tree-helisa.component';\r\nimport { AlertInformationDataHelisaComponent } from './components/alert-information-data-helisa/alert-information-data-helisa.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe,\r\n    ComboBoxHelisaComponent,\r\n    PagingTreeHelisaComponent,\r\n    AlertInformationDataHelisaComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule,\r\n    ComboBoxHelisaComponent,\r\n    PagingTreeHelisaComponent,\r\n    AlertInformationDataHelisaComponent\r\n  ],\r\n  providers: [TableHelisaService, TreeHelisaService]\r\n})\r\nexport class HelisaLibModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertInformationDataHelisaComponent} from './alert-information-data-helisa.component';\r\nimport { AlertInformationType } from './alert-information-helisa-type.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertInformationDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(alertType: AlertInformationType, title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertInformationDataHelisaComponent> = this.dialog.open(AlertInformationDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { alertType, title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n"]}