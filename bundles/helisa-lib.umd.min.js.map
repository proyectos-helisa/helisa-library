{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","node_modules/tslib/tslib.es6.js","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","ng://helisa-lib/lib/directives/options-scroll.directive.ts","ng://helisa-lib/lib/directives/tooltip.directive.ts","ng://helisa-lib/lib/directives/external-link.directive.ts","ng://helisa-lib/lib/pipes/external-link.pipe.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","nameField","nativeElement","focus","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","ViewChild","Output","placeholder","FormControl","Validators","required","requiredMessage","isFocused","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","subMessages","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","_this","content","title","hasCancel","AlertHelisaType","disableClose","keydownEvents","subscribe","event","code","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","Error","next","setTotal","emitTotal","addPage","emitNextPage","selectIndexRow","config","indexRowSelect","changeVisibilityButton","emitVisibilityButton$","changeVisibilityAllButtons","show","emitVisibilityAllButtons$","changeisCellSelection","emitIsCellSelection$","changeColumnsByTable","emitChangeColumns$","Subject","Array","emitVisibilityButton","asObservable","emitVisibilityAllButtons","emitIsCellSelection","emitChangeColumns","TableHelisaService","total","table","emitChangeSource","obj","page","change","emitVisibleButton$","totalReturn","nextPageReturn","emitVisibleButton","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","viewTables","toArray","index","undefined","addRowButton","showButton","forEach","element","isCellSelection","columns","getService","onSelectedDependency","selectedObject","selected","selectObject","onNextPage","nextPage","onTotal","onSort","sort","onDrop","drop","onAddRow","addRow","selectedCell","selectCell","onBookClicked","bookClicked","providers","ViewChildren","showToolTip","hideDelay","showDelay","__values","o","s","Symbol","iterator","m","i","call","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","DEFAULT","IDENTITY","NUMERIC","DOUBLE","InputHelisaComponent","Object","defineProperty","formControl","inputFormReal","valueChanges","statusChange","status","getMaskedValue","formControlMask","setValidators","validator","disabled","disable","onlySelf","statusChanges","setErrors","key","nameInput","search","realValue","position","selectionStart","getRealValue","selectionEnd","str","InputHelisaType","maskedStr","j","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","indexOf","realStr","str_1","tslib_1.__values","str_1_1","strItem","match","str_2","str_2_1","haveDot","str_3","str_3_1","floatLabel","autocompleteMode","isSearch","blur","NORMAL","URL","USER","CODE_CALL","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","ngAfterViewInit","matTable","renderRows","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","columnConfiguration","hasSubtitle","displayedColumns","splice","addBookButton","columnCount","countSubtitle_1","showBookButton_1","subtitle","subtitleTemp","visible","rawData","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","dataSource$","prepareDataSource","idRowSelected","selectRow","rowType","RowType","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","addTotalGroup","MatTableDataSource","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","map","TotalType","getValueTooltip","searchText","text","lastSearch","isUser","select","scope","EventScope","onScroll","isScrollY","scrollY","scrollTop","scrollX","scrollLeft","scrollHeight","body","dblClickCell","selectedCells","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToRow","classToRow","configRowStylesFromColumn","classRow","isDragged","indexRowStartDrag","rowIndex","getRowIndex","pageY","array","dataBeforeDrag","moveItemInArray","stopPropagation","tableKeydown","currentIndex_1","findIndex","newSelection_1","scrollCount","reverse","Math","abs","preventDefault","filter","dragger","lastIndexRowDrag","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","ColumnType","MatSort","MatTable","read","ElementRef","showTitle","moment","moment_","MONTH_YEAR","DateHelisaComponent","dateToVisualize","dateFormControl","formHandler","typeCalendar","TypeCalendarEnum","dateFormat","incommingDate","format","getStartView","typeCalendarEnum","pipe","tap","date","invalidFormat","isValid","isFromInputEvent","setTimeout","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","toDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","errorMessage","Date","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","expandAllNodes","expand","emitExpandAllNodes","collapseAllNodes","collapse","emitCollapseAllNodes","refreshTree","emitRefreshTree","refreshTreeWithPagination","emitRefreshTreeWithPagination","expandOneNode","node","emitExpandOneNode","collapseOneNode","emitCollapseOneNode","BehaviorSubject","nodeSelected","dataSourceObservable","nodeExpand","nodeCollapse","refreshTreeObservable","refreshTreeWithPaginationObservable","expandOneNodeObservable","collapseOneNodeObservable","TreeHelisaConnect","TreeHelisaComponent","getDescription","parent","treeHelisaService","res","selectedNode","id","treeControl","dataNodes","selectNode","tree","expandAll","collapseAll","onRedirect","isSingleClick","currentNode","offsetHeight","onEdit","clickEditNode","onAdd","clickAddNode","onDelete","clickDeleteNode","onEdited","_.remove","trim","edited","isEditable","added","isDisabled","onDblClick","dobleClick","onKeyDown","keypressDelete","keypressInsert","moveDownIntoTree","moveUpIntoTree","indexOfParent","hasChild","t","datasourceData","treeHelisaConnect","rangeScrolled","isSelected","fillParent","reorderByOrderIndex","upSelectNode","getNodeById","expandAllParents","_b","_c","childrenNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","checkedOptionNode","uncheckedOptionNode","selectedOptions","has","reloadSelectedOptions","get","options","option","set","queue","curr","shift","apply","_.orderBy","x","orderIndex","console","log","Router","HostListener","router","elementRef","Map","removed","collapseParent","NestedTreeControl","MatTreeNestedDataSource","AutocompleteHelisaService","setDataSource","AutocompleteHelisaComponent","onScrollObservable","debounceTime","throttleTime","autocompleteHelisaService","filteredOptions","of","myControl","startWith","_checkRegex","_filter","displayFn","displayText","replace","filterValue_1","toLowerCase","onSelected","selectedValue","selectedValueEmmiter","getNextPage","isLoading","OptionsScrollDirective","removeScrollEventListener","autoComplete","panel","removeEventListener","ngOnDestroy","destroy","complete","st","pageYOffset","lastScrollTop","thresholdPercent","optionsScroll","scrollEvent","clientHeight","Directive","MatAutocomplete","opened","addEventListener","bind","takeUntil","closed","HelTooltipDirective","mouseover","currentContent","elemRef","innerText","toUpperCase","toString","isEllipsisActive","tooltip","offsetWidth","scrollWidth","MatTooltip","ExternalLinkDirective","ngOnChanges","hrefAttr","href","isLinkExternal","relAttr","targetAttr","isPlatformBrowser","platformId","includes","location","hostname","PLATFORM_ID","HostBinding","ExternalLinkPipe","transform","_i","Pipe","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","DONE","INFO"],"mappings":"2wEAAA,IAAAA,GAuBEA,EAAAC,UAAAC,SAAA,WACqB,KAAfC,KAAKC,OACPD,KAAKE,iBAAiBC,SAASH,KAAKC,OAEtCD,KAAKI,UAAUC,cAAcC,SAI/BT,EAAAC,UAAAS,OAAA,WACMP,KAAKE,iBAAiBM,OACxBR,KAAKS,KAAKC,KAAKV,KAAKE,iBAAiBD,QAIzCJ,EAAAC,UAAAa,SAAA,WACEX,KAAKY,OAAOF,4BAnCfG,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,wBACVC,SAAA,yfAKCC,EAAAA,gCACAA,EAAAA,+BACAA,EAAAA,qBACAA,EAAAA,yBACAA,EAAAA,yBACAC,EAAAA,UAASJ,KAAA,CAAC,2BAEVK,EAAAA,uBACAA,EAAAA,UAuBHtB,GApBE,SAAAA,IAXSG,KAAAoB,YAAsB,GACtBpB,KAAAE,iBAAgC,IAAImB,EAAAA,YAAY,GAAIC,EAAAA,WAAWC,UAC/DvB,KAAAwB,gBAA0B,wBAC1BxB,KAAAC,MAAgB,GAChBD,KAAAyB,WAAqB,EAGpBzB,KAAAS,KAA6B,IAAIiB,EAAAA,aACjC1B,KAAAY,OAA6B,IAAIc,EAAAA,aCb7C,IAAAC,GASEA,EAAA7B,UAAAC,SAAA,iCATDc,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,oYAKaY,EAAAA,OAAMd,KAAA,CAACe,EAAAA,yBAItBF,GAJE,SAAAA,EAA+CG,GAAA9B,KAAA8B,KAAAA,ECZjD,IAAAC,GAcEA,EAAAjC,UAAAkC,UAAA,SAAUC,EAAiBC,EAAiBC,GAC1CA,EAAcA,GAA4B,GAC1CnC,KAAKoC,SAASC,kBAAkBV,EAAsB,CACpDG,KAAM,CAACI,QAAOA,EAAED,KAAIA,EAAEE,YAAWA,GACjCG,SAAmC,IAAzBtC,KAAKuC,yCAbpBC,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,oDALLC,EAAAA,8IAWP,SAAAX,EAAoBK,GAAApC,KAAAoC,SAAAA,EAFpBpC,KAAAuC,kBAA4B,SCT1BI,MAAQ,QACRC,aAAe,gBCFnBC,GAoCEA,EAAA/C,UAAAC,SAAA,aAGA8C,EAAA/C,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,6BA9BlBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,+WAXOgC,EAAAA,gDAsBJpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAmBZJ,GArBE,SAAAA,EACSC,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QACpBnD,KAAKoD,MAAQtB,EAAKsB,MAClBpD,KAAKqD,UAAYvB,EAAKG,OAASqB,EAAgBV,aAC/CE,EAAUS,cAAe,EACzBT,EAAUU,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRT,EAAKJ,UAAUC,MAAMG,EAAKvC,cC/BlC,IAAAiD,GAeEA,EAAA9D,UAAA+D,WAAA,SAAW5B,EAAuBmB,EAAeD,GAM/C,OALsDnD,KAAK8D,OAAOC,KAAKlB,EAAsB,CAC3FmB,MAAO,QACPlC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAElB,KAAIA,KAGbgC,mCAbpBzB,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,oDARLyB,EAAAA,0IAYP,SAAAN,EAAmBE,GAAA9D,KAAA8D,OAAAA,ECOrB,IAAAK,GA2BEA,EAAArE,UAAAsE,UAAA,WACE,OAAOpE,KAAKqE,QASdF,EAAArE,UAAAwE,iBAAA,SAAiBC,EAA6BC,GAQ5C,QAR4C,IAAAA,IAAAA,GAAA,GACxCA,IACFxE,KAAKyE,WAAazE,KAAKyE,WAAWC,MAAM,EAAIH,EAAYI,MAAYJ,EAAYI,MAAhB,MAE7DJ,EAAYI,OAASJ,EAAYI,OAAS3E,KAAKyE,WAAWG,UAC7DL,EAAYI,MAAQ3E,KAAKyE,WAAWG,SAEtC5E,KAAKyE,WAAWF,EAAYI,OAASJ,GACrBM,UAEd,IADAN,EAAYO,WAAa,QACrBP,EAAYQ,MACd,MAAM,IAAIC,MAAM,2BAEb,CACL,GAA+B,OAA3BT,EAAYO,WACd,MAAM,IAAIE,MAAM,4BAElBT,EAAYQ,MAAQR,EAAYO,WAAWF,OAE7C5E,KAAKqE,OAAOY,KAAKjF,KAAKyE,aAOxBN,EAAArE,UAAAoF,SAAA,SAASxB,GACP1D,KAAKmF,UAAUF,KAAKvB,IAOtBS,EAAArE,UAAAsF,QAAA,SAAQ1B,GACN1D,KAAKqF,aAAaJ,KAAKvB,IAGzBS,EAAArE,UAAAwF,eAAA,SAAeC,GACTvF,KAAKyE,WAAWc,EAAOZ,SACzB3E,KAAKyE,WAAWc,EAAOZ,OAAOa,eAAiBD,EAAOC,eACtDxF,KAAKqE,OAAOY,KAAKjF,KAAKyE,cAS1BN,EAAArE,UAAA2F,uBAAA,SAAuB/B,GACrB1D,KAAK0F,sBAAsBT,KAAKvB,IAQlCS,EAAArE,UAAA6F,2BAAA,SAA2BC,GACzB5F,KAAK6F,0BAA0BZ,KAAKW,IAOtCzB,EAAArE,UAAAgG,sBAAA,SAAsBpC,GACpB1D,KAAK+F,qBAAqBd,KAAKvB,IAOjCS,EAAArE,UAAAkG,qBAAA,SAAsBtC,GACpB1D,KAAKiG,mBAAmBhB,KAAKvB,wBAjHhClB,EAAAA,mDAoHD2B,GA9FE,SAAAA,IAlBAnE,KAAAqE,OAAoC,IAAI6B,EAAAA,QACxClG,KAAAyE,WAAoC,IAAI0B,MAEhCnG,KAAA0F,sBAA2D,IAAIQ,EAAAA,QACvElG,KAAAoG,qBAA6DpG,KAAK0F,sBAAsBW,eAEhFrG,KAAA6F,0BAA8C,IAAIK,EAAAA,QAC1DlG,KAAAsG,yBAAgDtG,KAAK6F,0BAA0BQ,eAEvErG,KAAA+F,qBAA0D,IAAIG,EAAAA,QACtElG,KAAAuG,oBAA4DvG,KAAK+F,qBAAqBM,eAE9ErG,KAAAiG,mBAA+D,IAAIC,EAAAA,QAC3ElG,KAAAwG,kBAAiExG,KAAKiG,mBAAmBI,eAEzFrG,KAAAmF,UAAwD,IAAIe,EAAAA,QAC5DlG,KAAAqF,aAA8C,IAAIa,EAAAA,QC9BpD,IAAAO,GAiBEA,EAAA3G,UAAAoF,SAAA,SAASwB,EAAyBC,GAChC3G,KAAK4G,iBAAiB3B,KAAK,CAAC4B,IAAKH,EAAOC,MAAKA,KAG/CF,EAAA3G,UAAAsF,QAAA,SAAQ0B,EAAWH,GACjB3G,KAAKqF,aAAaJ,KAAK,CAAC4B,IAAKC,EAAMH,MAAKA,KAO1CF,EAAA3G,UAAA2F,uBAAA,SAAuBsB,GACrB/G,KAAKgH,mBAAmB/B,KAAK8B,wBA9BhCvE,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,iHADd,SAAAgE,IAKUzG,KAAA4G,iBAAsE,IAAIV,EAAAA,QAC1ElG,KAAAqF,aAAqD,IAAIa,EAAAA,QAEjElG,KAAAiH,YAAoEjH,KAAK4G,iBAAiBP,eAC1FrG,KAAAkH,eAA0DlH,KAAKqF,aAAagB,eAEpErG,KAAAgH,mBAAuC,IAAId,EAAAA,QAInDlG,KAAAmH,kBAAyCnH,KAAKgH,mBAAmBX,eCZnE,IAAAe,GAwCEA,EAAAtH,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACEA,KAAKoE,YACLpE,KAAKqH,6BAA6BhC,aAAa5B,UAAS,SACrDC,GACCR,EAAKoE,aAAalC,QAAQ1B,EAAM5B,KAAMoB,EAAKqE,WAAWC,UAAU9D,EAAM+D,UAI1EzH,KAAKqH,6BAA6BlC,UAAU1B,UAAS,SAClDC,GACCR,EAAKoE,aAAapC,SAASxB,EAAM5B,KAAMoB,EAAKqE,WAAW7D,EAAM+D,UAKjEzH,KAAKqH,6BAA6BjB,qBAAqB3C,UAAS,SAC7D3B,GACC,GAAMA,GAAQA,EAAK2F,QAAUC,UAAW,KAChCf,EAAwBzD,EAAKmB,OAAOvC,EAAK2F,OACzCd,IACJA,EAAMgB,aAAaC,WAAa9F,EAAKA,SAO7C9B,KAAKqH,6BAA6Bf,yBAAyB7C,UAAS,SACjE3B,GACKA,IAAS4F,WAAqB,MAAR5F,GACxBoB,EAAKmB,OAAOwD,QAAO,SAAEC,GACbA,EAAQH,eACZG,EAAQH,aAAaC,WAAa9F,OAQ5C9B,KAAKqH,6BAA6Bd,oBAAoB9C,UAAS,SAC5D3B,GACC,GAAMA,GAAQA,EAAK2F,QAAUC,UAAW,KAChCf,EAAwBzD,EAAKmB,OAAOvC,EAAK2F,OAC3Cd,IACFA,EAAMoB,gBAAkBjG,EAAKA,SAMrC9B,KAAKqH,6BAA6Bb,kBAAkB/C,UAAS,SAC1D3B,GACC,GAAMA,GAAQA,EAAK2F,QAAUC,UAAW,KAChCf,EAAwBzD,EAAKmB,OAAOvC,EAAK2F,OAC3Cd,IACFA,EAAMqB,QAAUlG,EAAKA,UAS/BsF,EAAAtH,UAAAmI,WAAA,WACE,OAAOjI,KAAKqH,8BAMdD,EAAAtH,UAAAsE,UAAA,WAAA,IAAAlB,EAAAlD,KACEA,KAAKqH,6BAA6BjD,YAC/BX,UAAS,SAAEY,GACVnB,EAAKmB,OAASA,KAUpB+C,EAAAtH,UAAAoI,qBAAA,SAAqBT,EAAe/D,GAClC1D,KAAKmI,eAAiB,CAAEV,MAAKA,EAAE3F,KAAM4B,GACrC1D,KAAKoI,SAAS1H,KAAK,CAAE+G,MAAKA,EAAE3F,KAAM4B,EAAMzD,QACxCD,KAAKqI,aAAa3H,KAAK,CAAE+G,MAAKA,EAAE3F,KAAM4B,KAQxC0D,EAAAtH,UAAAwI,WAAA,SAAWb,EAAe/D,GACxB1D,KAAKuI,SAAS7H,KAAK,CAAE+G,MAAKA,EAAE3F,KAAM4B,KAQpC0D,EAAAtH,UAAA0I,QAAA,SAAQf,EAAe/D,GACrB1D,KAAK0G,MAAMhG,KAAK,CAAE+G,MAAKA,EAAE3F,KAAM4B,KAQjC0D,EAAAtH,UAAA2I,OAAA,SAAOhB,EAAe/D,GACpB1D,KAAK0I,KAAKhI,KAAK,CAAE+G,MAAKA,EAAE3F,KAAM4B,KAQhC0D,EAAAtH,UAAA6I,OAAA,SAAOlB,EAAe/D,GACpB1D,KAAK4I,KAAKlI,KAAK,CAAE+G,MAAKA,EAAE3F,KAAM4B,KAOhC0D,EAAAtH,UAAA+I,SAAA,SAASpB,GACPzH,KAAK8I,OAAOpI,KAAK+G,IAGnBL,EAAAtH,UAAAiJ,aAAA,SAAatB,EAAe/D,GACtB1D,KAAKqE,OAAOoD,GAAOM,iBACrB/H,KAAKgJ,WAAWtI,KAAK,CAAE+G,MAAKA,EAAE3F,KAAM4B,KAIxC0D,EAAAtH,UAAAmJ,cAAA,SAAcxB,EAAe/D,GAC3B1D,KAAKkJ,YAAYxI,KAAK,CAAE+G,MAAKA,EAAE3F,KAAM4B,yBAtLxC7C,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uBACVC,SAAA,u7BAEAmI,UAAW,CAAChF,4DAhBLA,SAEAsC,yCAmBN2C,EAAAA,aAAYtI,KAAA,CAAC,mCACbG,EAAAA,wBAKAE,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,uBACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,0BAOAF,EAAAA,yBAKAA,EAAAA,SAqJHmG,GAlJE,SAAAA,EAAoBC,EAAuEC,GAAvEtH,KAAAqH,6BAAAA,EAAuErH,KAAAsH,aAAAA,EA9B3FtH,KAAAqE,OAAgC,GAEvBrE,KAAAqJ,aAAuB,EAKtBrJ,KAAAoI,SAA6C,IAAI1G,EAAAA,aACjD1B,KAAAqI,aAAsD,IAAI3G,EAAAA,aAC1D1B,KAAAuI,SAAkD,IAAI7G,EAAAA,aACtD1B,KAAA0G,MAA+C,IAAIhF,EAAAA,aACnD1B,KAAA0I,KAA8C,IAAIhH,EAAAA,aAClD1B,KAAA4I,KAA8C,IAAIlH,EAAAA,aAClD1B,KAAA8I,OAA+B,IAAIpH,EAAAA,aACnC1B,KAAAgJ,WAAoD,IAAItH,EAAAA,aACxD1B,KAAAkJ,YAAqD,IAAIxH,EAAAA,aACnE1B,KAAAmI,eAAsC,KAM7BnI,KAAAsJ,UAAoB,IAKpBtJ,KAAAuJ,UAAoB,IClC/B,SA+FgBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBA,OAAOC,SAAUC,EAAIH,GAAKD,EAAEC,GAAII,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAEE,KAAKN,GACrB,GAAIA,GAAyB,iBAAbA,EAAE7E,OAAqB,MAAO,CAC1CK,KAAM,WAEF,OADIwE,GAAKK,GAAKL,EAAE7E,SAAQ6E,OAAI,GACrB,CAAExJ,MAAOwJ,GAAKA,EAAEK,KAAMrJ,MAAOgJ,KAG5C,MAAM,IAAIO,UAAUN,EAAI,0BAA4B,mCAGxD,SAAgBO,EAAOR,EAAGS,GACtB,IAAIL,EAAsB,mBAAXF,QAAyBF,EAAEE,OAAOC,UACjD,IAAKC,EAAG,OAAOJ,EACf,IAAmBU,EAAYC,EAA3BN,EAAID,EAAEE,KAAKN,GAAOY,EAAK,GAC3B,IACI,WAAc,IAANH,GAAsB,EAANA,QAAcC,EAAIL,EAAE7E,QAAQxE,MAAM4J,EAAGC,KAAKH,EAAElK,OAExE,MAAOsK,GAASH,EAAI,CAAEG,MAAOA,WAEzB,IACQJ,IAAMA,EAAE1J,OAASoJ,EAAIC,EAAU,YAAID,EAAEE,KAAKD,WAExC,GAAIM,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGX,SAAgBG,IACZ,IAAK,IAAIH,EAAK,GAAIP,EAAI,EAAGA,EAAIW,UAAU7F,OAAQkF,IAC3CO,EAAKA,EAAGK,OAAOT,EAAOQ,UAAUX,KACpC,OAAOO,SCzITM,QAAA,EAASC,SAAA,EAAUC,QAAA,EAASC,OAAA,+FAG9B,IAAAC,GA8CEC,OAAAC,eACIF,EAAAjL,UAAA,mBAAgB,KADpB,SACqBoL,GADrB,IAAAhI,EAAAlD,KAEEA,KAAKmL,cAAgBD,EACrBlL,KAAKmL,cAAcC,aAAa3H,UAAS,SAAE3B,GACzCoB,EAAKmI,aAAanI,EAAKiI,cAAcG,QACjCpI,EAAKqI,eAAezJ,KAAUoB,EAAKsI,gBAAgBvL,OACrDiD,EAAK6D,OAAOjF,KAGhB9B,KAAKwL,gBAAgBC,cAAczL,KAAKmL,cAAcO,WACtD1L,KAAK+G,OAAO/G,KAAKmL,cAAclL,OAG3BiL,EAAYS,UACd3L,KAAKwL,gBAAgBI,QAAQ,CAAEC,UAAU,IAI3C7L,KAAKmL,cAAcW,cAAcrI,UAAS,SACvC3B,GACCoB,EAAKmI,aAAavJ,sCAOhBiJ,EAAAjL,UAAAuL,aAAR,SAAqBvJ,GACN,YAATA,EACF9B,KAAKwL,gBAAgBO,UAAU,CAAEC,IAAK,yBAEtChM,KAAKwL,gBAAgBO,UAAU,OAInChB,EAAAjL,UAAAC,SAAA,WACMC,KAAKyB,WACPzB,KAAKiM,UAAU5L,cAAcC,SAIjCyK,EAAAjL,UAAAoM,OAAA,WACElM,KAAKG,SAASO,KAAKV,KAAKmM,YAG1BpB,EAAAjL,UAAAiH,OAAA,SAAOrD,GACQ,MAATA,IAAiBA,GAAgB,QACjC0I,EAAmBpM,KAAKiM,UAAU5L,cAAcgM,eAC9CzH,EAAiBlB,EAAQA,EAAMkB,OAAS,EAC9C5E,KAAKmM,UAAYnM,KAAKsM,aAAa5I,GAC/B1D,KAAKuL,eAAevL,KAAKmM,aAAenM,KAAKwL,gBAAgBvL,QAC/DD,KAAKwL,gBAAgBrL,SAASH,KAAKuL,eAAevL,KAAKmM,YACvDC,GAAYpM,KAAKiM,UAAU5L,cAAcJ,MAAM2E,OAASA,EACxD5E,KAAKiM,UAAU5L,cAAcgM,eAAiBD,EAC9CpM,KAAKiM,UAAU5L,cAAckM,aAAeH,GAE9CpM,KAAKmL,cAAchL,SAASH,KAAKmM,YAG3BpB,EAAAjL,UAAAyL,eAAR,SAAuBiB,GACrB,GAAW,MAAPA,EACF,OAAOA,EAGT,GADAA,GAAY,GACRxM,KAAKiC,OAASwK,EAAgB9B,QAChC,OAAO6B,MAELE,EAAoB,GACxB,GAAI1M,KAAKiC,OAASwK,EAAgB7B,SAChC,IAAK,IAAId,EAAY0C,EAAI5H,OAAS,EAAG+H,EAAY,EAAQ,GAAL7C,EAAQA,IAAM6C,IACxD,EAAJA,GAASA,EAAI,GAAM,IACrBD,EAAY1M,KAAK4M,kBAAoBF,GAEvCA,EAAYF,EAAI1C,GAAK4C,EAGzB,GAAI1M,KAAKiC,OAASwK,EAAgB5B,QAChC,IAASf,EAAY0C,EAAI5H,OAAS,EAAG+H,EAAY,EAAQ,GAAL7C,EAAQA,IAAM6C,IACxD,EAAJA,GAASA,EAAI,GAAM,IACrBD,EAAY1M,KAAK6M,mBAAqBH,GAExCA,EAAYF,EAAI1C,GAAK4C,EAGzB,GAAI1M,KAAKiC,OAASwK,EAAgB3B,OAAQ,CACxC,GAA2C,GAAvC0B,EAAIM,QAAQ9M,KAAK4M,mBACnB,IAAS9C,EAAY0C,EAAIM,QAAQ9M,KAAK4M,mBAAoB9C,EAAI0C,EAAI5H,OAAQkF,IACxE4C,GAAaF,EAAI1C,GAGrB,IAASA,GAAoD,GAAvC0C,EAAIM,QAAQ9M,KAAK4M,mBAA0BJ,EAAIM,QAAQ9M,KAAK4M,mBAAqBJ,EAAI5H,QAAU,EAChH+H,EAAY,EAAQ,GAAL7C,EAAQA,IAAM6C,IAExB,EAAJA,GAASA,EAAI,GAAM,IACrBD,EAAY1M,KAAK6M,mBAAqBH,GAExCA,EAAYF,EAAI1C,GAAK4C,EAGzB,OAAOA,GAGD3B,EAAAjL,UAAAwM,aAAR,SAAqBE,mBACnB,GAAW,MAAPA,EACF,OAAOA,EAETA,GAAY,OACRO,EAAkB,GACtB,GAAI/M,KAAKiC,OAASwK,EAAgB9B,QAChC,OAAO6B,EAET,GAAIxM,KAAKiC,OAAUwK,EAAgB7B,aACjC,IAAsB,IAAAoC,EAAAC,EAAAT,GAAGU,EAAAF,EAAA/H,QAAAiI,EAAAzM,KAAAyM,EAAAF,EAAA/H,QAAdkI,EAAOD,EAAAjN,OACJmN,MAAM,iBAChBL,GAAWI,uGAIjB,GAAInN,KAAKiC,OAASwK,EAAgB5B,YAChC,IAAsB,IAAAwC,EAAAJ,EAAAT,GAAGc,EAAAD,EAAApI,QAAAqI,EAAA7M,KAAA6M,EAAAD,EAAApI,QAAdkI,EAAOG,EAAArN,OACJmN,MAAM,WAChBL,GAAWI,uGAIjB,GAAInN,KAAKiC,OAASwK,EAAgB3B,OAAQ,KACpCyC,GAAmB,MAEvB,IAAsB,IAAAC,EAAAP,EAAAT,GAAGiB,EAAAD,EAAAvI,QAAAwI,EAAAhN,KAAAgN,EAAAD,EAAAvI,OAAE,CAAtB,IAAMkI,IAAAA,EAAOM,EAAAxN,OACJmN,MAAM,UAAcD,IAAYnN,KAAK4M,oBAAuBW,KACtER,GAAWI,GAEbI,EAAUA,GAAYJ,IAAYnN,KAAK4M,wHAG3C,OAAOG,uBArLVlM,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,qqBAQCC,EAAAA,0BACAA,EAAAA,gCAMAA,EAAAA,wBAGAA,EAAAA,yBAEAA,EAAAA,wBAKAA,EAAAA,oBACAA,EAAAA,wBAKAE,EAAAA,qBAEAA,EAAAA,0BAMAD,EAAAA,UAASJ,KAAA,CAAC,uCAKVG,EAAAA,SAyIH8J,GA5IE,SAAAA,IApCiB/K,KAAA4M,kBAA4B,IAC5B5M,KAAA6M,mBAA6B,IAErC7M,KAAAoB,YAAsB,GACtBpB,KAAA0N,WAA0C,QAM1C1N,KAAA2N,kBAA4B,EAG5B3N,KAAA4N,UAAoB,EAEpB5N,KAAAyB,WAAqB,EAKrBzB,KAAA2L,UAAoB,EACpB3L,KAAAiC,KAAwBwK,EAAgB9B,QAKvC3K,KAAAG,SAAiC,IAAIuB,EAAAA,aAErC1B,KAAA6N,KAA0B,IAAInM,EAAAA,aAExC1B,KAAAwL,gBAA+B,IAAInK,EAAAA,YAAY,IACvCrB,KAAAmM,UAAoB,GACpBnM,KAAAmL,cAA6B,IAAI9J,EAAAA,YAAY,WC1CrDyM,OAAA,EAAQC,IAAA,8CAyBRC,KAAA,EAAMC,UAAA,uDAINC,IAAA,EAAKC,QAAA,EAASC,MAAA,0EAIdC,KAAA,EAAMC,QAAA,EAASC,MAAA,4EAwCfC,OAAA,EAAQC,MAAA,+CAqBV,QAEEC,GAAA5O,UAAA6O,SAAA,SAAS9H,EAAQ+H,GACf,OAAOA,EAAOC,KAAKC,MAAM,KAAKC,OAAM,SAAEtF,EAAMuF,GAAkB,OAAAvF,GAAKA,EAAEuF,IAAQnI,IAEjF6H,IALA,SAAAA,MC9FA,QAWSO,GAAAnP,UAAAoP,QAAP,SAAeC,EAAmCjD,GAChD,MAAO,IAGT+C,GAAAnP,UAAAyI,SAAA,WACE,OAAOvI,KAAK8G,QAEhBmI,IAbE,SAAAA,KACEjP,KAAK8G,KAAO,EACZ9G,KAAKoP,YAAa,EAClBpP,KAAKqP,QAAS,UCuBhBC,YAAA,EAAaC,aAAA,EAAcC,IAAA,wFAK7B,IAAAC,IA4EEA,GAAA3P,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACEA,KAAKsH,aAAaJ,eAAezD,UAAS,SACvC3B,GACMA,EAAK6E,OAAS7E,EAAK6E,QAAUzD,GAChCA,EAAKwM,YAAY5N,EAAK+E,OAI5B7G,KAAKsH,aAAaL,YAAYxD,UAAS,SAAEkM,GACnCA,GACFzM,EAAKiM,aAAatH,QAAO,SAAE+G,EAAsBgB,GAC3ChB,IAAWe,EAAK9I,IAAI+H,SACtB1L,EAAK2M,UAAUD,GAAO1M,EAAK4M,cAAclB,EAAQ,CAAEmB,IAAKJ,EAAK9I,IAAI5G,MAAO8E,MAAO7B,EAAK6B,aAK5F/E,KAAKgQ,QAAQC,WAAWxM,UAAS,SAC9BC,OACOkL,EAAuB1L,EAAKiM,aAAae,KAAI,SAAEC,GAAoB,OAAAA,EAAEtB,OAASnL,EAAM0M,SAC1FxB,EAAOyB,cAAgB3M,EAAM4M,UAC7BpN,EAAKwF,KAAKhI,KAAK,CAAEkO,OAAMA,EAAE2B,qBAAsBrN,EAAKiM,aAAclN,KAAMuO,GAA8BnC,SAI1GrO,KAAKsH,aAAaH,kBAAkB1D,UAAS,SAC1C3B,GACKA,IAAS4F,WAAqB,MAAR5F,IACxBoB,EAAKyE,aAAaC,WAAa9F,MAOvC2N,GAAA3P,UAAA2Q,gBAAA,WACMzQ,KAAK+H,iBACP/H,KAAK0Q,SAASC,cAIlB3F,OAAAC,eACIwE,GAAA3P,UAAA,WAAQ,KADZ,SACa8Q,GACX5Q,KAAKiC,KAAO2O,EAAIC,GAAgBrC,OAASqC,GAAgBpC,MACzDzO,KAAK8Q,4BAA8B,IAAI7B,GACnCjP,KAAKiC,OAAS4O,GAAgBrC,OAChCxO,KAAK+Q,aAEL/Q,KAAK8Q,4BAA4BhK,wCAIrCkE,OAAAC,eACIwE,GAAA3P,UAAA,sBAAmB,KADvB,SACwBkR,GADxB,IAAA9N,EAAAlD,KAME,GAJAA,KAAKiR,aAAc,EACnBjR,KAAKmP,aAAe6B,EACpBhR,KAAKkR,iBAAiBC,OAAO,EAAGnR,KAAKkR,iBAAiBtM,QAElDoM,EAAqB,CACvB,GAAIhR,KAAKoR,cAAe,KAChBC,EAAsBL,EAAoBpM,OAC5C0M,EAAwB,EACxBC,GAA0B,EAC9BP,EAAoBnJ,QAAO,SAAE+G,GACrBA,EAAO4C,WACXF,GAAgC,GAE5BC,GAAoC,eAAhB3C,EAAOC,OAC/B0C,GAAiB,SAGfE,EAAwBJ,IAAgBC,EACzCC,GACHP,EAAoB1G,KAAK,CACvBuE,KAAM,aACNzL,MAAO,GACPoO,SAAUC,EAAe,GAAK/J,UAC9BgK,SAAS,IAKfV,EAAoBnJ,QAAO,SAAE+G,GACvBA,EAAO8C,SACTxO,EAAKgO,iBAAiB5G,KAAKsE,EAAOC,MAE/B3L,EAAK+N,cACR/N,EAAK+N,YAAcrC,EAAO4C,WAAa9J,aAGvC1H,KAAK2R,UACP3R,KAAK8E,WAAa9E,KAAK2R,SAG3B3R,KAAK4R,0BAA0BT,OAAO,EAAGnR,KAAK4R,0BAA0BhN,QACxE5E,KAAK6R,6BAA6BV,OAAO,EAAGnR,KAAK6R,6BAA6BjN,QAC9E5E,KAAK8R,2BAA2BX,OAAO,EAAGnR,KAAK8R,2BAA2BlN,QAC1E5E,KAAK+R,sBAAsBlK,QAAO,SAAEmK,GAAgB,OAAA9O,EAAK0O,0BAA0BtH,KAAK0H,KACxFhS,KAAKiS,oBAAoBpK,QAAO,SAAEmK,GAAgB,OAAA9O,EAAK2O,6BAA6BvH,KAAK0H,KACzFhS,KAAKkS,yBAAyBrK,QAAO,SAAEmK,GAAgB,OAAA9O,EAAK4O,2BAA2BxH,KAAK0H,sCAK9FhH,OAAAC,eACIwE,GAAA3P,UAAA,aAAU,KAMd,WACE,OAAOE,KAAKmS,iBARd,SACerN,GACb9E,KAAKmS,YAAcrN,EACnB9E,KAAK2R,QAAU7M,EACX9E,KAAK2R,SAAW3R,KAAKoS,qDAO3BpH,OAAAC,eACIwE,GAAA3P,UAAA,mBAAgB,KADpB,SACqBuS,GACnBrS,KAAKwF,eAAiB6M,EAClBrS,KAAK2R,SAAW3R,KAAK2R,QAAQ/M,UAC1ByN,GAAiBrS,KAAK2R,QAAQ/M,QAAUyN,EAAgB,KAC3DrS,KAAKwF,eAAiB,GAExBxF,KAAKsS,UAAU,CAAExQ,KAAM9B,KAAK2R,QAAQ3R,KAAKwF,gBAAiB+M,QAASC,GAAQhD,MAAO,qCAI9EC,GAAA3P,UAAAsS,kBAAR,WAAA,IAGMK,EAHNvP,EAAAlD,KACQ0S,EAAgCvM,QAClCwM,GAAqB,EAEzB3S,KAAKmP,aAAatH,QAAO,SAAE+G,GACrBA,EAAOgE,YAAclL,YAAcxE,EAAKjB,OAAS4O,GAAgBpC,OAASvL,EAAK4N,4BAA4BhK,MAAQ,KACrH5D,EAAK2M,UAAY,IAAI1J,MAAcjD,EAAKiM,aAAavK,QACrD1B,EAAK2P,YAAa,EAClB3P,EAAKwD,MAAMhG,KAAK,CAAEkO,OAAMA,EAAE2B,qBAAsBrN,EAAKiM,aAAclN,KAAMuO,GAA8BjC,SAEzGrL,EAAK4P,WAAa5P,EAAK4P,YAAclE,EAAOmE,WAC5CJ,EAAYA,GAAa/D,EAAOoE,YAE9BL,IACF3S,KAAK2R,QAAU3R,KAAK2R,QAAQjJ,KAAI,SAAEuK,EAAMC,OAClCC,EAAiB,EAMrB,OALAjQ,EAAKiM,aAAatH,QAAO,SAAE+G,GACV,IAAXuE,IACFA,EAASjQ,EAAKkQ,QAAQH,EAAGC,MAGtBC,KAGXnT,KAAK2R,QAAQ9J,QAAO,SAAEwL,IAChBV,GAAoC,IAAtBD,EAAW9N,QAAmF,IAAnE1B,EAAKkQ,QAAQV,EAAWA,EAAW9N,OAAS,GAAO,KAAOyO,KACjGZ,GACFC,EAAWpI,KAAK,CAAExI,KAAM2Q,EAAaF,QAASC,GAAQjD,eAExDmD,EAAWpI,KAAK,CAAExI,KAAMuR,EAAKd,QAASC,GAAQlD,cAC9CmD,EAAc,IAAItM,MAAkBjD,EAAKiM,aAAavK,SAEpD+N,GAAazP,EAAKoQ,cAAcb,EAAaY,GACjDX,EAAWpI,KAAK,CAAExI,KAAMuR,EAAKd,QAASC,GAAQhD,QAEhDxP,KAAK8B,KAAO,IAAIyR,EAAAA,mBAA+Bb,GAC3C1S,KAAK2R,SAAW3R,KAAK2R,QAAQ/M,QAAU5E,KAAKwF,iBAAmBxF,KAAKmI,kBAClEnI,KAAKwF,gBAAkBxF,KAAK2R,QAAQ/M,QAAU5E,KAAKwF,eAAiB,KACtExF,KAAKwF,eAAiB,GAExBxF,KAAKsS,UAAU,CAAExQ,KAAM9B,KAAK2R,QAAQ3R,KAAKwF,gBAAiB+M,QAASC,GAAQhD,MAAO,KAI9EC,GAAA3P,UAAAwT,cAAR,SAAsBE,EAA6BH,GACjDrT,KAAKmP,aAAatH,QAAO,SAAE+G,EAAsBnH,GAC3CmH,EAAOgE,YAAclL,YACnB8L,EAAS/L,KAAWC,UACtB8L,EAAS/L,GAAS,CAAEsI,KAAM,IAAIrB,IAAmBC,SAAS0E,EAAKzE,GAAoB7J,MAAO,IAE1FyO,EAAS/L,GAAOsI,MAAQ,IAAIrB,IAAmBC,SAAS0E,EAAKzE,GAC7D4E,EAAS/L,GAAO1C,aAMhB0K,GAAA3P,UAAAsT,QAAR,SAAgBH,EAAMC,OAChBO,EAAa,EAUjB,OATAzT,KAAKmP,aAAatH,QAAO,SAAE+G,GACd,IAAP6E,GAAY7E,EAAOoE,aAChB,IAAItE,IAAmBC,SAASsE,EAAGrE,IAAsB,IAAIF,IAAmBC,SAASuE,EAAGtE,GAC/F6E,GAAM,GACI,IAAI/E,IAAmBC,SAASsE,EAAGrE,IAAsB,IAAIF,IAAmBC,SAASuE,EAAGtE,KACtG6E,EAAK,MAIJA,GAGThE,GAAA3P,UAAA4T,oBAAA,SAAoB7M,OACdsM,EAAiB,GAMrB,OALAnT,KAAKmP,aAAatH,QAAO,SAAE+G,GACrBA,EAAOoE,YACTG,IAAWA,EAAOvO,OAAS,MAAQ,KAAO,IAAI8J,IAAmBC,SAAS9H,EAAK+H,MAG5EuE,GAGT1D,GAAA3P,UAAA6T,aAAA,SAAalM,EAAemM,GAC1B,OAAOA,EAAKrB,UAAYC,GAAQlD,aAGlCG,GAAA3P,UAAA+T,MAAA,SAAMpM,EAAemM,GACnB,OAAOA,EAAKrB,UAAYC,GAAQhD,KAGlCC,GAAA3P,UAAAgU,cAAA,SAAcrM,EAAemM,GAC3B,OAAOA,EAAKrB,UAAYC,GAAQjD,cAGlCE,GAAA3P,UAAAoS,uBAAA,WACE,OAAOlS,KAAKkR,iBAAiB6C,IAAG,SAAElF,GAAiB,MAAA,UAAYA,KAGjEY,GAAA3P,UAAAgQ,cAAA,SAAclB,EAAsB9M,GAClC,OAAI8M,EAAOgE,YAAcoB,GAAU9F,IAAcpM,EAAKiO,IAClDnB,EAAOgE,YAAcoB,GAAU5F,MAAgBtM,EAAKiD,MACpD6J,EAAOgE,YAAcoB,GAAU7F,QAAkB,EAAKrM,EAAKiO,IAAMjO,EAAKiD,MACnE2C,WAGT+H,GAAA3P,UAAA6O,SAAA,SAAS9H,EAAQ+H,GACf,OAAO,IAAIF,IAAmBC,SAAS9H,EAAK+H,IAG9Ca,GAAA3P,UAAAmU,gBAAA,SAAgBpN,EAAQ+H,GACtB,OAAI5O,KAAKqJ,aACA,IAAIqF,IAAmBC,SAAS9H,EAAK+H,GAErC,MAIXa,GAAA3P,UAAAoU,WAAA,SAAWC,GACTnU,KAAKoU,WAAaD,EAClBnU,KAAKkM,OAAOxL,KAAK,CAAEyT,KAAIA,EAAE5D,qBAAsBvQ,KAAKmP,gBAGtDM,GAAA3P,UAAAwS,UAAA,SAAUe,EAAiBgB,EAAiBzF,GACtCyE,IAAQ3L,WAAqB,OAAR2L,IAGpBzE,IAAWlH,WAAwB,OAAXkH,GAAuBA,GAA0B,eAAhBA,EAAOC,MACnE7O,KAAKmI,eAAiBkL,EAAQ,KAC9BrT,KAAKsU,OAAO5T,KAAKV,KAAKmI,gBACtBnI,KAAKqI,aAAa3H,KAAK,CAAET,MAAOD,KAAKmI,eAAgBoM,MAAOF,EAASG,EAAWxG,KAAOwG,EAAWvG,aACvFW,GAA0B,eAAhBA,EAAOC,OACxB7O,KAAKmI,iBAAmBkL,EAAIvR,OAC9B9B,KAAKmI,eAAiBkL,EAAQ,KAC9BrT,KAAKsU,OAAO5T,KAAKV,KAAKmI,gBACtBnI,KAAKqI,aAAa3H,KAAK,CAAET,MAAOD,KAAKmI,eAAgBoM,MAAOF,EAASG,EAAWxG,KAAOwG,EAAWvG,aAEpGjO,KAAKkJ,YAAYxI,KAAKV,KAAKmI,mBAI/BsH,GAAA3P,UAAA2U,SAAA,SAAS/Q,OAEHgR,EADE5M,EAA0BpE,EAAY,OAGxC1D,KAAK2U,UAAY7M,EAAQ8M,YAC3BF,GAAY,EACZ1U,KAAK2U,QAAU7M,EAAQ8M,UACvB5U,KAAK6U,QAAU/M,EAAQgN,YAGrB9U,KAAK6U,UAAY/M,EAAQgN,aAC3BJ,GAAY,EACZ1U,KAAK2U,QAAU7M,EAAQ8M,UACvB5U,KAAK6U,QAAU/M,EAAQgN,YAGpBhN,EAAQiN,aAAejN,EAAQ8M,UAAY,KAASF,GACvD1U,KAAK+Q,cAKDtB,GAAA3P,UAAAiR,WAAR,WACO/Q,KAAK8Q,4BAA4B1B,YAAepP,KAAK8Q,4BAA4BzB,SACpFrP,KAAK8Q,4BAA4BzB,QAAS,EAC1CrP,KAAKuI,SAAS7H,KAAK,CACjBoG,KAAM9G,KAAK8Q,4BAA4BvI,WACvCyM,KAAMhV,KAAK8Q,4BAA4B5B,QAAQlP,KAAKmP,aAAcnP,KAAKoU,gBAKrE3E,GAAA3P,UAAA4P,YAAR,SAAoB5N,GACb9B,KAAK2R,UACR3R,KAAK2R,QAAU,IAAIxL,OAErBnG,KAAK2R,QAAU3R,KAAK2R,QAAQjH,OAAO5I,GACnC9B,KAAK8E,WAAa9E,KAAK2R,QACvB3R,KAAK8Q,4BAA4B1B,WAA6B,IAAhBtN,EAAK8C,OACnD5E,KAAK8Q,4BAA4BzB,QAAS,GAG5CI,GAAA3P,UAAAmV,aAAA,WACEjV,KAAKgJ,WAAWtI,KAAKV,KAAkB,gBAGzCyP,GAAA3P,UAAAiJ,aAAA,SAAajB,EAAqB8G,GAChC5O,KAAKsS,UAAUxK,GAAS,EAAM8G,GAE9B5O,KAAKkV,cAAgB,CAAEtG,OAAMA,EAAEyE,IAAKvL,GACpC9H,KAAKgJ,WAAWtI,KAAKV,KAAKkV,gBAG5BzF,GAAA3P,UAAAqV,eAAA,SAAe9B,EAAiBzE,GAC9B,SAAI5O,KAAK+H,iBACmB,MAAtB/H,KAAKkV,eACHlV,KAAKkV,cAActG,OAAOC,OAASD,EAAOC,MAC3C7O,KAAKkV,cAAiB,IAAgBpT,OAASuR,EAAIvR,OAQ5D2N,GAAA3P,UAAAsV,eAAA,SAAe/B,EAAQzE,GAAvB,IAAA1L,EAAAlD,KACQqV,EAA6B,IAAIlP,MACvC,GAAInG,KAAKsV,iBAAkB,KACnBC,EAA6BvV,KAAKsV,iBAAiBpF,KAAI,SAAEC,GAC7D,OAAOA,EAAEqF,WAAatS,EAAKyL,SAAS0E,EAAKzE,KAEvC2G,GACFF,EAAY/K,KAAKiL,EAAME,WAM3B,OAHI7G,EAAO8G,aACTL,EAAY/K,KAAKsE,EAAO8G,aAEnBL,GAGT5F,GAAA3P,UAAA6V,cAAA,SAActC,GAAd,IAAAnQ,EAAAlD,KACQ4V,EAA4B,IAAIzP,MAItC,GAHIkN,IAAQrT,KAAKmI,gBAAmBnI,KAAK+H,iBACvC6N,EAAWtL,KAAK,IAEdtK,KAAK6V,0BAA2B,KAC5BN,EAA4BvV,KAAK6V,0BAA0B3F,KAAI,SAAEC,GACrE,OAAOA,EAAErO,OAASoB,EAAKyL,SAAS0E,EAAKlD,EAAEvB,UAErC2G,GACFK,EAAWtL,KAAKiL,EAAMO,UAG1B,OAAOF,GAGTnG,GAAA3P,UAAA6I,OAAA,SAAOjF,GACL,GAAI1D,KAAK+V,WAAuC,GAA1B/V,KAAKgW,kBAAwB,KAC3CC,EAAmBjW,KAAKkW,YAAYxS,EAAMyS,OAC1CC,EAAsBpW,KAAKqW,eAAevU,KAC1C6P,EAAe3R,KAAK2R,QAC1B2E,EAAAA,gBAAgBF,EAAOpW,KAAKgW,kBAAmBC,GAC/CK,EAAAA,gBAAgB3E,EAAS3R,KAAKgW,kBAAmBC,GACjDjW,KAAK4I,KAAKlI,KAAK,CAAET,MAAOmW,EAAMH,GAAc,KAAOtR,MAAOsR,IAC1DjW,KAAK2R,QAAUA,EACf3R,KAAK8B,KAAO,IAAIyR,EAAAA,mBAAmB6C,GACnC1S,EAAM6S,oBAIV9G,GAAA3P,UAAA0W,aAAA,SAAa9S,GAAb,IAAAR,EAAAlD,KACE,IAAKA,KAAK+H,gBAAiB,KACrB0O,EAAuBzW,KAAK8B,KAAKA,KAAK4U,UAAS,SAAErD,GAAoB,OAAAA,EAAIvR,OAASoB,EAAKiF,iBACvFwO,GAAwB,GACV,cAAdjT,EAAMsI,MACRhM,KAAK4W,cACL5W,KAAK8B,KAAKA,KAAK+F,QAAO,SAAEwL,EAAiB5L,IACjB,KAAlBkP,GAAgCF,EAARhP,GAAwB4L,EAAId,UAAYC,GAAQhD,MAC1EmH,EAAelP,MAIH,YAAd/D,EAAMsI,MACRhM,KAAK4W,cACLH,EAAezW,KAAK8B,KAAKA,KAAK8C,OAAS6R,EAAe,EACtDzW,KAAK8B,KAAKA,KAAK+U,UAAUhP,QAAO,SAAEwL,EAAiB5L,IAC3B,KAAlBkP,GAAgCF,EAARhP,GAAwB4L,EAAId,UAAYC,GAAQhD,MAC1EmH,EAAelP,KAGnBzH,KAAK8B,KAAKA,KAAK+U,WACO,KAAlBF,IACFA,EAAe3W,KAAK8B,KAAKA,KAAK8C,OAAS+R,EAAe,KAGpC,KAAlBA,GACF3W,KAAKsS,UAAUtS,KAAK8B,KAAKA,KAAK6U,IAAe,GAEb,GAA9BG,KAAKC,IAAI/W,KAAK4W,aAChB5W,KAAK4W,YAAc,EAEnBlT,EAAMsT,mBAQZvH,GAAA3P,UAAA+I,SAAA,WACE7I,KAAK8I,OAAOpI,QAId+O,GAAA3P,UAAAmS,kBAAA,WAQE,OAPoBjS,KAAKmP,aAAa4E,IAAG,SAAEnF,EAAsBnH,GAC/D,OAAImH,EAAO8C,SAAW9C,EAAO4C,WAAa9J,UACjC,WAAaD,EAEb,OAERwP,OAAM,SAAEnV,GAAiB,OAAQ,MAARA,KAI9B2N,GAAA3P,UAAAiS,oBAAA,WACE,OAAO/R,KAAKmP,aAAa8H,OAAM,SAAErI,GAC/B,OAAAA,EAAO8C,SAAW9C,EAAOxL,QAAUsE,YACnCqM,IAAG,SAAE/B,GAAsB,OAAAA,EAAInD,QAGnCY,GAAA3P,UAAAoX,QAAA,SAAQxT,GACN,GAAI1D,KAAK+V,WAAuC,GAA1B/V,KAAKgW,kBAAwB,KAC3CC,EAAmBjW,KAAKkW,YAAYxS,EAAMyS,OAChD,GAAIF,IAAajW,KAAKmX,iBAAkB,CACtCnX,KAAKmX,iBAAmBlB,MAElBG,EAAK5L,EAAqBxK,KAAKqW,eAAevU,MACpDwU,EAAAA,gBAAgBF,EAAOpW,KAAKgW,kBAAmBC,GAC/CjW,KAAK8B,KAAO,IAAIyR,EAAAA,mBAAmB6C,GAGrC,OADA1S,EAAMsT,kBACC,IAIXvH,GAAA3P,UAAAsX,UAAA,SAAU1T,GACR1D,KAAKgW,kBAAoBhW,KAAKkW,YAAYxS,EAAMyS,OAChDnW,KAAKmX,iBAAmBnX,KAAKgW,kBAC7BhW,KAAKqW,eAAiBrW,KAAK8B,MAGrB2N,GAAA3P,UAAAoW,YAAR,SAAoBC,GAGlB,QAFIkB,EAAoB,EACpBC,EAAyBtX,KAAKuX,eAAelX,cAC3B,OAAdiX,GAAsC,IAAdD,GAC9BA,EAAYC,EAAUD,UACtBC,EAAYA,EAAUE,cAIxB,QAFIvB,GAAoB,EAClBwB,EAAuBzX,KAAK0X,gBAAgBrX,cAAcsX,SAAS,GAAGA,SACnE7N,EAAY,EAAGA,EAAI2N,EAAK7S,OAAQkF,IAEnCqM,EAAQkB,EADcI,EAAK3N,GACHuN,UAAYrX,KAAKuX,eAAelX,cAAcuU,YACxEqB,EAAWnM,GAIf,OADImM,EAAW,IAAKA,EAAW,GACxBA,GAGTjL,OAAAC,eAAIwE,GAAA3P,UAAA,aAAU,KAAd,WACE,OAAO8X,wDA1iBV/W,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,m6QAlBOyF,uCA6CNvF,EAAAA,UAASJ,KAAA,CAAC+W,EAAAA,2BACV3W,EAAAA,UAASJ,KAAA,CAACgX,EAAAA,mCACV5W,EAAAA,UAASJ,KAAA,CAACgX,EAAAA,SAAU,CAAEC,KAAMC,EAAAA,qCAC5B9W,EAAAA,UAASJ,KAAA,CAAC,gCAEVK,EAAAA,sBACAA,EAAAA,uBACAA,EAAAA,uBAKAA,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,0BACAF,EAAAA,+BACAA,EAAAA,qBACAA,EAAAA,gCACAA,EAAAA,yCACAA,EAAAA,6BACAA,EAAAA,oBACAE,EAAAA,0BACAF,EAAAA,4BACAA,EAAAA,sBACAE,EAAAA,4BACAA,EAAAA,8BACAF,EAAAA,2BACAA,EAAAA,yBASAA,EAAAA,yBAKAA,EAAAA,wBA8CAA,EAAAA,mCAWAA,EAAAA,0BAoDAA,EAAAA,gCAWAA,EAAAA,SA8WHwO,IAneE,SAAAA,GAAoBnI,GAAAtH,KAAAsH,aAAAA,EA/DpBtH,KAAAkR,iBAA6B,GAC7BlR,KAAA4R,0BAAsC,GACtC5R,KAAA6R,6BAAyC,GACzC7R,KAAA8R,2BAAuC,GAIvC9R,KAAAiC,KAAwB4O,GAAgBpC,MAEhCzO,KAAA4W,YAAsB,EAC9B5W,KAAAiR,aAAuB,EACfjR,KAAAgW,mBAA6B,EAC7BhW,KAAAmX,kBAA4B,EAC5BnX,KAAAqW,eAAyC,KACzCrW,KAAAmS,YAAwB,GACxBnS,KAAA6U,QAAkB,EAClB7U,KAAA2U,QAAkB,EAOhB3U,KAAA0I,KAAkC,IAAIhH,EAAAA,aACtC1B,KAAA0G,MAAmC,IAAIhF,EAAAA,aACvC1B,KAAAkM,OAAoC,IAAIxK,EAAAA,aAKxC1B,KAAAsU,OAA0B,IAAI5S,EAAAA,aAC9B1B,KAAAgJ,WAAoC,IAAItH,EAAAA,aACxC1B,KAAAqI,aAA8C,IAAI3G,EAAAA,aAClD1B,KAAAuI,SAAgD,IAAI7G,EAAAA,aACrD1B,KAAAiY,WAAqB,EACrBjY,KAAA+H,iBAA2B,EAK1B/H,KAAA4I,KAAqC,IAAIlH,EAAAA,aAC1C1B,KAAA+V,WAAqB,EACrB/V,KAAA2H,aAA6B,CAAEC,YAAY,EAAOuM,KAAM,IACvDnU,KAAA8I,OAA6B,IAAIpH,EAAAA,aACjC1B,KAAAkJ,YAA+B,IAAIxH,EAAAA,aACpC1B,KAAAoR,eAAyB,EACzBpR,KAAAqJ,aAAuB,EAChCrJ,KAAA6S,YAAsB,EACtB7S,KAAA8S,YAAsB,EAOb9S,KAAAsJ,UAAoB,IAKpBtJ,KAAAuJ,UAAoB,QC3GzB2O,GAAyBC,MAO7BrK,OAAS,QACTsK,WAAa,mBA8CbC,GAAAvY,UAAAC,SAAA,WACEC,KAAKsY,gBAAkB,IAAIjX,EAAAA,YAAY,GAAIrB,KAAKuY,gBAAgB7M,WAChE1L,KAAKwY,cAEDxY,KAAKyY,eAAiBC,GAAiBN,aACzCpY,KAAK2Y,WAAa,UAClB3Y,KAAKoB,YAAcpB,KAAK2Y,gBAMpBC,EAAwBV,GAAOlY,KAAKuY,gBAAgBtY,MAAOD,KAAK2Y,YAAYE,OAAO7Y,KAAK2Y,YAC3D,KAA/B3Y,KAAKuY,gBAAgBtY,OAAkC,iBAAlB2Y,GACvC5Y,KAAKsY,gBAAgBnY,SAASyY,IAKlC5N,OAAAC,eAAIoN,GAAAvY,UAAA,mBAAgB,KAApB,WACE,OAAO4Y,oCAMTL,GAAAvY,UAAAgZ,aAAA,WAEE,OAAI9Y,KAAKyY,eAAiBzY,KAAK+Y,iBAAiBX,WACvC,aAEA,SAIHC,GAAAvY,UAAA0Y,YAAR,WAAA,IAAAtV,EAAAlD,KACEA,KAAKsY,gBAAgBlN,aAClB4N,KACCC,EAAAA,IAAG,SAAEC,GACCA,EAAKtU,OAAS1B,EAAKyV,WAAW/T,OAChC1B,EAAKiW,eAAgB,EAErBjW,EAAKiW,eAAgB,IAGzBlC,EAAAA,OAAM,SAAEiC,GAAiB,OAAAA,EAAKtU,SAAW1B,EAAKyV,WAAW/T,UAE1DnB,UAAS,SAAEyV,GACVhW,EAAKiW,eAAgB,MACfC,EAAmBlB,GAAOgB,EAAMhW,EAAKyV,YAAY,GAAMS,UACvDjG,EAAiB+E,GAAOgB,EAAMhW,EAAKyV,YAAYE,OAAO,cAE5D,IAAM1F,GAAsB,iBAAXA,GAA8BiG,GAK/C,GAAMjG,EACJ,GAAKjQ,EAAKmW,iBAsBRC,WAAU,WACRpW,EAAKmW,kBAAmB,GACvB,UAxBuB,CAC1BnW,EAAKmW,kBAAmB,MAClBE,EAAsBpG,EAAOrE,MAAM,KAEnC0K,EAAeC,WAAWF,EAAU,IACpCG,EAAgBD,WAAWF,EAAU,IACrCI,EAAcF,WAAWF,EAAU,IAEzCrW,EAAKgW,KAAKU,YAAYJ,GACtBtW,EAAKgW,KAAKW,QAAQF,GAClBzW,EAAKgW,KAAKY,SAASJ,EAAQ,GAGvBxW,EAAKuV,eAAiBC,GAAiBN,aACzClV,EAAKgW,KAAOhB,GAAOhV,EAAKgW,MAAMa,MAAM,SAASC,UAG/C9W,EAAKoV,gBAAgBnY,SAAS+X,GAAOhV,EAAKgW,KAAM,cAAcL,OAAO3V,EAAKyV,aAC1EzV,EAAKqV,gBAAgBpY,SAAS+C,EAAKgW,MAEnChW,EAAKmW,kBAAmB,QAzB1BnW,EAAKiW,eAAgB,IAoC3BnZ,KAAKuY,gBAAgBnN,aAClB3H,UAAS,SAAEyV,OACJN,EAAwBV,GAAOgB,EAAMhW,EAAKyV,YAAYE,OAAO3V,EAAKyV,YACrC,KAA/BzV,EAAKqV,gBAAgBtY,OAAkC,iBAAlB2Y,GACvC1V,EAAKoV,gBAAgBnY,SAASyY,MAStCP,GAAAvY,UAAAma,qBAAA,SAAqBC,EAAiCC,GAEpD,GAAIna,KAAKyY,eAAiBC,GAAiBN,WAAY,CACrD+B,EAAWpX,YACLmW,EAAahB,GAAOgC,GAAiBH,MAAM,SAASC,SAE1Dha,KAAKsY,gBAAgBnY,SAAS+X,GAAOgB,EAAM,cAAcL,OAAO7Y,KAAK2Y,aACrE3Y,KAAKuY,gBAAgBpY,SAAS+Y,KAOlCb,GAAAvY,UAAAsa,WAAA,SAAWnY,EAAcyB,GAEvB1D,KAAKsY,gBAAgBnY,SAAS+X,GAAOxU,EAAMzD,MAAO,cAAc4Y,OAAO7Y,KAAK2Y,aAC5E3Y,KAAKuY,gBAAgBpY,SAASuD,EAAMzD,QAGtCoY,GAAAvY,UAAAua,gBAAA,WACE,OAAOra,KAAKsa,aAAeta,KAAK2Y,iCArKnC9X,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,SAAA,iiCAMCC,EAAAA,+BACAA,EAAAA,0BAQAA,EAAAA,4BACAA,EAAAA,2BACAA,EAAAA,4BAMAA,EAAAA,SA+IHoX,IAhIE,SAAAA,KAhCSrY,KAAA0N,WAA0C,QAC1C1N,KAAAuY,gBAA+B,IAAIlX,EAAAA,YAAY,IAChDrB,KAAAkZ,KAAa,IAAIqB,KAOhBva,KAAA2Y,WAAqB,aACrB3Y,KAAAsa,aAAuB,wCACvBta,KAAAoB,YAAsBpB,KAAK2Y,WAM3B3Y,KAAAyY,aAAiCC,GAAiB5K,OAQnD9N,KAAAqZ,kBAA4B,EAKpCrZ,KAAAmZ,eAAyB,ECtD3B,IAAAqB,IA0CIA,GAAA1a,UAAA2a,mBAAA,SAAmBC,GACf1a,KAAK2a,iBAAiB1V,KAAKyV,IAI/BF,GAAA1a,UAAA8a,iBAAA,SAAiB9Y,GACb9B,KAAK6a,eAAe5V,KAAKnD,IAG7B0Y,GAAA1a,UAAAgb,eAAA,SAAeC,GACX/a,KAAKgb,mBAAmB/V,KAAK8V,IAGjCP,GAAA1a,UAAAmb,iBAAA,SAAiBC,GACblb,KAAKmb,qBAAqBlW,KAAKiW,IAGnCV,GAAA1a,UAAAsb,YAAA,WACIpb,KAAKqb,gBAAgBpW,QAIzBuV,GAAA1a,UAAAwb,0BAAA,WACItb,KAAKub,8BAA8BtW,QAIvCuV,GAAA1a,UAAA0b,cAAA,SAAcC,GACdzb,KAAK0b,kBAAkBzW,KAAKwW,IAI5BjB,GAAA1a,UAAA6b,gBAAA,SAAgBF,GACZzb,KAAK4b,oBAAoB3W,KAAKwW,yBAtErCjZ,EAAAA,WAAU1B,KAAA,CAAC,CACR2B,WAAY,4JAwEZ,SAAA+X,KAnEQxa,KAAA2a,iBAAqD,IAAIkB,EAAAA,gBAAiC,GAElG7b,KAAA8b,aAA4C9b,KAAK2a,iBAAiBtU,eAG1DrG,KAAA6a,eAAwC,IAAIgB,EAAAA,gBAAsBnU,WAG1E1H,KAAA+b,qBAAyC/b,KAAK6a,eAAexU,eAGrDrG,KAAAgb,mBAA+C,IAAIa,EAAAA,gBAAyB,MACpF7b,KAAAgc,WAAkChc,KAAKgb,mBAAmB3U,eAGjDrG,KAAAmb,qBAAiD,IAAIU,EAAAA,gBAAyB,MACtF7b,KAAAic,aAAoCjc,KAAKmb,qBAAqB9U,eAEvDrG,KAAAqb,gBAAiC,IAAInV,EAAAA,QAC7ClG,KAAAkc,sBAA0Clc,KAAKqb,gBAAgBhV,eAEvDrG,KAAAub,8BAA+C,IAAIrV,EAAAA,QAC3DlG,KAAAmc,oCAAwDnc,KAAKub,8BAA8BlV,eAEnFrG,KAAA0b,kBAAmC,IAAIxV,EAAAA,QAC/ClG,KAAAoc,wBAA4Cpc,KAAK0b,kBAAkBrV,eAE3DrG,KAAA4b,oBAAqC,IAAI1V,EAAAA,QACjDlG,KAAAqc,0BAA8Crc,KAAK4b,oBAAoBvV,eCvC3E,QAWIiW,GAAAxc,UAAAyI,SAAA,WACE,OAAOvI,KAAK8G,KAAO9G,KAAK8G,KAAO,GAEnCwV,IATE,SAAAA,KACEtc,KAAK8G,KAAO,EACZ9G,KAAKoP,YAAa,EAClBpP,KAAKqP,QAAS,UC0FJkN,GAAAC,eAAd,SAA6Bf,OACvBtI,EAAmB,CAACsI,EAAK5M,MACzBnE,EAAiB,GAMrB,GAJI+Q,EAAKgB,QACPtJ,EAAO7I,KAAKtK,KAAKwc,eAAef,EAAKgB,SAGjB,IAAlBtJ,EAAOvO,OACT,OAAO6W,EAAK5M,KAGdsE,EAASA,EAAO0D,UAEhB,IAAK,IAAI/M,EAAY,EAAGA,EAAIqJ,EAAOvO,OAAQkF,IAEzCY,EAASA,EADeyI,EAAOrJ,IACFA,IAAMqJ,EAAOvO,OAAS,EAAI,GAAK,KAG9D,OAAO8F,GAGT6R,GAAAzc,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KAEEA,KAAK0c,kBAAkBX,qBAAqBtY,UAAS,SAAEkZ,GAC/CA,GAASA,EAAIhF,UACjBzU,EAAK0Z,aAAeD,EAAIE,GACxB3Z,EAAKwM,YAAYiN,EAAIhF,YAErBzU,EAAK4B,WAAWhD,KAAO,GACvBoB,EAAK4Z,YAAYC,UAAY,MAKjC/c,KAAK0c,kBAAkBZ,aAAarY,UAAS,SAAEkZ,GACvCzZ,EAAKpB,MAAUoB,EAAKpB,KAAK6V,UAC7BzU,EAAK8Z,WAAW9Z,EAAKpB,KAAM6a,KAI/B3c,KAAK0c,kBAAkBR,sBAAsBzY,UAAS,SAAEkZ,GACtDzZ,EAAKkY,gBAGPpb,KAAK0c,kBAAkBP,oCAAoC1Y,UAAS,SAAEkZ,GACpEzZ,EAAKoY,+BAITiB,GAAAzc,UAAA2Q,gBAAA,WAAA,IAAAvN,EAAAlD,KACEA,KAAK0c,kBAAkBV,WAAWvY,UAAS,SAAEkZ,GAChC,MAAPA,GACEA,GACFzZ,EAAK+Z,KAAKH,YAAYI,cAK5Bld,KAAK0c,kBAAkBT,aAAaxY,UAAS,SAAEkZ,GACjC,OAARA,GACEA,GACFzZ,EAAK+Z,KAAKH,YAAYK,gBAK5Bnd,KAAK0c,kBAAkBN,wBAAwB3Y,UAAS,SAAEkZ,GACpDA,IAAQjV,WACVxE,EAAK4Z,YAAY/B,OAAO4B,KAI5B3c,KAAK0c,kBAAkBL,0BAA0B5Y,UAAS,SAAEkZ,GACtDA,IAAQjV,WACVxE,EAAK4Z,YAAY5B,SAASyB,MAMhCJ,GAAAzc,UAAAsd,WAAA,SAAW3B,GAAX,IAAAvY,EAAAlD,KACEA,KAAKqd,eAAgB,EACrB/D,WAAU,WACJpW,EAAKma,gBACPna,EAAK8Z,WAAWvB,EAAMA,EAAKoB,IAGrBpB,IACJvY,EAAK4Y,aAAapb,KAAK+a,EAAKoB,IAC5B3Z,EAAKoa,YAAc7B,KAGtB,MAGLc,GAAAzc,UAAA2U,SAAA,SAAS/Q,OACDoE,EAA0BpE,EAAY,OAExCoE,EAAQyV,aAAezV,EAAQ8M,WAAa9M,EAAQiN,cACtD/U,KAAK+Q,cAITwL,GAAAzc,UAAA0d,OAAA,SAAO/B,GACLzb,KAAKyd,cAAc/c,KAAK+a,IAS1Bc,GAAAzc,UAAA4d,MAAA,SAAMjC,GACJzb,KAAK2d,aAAajd,KAAK+a,IAuBzBc,GAAAzc,UAAA8d,SAAA,SAASnC,GACPzb,KAAK6d,gBAAgBnd,KAAK+a,IAY5Bc,GAAAzc,UAAAge,SAAA,SAASrC,EAAYxb,GACnBwb,EAAK5M,KAAO5O,EACG,MAAXwb,EAAKoB,IAA4B,KAAdpB,EAAK5M,MAC1BkP,EAAAA,OAAStC,EAAKgB,OAAO9E,SAAU8D,GAC/Bzb,KAAKob,eACIK,EAAKoB,IAAiB,MAAXpB,EAAKoB,IAAmC,KAArBpB,EAAK5M,KAAKmP,QACjDhe,KAAKie,OAAOvd,KAAK+a,GACjBA,EAAKyC,YAAa,EAClBle,KAAKgd,WAAWvB,EAAMA,EAAKoB,KACP,MAAXpB,EAAKoB,IAAmC,KAArBpB,EAAK5M,KAAKmP,SACtChe,KAAKme,MAAMzd,KAAK+a,GAChBA,EAAKyC,YAAa,GAEpBle,KAAKoe,YAAa,EAClBpe,KAAKob,eAGPmB,GAAAzc,UAAAa,SAAA,SAAS8a,EAAYxb,GACnBD,KAAKoe,YAAa,EAEH,MAAX3C,EAAKoB,KACPkB,EAAAA,OAAStC,EAAKgB,OAAO9E,SAAU8D,GAC/Bzb,KAAKob,eAGPK,EAAKyC,YAAa,GAGpB3B,GAAAzc,UAAAue,WAAA,SAAW5C,GACTzb,KAAKqd,eAAgB,EACrBrd,KAAKse,WAAW5d,KAAK+a,EAAKoB,KAI5BN,GAAAzc,UAAAye,UADA,SACU7a,GACR,OAAQA,EAAMsI,KACZ,IAAK,SACHhM,KAAKwe,eAAe9d,KAAOV,KAAKsd,aAAetd,KAAKsd,YAAYT,GAAK7c,KAAKsd,YAAYT,GAAK,MAC3F,MACF,IAAK,SACH7c,KAAKye,eAAe/d,KAAOV,KAAKsd,aAAetd,KAAKsd,YAAYT,GAAK7c,KAAKsd,YAAYT,GAAK,MAC3F,MACF,IAAK,YACH7c,KAAK0e,mBACL,MACF,IAAK,UACH1e,KAAK2e,mBASHpC,GAAAzc,UAAA6e,eAAR,WACE,GAAM3e,KAAK8B,KAET,GAAwB,MAApB9B,KAAKsd,YACPtd,KAAKgd,WAAWhd,KAAK8B,KAAM9B,KAAK8B,KAAK6V,SAAS,GAAGkF,IACjD7c,KAAKsd,YAActd,KAAK8B,KAAK6V,SAAS,GAChC3X,KAAKsd,YAAY3F,UAA+C,EAAnC3X,KAAKsd,YAAY3F,SAAS/S,QAC3D5E,KAAK0c,kBAAkBlB,cAAcxb,KAAKsd,kBAG5C,GAAMtd,KAAKsd,YAAYb,QAAiC,MAAvBzc,KAAKsd,YAAYT,GAAY,KAEtDpV,EAAgBzH,KAAKsd,YAAYb,OAAO9E,SAAS7K,QAAQ9M,KAAKsd,aAEpE,GAAkC,MAA9Btd,KAAKsd,YAAYb,OAAOI,IAAwB,IAAVpV,EACxC,OAAO,EAGHA,IAAUC,WAAuB,IAAVD,EACzBzH,KAAKsd,YAActd,KAAKsd,YAAYb,OAOpCzc,KAAKsd,YAActd,KAAKsd,YAAYb,OAAO9E,SAASlQ,EAAQ,GAN5DzH,KAAKgd,WAAWhd,KAAK8B,KAAM9B,KAAKsd,YAAYT,IACtC7c,KAAKsd,YAAY3F,UAA+C,EAAnC3X,KAAKsd,YAAY3F,SAAS/S,QAC3D5E,KAAK0c,kBAAkBlB,cAAcxb,KAAKsd,eAgBhDf,GAAAzc,UAAA4e,iBAAR,WACE,GAAM1e,KAAK8B,KACT,GAAwB,MAApB9B,KAAKsd,YACPtd,KAAKgd,WAAWhd,KAAK8B,KAAM9B,KAAK8B,KAAK6V,SAAS,GAAGkF,IACjD7c,KAAKsd,YAActd,KAAK8B,KAAK6V,SAAS,GAChC3X,KAAKsd,YAAY3F,UAA+C,EAAnC3X,KAAKsd,YAAY3F,SAAS/S,QAC3D5E,KAAK0c,kBAAkBlB,cAAcxb,KAAKsd,kBAG5C,GAAMtd,KAAKsd,YAAa,KAEhB7V,EACFzH,KAAKsd,aAAiBtd,KAAKsd,YAAYb,OAASzc,KAAKsd,YAAYb,OAAO9E,SAAS7K,QAAQ9M,KAAKsd,aAAe,KAGjH,GAAMtd,KAAKsd,YAAY3F,UAA+C,EAAnC3X,KAAKsd,YAAY3F,SAAS/S,OAC3D5E,KAAKsd,YAActd,KAAKsd,YAAY3F,SAAS,GAC7C3X,KAAKgd,WAAWhd,KAAK8B,KAAM9B,KAAKsd,YAAYT,IACtC7c,KAAKsd,YAAY3F,UAA+C,EAAnC3X,KAAKsd,YAAY3F,SAAS/S,QAC3D5E,KAAK0c,kBAAkBlB,cAAcxb,KAAKsd,kBAEvC,GACL7V,IAAUC,WACVD,IAAUzH,KAAKsd,YAAYb,OAAO9E,SAAS/S,OAAS,GAClB,MAAlC5E,KAAKsd,YAAYb,OAAOA,QACmB,MAA3Czc,KAAKsd,YAAYb,OAAOA,OAAO9E,UACkB,EAAjD3X,KAAKsd,YAAYb,OAAOA,OAAO9E,SAAS/S,OACxC,KACMga,EAAwB5e,KAAKsd,YAAYb,OAAOA,OAAO9E,SAAS7K,QAAQ9M,KAAKsd,YAAYb,QAC/Fzc,KAAKsd,YACHtd,KAAKsd,YAAYb,OAAOA,OAAO9E,SAASiH,EAAgB,KAAOlX,UAC3D1H,KAAKsd,YACLtd,KAAKsd,YAAYb,OAAOA,OAAO9E,SAASiH,EAAgB,GAE9D5e,KAAKgd,WAAWhd,KAAK8B,KAAM9B,KAAKsd,YAAYT,IACtC7c,KAAKsd,YAAY3F,UAA+C,EAAnC3X,KAAKsd,YAAY3F,SAAS/S,QAC3D5E,KAAK0c,kBAAkBlB,cAAcxb,KAAKsd,kBAI5Ctd,KAAKsd,YAActd,KAAKsd,YAAYb,OAAO9E,SAASlQ,EAAQ,GAC5DzH,KAAKgd,WAAWhd,KAAK8B,KAAM9B,KAAKsd,YAAYT,IACtC7c,KAAKsd,YAAY3F,UAA+C,EAAnC3X,KAAKsd,YAAY3F,SAAS/S,QAC3D5E,KAAK0c,kBAAkBlB,cAAcxb,KAAKsd,eAWtDf,GAAAzc,UAAA+e,SAAA,SAASC,EAAWrD,GAClB,QAASA,EAAK9D,UAAmC,EAAvB8D,EAAK9D,SAAS/S,QAMlC2X,GAAAzc,UAAAsb,YAAR,WACEpb,KAAK8B,KAAO,SACNid,EAAyB/e,KAAK8E,WAAWhD,KAC/C9B,KAAK8E,WAAWhD,KAAO,KACvB9B,KAAK8E,WAAWhD,KAAOid,EACvB/e,KAAK8c,YAAYC,UAAYgC,GAMvBxC,GAAAzc,UAAAwb,0BAAR,eACQyD,EAAyB/e,KAAK8E,WAAWhD,KAC/C9B,KAAK8E,WAAWhD,KAAO,KACvB9B,KAAK8E,WAAWhD,KAAOid,EACvB/e,KAAK8c,YAAYC,UAAYgC,GAGvBxC,GAAAzc,UAAAiR,WAAR,WACO/Q,KAAKgf,kBAAkB5P,YAAepP,KAAKgf,kBAAkB3P,SAChErP,KAAKgf,kBAAkB3P,QAAS,EAChCrP,KAAKif,cAAcve,KAAK,CACtBoG,KAAM9G,KAAKgf,kBAAkBzW,eAK3BgU,GAAAzc,UAAA4P,YAAR,SAAoB5N,GAApB,IAAAoB,EAAAlD,KACOA,KAAK8B,OACR9B,KAAK8B,KAAO,CAAE+a,GAAI,KAAMhO,KAAM,OAAQqQ,YAAY,IAE/Clf,KAAK8B,KAAK6V,WACb3X,KAAK8B,KAAK6V,SAAW,IAAIxR,MACzBnG,KAAKgf,kBAAoB,IAAI1C,IAE/Btc,KAAK8B,KAAK6V,SAAW3X,KAAK8B,KAAK6V,SAASjN,OAAO5I,GAC/C9B,KAAK8B,KAAK6V,SAAS9P,QAAO,SAAE4T,GAC1BvY,EAAKic,WAAW1D,EAAMvY,EAAKpB,QAG7B9B,KAAK8B,KAAK6V,SAAW3X,KAAKof,oBAAoBpf,KAAK8B,KAAK6V,UAExD3X,KAAK8E,WAAWhD,KAAO9B,KAAK8B,KAAK6V,SACjC3X,KAAK8c,YAAYC,UAAY/c,KAAK8B,KAAK6V,SACvC3X,KAAKgf,kBAAkB5P,WAA6B,IAAhBtN,EAAK8C,OACzC5E,KAAKgf,kBAAkB3P,QAAS,GAM1BkN,GAAAzc,UAAAqf,WAAR,SAAmB1D,EAAYgB,GAA/B,IAAAvZ,EAAAlD,KACEyb,EAAKgB,OAASA,EACVhB,EAAK9D,UAAmC,EAAvB8D,EAAK9D,SAAS/S,QACjC6W,EAAK9D,SAAS9P,QAAO,SAAE+L,GACrB1Q,EAAKic,WAAWvL,EAAM6H,MAQpBc,GAAAzc,UAAAkd,WAAR,SAAmBvB,EAAYoB,GAC7B,GAAY,MAARpB,EACF,OAAO,KAGT,GADAzb,KAAKqf,aAAa5D,GACZzb,KAAK4c,aAAc,KACjBd,EAAqB9b,KAAKsf,YAAYtf,KAAK4c,cAC7B,MAAhBd,IACFA,EAAaoD,YAAa,EAC1Blf,KAAK4c,aAAe,MAGxB,GAAInB,EAAKoB,KAAOnV,WAAa+T,EAAKoB,KAAOA,EAIvC,OAHApB,EAAKyD,YAAa,EAClBlf,KAAKuf,iBAAiB9D,GACtBzb,KAAK4c,aAAenB,EAAKoB,GAClBpB,EACF,GAAqB,MAAjBA,EAAK9D,SAQhB,OAAO,SAPD7N,OAAC,EACDqJ,EAAe,KACnB,IAAKrJ,EAAI,EAAa,MAAVqJ,GAAkBrJ,EAAI2R,EAAK9D,SAAS/S,OAAQkF,IACtDqJ,EAASnT,KAAKgd,WAAWvB,EAAK9D,SAAS7N,GAAI+S,GAE7C,OAAO1J,GAKHoJ,GAAAzc,UAAAyf,iBAAR,SAAyB9D,GACjBA,GAAUA,EAAKgB,SACnBzc,KAAK0c,kBAAkBlB,cAAcC,EAAKgB,QAC1Czc,KAAKuf,iBAAiB9D,EAAKgB,UAOvBF,GAAAzc,UAAAuf,aAAR,SAAqB5D,WACnB,GAAMA,GAAQA,EAAKyD,aAAexX,YAChC+T,EAAKyD,YAAa,EACZzD,EAAK9D,cACT,IAA2B,IAAA6H,EAAAvS,EAAAwO,EAAK9D,UAAQ8H,EAAAD,EAAAva,QAAAwa,EAAAhf,KAAAgf,EAAAD,EAAAva,OAAE,CAArC,IAAMya,EAAYD,EAAAxf,MACrBD,KAAKqf,aAAaK,0GAM1BnD,GAAAzc,UAAA6f,aAAA,SAAalE,OACLmE,EAAsB,GAO5B,OANInE,EAAKyD,YACPU,EAAUtV,KAAK,cAEbmR,EAAKmE,WACPA,EAAUtV,KAAKmR,EAAKmE,WAEfA,GAGTrD,GAAAzc,UAAA+f,WAAA,SAAWpE,EAAYqE,GACrB9f,KAAK+f,mBAAmBtE,GAAMqE,SAAWA,GAG3CvD,GAAAzc,UAAAkgB,eAAA,SAAetc,EAAiC+X,GAC9CA,EAAKwE,gBAAkBvc,EAAMwc,OAAO9X,SAChCqT,EAAKwE,gBACPjgB,KAAKmgB,kBAAkBzf,KAAK+a,EAAKoB,IAEjC7c,KAAKogB,oBAAoB1f,KAAK+a,EAAKoB,KAIvCN,GAAAzc,UAAAigB,mBAAA,SACEtE,GAUA,OALIzb,KAAKqgB,gBAAgBC,IAAI7E,EAAKoB,IAChC7c,KAAKugB,sBAAsB9E,EAAMzb,KAAKqgB,gBAAgBG,IAAI/E,EAAKoB,IAAIiD,UAEnE9f,KAAKugB,sBAAsB9E,GAAM,GAE5Bzb,KAAKqgB,gBAAgBG,IAAI/E,EAAKoB,KAG/BN,GAAAzc,UAAAygB,sBAAR,SAA8B9E,EAAYqE,OAClC1J,EAAuC,IAAIjQ,MACjDsV,EAAKgF,QAAQ5Y,QAAO,SAAE6Y,GAChBA,EAAOT,iBACT7J,EAAM9L,KAAKoW,EAAO7D,UAGhBhW,EAGF,CAAEqE,YAAa,IAAI7J,EAAAA,YAAY+U,GAAQ0J,SAAQA,GACnD9f,KAAKqgB,gBAAgBM,IAAIlF,EAAKoB,GAAIhW,IAQpC0V,GAAAzc,UAAAwf,YAAA,SAAYzC,GAEV,QADM+D,EAAKpW,EAAexK,KAAK8E,WAAWhD,MACpB,EAAf8e,EAAMhc,QAAY,KACjBic,EAAaD,EAAME,QACzB,GAAID,EAAKhE,KAAOA,EACd,OAAOgE,EAEDA,EAAKlJ,UACTiJ,EAAMtW,KAAIyW,MAAVH,EAAKpW,EAASqW,EAAKlJ,WAIzB,OAAO,MAGT4E,GAAAzc,UAAAsf,oBAAA,SAAoB3D,GAApB,IAAAvY,EAAAlD,KACE,GAAMyb,GAAsB,EAAdA,EAAK7W,OACjB,IAOE,OANA6W,EAAOuF,EAAAA,QAAUvF,EAAI,SAAGwF,GAAY,OAAAA,EAAEC,YAAY,CAAC,SAC9CrZ,QAAO,SAAEC,GACNA,EAAQ6P,UAAuB,MAAX7P,IACxBA,EAAQ6P,SAAWzU,EAAKkc,oBAAoBtX,EAAQ6P,aAGjD8D,EACP,MAAOlR,GACP4W,QAAQC,IAAI7W,0BAvkBnB1J,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,WACVC,SAAA,++MAbOwZ,UACA6G,EAAAA,cAL0ErJ,EAAAA,6CAyChF9W,EAAAA,UAASJ,KAAA,CAAC,sBAiBVG,EAAAA,uBAKAE,EAAAA,uBAKAA,EAAAA,sBAMAA,EAAAA,+BACAA,EAAAA,8BACAA,EAAAA,6BACAA,EAAAA,2BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,kCACAA,EAAAA,oCACAA,EAAAA,6BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,0BAqMAmgB,EAAAA,aAAYxgB,KAAA,CAAC,iBAAkB,CAAC,cAkUnCyb,IAlkBE,SAAAA,GAAoBG,EAA8C6E,EAAwBC,GAExF,GAFkBxhB,KAAA0c,kBAAAA,EAA8C1c,KAAAuhB,OAAAA,EAAwBvhB,KAAAwhB,WAAAA,EAgBlFxhB,KAAAqgB,gBAMJ,IAAIoB,IAeEzhB,KAAA0hB,QAAyC,IAAIhgB,EAAAA,aAK7C1B,KAAAie,OAA6B,IAAIvc,EAAAA,aAMjC1B,KAAAme,MAA4B,IAAIzc,EAAAA,aAChC1B,KAAA2hB,eAAwC,IAAIjgB,EAAAA,aAC5C1B,KAAAif,cAAiD,IAAIvd,EAAAA,aACrD1B,KAAA8b,aAA8C,IAAIpa,EAAAA,aAClD1B,KAAAse,WAA4C,IAAI5c,EAAAA,aAChD1B,KAAAwe,eAAuD,IAAI9c,EAAAA,aAC3D1B,KAAAye,eAAuD,IAAI/c,EAAAA,aAC3D1B,KAAAmgB,kBAA0D,IAAIze,EAAAA,aAC9D1B,KAAAogB,oBAA4D,IAAI1e,EAAAA,aAChE1B,KAAA2d,aAAmC,IAAIjc,EAAAA,aACvC1B,KAAAyd,cAAoC,IAAI/b,EAAAA,aACxC1B,KAAA6d,gBAAsC,IAAInc,EAAAA,aAEpD1B,KAAA8c,YAAuC,IAAI8E,EAAAA,kBAAiB,SAAQnG,GAA4C,OAAAA,EAAK9D,WACrH3X,KAAA8E,WAA4C,IAAI+c,EAAAA,wBAEhD7hB,KAAAqd,eAAyB,EACzBrd,KAAAsd,YAAoB,KA/DZtd,KAAK8B,KAAM,KACTA,EAAa9B,KAAK8B,KACxB9B,KAAK8B,KAAO,KACZ9B,KAAK0P,YAAY5N,EAAK6V,eAEtB3X,KAAK8E,WAAWhD,KAAO,GACvB9B,KAAK8c,YAAYC,UAAY,GC9BnC,IAAA+E,IAUEA,GAAAhiB,UAAAiiB,cAAA,SAActB,GACZzgB,KAAK4G,iBAAiB3B,KAAKwb,yBAX9Bje,EAAAA,oDAcDsf,IANE,SAAAA,KALQ9hB,KAAA4G,iBACR,IAAIiV,EAAAA,gBAAoD,IAEjD7b,KAAAmS,YAA8DnS,KAAK4G,iBAAiBP,eCC7F,IAAA2b,IAuBEA,GAAAliB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KAEEA,KAAKiiB,mBAAmB5b,eACvB2S,KACCkJ,EAAAA,aAAa,KACbC,EAAAA,aAAa,MAEd1e,UAAS,WACRP,EAAKqF,SAAS7H,SAGZV,KAAK6E,UACP7E,KAAKoiB,0BAA0BjQ,YAAY1O,UAAS,SAAE3B,GACpDwX,WAAU,WACRpW,EAAKud,QAAU3e,EACfoB,EAAKmf,gBAAkBC,EAAAA,GAAkCpf,EAAKud,aAKpEzgB,KAAKqiB,gBAAkBriB,KAAKuiB,UAAUnX,aAAa4N,KACjDwJ,EAAAA,UAAU,IACVzO,EAAAA,IAAG,SAAEkN,GAAc,OAAA/d,EAAKuf,YAAYxB,KACpClN,EAAAA,IAAG,SAAE9T,GAAkB,OAAAiD,EAAKwf,QAAQziB,OAKxC+hB,GAAAliB,UAAA6iB,UAAA,SAAUjC,GACR,OAAOA,EAASA,EAAOkC,YAAclb,WAGvCsa,GAAAliB,UAAAmI,WAAA,WACE,OAAOjI,KAAKoiB,2BAKNJ,GAAAliB,UAAA2iB,YAAR,SAAoBxiB,GAElB,OADAA,EAAQA,EAAM4iB,QAAQ,yBAA0B,KAI1Cb,GAAAliB,UAAA4iB,QAAR,SAAgBziB,GACd,IAAI,EAAU,CACZ,GAAKD,KAAK6E,SAQR,OAAO7E,KAAKygB,YAPNqC,EAAwB7iB,EAAM8iB,cAAcjU,MAAM,KACxD,OAAO9O,KAAKygB,QAAQxJ,OAAM,SAAEyJ,OACtBjN,GAAc,EAElB,OADAqP,EAAYjb,QAAO,SAAEsM,GAAiB,OAAAV,EAAKA,GAAwD,GAAlDiN,EAAOkC,YAAYG,cAAcjW,QAAQqH,KACnFV,IACNtC,OAAO,EAAG,KAOZ6Q,GAAAliB,UAAAkjB,WAAP,SAAkBtf,GAChB1D,KAAKijB,cAAgBvf,EAAMgd,OAAOzgB,MAClCD,KAAKkjB,qBAAqBxiB,KAAKV,KAAKijB,cAAchjB,QAGpD+hB,GAAAliB,UAAAqjB,YAAA,WACEnjB,KAAKiiB,mBAAmBhd,6BAvF3BpE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,mBACVC,SAAA,yeAEAmI,UAAW,CAAC2Y,8DAXLA,0CAeN7gB,EAAAA,uBACAA,EAAAA,oCAGAE,EAAAA,yBACAA,EAAAA,yBACAF,EAAAA,SA2EH+gB,IArEE,SAAAA,GAAoBI,GAAApiB,KAAAoiB,0BAAAA,EAZXpiB,KAAAuiB,UAAyB,IAAIlhB,EAAAA,YAC7BrB,KAAAygB,QAA8C,IAAIta,MAGjDnG,KAAAkjB,qBAAwC,IAAIxhB,EAAAA,aAC5C1B,KAAAuI,SAA+B,IAAI7G,EAAAA,aACpC1B,KAAA6E,UAAoB,EAC7B7E,KAAAojB,WAAqB,EAGrBpjB,KAAAiiB,mBAAoC,IAAI/b,EAAAA,QC7B1C,IAAAmd,IAiDUA,GAAAvjB,UAAAwjB,0BAAR,WACQtjB,KAAKujB,cACPvjB,KAAKujB,aAAaC,OAClBxjB,KAAKujB,aAAaC,MAAMnjB,eAC5BL,KAAKujB,aAAaC,MAAMnjB,cACrBojB,oBAAoB,SAAUzjB,KAAKyU,WAIxC4O,GAAAvjB,UAAA4jB,YAAA,WACE1jB,KAAK2jB,QAAQ1e,OACbjF,KAAK2jB,QAAQC,WAEb5jB,KAAKsjB,6BAIPD,GAAAvjB,UAAA2U,SAAA,SAAS/Q,OAEDmgB,EAAcngB,EAAY,OAAYogB,aAAgBpgB,EAAY,OAAakR,UACjFiP,EAAK7jB,KAAK+jB,gBAEP/jB,KAAKgkB,mBAAqBtc,UAC7B1H,KAAKikB,cAAchf,KAAK,CAAEse,aAAcvjB,KAAKujB,aAAcW,YAAaxgB,IAEtB,IAAxB1D,KAAKgkB,iBAA0BtgB,EAAY,OAAaqR,aAAe,IACxErR,EAAY,OAAakR,UAAalR,EAAY,OAAaygB,cAItFnkB,KAAKikB,cAAchf,KAAK,CAAEse,aAAcvjB,KAAKujB,aAAcW,YAAaxgB,KAM9E1D,KAAK+jB,cAAgBF,GAAM,EAAI,EAAIA,wBAzEtCO,EAAAA,UAAStjB,KAAA,CAAC,CACTC,SAAU,gFAZHsjB,EAAAA,8DAmBNpjB,EAAAA,6BACAE,EAAAA,UAmEHkiB,IA/DE,SAAAA,GAAmBE,GAAnB,IAAArgB,EAAAlD,KAAmBA,KAAAujB,aAAAA,EALVvjB,KAAAgkB,iBAA2B,GAC1BhkB,KAAAikB,cAAwD,IAAIviB,EAAAA,aACtE1B,KAAA2jB,QAAyB,IAAIzd,EAAAA,QAC7BlG,KAAA+jB,cAAyB,EAGvB/jB,KAAKujB,aAAae,OAAOtL,KACvBC,EAAAA,IAAG,WAIDK,WAAU,WAERpW,EAAKogB,4BACCpgB,EAAKqgB,cACPrgB,EAAKqgB,aAAaC,OAClBtgB,EAAKqgB,aAAaC,MAAMnjB,eACxB6C,EAAKqgB,aAAaC,MAAMnjB,cACrBkkB,iBAAiB,SAAUrhB,EAAKuR,SAAS+P,KAAKthB,IAAO,OAIhEuhB,EAAAA,UAAUzkB,KAAK2jB,UAAUlgB,YAE3BzD,KAAKujB,aAAamB,OAAO1L,KACvBC,EAAAA,IAAG,WAAO,OAAA/V,EAAKogB,8BACfmB,EAAAA,UAAUzkB,KAAK2jB,UAAUlgB,YC9C/B,IAAAkhB,IA+B+BA,GAAA7kB,UAAA8kB,UAA3B,eACQC,EAAyB7kB,KAAK8kB,QAAQzkB,cAAc0kB,UAEpDF,GAAoB7kB,KAAKkC,UACxB2iB,EAAeG,gBAAkBhlB,KAAKkC,QAAQ+iB,WAAWD,gBAAkBhlB,KAAKklB,iBAAiBllB,KAAK8kB,QAAQzkB,iBACjHL,KAAKmlB,QAAQjjB,QAAUlC,KAAKkC,UAIhClC,KAAKmlB,QAAQ5b,UAAavJ,KAAKuJ,UAC/BvJ,KAAKmlB,QAAQ7b,UAAYtJ,KAAKsJ,WAIxBqb,GAAA7kB,UAAAolB,iBAAR,SAAyB9a,GACvB,OAAQA,EAAEgb,YAAchb,EAAEib,kCA3C/BjB,EAAAA,UAAStjB,KAAA,CAAC,CACPC,SAAU,eACVoI,UAAW,CAACmc,EAAAA,0DAJPA,EAAAA,kBADgCtN,EAAAA,gDAcpC/W,EAAAA,MAAKH,KAAA,CAAC,iCAKNG,EAAAA,yBAKAA,EAAAA,yBAOAqgB,EAAAA,aAAYxgB,KAAA,CAAC,gBAiBlB6jB,IArBI,SAAAA,GAAYQ,EAA6BL,GAAA9kB,KAAA8kB,QAAAA,EARhC9kB,KAAAsJ,UAAoB,IAKpBtJ,KAAAuJ,UAAoB,IAI3BvJ,KAAKmlB,QAAUA,EC5BrB,IAAAI,IAcEA,GAAAzlB,UAAA0lB,YAAA,WAEExlB,KAAKylB,SAAWzlB,KAAK0lB,KAEjB1lB,KAAK2lB,mBACP3lB,KAAK4lB,QAAU,WACf5lB,KAAK6lB,WAAa,WAIdN,GAAAzlB,UAAA6lB,eAAR,WACE,OAAOG,EAAAA,kBAAkB9lB,KAAK+lB,cAAgB/lB,KAAK0lB,KAAKM,SAASC,SAASC,gCAtB7E9B,EAAAA,UAAStjB,KAAA,CAAC,CACTC,SAAU,iFAQGa,EAAAA,OAAMd,KAAA,CAACqlB,EAAAA,oDALnBC,EAAAA,YAAWtlB,KAAA,CAAC,gCACZslB,EAAAA,YAAWtlB,KAAA,CAAC,iCACZslB,EAAAA,YAAWtlB,KAAA,CAAC,2BACZG,EAAAA,SAiBHskB,IAfE,SAAAA,GAAyCQ,GAAA/lB,KAAA+lB,WAAAA,EALhB/lB,KAAA4lB,QAAkB,GACf5lB,KAAA6lB,WAAqB,GACvB7lB,KAAAylB,SAAmB,GCT/C,IAAAY,IAMIA,GAAAvmB,UAAAwmB,UAAA,SAAUrmB,OAAe,IAAAa,EAAA,GAAAylB,EAAA,EAAAA,EAAA9b,UAAA7F,OAAA2hB,IAAAzlB,EAAAylB,EAAA,GAAA9b,UAAA8b,GACrB,MAAO,KAAOtmB,wBALrBumB,EAAAA,KAAI1lB,KAAA,CAAC,CACF+N,KAAM,mBAMVwX,IAPA,SAAAA,MCFA,IAAAI,yBAoDCC,EAAAA,SAAQ5lB,KAAA,CAAC,CACR6lB,aAAc,CACZ9mB,EACA8B,EACAkB,EACAuE,EACA2D,EACA0E,GACA8M,GACAlE,GACA2J,GACAqB,GACAsB,GACAY,GACAc,IAEFO,QAAS,CACPC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,oBAEAC,EAAAA,sBACAC,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,aACAC,EAAAA,iBACAb,EAAAA,gBACAc,EAAAA,iBACAL,EAAAA,cACAD,EAAAA,cACAO,EAAAA,kBACAJ,EAAAA,cACAK,EAAAA,cACAX,EAAAA,eACAC,EAAAA,gBACAW,EAAAA,eACAC,EAAAA,yBACAC,EAAAA,eACAC,EAAAA,mBACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,oBACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,eACAC,EAAAA,eAEFC,QAAS,CACPlpB,EACA8B,EACAkB,EACAuE,EACA2D,EACA0E,GACA8M,GACAlE,GACA2J,GACAqB,GACAsB,GACAY,GACAc,GACAY,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,aACAC,EAAAA,iBACAb,EAAAA,gBACAc,EAAAA,iBACAL,EAAAA,cACAD,EAAAA,cACAO,EAAAA,kBACAJ,EAAAA,cACAK,EAAAA,cACAX,EAAAA,eACAC,EAAAA,gBACAW,EAAAA,eACAC,EAAAA,yBACAC,EAAAA,eACAC,EAAAA,mBACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,oBACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,eACAC,EAAAA,eAEF3f,UAAW,CAAC1C,EAAoB+T,QAEJiM,IAhH9B,SAAAA,gGCnDIuC,KAAO,OACPrmB,MAAQ,QACRsmB,KAAO","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() inputFormControl: FormControl = new FormControl('', Validators.required);\r\n  @Input() requiredMessage: string = 'El campo es requerido';\r\n  @Input() value: string = '';\r\n  @Input() isFocused: boolean = false;\r\n  @ViewChild('inputText') nameField: ElementRef;\r\n\r\n  @Output() done: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() cancel: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.value !== '') {\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n    this.nameField.nativeElement.focus();\r\n  }\r\n\r\n\r\n  onDone(): void {\r\n    if (this.inputFormControl.valid) {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\n\r\n// @dynamic\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: {type: ToastType, message: string, subMessages?: string[]}) { }\r\n\r\n  ngOnInit(): void {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds: number = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type: ToastType, message: string, subMessages?: string[]): void {\r\n    subMessages = subMessages ? subMessages : [];\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message, type, subMessages},\r\n      duration: this.durationInSeconds * 1000\r\n    });\r\n  }\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = 'ERROR',\r\n    CONFIRMATION = 'CONFIRMATION'\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\ninterface AlertHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  type: AlertHelisaType;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: string;\r\n  hasCancel: boolean;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertHelisaProperties\r\n  ) {\r\n    this.content = data.content;\r\n    this.title = data.title;\r\n    this.hasCancel = data.type === AlertHelisaType.CONFIRMATION;\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type: AlertHelisaType, title: string, content: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertHelisaComponent> = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, type }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport {ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency} from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable<T> {\r\n  columns: Array<ColumnConfig>;\r\n  isRemote: boolean;\r\n  dataSource?: Array<T>;\r\n  count?: number;\r\n  order?: number;\r\n  showTitle?: boolean;\r\n  indexRowSelect?: number;\r\n  isDragged?: boolean;\r\n  addRowButton?: AddRowButton;\r\n  configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\r\n  isCellSelection?: boolean;\r\n  addBookButton?: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class DependencyTableHelisaService<T> {\r\n\r\n\r\n  tables: Subject<ConfigTable<T>[]> = new Subject();\r\n  infoTables: Array<ConfigTable<T>> = new Array();\r\n\r\n  private emitVisibilityButton$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitVisibilityButton: Observable<EventDependency<boolean>> = this.emitVisibilityButton$.asObservable();\r\n\r\n  private emitVisibilityAllButtons$: Subject<boolean> = new Subject<boolean>();\r\n  emitVisibilityAllButtons: Observable<boolean> = this.emitVisibilityAllButtons$.asObservable();\r\n\r\n  private emitIsCellSelection$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitIsCellSelection: Observable<EventDependency<boolean>> = this.emitIsCellSelection$.asObservable();\r\n\r\n  private emitChangeColumns$: Subject<EventDependency<ColumnConfig[]>> = new Subject<EventDependency<ColumnConfig[]>>();\r\n  emitChangeColumns: Observable<EventDependency<ColumnConfig[]>> = this.emitChangeColumns$.asObservable();\r\n\r\n  emitTotal: Subject<EventDependency<TotalTableHelisa>> = new Subject<EventDependency<TotalTableHelisa>>();\r\n  emitNextPage: Subject<EventDependency<T[]>> = new Subject<EventDependency<T[]>>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable<T>[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable<T>, withRemoveDependency: boolean = false): void {\r\n    if (withRemoveDependency) {\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if (configTable.isRemote) {\r\n      configTable.dataSource = null;\r\n      if (configTable.count === null) {\r\n        throw new Error('hace falta el count');\r\n      }\r\n    } else {\r\n      if (configTable.dataSource === null) {\r\n        throw new Error('hace falta el dataSource');\r\n      }\r\n      configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  setTotal(event: EventDependency<TotalTableHelisa>): void {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  addPage(event: EventDependency<T[]>): void {\r\n    this.emitNextPage.next(event);\r\n  }\r\n\r\n  selectIndexRow(config: ConfigTable<T>): void {\r\n    if (this.infoTables[config.order]) {\r\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\r\n      this.tables.next(this.infoTables);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Muestra o esconde el boton una tabla en especifico\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeVisibilityButton(event: EventDependency<boolean>): void {\r\n    this.emitVisibilityButton$.next(event);\r\n  }\r\n\r\n\r\n  /**\r\n   * Esconde los botones de todas las tablas\r\n   * @param show indicar si se muestran o no todos los botones de las tablas\r\n   */\r\n  changeVisibilityAllButtons(show: boolean): void {\r\n    this.emitVisibilityAllButtons$.next(show);\r\n  }\r\n\r\n  /**\r\n   * Para habilitar el manejo de selecciÃ³n de celda\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeisCellSelection(event: EventDependency<boolean>): void {\r\n    this.emitIsCellSelection$.next(event);\r\n  }\r\n\r\n   /**\r\n    * Para habilitar el cambio de columnas\r\n    * @param event para indicar el index de la tabla y en \"data\" columnas\r\n    */\r\n  changeColumnsByTable( event: EventDependency<ColumnConfig[]>): void {\r\n    this.emitChangeColumns$.next(event);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\nimport {TotalTableHelisa} from './table-helisa.interface';\r\nimport {TableHelisaComponent} from './table-helisa.component';\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: {} | TableHelisaComponent<T>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource: Subject<TableHelisaServiceInfo<TotalTableHelisa>> = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage: Subject<TableHelisaServiceInfo<T[]>> = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn: Observable<TableHelisaServiceInfo<TotalTableHelisa>> = this.emitChangeSource.asObservable();\r\n  nextPageReturn: Observable<TableHelisaServiceInfo<T[]>> = this.emitNextPage.asObservable();\r\n\r\n  private emitVisibleButton$: Subject<boolean> = new Subject<boolean>();\r\n  /**\r\n   * Observable para saber si se debe mostrar o esconder el boton de add row\r\n   */\r\n  emitVisibleButton: Observable<boolean> = this.emitVisibleButton$.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<TotalTableHelisa>): void {\r\n    this.emitChangeSource.next({obj: total, table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>): void {\r\n    this.emitNextPage.next({obj: page, table});\r\n  }\r\n\r\n  /**\r\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\r\n   * @param change indicar si se muestra o no el boton de add row de la tabla\r\n   */\r\n  changeVisibilityButton(change: boolean): void {\r\n    this.emitVisibleButton$.next(change);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input } from '@angular/core';\r\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\r\nimport { ColumnConfig, RequestTableHelisa, SelectObject, TotalTableHelisa } from '../table-helisa/table-helisa.interface';\r\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\r\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency<T> {\r\n  index: number;\r\n  data: T;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [DependencyTableHelisaService]\r\n})\r\nexport class DependencyTableHelisaComponent<T> implements OnInit {\r\n\r\n  tables: Array<ConfigTable<T>> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<T>>;\r\n  @Input() showToolTip: boolean = true;\r\n\r\n  /**\r\n   * deprecated, use selectObject\r\n   */\r\n  @Output() selected: EventEmitter<EventDependency<T>> = new EventEmitter<EventDependency<T>>();\r\n  @Output() selectObject: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}  | T>>();\r\n  @Output() nextPage: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() total: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() sort: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() drop: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() selectCell: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() bookClicked: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  selectedObject: EventDependency<{}> = null;\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService<T>, private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      (event: EventDependency<T[]>) => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n\r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      (event: EventDependency<TotalTableHelisa>) => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder el boton de una tabla\r\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\r\n      (data: EventDependency<boolean>) => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (!!table) {\r\n            table.addRowButton.showButton = data.data;\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder los botones de todas las tablas\r\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\r\n      (data: boolean) => {\r\n        if (data !== undefined && data != null) {\r\n          this.tables.forEach((element: ConfigTable<T>) => {\r\n            if (!!element.addRowButton) {\r\n              element.addRowButton.showButton = data;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para manejo de selecciÃ³n de celdas\r\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\r\n      (data: EventDependency<boolean>) => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.isCellSelection = data.data;\r\n          }\r\n        }\r\n      });\r\n\r\n    // Observable para manejo de columnas\r\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\r\n      (data: EventDependency<ColumnConfig[]>) => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.columns = data.data;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService(): DependencyTableHelisaService<T> {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables(): void {\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe((tables: ConfigTable<T>[]) => {\r\n        this.tables = tables;\r\n      }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: SelectObject<T>): void {\r\n    this.selectedObject = { index, data: event };\r\n    this.selected.emit({ index, data: event.value });\r\n    this.selectObject.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa<T>): void {\r\n    this.nextPage.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: EventDependency<T>): void {\r\n    this.total.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: EventDependency<T>): void {\r\n    this.sort.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onDrop(index: number, event: EventDependency<T>): void {\r\n    this.drop.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe aÃ±adir una nueva fila\r\n   * @param index indica el indice de la tabla de la cual se dispara el evento\r\n   */\r\n  onAddRow(index: number): void {\r\n    this.addRow.emit(index);\r\n  }\r\n\r\n  selectedCell(index: number, event: EventDependency<T>): void {\r\n    if (this.tables[index].isCellSelection) {\r\n      this.selectCell.emit({ index, data: event });\r\n    }\r\n  }\r\n\r\n  onBookClicked(index: number, event: EventDependency<T>): void {\r\n    this.bookClicked.emit({ index, data: event });\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nexport enum InputHelisaType {\r\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit {\r\n\r\n  private readonly DECIMAL_SEPARATOR: string = '.';\r\n  private readonly THOUSAND_SEPARATOR: string = ',';\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n\r\n  /** Activar o desactivar el autocompletado\r\n   * (Caracteristica de los navegadores para campos comunes como\r\n   * Direccion , Usuario, Password ... etc)\r\n   */\r\n  @Input() autocompleteMode: boolean = false;\r\n\r\n  // Mostrar o no el icono de buscar\r\n  @Input() isSearch: boolean = false;\r\n  // @Input() inputFormControl: FormControl = new FormControl('');\r\n  @Input() isFocused: boolean = false;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Input() disabled: boolean = false;\r\n  @Input() type: InputHelisaType = InputHelisaType.DEFAULT;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  @Output() blur: EventEmitter<any> = new EventEmitter();\r\n\r\n  formControlMask: FormControl = new FormControl('');\r\n  private realValue: string = '';\r\n  private inputFormReal: FormControl = new FormControl('');\r\n\r\n  @ViewChild('inputText') nameInput: ElementRef;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  @Input()\r\n  set inputFormControl(formControl: FormControl) {\r\n    this.inputFormReal = formControl;\r\n    this.inputFormReal.valueChanges.subscribe((data: string) => {\r\n      this.statusChange(this.inputFormReal.status);\r\n      if (this.getMaskedValue(data) !== this.formControlMask.value) {\r\n        this.change(data);\r\n      }\r\n    });\r\n    this.formControlMask.setValidators(this.inputFormReal.validator);\r\n    this.change(this.inputFormReal.value);\r\n\r\n    // disable control\r\n    if (formControl.disabled) {\r\n      this.formControlMask.disable({ onlySelf: true });\r\n    }\r\n\r\n\r\n    this.inputFormReal.statusChanges.subscribe(\r\n      (data: string) => {\r\n        this.statusChange(data);\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  private statusChange(data: string): void {\r\n    if (data === 'INVALID') {\r\n      this.formControlMask.setErrors({ key: 'Error de validaciÃ³n.' });\r\n    } else {\r\n      this.formControlMask.setErrors(null);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.isFocused) {\r\n      this.nameInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  search(): void {\r\n    this.setValue.emit(this.realValue);\r\n  }\r\n\r\n  change(event: string): void {\r\n    if (event != null) { event = event + ''; }\r\n    let position: number = this.nameInput.nativeElement.selectionStart;\r\n    const length: number = event ? event.length : 0;\r\n    this.realValue = this.getRealValue(event);\r\n    if (this.getMaskedValue(this.realValue) !== this.formControlMask.value) {\r\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue));\r\n      position += this.nameInput.nativeElement.value.length - length;\r\n      this.nameInput.nativeElement.selectionStart = position;\r\n      this.nameInput.nativeElement.selectionEnd = position;\r\n    }\r\n    this.inputFormReal.setValue(this.realValue);\r\n  }\r\n\r\n  private getMaskedValue(str: string): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    if (this.type === InputHelisaType.DEFAULT) {\r\n      return str;\r\n    }\r\n    let maskedStr: string = '';\r\n    if (this.type === InputHelisaType.IDENTITY) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i-- , j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.NUMERIC) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i-- , j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.DOUBLE) {\r\n      if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {\r\n        for (let i: number = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {\r\n          maskedStr += str[i];\r\n        }\r\n      }\r\n      for (let i: number = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1,\r\n           j: number = 0; i >= 0; i-- , j++) {\r\n\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    return maskedStr;\r\n  }\r\n\r\n  private getRealValue(str: string): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    let realStr: string = '';\r\n    if (this.type === InputHelisaType.DEFAULT) {\r\n      return str;\r\n    }\r\n    if (this.type ===  InputHelisaType.IDENTITY) {\r\n      for (const strItem of str) {\r\n        if (strItem.match('[a-zA-Z0-9]')) {\r\n          realStr += strItem;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.NUMERIC) {\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]')) {\r\n          realStr += strItem;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.DOUBLE) {\r\n      let haveDot: boolean = false;\r\n\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {\r\n          realStr += strItem;\r\n        }\r\n        haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);\r\n      }\r\n    }\r\n    return realStr;\r\n  }\r\n}\r\n","import {SortDirection} from '@angular/material';\r\nimport { RowData } from './table-helisa.component';\r\n\r\nexport enum ColumnType {\r\n  NORMAL, URL\r\n}\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title?: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n  subtitle?: string;\r\n  colspanTitle?: number;\r\n  colspanSubtitle?: number;\r\n  columnStyle?: string;\r\n  columnType?: ColumnType;\r\n}\r\n\r\nexport interface AddRowButton {\r\n  text: string;\r\n  showButton: boolean;\r\n}\r\n\r\nexport enum EventScope {\r\n  USER, CODE_CALL\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa<T> {\r\n  page: number;\r\n  body: {} | T;\r\n}\r\n\r\nexport interface DropElement<T> {\r\n value: T;\r\n order: number;\r\n}\r\n\r\nexport interface SelectObject<T> {\r\n  value: T;\r\n  scope: EventScope;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n\r\nexport interface Cell<T> {\r\n  column: ColumnConfig;\r\n  row: RowData<T> | T;\r\n }\r\n\r\nexport interface ConfigCellStyles<T> {\r\n   cellData: T;\r\n   classCell: string;\r\n }\r\n\r\nexport interface ConfigRowStyles<T> {\r\n  column: ColumnConfig;\r\n  data: {} | T;\r\n  classRow: string;\r\n}\r\n\r\n// @dynamic\r\nexport class ColumnConfigUtil<T> {\r\n\r\n  getValue(obj: T, column: ColumnConfig): T | number | string {\r\n    return column.name.split('.').reduce((o: T, field: string) => o && o[field], obj);\r\n  }\r\n}\r\n\r\n","import {ColumnConfig} from './table-helisa.interface';\r\nimport {Observable} from 'rxjs';\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): {} {\r\n    return {};\r\n  }\r\n\r\n  nextPage(): number {\r\n    return this.page++;\r\n  }\r\n}\r\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef } from '@angular/core';\r\nimport { MatSort, MatTable, MatTableDataSource } from '@angular/material';\r\nimport { Sort } from '@angular/material/typings/sort';\r\n\r\nimport {\r\n  AddRowButton,\r\n  Cell,\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  ConfigCellStyles,\r\n  ConfigRowStyles,\r\n  DropElement,\r\n  EventColumn,\r\n  EventScope,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  SelectObject,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType,\r\n  ColumnType,\r\n  TotalTableHelisa\r\n} from './table-helisa.interface';\r\nimport { TableHelisaService, TableHelisaServiceInfo } from './table-helisa.service';\r\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { of } from 'rxjs';\r\n\r\nexport interface RowData<T> {\r\n  data: {} | T;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData<T>>;\r\n  displayedColumns: string[] = [];\r\n  displayedColumnsWithTitle: string[] = [];\r\n  displayedColumnsWithSubtitle: string[] = [];\r\n  displayedColumnsWithFooter: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n  indexRowSelect: number;\r\n  private scrollCount: number = 0;\r\n  hasSubtitle: boolean = false;\r\n  private indexRowStartDrag: number = -1;\r\n  private lastIndexRowDrag: number = -1;\r\n  private dataBeforeDrag: { data: RowData<T>[] } = null;\r\n  private dataSource$: Array<T> = [];\r\n  private scrollX: number = 0;\r\n  private scrollY: number = 0;\r\n\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n  @ViewChild(MatTable) matTable: MatTable<T>;\r\n  @ViewChild(MatTable, { read: ElementRef }) matTableElement: ElementRef;\r\n  @ViewChild('containerTable') containerTable: ElementRef;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n\r\n  /**\r\n   * Deprecado, cambiar por electObject\r\n   */\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() selectCell: EventEmitter<Cell<T>> = new EventEmitter<Cell<T>>();\r\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa<T>> = new EventEmitter<RequestTableHelisa<T>>();\r\n  @Input() showTitle: boolean = true;\r\n  @Input() isCellSelection: boolean = false;\r\n  @Input() count: number;\r\n  @Input() configCellStyles: Array<ConfigCellStyles<T>>;\r\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\r\n  @Input() selectedCells: Cell<T>;\r\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\r\n  @Input() isDragged: boolean = false;\r\n  @Input() addRowButton: AddRowButton = { showButton: false, text: '' };\r\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\r\n  @Input() addBookButton: boolean = false;\r\n  @Input() showToolTip: boolean = true;\r\n  showFooter: boolean = false;\r\n  showSearch: boolean = false;\r\n\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.tableService.nextPageReturn.subscribe(\r\n      (data: TableHelisaServiceInfo<T[]>) => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe((info: TableHelisaServiceInfo<TotalTableHelisa>) => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column: ColumnConfig, idx: number) => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort) => {\r\n        const column: ColumnConfig = this.columnConfig.find((c: ColumnConfig) => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\r\n      }\r\n    );\r\n\r\n    this.tableService.emitVisibleButton.subscribe(\r\n      (data: boolean) => {\r\n        if (data !== undefined && data != null) {\r\n          this.addRowButton.showButton = data;\r\n        }\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.isCellSelection) {\r\n      this.matTable.renderRows();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.goNextPage();\r\n    } else {\r\n      this.tableHelisaConnectComponent.page++;\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.hasSubtitle = false;\r\n    this.columnConfig = columnConfiguration;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n\r\n    if (columnConfiguration) {\r\n      if (this.addBookButton) {\r\n        const columnCount: number = columnConfiguration.length;\r\n        let countSubtitle: number = 0;\r\n        let showBookButton: boolean = false;\r\n        columnConfiguration.forEach((column: ColumnConfig) => {\r\n          if (!!column.subtitle) {\r\n            countSubtitle = countSubtitle + 1;\r\n          }\r\n          if ((!showBookButton) && (column.name === 'bookButton')) {\r\n            showBookButton = true;\r\n          }\r\n        });\r\n        const subtitleTemp: boolean = columnCount === countSubtitle;\r\n        if (!showBookButton) {\r\n          columnConfiguration.push({\r\n            name: 'bookButton',\r\n            title: '',\r\n            subtitle: subtitleTemp ? '' : undefined ,\r\n            visible: true\r\n          });\r\n        }\r\n      }\r\n\r\n      columnConfiguration.forEach((column: ColumnConfig) => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n        if (!this.hasSubtitle) {\r\n          this.hasSubtitle = column.subtitle !== undefined;\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\r\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\r\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\r\n    this.getColumnsWithTitle().forEach((col: string) => this.displayedColumnsWithTitle.push(col));\r\n    this.getHeaderSubtitle().forEach((col: string) => this.displayedColumnsWithSubtitle.push(col));\r\n    this.footerDisplayedColumns().forEach((col: string) => this.displayedColumnsWithFooter.push(col));\r\n  }\r\n\r\n\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<T>) {\r\n    this.dataSource$ = dataSource;\r\n    this.rawData = dataSource;\r\n    if (this.rawData) { this.prepareDataSource(); }\r\n  }\r\n\r\n  get dataSource(): Array<T> {\r\n    return this.dataSource$;\r\n  }\r\n\r\n  @Input()\r\n  set selectedIndexRow(idRowSelected: number) {\r\n    this.indexRowSelect = idRowSelected;\r\n    if (this.rawData && this.rawData.length) {\r\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private prepareDataSource(): void {\r\n    const changeData: Array<RowData<T>> = Array<RowData<T>>();\r\n    let haveGroup: boolean = false;\r\n    let groupFooter: Array<TotalGroup>;\r\n    this.columnConfig.forEach((column: ColumnConfig) => {\r\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n        this.totalData = new Array<number>(this.columnConfig.length);\r\n        this.showFooter = true;\r\n        this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\r\n      }\r\n      this.showSearch = this.showSearch || column.searchable;\r\n      haveGroup = haveGroup || column.groupable;\r\n    });\r\n    if (haveGroup) {\r\n      this.rawData = this.rawData.sort((a: T, b: T) => {\r\n        let result: number = 0;\r\n        this.columnConfig.forEach((column: ColumnConfig) => {\r\n          if (result === 0) {\r\n            result = this.compare(a, b);\r\n          }\r\n        });\r\n        return result;\r\n      });\r\n    }\r\n    this.rawData.forEach((row: T) => {\r\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data as T, row) !== 0)) {\r\n        if (groupFooter) {\r\n          changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\r\n        }\r\n        changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\r\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n      }\r\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\r\n      changeData.push({ data: row, rowType: RowType.ROW });\r\n    });\r\n    this.data = new MatTableDataSource<RowData<T>>(changeData);\r\n    if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\r\n      if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: T): void {\r\n    this.columnConfig.forEach((column: ColumnConfig, index: number) => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = { sum: (new ColumnConfigUtil().getValue(row, column) as number), count: 1 };\r\n        } else {\r\n          rowTotal[index].sum += (new ColumnConfigUtil().getValue(row, column) as number);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: T, b: T): number {\r\n    let ws: number = 0;\r\n    this.columnConfig.forEach((column: ColumnConfig) => {\r\n      if (ws === 0 && column.groupable) {\r\n        if ((new ColumnConfigUtil().getValue(a, column) as number) < (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = -1;\r\n        } else if ((new ColumnConfigUtil().getValue(a, column) as number) > (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = 1;\r\n        }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: T): string {\r\n    let result: string = '';\r\n    this.columnConfig.forEach((column: ColumnConfig) => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + (new ColumnConfigUtil().getValue(obj, column));\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map((name: string) => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: T, column: ColumnConfig): T {\r\n    return new ColumnConfigUtil().getValue(obj, column) as T;\r\n  }\r\n\r\n  getValueTooltip(obj: T, column: ColumnConfig): string {\r\n    if (this.showToolTip) {\r\n      return new ColumnConfigUtil().getValue(obj, column) as string;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  searchText(text: string): void {\r\n    this.lastSearch = text;\r\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\r\n  }\r\n\r\n  selectRow(row: RowData<T>, isUser: boolean, column?: ColumnConfig): void {\r\n    if (row === undefined || row === null) {\r\n      return;\r\n    }\r\n    if ((column === undefined || column === null) || (!!column && column.name !== 'bookButton')) {\r\n      this.selectedObject = row.data as T;\r\n      this.select.emit(this.selectedObject);\r\n      this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n    } else if (!!column && column.name === 'bookButton') {\r\n      if (this.selectedObject !== row.data) {\r\n        this.selectedObject = row.data as T;\r\n        this.select.emit(this.selectedObject);\r\n        this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n      }\r\n      this.bookClicked.emit(this.selectedObject);\r\n    }\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n    let isScrollY: boolean;\r\n\r\n    if (this.scrollY !== element.scrollTop) {\r\n      isScrollY = true;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if (this.scrollX !== element.scrollLeft) {\r\n      isScrollY = false;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if ((element.scrollHeight - element.scrollTop < 1000) && isScrollY) {\r\n      this.goNextPage();\r\n    }\r\n\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]): void {\r\n    if (!this.rawData) {\r\n      this.rawData = new Array<T>();\r\n    }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n    this.tableHelisaConnectComponent.isUsed = false;\r\n  }\r\n\r\n  dblClickCell(): void {\r\n    this.selectCell.emit(this.selectedCells as Cell<T>);\r\n  }\r\n\r\n  selectedCell(element: RowData<T>, column: ColumnConfig): void {\r\n    this.selectRow(element, true, column);\r\n\r\n    this.selectedCells = { column, row: element };\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean {\r\n    if (this.isCellSelection) {\r\n      if (this.selectedCells != null) {\r\n        if (this.selectedCells.column.name === column.name &&\r\n          (this.selectedCells.row as RowData<T>).data === row.data) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getClassToCell(row: T, column: ColumnConfig): string[] {\r\n    const classToCell: Array<string> = new Array<string>();\r\n    if (this.configCellStyles) {\r\n      const found: ConfigCellStyles<T> = this.configCellStyles.find((c: ConfigCellStyles<T>) => {\r\n        return c.cellData === this.getValue(row, column);\r\n      });\r\n      if (found) {\r\n        classToCell.push(found.classCell);\r\n      }\r\n    }\r\n    if (column.columnStyle) {\r\n      classToCell.push(column.columnStyle);\r\n    }\r\n    return classToCell;\r\n  }\r\n\r\n  getClassToRow(row: T): string[] {\r\n    const classToRow: Array<string> = new Array<string>();\r\n    if (row === this.selectedObject && !this.isCellSelection) {\r\n      classToRow.push('');\r\n    }\r\n    if (this.configRowStylesFromColumn) {\r\n      const found: ConfigRowStyles<T> = this.configRowStylesFromColumn.find((c: ConfigRowStyles<T>) => {\r\n        return c.data === this.getValue(row, c.column);\r\n      });\r\n      if (found) {\r\n        classToRow.push(found.classRow);\r\n      }\r\n    }\r\n    return classToRow;\r\n  }\r\n\r\n  onDrop(event: MouseEvent): void {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      const array: RowData<T>[] = this.dataBeforeDrag.data;\r\n      const rawData: T[] = this.rawData;\r\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\r\n      this.drop.emit({ value: array[rowIndex].data as T, order: rowIndex });\r\n      this.rawData = rawData;\r\n      this.data = new MatTableDataSource(array);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  tableKeydown(event: KeyboardEvent): void {\r\n    if (!this.isCellSelection) {\r\n      let currentIndex: number = this.data.data.findIndex((row: RowData<T>) => row.data === this.selectedObject);\r\n      let newSelection: number = -10;\r\n      if (event.key === 'ArrowDown') {\r\n        this.scrollCount++;\r\n        this.data.data.forEach((row: RowData<T>, index: number) => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n      }\r\n      if (event.key === 'ArrowUp') {\r\n        this.scrollCount--;\r\n        currentIndex = this.data.data.length - currentIndex - 1;\r\n        this.data.data.reverse().forEach((row: RowData<T>, index: number) => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n        this.data.data.reverse();\r\n        if (newSelection !== -10) {\r\n          newSelection = this.data.data.length - newSelection - 1;\r\n        }\r\n      }\r\n      if (newSelection !== -10) {\r\n        this.selectRow(this.data.data[newSelection], true);\r\n      }\r\n      if (Math.abs(this.scrollCount) >= 2) {\r\n        this.scrollCount = 0;\r\n      } else {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emite el evento cuando se da click al boton AddRow\r\n   */\r\n  onAddRow(): void {\r\n    this.addRow.emit();\r\n  }\r\n\r\n\r\n  getHeaderSubtitle(): string[] {\r\n    const x: string[] = this.columnConfig.map((column: ColumnConfig, index: number) => {\r\n      if (column.visible && column.subtitle !== undefined) {\r\n        return 'subtitle' + index;\r\n      } else {\r\n        return null;\r\n      }\r\n    }).filter((data: string) => data != null);\r\n    return x;\r\n  }\r\n\r\n  getColumnsWithTitle(): string[] {\r\n    return this.columnConfig.filter((column: ColumnConfig) =>\r\n      column.visible && column.title !== undefined\r\n    ).map((col: ColumnConfig) => col.name);\r\n  }\r\n\r\n  dragger(event: MouseEvent): boolean {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      if (rowIndex !== this.lastIndexRowDrag) {\r\n        this.lastIndexRowDrag = rowIndex;\r\n        // This can have a memory problem with big data\r\n        const array: RowData<T>[] = [...this.dataBeforeDrag.data];\r\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n        this.data = new MatTableDataSource(array);\r\n      }\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  startDrag(event: MouseEvent): void {\r\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\r\n    this.lastIndexRowDrag = this.indexRowStartDrag;\r\n    this.dataBeforeDrag = this.data;\r\n  }\r\n\r\n  private getRowIndex(pageY: number): number {\r\n    let offsetTop: number = 0;\r\n    let container: HTMLElement = this.containerTable.nativeElement;\r\n    while ((container !== null) && (offsetTop === 0)) {\r\n      offsetTop = container.offsetTop;\r\n      container = container.parentElement;\r\n    }\r\n    let rowIndex: number = -1;\r\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\r\n    for (let i: number = 0; i < rows.length; i++) {\r\n      const row: HTMLElement = (rows[i] as HTMLElement);\r\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop) {\r\n        rowIndex = i;\r\n      }\r\n    }\r\n    if (rowIndex < 0) { rowIndex = 0; }\r\n    return rowIndex;\r\n  }\r\n\r\n  get columnType(): typeof ColumnType {\r\n    return ColumnType;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport * as moment_ from 'moment';\r\nconst moment: typeof moment_ = moment_;\r\n\r\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material';\r\nimport { filter, tap } from 'rxjs/operators';\r\n\r\n\r\nexport enum TypeCalendarEnum {\r\n  NORMAL = 'norma',\r\n  MONTH_YEAR = 'mounth-year'\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css'],\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n\r\n\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n  private date: Date = new Date();\r\n\r\n  /**\r\n   * Formato de fecha.\r\n   * Los formatos validos son aquellos que maneja la libreria momentjs\r\n   * https://momentjs.com/docs/#/parsing/string-format/\r\n   */\r\n  @Input() dateFormat: string = 'DD/MM/YYYY';\r\n  @Input() errorMessage: string = 'La fecha no concuerda con el formato ';\r\n  @Input() placeholder: string = this.dateFormat;\r\n\r\n  /**\r\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\r\n   * serÃ¡ tomado en cuenta\r\n   */\r\n  @Input() typeCalendar: TypeCalendarEnum = TypeCalendarEnum.NORMAL;\r\n\r\n\r\n  dateToVisualize: FormControl;\r\n\r\n  /**\r\n   * Para evitar nuevos eventos miestras se realiza el parseo\r\n   */\r\n  private isFromInputEvent: boolean = false;\r\n\r\n  /**\r\n   * Verificar si el formato es valido\r\n   */\r\n  invalidFormat: boolean = false;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.dateToVisualize = new FormControl('', this.dateFormControl.validator);\r\n    this.formHandler();\r\n\r\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n      this.dateFormat = 'MM/YYYY';\r\n      this.placeholder = this.dateFormat;\r\n    }\r\n\r\n    /**\r\n     * establecer valor por defecto de la fecha\r\n     */\r\n    const incommingDate: string = moment(this.dateFormControl.value, this.dateFormat).format(this.dateFormat);\r\n    if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\r\n      this.dateToVisualize.setValue(incommingDate);\r\n    }\r\n\r\n  }\r\n\r\n  get typeCalendarEnum(): typeof TypeCalendarEnum {\r\n    return TypeCalendarEnum;\r\n  }\r\n\r\n  /**\r\n   * Determina como se debe inicializar la visualizacion del calendar\r\n   */\r\n  getStartView(): string {\r\n    // multi-year\r\n    if (this.typeCalendar === this.typeCalendarEnum.MONTH_YEAR) {\r\n      return 'multi-year';\r\n    } else {\r\n      return 'month';\r\n    }\r\n  }\r\n\r\n  private formHandler(): void {\r\n    this.dateToVisualize.valueChanges\r\n      .pipe(\r\n        tap((date: string) => {\r\n          if (date.length > this.dateFormat.length) {\r\n            this.invalidFormat = true;\r\n          } else {\r\n            this.invalidFormat = false;\r\n          }\r\n        }),\r\n        filter((date: string) => date.length === this.dateFormat.length)\r\n      )\r\n      .subscribe((date: string) => {\r\n        this.invalidFormat = false;\r\n        const isValid: boolean = moment(date, this.dateFormat, true).isValid();\r\n        const result: string = moment(date, this.dateFormat).format('YYYY-MM-DD');\r\n\r\n        if (!!result && (result === 'Invalid date' || !isValid)) {\r\n          this.invalidFormat = true;\r\n          return;\r\n        }\r\n\r\n        if (!!result) {\r\n          if (!this.isFromInputEvent) {\r\n            this.isFromInputEvent = true;\r\n            const subString: string[] = result.split('-');\r\n\r\n            const year: number = parseFloat(subString[0]);\r\n            const month: number = parseFloat(subString[1]);\r\n            const day: number = parseFloat(subString[2]);\r\n\r\n            this.date.setFullYear(year);\r\n            this.date.setDate(day);\r\n            this.date.setMonth(month - 1); // -1 por que los meses se toman como los indices en un array\r\n\r\n            /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\r\n            if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n              this.date = moment(this.date).endOf('month').toDate();\r\n            }\r\n\r\n            this.dateToVisualize.setValue(moment(this.date, 'YYYY-MM-DD').format(this.dateFormat));\r\n            this.dateFormControl.setValue(this.date);\r\n\r\n            this.isFromInputEvent = false;\r\n          } else {\r\n            setTimeout(() => {\r\n              this.isFromInputEvent = false;\r\n            }, 1500);\r\n          }\r\n\r\n        }\r\n      });\r\n\r\n\r\n    this.dateFormControl.valueChanges\r\n      .subscribe((date: string) => {\r\n        const incommingDate: string = moment(date, this.dateFormat).format(this.dateFormat);\r\n        if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\r\n          this.dateToVisualize.setValue(incommingDate);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Evento que se dispara luego seleccionar un mes\r\n   */\r\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void {\r\n\r\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n      datepicker.close();\r\n      const date: Date = moment(chosenMonthDate).endOf('month').toDate();\r\n\r\n      this.dateToVisualize.setValue(moment(date, 'YYYY-MM-DD').format(this.dateFormat));\r\n      this.dateFormControl.setValue(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evento desde el control touch del calendar\r\n   */\r\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>): void {\r\n\r\n    this.dateToVisualize.setValue(moment(event.value, 'YYYY-MM-DD').format(this.dateFormat));\r\n    this.dateFormControl.setValue(event.value);\r\n  }\r\n\r\n  getErrorMessage(): string {\r\n    return this.errorMessage + this.dateFormat;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Subscriber, Observable } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected: BehaviorSubject<number | string> = new BehaviorSubject<number | string>(1);\r\n    // Observable string streams\r\n    nodeSelected: Observable<string | number> = this.emitNodeSelected.asObservable();\r\n\r\n    // Observable string sources\r\n    private emitDataSource: BehaviorSubject<Node> = new BehaviorSubject<Node>(undefined);\r\n\r\n    // Observable string streams\r\n    dataSourceObservable: Observable<Node> = this.emitDataSource.asObservable();\r\n\r\n    // Expand node observable\r\n    private emitExpandAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n    nodeExpand: Observable<boolean> = this.emitExpandAllNodes.asObservable();\r\n\r\n     // Collapse node observable\r\n     private emitCollapseAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n     nodeCollapse: Observable<boolean> = this.emitCollapseAllNodes.asObservable();\r\n\r\n    private emitRefreshTree: Subject<void> = new Subject<void>();\r\n    refreshTreeObservable: Observable<void> = this.emitRefreshTree.asObservable();\r\n\r\n    private emitRefreshTreeWithPagination: Subject<void> = new Subject<void>();\r\n    refreshTreeWithPaginationObservable: Observable<void> = this.emitRefreshTreeWithPagination.asObservable();\r\n\r\n    private emitExpandOneNode: Subject<Node> = new Subject<Node>();\r\n    expandOneNodeObservable: Observable<Node> = this.emitExpandOneNode.asObservable();\r\n\r\n    private emitCollapseOneNode: Subject<Node> = new Subject<Node>();\r\n    collapseOneNodeObservable: Observable<Node> = this.emitCollapseOneNode.asObservable();\r\n\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number | string): void {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n    // Service message commands\r\n    changeDataSource(data: Node): void {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n    expandAllNodes(expand: boolean): void {\r\n        this.emitExpandAllNodes.next(expand);\r\n    }\r\n\r\n    collapseAllNodes(collapse: boolean): void {\r\n        this.emitCollapseAllNodes.next(collapse);\r\n    }\r\n\r\n    refreshTree(): void {\r\n        this.emitRefreshTree.next();\r\n    }\r\n\r\n\r\n    refreshTreeWithPagination(): void {\r\n        this.emitRefreshTreeWithPagination.next();\r\n    }\r\n\r\n\r\n    expandOneNode(node: Node): void {\r\n    this.emitExpandOneNode.next(node);\r\n    }\r\n\r\n\r\n    collapseOneNode(node: Node): void {\r\n        this.emitCollapseOneNode.next(node);\r\n    }\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n}\r\n","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n\r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }\r\n\r\n    nextPage(): number {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }\r\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, HostListener } from '@angular/core';\r\nimport { NestedTreeControl, TreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource, MatTree, MatOptionSelectionChange } from '@angular/material';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass']\r\n  // host: { '(document:keyup)': 'onKeyDown($event)' }\r\n})\r\nexport class TreeHelisaComponent implements OnInit, AfterViewInit {\r\n  isDisabled: boolean;\r\n  selectedNode: number | string | null;\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService: TreeHelisaService, private router: Router, private elementRef: ElementRef) {\r\n    // cargar datos pasados por el @Input\r\n    if (!!this.data) {\r\n      const data: Node = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = [];\r\n      this.treeControl.dataNodes = [];\r\n    }\r\n  }\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit: FormControl;\r\n  @ViewChild('tree') tree: MatTree<{}>;\r\n  private selectedOptions: Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  > = new Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  >();\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data: Node;\r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed: EventEmitter<string | number> = new EventEmitter<number | string>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue aÃ±adido\r\n   */\r\n  @Output() added: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() collapseParent: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled: EventEmitter<RequestTreeHelisa> = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() dobleClick: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() keypressDelete: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() keypressInsert: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() checkedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() uncheckedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() clickAddNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickEditNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickDeleteNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  treeControl: NestedTreeControl<Node> = new NestedTreeControl<Node>((node: Node): Node[] | Observable<Node[]> => node.children);\r\n  dataSource: MatTreeNestedDataSource<Node> = new MatTreeNestedDataSource<Node>();\r\n\r\n  isSingleClick: boolean = true;\r\n  currentNode: Node = null;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node: Node): string {\r\n    let result: string[] = [node.name];\r\n    let concat: string = '';\r\n\r\n    if (node.parent) {\r\n      result.push(this.getDescription(node.parent));\r\n    }\r\n\r\n    if (result.length === 1) {\r\n      return node.name;\r\n    }\r\n\r\n    result = result.reverse();\r\n\r\n    for (let i: number = 0; i < result.length; i++) {\r\n      const element: string = result[i];\r\n      concat = concat + element + (i === result.length - 1 ? '' : ',');\r\n    }\r\n\r\n    return concat;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable.subscribe((res: Node) => {\r\n      if (!!res && !!res.children) {\r\n        this.selectedNode = res.id;\r\n        this.receivePage(res.children);\r\n      } else {\r\n        this.dataSource.data = [];\r\n        this.treeControl.dataNodes = [];\r\n      }\r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected.subscribe((res: string | number) => {\r\n      if (!!this.data && !!this.data.children) {\r\n        this.selectNode(this.data, res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeObservable.subscribe((res: void) => {\r\n      this.refreshTree();\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeWithPaginationObservable.subscribe((res: void) => {\r\n      this.refreshTreeWithPagination();\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.treeHelisaService.nodeExpand.subscribe((res: boolean) => {\r\n      if (res != null) {\r\n        if (res) {\r\n          this.tree.treeControl.expandAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.nodeCollapse.subscribe((res: boolean) => {\r\n      if (res !== null) {\r\n        if (res) {\r\n          this.tree.treeControl.collapseAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.expandOneNodeObservable.subscribe((res: Node) => {\r\n      if (res !== undefined) {\r\n        this.treeControl.expand(res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.collapseOneNodeObservable.subscribe((res: Node) => {\r\n      if (res !== undefined) {\r\n        this.treeControl.collapse(res);\r\n      }\r\n    });\r\n  }\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node: Node): void {\r\n    this.isSingleClick = true;\r\n    setTimeout(() => {\r\n      if (this.isSingleClick) {\r\n        this.selectNode(node, node.id);\r\n\r\n        // if(!!node && !node.children){\r\n        if (!!node) {\r\n          this.nodeSelected.emit(node.id);\r\n          this.currentNode = node;\r\n        }\r\n      }\r\n    }, 350);\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n\r\n    if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node: Node): void {\r\n    this.clickEditNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se edita el nodo ahora solo se emite el evento 'clickEditNode'\r\n     * retornando el nodo al cual le hicieron click en la opciÃ³n delete\r\n     */\r\n    // node.isEditable = true;\r\n    // this.isDisabled = true;\r\n  }\r\n\r\n  onAdd(node: Node): void {\r\n    this.clickAddNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se crea y se agrega el nodo ahora solo se emite el evento 'clickAddNode'\r\n     * retornando el nodo al cual le hicieron click en la opciÃ³n add\r\n     */\r\n    //   // si no tiene hijos instanciar el array\r\n    //   if (!node.children) {\r\n    //     node.children = [];\r\n    //   }\r\n    //   node.children.push({\r\n    //     id: Math.random(),\r\n    //     name: '',\r\n    //     isSelected: false,\r\n    //     parent: node,\r\n    //     isEditable: true\r\n    //   });\r\n    //   if (node.children) {\r\n    //     this.isDisabled = true;\r\n    //     this.treeHelisaService.expandOneNode(node);\r\n    //   }\r\n    //   this.refreshTree();\r\n  }\r\n\r\n  onDelete(node: Node): void {\r\n    this.clickDeleteNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se elimina el nodo ahora solo se emite el evento 'clickDeleteNode'\r\n     * retornando el nodo al cual le hicieron click en la opciÃ³n delete\r\n     */\r\n    // // Remueve el nodo utilizando la libreria de lodash\r\n    // _.remove(node.parent.children, node);\r\n\r\n    // this.refreshTree();\r\n    // this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node: Node, value: string): void {\r\n    node.name = value;\r\n    if (node.id == null && node.name === '') {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    } else if (node.id && node.id != null && node.name.trim() !== '') {\r\n      this.edited.emit(node);\r\n      node.isEditable = false;\r\n      this.selectNode(node, node.id);\r\n    } else if (node.id == null && node.name.trim() !== '') {\r\n      this.added.emit(node);\r\n      node.isEditable = false;\r\n    }\r\n    this.isDisabled = false;\r\n    this.refreshTree();\r\n  }\r\n\r\n  onCancel(node: Node, value: string): void {\r\n    this.isDisabled = false;\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if (node.id == null) {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    }\r\n\r\n    node.isEditable = false;\r\n  }\r\n\r\n  onDblClick(node: Node): void {\r\n    this.isSingleClick = false;\r\n    this.dobleClick.emit(node.id);\r\n  }\r\n\r\n  @HostListener('document:keyup', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    switch (event.key) {\r\n      case 'Delete':\r\n        this.keypressDelete.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'Insert':\r\n        this.keypressInsert.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'ArrowDown':\r\n        this.moveDownIntoTree();\r\n        break;\r\n      case 'ArrowUp':\r\n        this.moveUpIntoTree();\r\n        break;\r\n    }\r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  private moveUpIntoTree(): number {\r\n    if (!!this.data) {\r\n      // si aun no hay ningun node seleccionado selecciona el primero\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode.parent && this.currentNode.id != null) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number = this.currentNode.parent.children.indexOf(this.currentNode);\r\n\r\n          if (this.currentNode.parent.id == null && index === 0) {\r\n            return 0;\r\n          } else {\r\n            // si tiene nodos al mismo nivel salta al nodo anterior\r\n            if (index !== undefined && index === 0) {\r\n              this.currentNode = this.currentNode.parent;\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } else {\r\n              // si no tiene nodos al mismo nivel salta al nodo padre\r\n              this.currentNode = this.currentNode.parent.children[index - 1];\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveDownIntoTree(): void {\r\n    if (!!this.data) {\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number =\r\n            !!this.currentNode && !!this.currentNode.parent ? this.currentNode.parent.children.indexOf(this.currentNode) : null;\r\n\r\n          // si tiene childrens pasa al primer children\r\n          if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n            this.currentNode = this.currentNode.children[0];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else if (\r\n            index !== undefined &&\r\n            index === this.currentNode.parent.children.length - 1 &&\r\n            this.currentNode.parent.parent != null &&\r\n            this.currentNode.parent.parent.children != null &&\r\n            this.currentNode.parent.parent.children.length > 0\r\n          ) {\r\n            const indexOfParent: number = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent);\r\n            this.currentNode =\r\n              this.currentNode.parent.parent.children[indexOfParent + 1] === undefined\r\n                ? this.currentNode\r\n                : this.currentNode.parent.parent.children[indexOfParent + 1];\r\n\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else {\r\n            // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\r\n            this.currentNode = this.currentNode.parent.children[index + 1];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild(t: number, node: Node): boolean {\r\n    return !!node.children && node.children.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\r\n   */\r\n  private refreshTree(): void {\r\n    this.data = null;\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())\r\n   */\r\n  private refreshTreeWithPagination(): void {\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]): void {\r\n    if (!this.data) {\r\n      this.data = { id: null, name: 'root', isSelected: false };\r\n    }\r\n    if (!this.data.children) {\r\n      this.data.children = new Array<Node>();\r\n      this.treeHelisaConnect = new TreeHelisaConnect<Node>();\r\n    }\r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach((node: Node) => {\r\n      this.fillParent(node, this.data);\r\n    });\r\n\r\n    this.data.children = this.reorderByOrderIndex(this.data.children);\r\n\r\n    this.dataSource.data = this.data.children;\r\n    this.treeControl.dataNodes = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   */\r\n  private fillParent(node: Node, parent: Node): void {\r\n    node.parent = parent;\r\n    if (node.children && node.children.length > 0) {\r\n      node.children.forEach((item: Node) => {\r\n        this.fillParent(item, node);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   */\r\n  private selectNode(node: Node, id: number | string): Node {\r\n    if (node == null) {\r\n      return null;\r\n    }\r\n    this.upSelectNode(node);\r\n    if (!!this.selectedNode) {\r\n      const nodeSelected: Node = this.getNodeById(this.selectedNode);\r\n      if (nodeSelected != null) {\r\n        nodeSelected.isSelected = false;\r\n        this.selectedNode = null;\r\n      }\r\n    }\r\n    if (node.id !== undefined && node.id === id) {\r\n      node.isSelected = true;\r\n      this.expandAllParents(node);\r\n      this.selectedNode = node.id;\r\n      return node;\r\n    } else if (node.children != null) {\r\n      let i: number;\r\n      let result: Node = null;\r\n      for (i = 0; result == null && i < node.children.length; i++) {\r\n        result = this.selectNode(node.children[i], id);\r\n      }\r\n      return result;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private expandAllParents(node: Node): void {\r\n    if (!!node && !!node.parent) {\r\n      this.treeHelisaService.expandOneNode(node.parent);\r\n      this.expandAllParents(node.parent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   */\r\n  private upSelectNode(node: Node): void {\r\n    if (!!node && node.isSelected !== undefined) {\r\n      node.isSelected = false;\r\n      if (!!node.children) {\r\n        for (const childrenNode of node.children) {\r\n          this.upSelectNode(childrenNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getClassNode(node: Node): string[] {\r\n    const classNode: string[] = [];\r\n    if (node.isSelected) {\r\n      classNode.push('isSelected');\r\n    }\r\n    if (node.classNode) {\r\n      classNode.push(node.classNode);\r\n    }\r\n    return classNode;\r\n  }\r\n\r\n  onEditMode(node: Node, editMode: boolean): void {\r\n    this.getSelectedOptions(node).editMode = editMode;\r\n  }\r\n\r\n  onSelectOption(event: MatOptionSelectionChange, node: Node): void {\r\n    node.isCheckedOption = event.source.selected;\r\n    if (node.isCheckedOption) {\r\n      this.checkedOptionNode.emit(node.id);\r\n    } else {\r\n      this.uncheckedOptionNode.emit(node.id);\r\n    }\r\n  }\r\n\r\n  getSelectedOptions(\r\n    node: Node\r\n  ): {\r\n    formControl: FormControl;\r\n    editMode: boolean;\r\n  } {\r\n    if (this.selectedOptions.has(node.id)) {\r\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\r\n    } else {\r\n      this.reloadSelectedOptions(node, false);\r\n    }\r\n    return this.selectedOptions.get(node.id);\r\n  }\r\n\r\n  private reloadSelectedOptions(node: Node, editMode: boolean): void {\r\n    const array: Array<string | number | null> = new Array<string | number | null>();\r\n    node.options.forEach((option: Node) => {\r\n      if (option.isCheckedOption) {\r\n        array.push(option.id);\r\n      }\r\n    });\r\n    const obj: {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    } = { formControl: new FormControl(array), editMode };\r\n    this.selectedOptions.set(node.id, obj);\r\n  }\r\n\r\n  /**\r\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\r\n   * @param id  number | string\r\n   * @returns Node o null si no hay un nodo con ese id\r\n   */\r\n  getNodeById(id: number | string): Node {\r\n    const queue: Node[] = [...this.dataSource.data];\r\n    while (queue.length > 0) {\r\n      const curr: Node = queue.shift();\r\n      if (curr.id === id) {\r\n        return curr;\r\n      } else {\r\n        if (!!curr.children) {\r\n          queue.push(...curr.children);\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  reorderByOrderIndex(node: Node[]): Node[] {\r\n    if (!!node && node.length > 0) {\r\n      try {\r\n        node = _.orderBy(node, (x: Node) => x.orderIndex, ['asc']);\r\n        node.forEach((element: Node) => {\r\n          if (!!element.children && element != null) {\r\n            element.children = this.reorderByOrderIndex(element.children);\r\n          }\r\n        });\r\n        return node;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\r\n\r\n@Injectable()\r\nexport class AutocompleteHelisaService<T> {\r\n\r\n  private emitChangeSource: BehaviorSubject<Array<OptionAutocompleteHelisa<T>>> =\r\n  new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\r\n\r\n  public dataSource$: Observable<Array<OptionAutocompleteHelisa<T>>> = this.emitChangeSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>): void {\r\n    this.emitChangeSource.next(options);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { map, startWith, throttleTime, debounceTime } from 'rxjs/operators';\r\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\r\n\r\nexport interface OptionAutocompleteHelisa<T> {\r\n  value: T;\r\n  displayText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-autocomplete',\r\n  templateUrl: './autocomplete-helisa.component.html',\r\n  styleUrls: ['./autocomplete-helisa.component.css'],\r\n  providers: [AutocompleteHelisaService]\r\n})\r\nexport class AutocompleteHelisaComponent<T> implements OnInit {\r\n\r\n  @Input() myControl: FormControl = new FormControl();\r\n  @Input() options: Array<OptionAutocompleteHelisa<T>> = new Array<OptionAutocompleteHelisa<T>>();\r\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\r\n  selectedValue: OptionAutocompleteHelisa<T>;\r\n  @Output() selectedValueEmmiter: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\r\n  @Input() isRemote: boolean = false;\r\n  isLoading: boolean = false;\r\n\r\n\r\n  onScrollObservable: Subject<void> = new Subject<void>();\r\n\r\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.onScrollObservable.asObservable()\r\n    .pipe(\r\n      debounceTime(500),\r\n      throttleTime(500)\r\n    )\r\n    .subscribe(() => {\r\n      this.nextPage.emit();\r\n    });\r\n\r\n    if (this.isRemote) {\r\n      this.autocompleteHelisaService.dataSource$.subscribe((data: OptionAutocompleteHelisa<T>[]) => {\r\n        setTimeout(() => {\r\n          this.options = data;\r\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\r\n        });\r\n      });\r\n    }\r\n\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map((x: string) => this._checkRegex(x)),\r\n      map((value: string) => this._filter(value))\r\n    );\r\n\r\n  }\r\n\r\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {\r\n    return option ? option.displayText : undefined;\r\n  }\r\n\r\n  getService(): AutocompleteHelisaService<T> {\r\n    return this.autocompleteHelisaService;\r\n  }\r\n\r\n\r\n  /** Elimina caracteres extraÃ±os */\r\n  private _checkRegex(value: string): string {\r\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '');\r\n    return value;\r\n  }\r\n\r\n  private _filter(value: string): OptionAutocompleteHelisa<T>[] {\r\n    if (!(value)) {\r\n      if (!this.isRemote) {\r\n        const filterValue: string[] = value.toLowerCase().split(' ');\r\n        return this.options.filter((option: OptionAutocompleteHelisa<T>) => {\r\n          let ws: boolean = true;\r\n          filterValue.forEach((text: string) => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\r\n          return ws;\r\n        }).splice(0, 5);\r\n      } else {\r\n        return this.options;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onSelected(event: {option: {value: OptionAutocompleteHelisa<T>}}): void {\r\n    this.selectedValue = event.option.value;\r\n    this.selectedValueEmmiter.emit(this.selectedValue.value);\r\n  }\r\n\r\n  getNextPage(): void {\r\n    this.onScrollObservable.next();\r\n  }\r\n}\r\n","import { Directive, EventEmitter, Input, Output, OnDestroy} from '@angular/core';\r\nimport { MatAutocomplete} from '@angular/material';\r\nimport { takeUntil, tap} from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\nexport interface IAutoCompleteScrollEvent {\r\n  autoComplete: MatAutocomplete;\r\n  scrollEvent: Event;\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'mat-autocomplete[optionsScroll]'\r\n})\r\nexport class OptionsScrollDirective implements OnDestroy  {\r\n\r\n  /**\r\n   * This value would different depends of styles\r\n   */\r\n  @Input() thresholdPercent: number = .9;\r\n  @Output() optionsScroll: EventEmitter<IAutoCompleteScrollEvent> = new EventEmitter<IAutoCompleteScrollEvent>();\r\n  destroy: Subject<void> = new Subject<void>();\r\n  lastScrollTop: number  = 0;\r\n\r\n  constructor(public autoComplete: MatAutocomplete) {\r\n    this.autoComplete.opened.pipe(\r\n      tap(() => {\r\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\r\n        // Note: The panel will be available on next tick\r\n        // Note: The panel wil NOT open if there are no options to display\r\n        setTimeout(() => {\r\n          // Note: remove listner just for safety, in case the close event is skipped.\r\n          this.removeScrollEventListener();\r\n          if (!!this.autoComplete &&\r\n            !!this.autoComplete.panel &&\r\n            !!this.autoComplete.panel.nativeElement) {\r\n              this.autoComplete.panel.nativeElement\r\n                .addEventListener('scroll', this.onScroll.bind(this), false);\r\n            }\r\n        });\r\n      }),\r\n      takeUntil(this.destroy)).subscribe();\r\n\r\n    this.autoComplete.closed.pipe(\r\n      tap(() => this.removeScrollEventListener()),\r\n      takeUntil(this.destroy)).subscribe();\r\n  }\r\n\r\n  private removeScrollEventListener(): void {\r\n    if (!!this.autoComplete &&\r\n      !!this.autoComplete.panel &&\r\n      !!this.autoComplete.panel.nativeElement) {\r\n    this.autoComplete.panel.nativeElement\r\n      .removeEventListener('scroll', this.onScroll);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy.next();\r\n    this.destroy.complete();\r\n\r\n    this.removeScrollEventListener();\r\n  }\r\n\r\n\r\n  onScroll(event: Event): void {\r\n    // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\r\n    const st: number = (event.target as Window).pageYOffset || (event.target as Element).scrollTop;\r\n    if (st > this.lastScrollTop) {\r\n       // downscroll code\r\n       if (this.thresholdPercent === undefined) {\r\n        this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n      } else {\r\n        const threshold: number = this.thresholdPercent * 100 * (event.target as Element).scrollHeight / 100;\r\n        const current: number = (event.target as Element).scrollTop + (event.target as Element).clientHeight;\r\n        // console.log(`scroll ${current}, threshold: ${threshold}`)\r\n        if (current > threshold) {\r\n          // console.log('load next page');\r\n          this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n        }\r\n      }\r\n    } else {\r\n       // upscroll code\r\n    }\r\n    this.lastScrollTop = st <= 0 ? 0 : st;\r\n  }\r\n\r\n}\r\n","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\r\nimport { MatTooltip } from '@angular/material';\r\n\r\n@Directive({\r\n    selector: '[helTooltip]',\r\n    providers: [MatTooltip]\r\n})\r\nexport class HelTooltipDirective {\r\n\r\n    tooltip: MatTooltip;\r\n\r\n    /**\r\n     * Mensaje a mostrar\r\n     */\r\n    @Input('helTooltip') message: string;\r\n\r\n    /**\r\n     * Tiempo antes de ocultarla el mensaje\r\n     */\r\n    @Input() hideDelay: number = 600;\r\n\r\n    /**\r\n     * Tiempo antes de mostra el mensaje\r\n     */\r\n    @Input() showDelay: number = 500;\r\n\r\n\r\n    constructor(tooltip: MatTooltip, private elemRef: ElementRef) {\r\n      this.tooltip = tooltip;\r\n    }\r\n\r\n    @HostListener('mouseover') mouseover(): void {\r\n      const currentContent: string = this.elemRef.nativeElement.innerText;\r\n\r\n      if (!!currentContent && !!this.message) {\r\n        if ((currentContent.toUpperCase() !== this.message.toString().toUpperCase()) || this.isEllipsisActive(this.elemRef.nativeElement)) {\r\n          this.tooltip.message = this.message;\r\n        }\r\n      }\r\n\r\n      this.tooltip.showDelay =  this.showDelay;\r\n      this.tooltip.hideDelay = this.hideDelay;\r\n    }\r\n\r\n\r\n    private isEllipsisActive(e: {offsetWidth: number , scrollWidth: number}): boolean {\r\n      return (e.offsetWidth < e.scrollWidth);\r\n    }\r\n}\r\n","import { Directive, HostBinding, PLATFORM_ID, Inject, Input, OnChanges } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: 'a[href]',\r\n})\r\nexport class ExternalLinkDirective implements OnChanges {\r\n  @HostBinding('attr.rel') relAttr: string = '';\r\n  @HostBinding('attr.target') targetAttr: string = '';\r\n  @HostBinding('attr.href') hrefAttr: string = '';\r\n  @Input() href: string;\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\r\n\r\n  ngOnChanges(): void {\r\n\r\n    this.hrefAttr = this.href;\r\n\r\n    if (this.isLinkExternal()) {\r\n      this.relAttr = 'noopener';\r\n      this.targetAttr = '_blank';\r\n    }\r\n  }\r\n\r\n  private isLinkExternal(): boolean {\r\n    return isPlatformBrowser(this.platformId) && !this.href.includes(location.hostname);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'externalLink'\r\n})\r\nexport class ExternalLinkPipe implements PipeTransform {\r\n    transform(value: string, ...args: string[]): string {\r\n        return '//' + value;\r\n    }\r\n}\r\n","import { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCheckboxModule,\r\n  MatGridListModule,\r\n  MatInputModule,\r\n  MatMenuModule,\r\n  MatNativeDateModule,\r\n  MatOptionModule,\r\n  MatPaginatorModule,\r\n  MatRadioModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule\r\n} from '@angular/material';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport { TableHelisaService } from './components/table-helisa/table-helisa.service';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport { TreeHelisaService } from './components/tree-helisa/tree-helisa.service';\r\nimport { ExternalLinkDirective } from './directives/external-link.directive';\r\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\r\nimport { HelTooltipDirective } from './directives/tooltip.directive';\r\nimport { ExternalLinkPipe } from './pipes/external-link.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  providers: [TableHelisaService, TreeHelisaService]\r\n})\r\nexport class HelisaLibModule {}\r\n","export enum ToastType {\r\n    DONE = 'done',\r\n    ERROR = 'error',\r\n    INFO = 'info'\r\n}\r\n"]}