{"version":3,"names":["InputWithButtonComponent","this","placeholder","inputFormControl","FormControl","Validators","required","requiredMessage","value","isFocused","done","EventEmitter","cancel","prototype","ngOnInit","setValue","nameField","nativeElement","focus","onDone","valid","emit","onCancel","type","Component","args","selector","template","Input","ViewChild","static","Output","ToastHelisaComponent","data","undefined","decorators","Inject","MAT_SNACK_BAR_DATA","ToastType","AlertHelisaType","ToastHelisaService","snackBar","durationInSeconds","showToast","message","subMessages","openFromComponent","duration","Injectable","providedIn","MatSnackBar","AlertHelisaComponent","dialogRef","_this","content","title","okLabel","cancelLabel","hasCancel","CONFIRMATION","disableClose","keydownEvents","subscribe","event","code","close","MatDialogRef","MAT_DIALOG_DATA","AlertHelisaService","dialog","openDialog","open","width","afterClosed","MatDialog","Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","DependencyTableHelisaService","tables","Subject","infoTables","Array","emitVisibilityButton$","emitVisibilityButton","asObservable","emitVisibilityAllButtons$","emitVisibilityAllButtons","emitIsCellSelection$","emitIsCellSelection","emitChangeColumns$","emitChangeColumns","emitEnabledButton$","emitEnabledButton","emitTotal","emitNextPage","getTables","updateDependency","configTable","withRemoveDependency","slice","order","isRemote","dataSource","count","Error","setTotal","addPage","selectIndexRow","config","indexRowSelect","changeEnabledButton","changeVisibilityButton","changeVisibilityAllButtons","show","changeisCellSelection","changeColumnsByTable","TableHelisaService","emitChangeSource","totalReturn","nextPageReturn","emitVisibleButton$","emitVisibleButton","total","table","obj","page","change","InputHelisaType","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","showToolTip","selected","selectObject","nextPage","sort","drop","addRow","selectCell","bookClicked","selectedObject","hideDelay","showDelay","viewTables","toArray","index","addRowButton","showButton","isDisabled","toolTipText","text","forEach","element","isCellSelection","columns","getService","_a","splice","apply","item","reload","onSelectedDependency","onNextPage","onTotal","onSort","onDrop","onAddRow","selectedCell","onBookClicked","providers","ViewChildren","ColumnType","EventScope","TotalType","ChangeColumnConfigurationType","TableHelisaType","InputHelisaComponent","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","NEGATIVE_SIGN","floatLabel","autocompleteMode","isSearch","_showCurrencyZerosDecimal","disabled","_type","DEFAULT","blur","formControlMask","realValue","inputFormReal","isUserChange","defineProperty","set","newShowCurrencyZerosDecimal","changeValue","newType","formControl","registerOnDisabledChange","disable","enable","valueChanges","statusChange","status","getMaskedValue","onFocus","setValidators","validator","onlySelf","statusChanges","setErrors","key","markAsTouched","inputText","ngAfterViewInit","search","ngModelChange","isFinishOrStart","position","selectionStart","getRealValue","selectionEnd","str","isFinish","PHONE","maskedStr","IDENTITY","j","NUMERIC","addZeroDecimals","DOUBLE","getMaskedValueDouble","POSITIVEORNEGATIVEDOUBLE","isNegativeValue","indexOf","newStr","replace","indexDecimalSeparator","decimals","substring","realStr","str_1","str_1_1","strItem","match","getRealValueDouble","haveDot","str_2","str_2_1","$event","Number","select","target","RowType","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","isLastPage","isUsed","getBody","columnConfig","TableHelisaComponent","MatTableDataSource","displayedColumns","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","LOCAL","scrollCount","hasSubtitle","indexRowStartDrag","lastIndexRowDrag","dataBeforeDrag","dataSource$","scrollX","scrollY","showTitle","isDragged","emptyMessageForColumn","isEnabled","addBookButton","showFooter","showSearch","reloadColumnConfig","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","SORT","matTable","renderRows","w","REMOTE","tableHelisaConnectComponent","goNextPage","columnConfiguration","get","rawData","idRowSelected","selectRow","rowType","ROW","columnCount","countSubtitle_1","showBookButton_1","subtitle","subtitleTemp","visible","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","groupFooter_1","changeData_1","haveGroup_1","totalType","TOTAL","searchable","groupable","a","b","result","compare","row","GROUP_FOOTER","GROUP_TITLE","addTotalGroup","rowTotal","ws","getGroupDescription","isGroupTitle","isRow","isGroupFooter","map","SUM","COUNT","AVERAGE","getValueTooltip","searchText","lastSearch","isUser","scope","USER","CODE_CALL","onScroll","isScrollY","scrollTop","scrollLeft","scrollHeight","body","dblClickCell","selectedCells","isSelectable","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToColumn","configColumnClass","getClassToRow","classToRow","configRowStylesFromColumn","founds","filter","classRow","rowIndex","getRowIndex","pageY","array","moveItemInArray","stopPropagation","tableKeydown","currentIndex_1","findIndex","newSelection_1","reverse","Math","abs","preventDefault","dragger","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","showMessageEmpty","filteredData","getMessageEmtpy","getIfButtonDisabled","getToolTipButtonMessage","MatSort","MatTable","read","ElementRef","TypeCalendarEnum","moment","moment_","DateHelisaComponent","dateFormControl","date","Date","dateFormat","locale","errorMessage","showDatePicker","isClosed","typeCalendar","NORMAL","isFromInputEvent","invalidFormat","dateToVisualize","formHandler","incomingDate","format","openDatePicker","timeout","setTimeout","datePickerShow","onKey","onBlur","isValid","toDate","clearTimeout","getStartView","typeCalendarEnum","MONTH_YEAR","STRICT","pipe","tap","trim","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","incommingDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","getDateToControl","TreeHelisaService","emitNodeSelected","BehaviorSubject","nodeSelected","emitDataSource","dataSourceObservable","emitExpandAllNodes","nodeExpand","emitCollapseAllNodes","nodeCollapse","emitRefreshTree","refreshTreeObservable","emitRefreshTreeWithPagination","refreshTreeWithPaginationObservable","emitExpandOneNode","expandOneNodeObservable","emitCollapseOneNode","collapseOneNodeObservable","changeNodeSelected","idResidentialArea","changeDataSource","expandAllNodes","expand","collapseAllNodes","collapse","refreshTree","refreshTreeWithPagination","expandOneNode","node","collapseOneNode","TreeHelisaConnect","TreeHelisaComponent","treeHelisaService","router","elementRef","selectedOptions","Map","removed","edited","added","collapseParent","rangeScrolled","dobleClick","keypressDelete","keypressInsert","checkedOptionNode","uncheckedOptionNode","clickAddNode","clickEditNode","clickDeleteNode","treeControl","NestedTreeControl","MatTreeNestedDataSource","isSingleClick","currentNode","dataNodes","getDescription","parent","res","selectedNode","id","selectNode","tree","expandAll","collapseAll","onRedirect","offsetHeight","onEdit","onAdd","onDelete","onEdited","_","remove","isEditable","onDblClick","onKeyDown","moveDownIntoTree","moveUpIntoTree","indexOfParent","hasChild","t","datasourceData","treeHelisaConnect","isSelected","fillParent","reorderByOrderIndex","upSelectNode","getNodeById","expandAllParents","_b","_c","childrenNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","has","reloadSelectedOptions","options","option","queue","curr","shift","orderBy","x","orderIndex","console","log","Router","HostListener","AutocompleteHelisaService","setDataSource","AutocompleteHelisaComponent","autocompleteHelisaService","myControl","selectedValueEmmiter","isLoading","onScrollObservable","debounceTime","throttleTime","filteredOptions","of","startWith","_checkRegex","_filter","displayFn","displayText","filterValue_1","toLowerCase","onSelected","selectedValue","getNextPage","OptionsScrollDirective","autoComplete","thresholdPercent","optionsScroll","destroy","lastScrollTop","opened","removeScrollEventListener","panel","addEventListener","bind","takeUntil","closed","removeEventListener","ngOnDestroy","complete","st","pageYOffset","scrollEvent","threshold","clientHeight","Directive","MatAutocomplete","HelTooltipDirective","tooltip","elemRef","mouseover","currentContent","innerText","toUpperCase","toString","isEllipsisActive","offsetWidth","scrollWidth","MatTooltip","ExternalLinkDirective","platformId","relAttr","targetAttr","hrefAttr","ngOnChanges","href","isLinkExternal","isPlatformBrowser","includes","location","hostname","String","PLATFORM_ID","HostBinding","ComboBoxHelisaState","ExternalLinkPipe","transform","_i","Pipe","PagingTreeInitialMode","ComboBoxHelisaComponent","selectEmitter","enabled","pageSize","haveNextPage","state","CLOSED","listable","getData","SELECT","selectItem","selectedItem","changeToInsert","INSERT","insert","editable","AlertInformationType","PagingTreeHelisaComponent","visibleLimit","visibleSize","treeMode","EXPAND","visibleObjects","allNode","afterLoadData","paramMode","reset","paramService","service","items","loadData","searchNode","sortItems","createNode","reSort","loadNextVisibleObjects","lAdy","stack","idParent","getIdParentField","unshift","response","last","pop","getIdField","parentInformation","getNodeInformationById","nodeInformation","object","haveChildren","level","expanded","preorder","size","getNodeInformation","getLevelClass","nodeFrom","collapseNode","expandNode","showNextPage","removeItem","removeById","idParent_1","Set","add","beginIndex","itemSearch","lastIndex","deletedItems","parentHaveChildren_1","deletedItem","delete","searchItem","addItem","indexParent","updateItem","nodeA","nodeB","nodeComponent","ContentChild","nodeTitle","TITLE_BY_ALERT_TYPE","CONTENT_BY_ALERT_TYPE","OK_LABEL_BY_ALERT_TYPE","CANCEL_LABEL_BY_ALERT_TYPE","AlertInformationDataHelisaComponent","alertType","DEFINE_COMMERCIAL_STRUCTURE","DEFINE_PARKING_STRUCTURE","DEFINE_RESIDENCIAL_STRUCTURE","hasTitle","AUTHORIZATION_TRANSACTION","DELETE_DATA","LOST_DATA","UNCOMPLETED_DATA","hasContent","CONFIRM_DELETE_DATA","INFORMATION_NOT_VALID","UNCOMPLETED_SELECTED_DATA","NO_SEARCH_RESULTS","hasButtons","hasCancelButton","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","AlertInformationDataHelisaService"],"sources":["../../../projects/helisa-lib/src/lib/components/input-with-button/input-with-button.component.ts","../../../projects/helisa-lib/src/lib/components/toast-helisa/toast-helisa.component.ts","../../../projects/helisa-lib/src/lib/components/toast-helisa/toast-helisa.service.ts","../../../projects/helisa-lib/src/lib/components/toast-helisa/toast-type.enum.ts","../../../projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa-type.enum.ts","../../../projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa.component.ts","../../../projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa.service.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/helisa-lib/src/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","../../../projects/helisa-lib/src/lib/components/table-helisa/table-helisa.service.ts","../../../projects/helisa-lib/src/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","../../../projects/helisa-lib/src/lib/components/input-helisa/input-helisa.component.ts","../../../projects/helisa-lib/src/lib/components/table-helisa/table-helisa.interface.ts","../../../projects/helisa-lib/src/lib/components/table-helisa/table-helisa.component.ts","../../../projects/helisa-lib/src/lib/components/table-helisa/table-helisa-connect.component.ts","../../../projects/helisa-lib/src/lib/components/date-helisa/date-helisa.component.ts","../../../projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa.service.ts","../../../projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa-connect.ts","../../../projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa.component.ts","../../../projects/helisa-lib/src/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","../../../projects/helisa-lib/src/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","../../../projects/helisa-lib/src/lib/directives/options-scroll.directive.ts","../../../projects/helisa-lib/src/lib/directives/tooltip.directive.ts","../../../projects/helisa-lib/src/lib/directives/external-link.directive.ts","../../../projects/helisa-lib/src/lib/pipes/external-link.pipe.ts","../../../projects/helisa-lib/src/lib/components/combo-box-helisa/combo-box-helisa.component.ts","../../../projects/helisa-lib/src/lib/components/paging-tree-helisa/paging-tree-helisa.component.ts","../../../projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-helisa-type.enum.ts","../../../projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-data-helisa.component.ts","../../../projects/helisa-lib/src/lib/helisa-lib.module.ts","../../../projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-data-helisa.service.ts"],"sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() inputFormControl: FormControl = new FormControl('', Validators.required);\r\n  @Input() requiredMessage: string = 'El campo es requerido';\r\n  @Input() value: string = '';\r\n  @Input() isFocused: boolean = false;\r\n  @ViewChild('inputText', {static: true}) nameField: ElementRef;\r\n\r\n  @Output() done: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() cancel: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.value !== '') {\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n    this.nameField.nativeElement.focus();\r\n  }\r\n\r\n\r\n  onDone(): void {\r\n    if (this.inputFormControl.valid) {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { ToastType } from './toast-type.enum';\r\n\r\n// @dynamic\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: {type: ToastType, message: string, subMessages?: string[]}) { }\r\n\r\n  ngOnInit(): void {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds: number = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type: ToastType, message: string, subMessages?: string[]): void {\r\n    subMessages = subMessages ? subMessages : [];\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message, type, subMessages},\r\n      duration: this.durationInSeconds * 1000\r\n    });\r\n  }\r\n}\r\n","export enum ToastType {\r\n    DONE = 'done',\r\n    ERROR = 'error',\r\n    INFO = 'info'\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = 'ERROR',\r\n    CONFIRMATION = 'CONFIRMATION'\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\ninterface AlertHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  type: AlertHelisaType;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: string;\r\n  hasCancel: boolean;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertHelisaProperties\r\n  ) {\r\n    this.content = data.content;\r\n    this.title = data.title;\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'aceptar';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'cancelar';\r\n    }\r\n    this.hasCancel = data.type === AlertHelisaType.CONFIRMATION;\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent): void => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type: AlertHelisaType, title: string, content: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertHelisaComponent> = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, type, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport {ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa, EmptyMessageColumn} from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency} from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable<T> {\r\n  columns: Array<ColumnConfig>;\r\n  isRemote: boolean;\r\n  dataSource?: Array<T>;\r\n  count?: number;\r\n  order?: number;\r\n  showTitle?: boolean;\r\n  indexRowSelect?: number;\r\n  isDragged?: boolean;\r\n  addRowButton?: AddRowButton;\r\n  configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\r\n  configColumnClass?: Array<string>,\r\n  isCellSelection?: boolean;\r\n  addBookButton?: boolean;\r\n  emptyMessageForColumn?: EmptyMessageColumn;\r\n}\r\n\r\n@Injectable()\r\nexport class DependencyTableHelisaService<T> {\r\n\r\n\r\n  tables: Subject<ConfigTable<T>[]> = new Subject();\r\n  infoTables: Array<ConfigTable<T>> = new Array();\r\n\r\n  private emitVisibilityButton$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitVisibilityButton: Observable<EventDependency<boolean>> = this.emitVisibilityButton$.asObservable();\r\n\r\n  private emitVisibilityAllButtons$: Subject<boolean> = new Subject<boolean>();\r\n  emitVisibilityAllButtons: Observable<boolean> = this.emitVisibilityAllButtons$.asObservable();\r\n\r\n  private emitIsCellSelection$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitIsCellSelection: Observable<EventDependency<boolean>> = this.emitIsCellSelection$.asObservable();\r\n\r\n  private emitChangeColumns$: Subject<EventDependency<ColumnConfig[]>> = new Subject<EventDependency<ColumnConfig[]>>();\r\n  emitChangeColumns: Observable<EventDependency<ColumnConfig[]>> = this.emitChangeColumns$.asObservable();\r\n\r\n  private emitEnabledButton$: Subject<EventDependency<{isDisabled: boolean, text: string}>> = new Subject<EventDependency<{isDisabled: boolean, text: string}>>();\r\n  emitEnabledButton: Observable<EventDependency<{isDisabled: boolean, text: string}>> = this.emitEnabledButton$.asObservable();\r\n\r\n  emitTotal: Subject<EventDependency<TotalTableHelisa>> = new Subject<EventDependency<TotalTableHelisa>>();\r\n  emitNextPage: Subject<EventDependency<T[]>> = new Subject<EventDependency<T[]>>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable<T>[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * También remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuración para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable<T>, withRemoveDependency: boolean = false): void {\r\n    if (withRemoveDependency) {\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if (configTable.isRemote) {\r\n      configTable.dataSource = null;\r\n      if (configTable.count === null) {\r\n        throw new Error('hace falta el count');\r\n      }\r\n    } else {\r\n      if (configTable.dataSource === null) {\r\n        throw new Error('hace falta el dataSource');\r\n      }\r\n      configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la información para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la información de la pagina\r\n   */\r\n  setTotal(event: EventDependency<TotalTableHelisa>): void {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la información de la pagina\r\n   */\r\n  addPage(event: EventDependency<T[]>): void {\r\n    this.emitNextPage.next(event);\r\n  }\r\n\r\n  selectIndexRow(config: ConfigTable<T>): void {\r\n    if (this.infoTables[config.order]) {\r\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\r\n      this.tables.next(this.infoTables);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * * Deshabilita el botón y le pone un titulo sobre el over\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeEnabledButton(event: EventDependency<{isDisabled: boolean, text: string}>): void {\r\n    this.emitEnabledButton$.next(event);\r\n  }\r\n\r\n  /**\r\n   * Muestra o esconde el boton una tabla en especifico\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n   changeVisibilityButton(event: EventDependency<boolean>): void {\r\n    this.emitVisibilityButton$.next(event);\r\n  }\r\n\r\n\r\n  /**\r\n   * Esconde los botones de todas las tablas\r\n   * @param show indicar si se muestran o no todos los botones de las tablas\r\n   */\r\n  changeVisibilityAllButtons(show: boolean): void {\r\n    this.emitVisibilityAllButtons$.next(show);\r\n  }\r\n\r\n  /**\r\n   * Para habilitar el manejo de selección de celda\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeisCellSelection(event: EventDependency<boolean>): void {\r\n    this.emitIsCellSelection$.next(event);\r\n  }\r\n\r\n   /**\r\n    * Para habilitar el cambio de columnas\r\n    * @param event para indicar el index de la tabla y en \"data\" columnas\r\n    */\r\n  changeColumnsByTable( event: EventDependency<ColumnConfig[]>): void {\r\n    this.emitChangeColumns$.next(event);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\nimport {TotalTableHelisa} from './table-helisa.interface';\r\nimport {TableHelisaComponent} from './table-helisa.component';\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: {} | TableHelisaComponent<T>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource: Subject<TableHelisaServiceInfo<TotalTableHelisa>> = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage: Subject<TableHelisaServiceInfo<T[]>> = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn: Observable<TableHelisaServiceInfo<TotalTableHelisa>> = this.emitChangeSource.asObservable();\r\n  nextPageReturn: Observable<TableHelisaServiceInfo<T[]>> = this.emitNextPage.asObservable();\r\n\r\n  private emitVisibleButton$: Subject<boolean> = new Subject<boolean>();\r\n  private emitEnabledButton$: Subject<{isDisabled: boolean, text  :string}> = new Subject<{isDisabled: boolean, text  :string}>();\r\n  /**\r\n   * Observable para saber si se debe mostrar o esconder el boton de add row\r\n   */\r\n  emitVisibleButton: Observable<boolean> = this.emitVisibleButton$.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<TotalTableHelisa>): void {\r\n    this.emitChangeSource.next({obj: total, table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>): void {\r\n    this.emitNextPage.next({obj: page, table});\r\n  }\r\n\r\n  /**\r\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\r\n   * @param change indicar si se muestra o no el boton de add row de la tabla\r\n   */\r\n  changeVisibilityButton(change: boolean): void {\r\n    this.emitVisibleButton$.next(change);\r\n  }\r\n\r\n  /**\r\n   * para modificar el estado del boton de add row de la tabla\r\n   * @param change indicar si se muestra o no el boton de add row de la tabla\r\n   */\r\n   changeEnabledButton(change: {isDisabled: boolean, text: string}): void {\r\n    this.emitEnabledButton$.next(change);\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input} from '@angular/core';\r\nimport {DependencyTableHelisaService, ConfigTable} from './dependency-table-helisa.service';\r\nimport {Cell, ColumnConfig, EventColumn, RequestTableHelisa, SelectObject, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\r\nimport {TableHelisaService} from '../table-helisa/table-helisa.service';\r\nimport {TableHelisaComponent} from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency<T> {\r\n  index: number;\r\n  data: T;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [DependencyTableHelisaService]\r\n})\r\nexport class DependencyTableHelisaComponent<T> implements OnInit {\r\n\r\n  tables: Array<ConfigTable<T>> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<T>>;\r\n  @Input() showToolTip: boolean = true;\r\n\r\n  /**\r\n   * deprecated, use selectObject\r\n   */\r\n  @Output() selected: EventEmitter<EventDependency<T>> = new EventEmitter<EventDependency<T>>();\r\n  @Output() selectObject: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() nextPage: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() total: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() sort: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() drop: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() selectCell: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() bookClicked: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  selectedObject: EventDependency<{}> = null;\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService<T>, private tableService: TableHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      (event: EventDependency<T[]>): void => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n\r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      (event: EventDependency<TotalTableHelisa>): void => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder el boton de una tabla\r\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\r\n      (data: EventDependency<boolean>): void => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (!!table) {\r\n            table.addRowButton.showButton = data.data;\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para habilitar o deshabilitar el botón y mostrar titulo\r\n    this.dependencyTableHelisaService.emitEnabledButton.subscribe(\r\n      (data: EventDependency<{isDisabled: boolean, text: string}>): void => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (!!table) {\r\n            table.addRowButton.isDisabled = data.data.isDisabled;\r\n            table.addRowButton.toolTipText = data.data.text;\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder los botones de todas las tablas\r\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\r\n      (data: boolean): void => {\r\n        if (data !== undefined && data != null) {\r\n          this.tables.forEach((element: ConfigTable<T>): void => {\r\n            if (!!element.addRowButton) {\r\n              element.addRowButton.showButton = data;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para manejo de selección de celdas\r\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\r\n      (data: EventDependency<boolean>): void => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.isCellSelection = data.data;\r\n          }\r\n        }\r\n      });\r\n\r\n    // Observable para manejo de columnas\r\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\r\n      (data: EventDependency<ColumnConfig[]>): void => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.columns = data.data;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService(): DependencyTableHelisaService<T> {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables(): void {\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe((tables: ConfigTable<T>[]): void => {\r\n          this.tables.splice(0, this.tables.length, ...tables);\r\n          this.viewTables.forEach((item: TableHelisaComponent<T>): void => {\r\n            item.reload();\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: SelectObject<T>): void {\r\n    this.selectedObject = {index, data: event};\r\n    this.selected.emit({index, data: event.value});\r\n    this.selectObject.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa<T>): void {\r\n    this.nextPage.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: EventColumn): void {\r\n    this.total.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: EventColumn): void {\r\n    this.sort.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onDrop(index: number, event: EventDependency<T>): void {\r\n    this.drop.emit({index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe añadir una nueva fila\r\n   * @param index indica el indice de la tabla de la cual se dispara el evento\r\n   */\r\n  onAddRow(index: number): void {\r\n    this.addRow.emit(index);\r\n  }\r\n\r\n  selectedCell(index: number, event: Cell<T>): void {\r\n    if (this.tables[index].isCellSelection) {\r\n      this.selectCell.emit({index, data: event});\r\n    }\r\n  }\r\n\r\n  onBookClicked(index: number, event: EventDependency<T>): void {\r\n    this.bookClicked.emit({index, data: event});\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nexport enum InputHelisaType {\r\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE, POSITIVEORNEGATIVEDOUBLE, PHONE\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit, AfterViewInit {\r\n\r\n  private readonly DECIMAL_SEPARATOR: string = '.';\r\n  private readonly THOUSAND_SEPARATOR: string = ',';\r\n  private readonly NEGATIVE_SIGN: string = '-';\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n  @Input() minlength: number;\r\n  @Input() maxlength: number;\r\n\r\n  /** Activar o desactivar el autocompletado\r\n   * (Caracteristica de los navegadores para campos comunes como\r\n   * Direccion , Usuario, Password ... etc)\r\n   */\r\n  @Input() autocompleteMode: boolean = false;\r\n\r\n  // Mostrar o no el icono de buscar\r\n  @Input() isSearch: boolean = false;\r\n  // @Input() inputFormControl: FormControl = new FormControl('');\r\n  @Input() isFocused: boolean = false;\r\n  // Esto agrega en el tipo DOUBLE, NUMERIC y POSITIVEORNEGATIVEDOUBLE  dos ceros al final si no los tiene y es true\r\n  _showCurrencyZerosDecimal: boolean = false;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Input() disabled: boolean = false;\r\n  _type: InputHelisaType = InputHelisaType.DEFAULT;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  // tslint:disable-next-line:no-any\r\n  @Output() blur: EventEmitter<any> = new EventEmitter();\r\n\r\n  formControlMask: FormControl = new FormControl('');\r\n  private realValue: string = '';\r\n  private inputFormReal: FormControl = new FormControl('');\r\n  private isUserChange: boolean = false;\r\n\r\n  @ViewChild('inputText', {static: true}) inputText: ElementRef;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  @Input()\r\n  set showCurrencyZerosDecimal(newShowCurrencyZerosDecimal: boolean) {\r\n    this._showCurrencyZerosDecimal = newShowCurrencyZerosDecimal;\r\n    this.changeValue(this.inputFormReal.value, true);\r\n  }\r\n\r\n  @Input()\r\n  set type(newType: InputHelisaType) {\r\n    this._type = newType;\r\n    this.changeValue(this.inputFormReal.value, true);\r\n  }\r\n\r\n  @Input()\r\n  set inputFormControl(formControl: FormControl) {\r\n    this.inputFormReal = formControl;\r\n    this.inputFormReal.registerOnDisabledChange(((isDisabled: boolean): void => {\r\n      if (isDisabled) {\r\n        this.formControlMask.disable();\r\n      } else {\r\n        this.formControlMask.enable();\r\n      }\r\n    }));\r\n    this.inputFormReal.valueChanges.subscribe((data: string): void => {\r\n      this.statusChange(this.inputFormReal.status);\r\n      if (this.getMaskedValue(data, !this.isUserChange) !== this.formControlMask.value) {\r\n        this.changeValue(data, !this.isUserChange);\r\n        if (this.isFocused) {\r\n          this.onFocus(null);\r\n        }\r\n      }\r\n      this.isUserChange = false;\r\n    });\r\n    this.formControlMask.setValidators(this.inputFormReal.validator);\r\n    this.changeValue(this.inputFormReal.value, true);\r\n    // disable control\r\n    if (formControl.disabled) {\r\n      this.formControlMask.disable({ onlySelf: true });\r\n    }\r\n    this.inputFormReal.statusChanges.subscribe(\r\n      (data: string): void => {\r\n        this.statusChange(data);\r\n        if (this.isFocused) {\r\n          this.onFocus(null);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  private statusChange(data: string): void {\r\n    if (data === 'INVALID') {\r\n      this.formControlMask.setErrors({ key: 'Error de validación.' });\r\n      this.formControlMask.markAsTouched();\r\n    } else {\r\n      this.formControlMask.setErrors(null);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.isFocused) {\r\n      this.inputText.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // this.isParentDisabled();\r\n  }\r\n\r\n  /*isParentDisabled(): void {\r\n    setTimeout(() => {\r\n      if (this.nameInput.nativeElement.closest('.hw-disabled-mode')) {\r\n        this.disabled = true;\r\n      } else {\r\n        this.disabled = false;\r\n      }\r\n    });\r\n  }*/\r\n\r\n  search(): void {\r\n    this.setValue.emit(this.realValue);\r\n  }\r\n\r\n  ngModelChange(event: string): void {\r\n    this.isUserChange = true;\r\n    this.changeValue(event, false);\r\n  }\r\n\r\n  private changeValue(event: string, isFinishOrStart: boolean): void {\r\n    if (event != null) {\r\n      event = event + '';\r\n    }\r\n    let position: number = this.inputText.nativeElement.selectionStart;\r\n    const length: number = event ? event.length : 0;\r\n    this.realValue = this.getRealValue(event);\r\n    if (this.getMaskedValue(this.realValue, isFinishOrStart) !== this.formControlMask.value) {\r\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue, isFinishOrStart));\r\n      position += this.inputText.nativeElement.value.length - length;\r\n      this.inputText.nativeElement.selectionStart = position;\r\n      this.inputText.nativeElement.selectionEnd = position;\r\n    }\r\n    if (this.inputFormReal.value !== this.realValue) {\r\n      this.inputFormReal.setValue(this.realValue);\r\n    }\r\n  }\r\n\r\n  private getMaskedValue(str: string, isFinish: boolean): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    if (this._type === InputHelisaType.DEFAULT || this._type === InputHelisaType.PHONE) {\r\n      return str;\r\n    }\r\n    let maskedStr: string = '';\r\n    if (this._type === InputHelisaType.IDENTITY) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this._type === InputHelisaType.NUMERIC) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n      maskedStr = this.addZeroDecimals(maskedStr, isFinish);\r\n    }\r\n    if (this._type === InputHelisaType.DOUBLE) {\r\n      maskedStr = this.getMaskedValueDouble(str);\r\n      maskedStr = this.addZeroDecimals(maskedStr, isFinish);\r\n    }\r\n    if (this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {\r\n      const isNegativeValue: boolean = str.indexOf(this.NEGATIVE_SIGN) === 0;\r\n      const newStr: string = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;\r\n      maskedStr = this.getMaskedValueDouble(newStr);\r\n      if (isNegativeValue) {\r\n        maskedStr = this.NEGATIVE_SIGN + maskedStr;\r\n      }\r\n      maskedStr = this.addZeroDecimals(maskedStr, isFinish);\r\n    }\r\n    return maskedStr;\r\n  }\r\n\r\n  private addZeroDecimals(maskedStr: string, isFinish: boolean): string {\r\n    if (this._showCurrencyZerosDecimal && isFinish) {\r\n      const indexDecimalSeparator: number = maskedStr.indexOf(this.DECIMAL_SEPARATOR);\r\n      if (indexDecimalSeparator < 0) {\r\n        maskedStr += '.00';\r\n      } else {\r\n        let decimals: string = maskedStr.substring(indexDecimalSeparator);\r\n        while (decimals.length < 3) {\r\n          decimals += '0';\r\n        }\r\n        maskedStr = maskedStr.substring(0, indexDecimalSeparator) + decimals;\r\n      }\r\n    }\r\n    return maskedStr;\r\n  }\r\n\r\n  private getMaskedValueDouble(str: string): string {\r\n    let maskedStr: string = '';\r\n    if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {\r\n      for (let i: number = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {\r\n        maskedStr += str[i];\r\n      }\r\n    }\r\n    for (let i: number = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1,\r\n      j: number = 0; i >= 0; i--, j++) {\r\n\r\n      if (j > 0 && j % 3 === 0) {\r\n        maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n      }\r\n      maskedStr = str[i] + maskedStr;\r\n    }\r\n    return maskedStr;\r\n  }\r\n\r\n  private getRealValue(str: string): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    let realStr: string = '';\r\n    if (this._type === InputHelisaType.DEFAULT) {\r\n      return str;\r\n    }\r\n    if (this._type === InputHelisaType.IDENTITY || this._type === InputHelisaType.NUMERIC || this._type === InputHelisaType.PHONE) {\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]')) {\r\n          realStr += strItem;\r\n        }\r\n      }\r\n    }\r\n    if (this._type === InputHelisaType.DOUBLE) {\r\n      realStr = this.getRealValueDouble(str);\r\n    }\r\n    if (this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {\r\n      const isNegativeValue: boolean = str.indexOf(this.NEGATIVE_SIGN) === 0;\r\n      const newStr: string = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;\r\n      realStr = this.getRealValueDouble(newStr)\r\n      if (isNegativeValue) {\r\n        realStr = this.NEGATIVE_SIGN + realStr;\r\n      }\r\n    }\r\n    return realStr;\r\n  }\r\n\r\n  getRealValueDouble(str: string): string {\r\n    let realStr: string = '';\r\n    let haveDot: boolean = false;\r\n\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {\r\n          realStr += strItem;\r\n        }\r\n        haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);\r\n      }\r\n    return realStr;\r\n  }\r\n\r\n  onFocus($event: FocusEvent): void {\r\n    if ((this._type === InputHelisaType.NUMERIC || this._type === InputHelisaType.DOUBLE || this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) &&\r\n      Number(this.getRealValue(this.inputText.nativeElement.value)) === 0) {\r\n      this.inputText.nativeElement.select();\r\n    }\r\n  }\r\n\r\n  change(event: Event): void {\r\n    this.changeValue((event.target as HTMLInputElement).value, true);\r\n  }\r\n}\r\n","import { SortDirection } from '@angular/material/sort';\r\nimport { RowData } from './table-helisa.component';\r\n\r\nexport enum ColumnType {\r\n  NORMAL, URL\r\n}\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title?: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n  subtitle?: string;\r\n  colspanTitle?: number;\r\n  colspanSubtitle?: number;\r\n  columnStyle?: string;\r\n  columnType?: ColumnType;\r\n  isSelectable?: boolean;\r\n}\r\n\r\nexport interface AddRowButton {\r\n  text: string;\r\n  showButton: boolean;\r\n  isDisabled?: boolean;\r\n  toolTipText?: string;\r\n}\r\n\r\nexport interface EmptyMessageColumn {\r\n  text: string;\r\n  isEnabled: boolean;\r\n}\r\n\r\nexport enum EventScope {\r\n  USER, CODE_CALL\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa<T> {\r\n  page: number;\r\n  body: {} | T;\r\n}\r\n\r\nexport interface DropElement<T> {\r\n value: T;\r\n order: number;\r\n}\r\n\r\nexport interface SelectObject<T> {\r\n  value: T;\r\n  scope: EventScope;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n\r\nexport interface Cell<T> {\r\n  column: ColumnConfig;\r\n  row: RowData<T> | T;\r\n }\r\n\r\nexport interface ConfigCellStyles<T> {\r\n   cellData: T;\r\n   classCell: string;\r\n }\r\n\r\nexport interface ConfigRowStyles<T> {\r\n  column: ColumnConfig;\r\n  data: {} | T;\r\n  classRow: string;\r\n}\r\n\r\n// @dynamic\r\nexport class ColumnConfigUtil<T> {\r\n\r\n  getValue(obj: T, column: ColumnConfig): T | number | string {\r\n    return column.name.split('.').reduce((o: T, field: string): T | string => o && o[field], obj);\r\n  }\r\n}\r\n\r\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, DoCheck } from '@angular/core';\r\nimport { MatSort, Sort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\n\r\nimport {\r\n  AddRowButton,\r\n  Cell,\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  ConfigCellStyles,\r\n  ConfigRowStyles,\r\n  DropElement,\r\n  EventColumn,\r\n  EventScope,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  SelectObject,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType,\r\n  ColumnType,\r\n  TotalTableHelisa,\r\n  EmptyMessageColumn\r\n} from './table-helisa.interface';\r\nimport { TableHelisaService, TableHelisaServiceInfo } from './table-helisa.service';\r\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\r\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\nexport interface RowData<T> {\r\n  data: {} | T;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData<T>> = new MatTableDataSource<RowData<T>>([]);\r\n  displayedColumns: string[] = [];\r\n  displayedColumnsWithTitle: string[] = [];\r\n  displayedColumnsWithSubtitle: string[] = [];\r\n  displayedColumnsWithFooter: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n  indexRowSelect: number;\r\n  private scrollCount: number = 0;\r\n  hasSubtitle: boolean = false;\r\n  private indexRowStartDrag: number = -1;\r\n  private lastIndexRowDrag: number = -1;\r\n  private dataBeforeDrag: { data: RowData<T>[] } = null;\r\n  private dataSource$: Array<T> = [];\r\n  private scrollX: number = 0;\r\n  private scrollY: number = 0;\r\n\r\n  @ViewChild(MatSort, { static: true }) matSort: MatSort;\r\n  @ViewChild(MatTable, { static: true }) matTable: MatTable<T>;\r\n  @ViewChild(MatTable, { read: ElementRef, static: true }) matTableElement: ElementRef;\r\n  @ViewChild('containerTable', { static: true }) containerTable: ElementRef;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n\r\n  /**\r\n   * Deprecado, cambiar por electObject\r\n   */\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() selectCell: EventEmitter<Cell<T>> = new EventEmitter<Cell<T>>();\r\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa<T>> = new EventEmitter<RequestTableHelisa<T>>();\r\n  @Input() showTitle: boolean = true;\r\n  @Input() isCellSelection: boolean = false;\r\n  @Input() count: number;\r\n  @Input() configCellStyles: Array<ConfigCellStyles<T>>;\r\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\r\n  @Input() configColumnClass: Array<string>;\r\n  @Input() selectedCells: Cell<T>;\r\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\r\n  @Input() isDragged: boolean = false;\r\n  @Input() addRowButton: AddRowButton = { showButton: false, text: '', isDisabled: false, toolTipText: '' };\r\n  @Input() emptyMessageForColumn: EmptyMessageColumn = { isEnabled: false, text: '' };\r\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\r\n  @Input() addBookButton: boolean = false;\r\n  @Input() showToolTip: boolean = true;\r\n  showFooter: boolean = false;\r\n  showSearch: boolean = false;\r\n\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.reloadColumnConfig();\r\n    this.tableService.nextPageReturn.subscribe(\r\n      (data: TableHelisaServiceInfo<T[]>): void => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe((info: TableHelisaServiceInfo<TotalTableHelisa>): void => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column: ColumnConfig, idx: number): void => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort): void => {\r\n        const column: ColumnConfig = this.columnConfig.find((c: ColumnConfig): boolean => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\r\n      }\r\n    );\r\n\r\n    this.tableService.emitVisibleButton.subscribe(\r\n      (data: boolean): void => {\r\n        if (data !== undefined && data != null) {\r\n          this.addRowButton.showButton = data;\r\n        }\r\n      }\r\n    );\r\n    this.reload();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.isCellSelection) {\r\n      this.matTable.renderRows();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.goNextPage();\r\n    } else {\r\n      this.tableHelisaConnectComponent.page++;\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.columnConfig = columnConfiguration;\r\n    this.reload();\r\n    this.reloadColumnConfig();\r\n  }\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<T>) {\r\n    this.dataSource$ = dataSource;\r\n    this.rawData = dataSource;\r\n    this.reload();\r\n  }\r\n\r\n  get dataSource(): Array<T> {\r\n    return this.dataSource$;\r\n  }\r\n\r\n  @Input()\r\n  set selectedIndexRow(idRowSelected: number) {\r\n    this.indexRowSelect = idRowSelected;\r\n    if (this.rawData && this.rawData.length) {\r\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private reloadColumnConfig(): void {\r\n    this.hasSubtitle = false;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n\r\n    if (this.columnConfig) {\r\n      if (this.addBookButton) {\r\n        const columnCount: number = this.columnConfig.length;\r\n        let countSubtitle: number = 0;\r\n        let showBookButton: boolean = false;\r\n        this.columnConfig.forEach((column: ColumnConfig): void => {\r\n          if (!!column.subtitle) {\r\n            countSubtitle = countSubtitle + 1;\r\n          }\r\n          if ((!showBookButton) && (column.name === 'bookButton')) {\r\n            showBookButton = true;\r\n          }\r\n        });\r\n        const subtitleTemp: boolean = columnCount === countSubtitle;\r\n        if (!showBookButton) {\r\n          this.columnConfig.push({\r\n            name: 'bookButton',\r\n            title: '',\r\n            subtitle: subtitleTemp ? '' : undefined,\r\n            visible: true\r\n          });\r\n        }\r\n      }\r\n      this.columnConfig.forEach((column: ColumnConfig): void => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n        if (!this.hasSubtitle) {\r\n          this.hasSubtitle = column.subtitle !== undefined;\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\r\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\r\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\r\n    this.getColumnsWithTitle().forEach((col: string): number => this.displayedColumnsWithTitle.push(col));\r\n    this.getHeaderSubtitle().forEach((col: string): number => this.displayedColumnsWithSubtitle.push(col));\r\n    this.footerDisplayedColumns().forEach((col: string): number => this.displayedColumnsWithFooter.push(col));\r\n  }\r\n\r\n  public reload(): void {\r\n    if (this.columnConfig) {\r\n      const changeData: Array<RowData<T>> = Array<RowData<T>>();\r\n      let haveGroup: boolean = false;\r\n      let groupFooter: Array<TotalGroup>;\r\n      this.columnConfig.forEach((column: ColumnConfig): void => {\r\n        if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n          this.totalData = new Array<number>(this.columnConfig.length);\r\n          this.showFooter = true;\r\n          this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\r\n        }\r\n        this.showSearch = this.showSearch || column.searchable;\r\n        haveGroup = haveGroup || column.groupable;\r\n      });\r\n      if (haveGroup) {\r\n        this.rawData = this.rawData.sort((a: T, b: T): number => {\r\n          let result: number = 0;\r\n          this.columnConfig.forEach((column: ColumnConfig): void => {\r\n            if (result === 0) {\r\n              result = this.compare(a, b);\r\n            }\r\n          });\r\n          return result;\r\n        });\r\n      }\r\n      if (this.rawData) {\r\n        this.rawData.forEach((row: T): void => {\r\n          if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data as T, row) !== 0)) {\r\n            if (groupFooter) {\r\n              changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\r\n            }\r\n            changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\r\n            groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n          }\r\n          if (haveGroup) {\r\n            this.addTotalGroup(groupFooter, row);\r\n          }\r\n          changeData.push({ data: row, rowType: RowType.ROW });\r\n        });\r\n        this.data = new MatTableDataSource<RowData<T>>(changeData);\r\n      }\r\n      if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\r\n        if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0) {\r\n          this.indexRowSelect = 0;\r\n        }\r\n        this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: T): void {\r\n    this.columnConfig.forEach((column: ColumnConfig, index: number): void => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = { sum: (new ColumnConfigUtil().getValue(row, column) as number), count: 1 };\r\n        } else {\r\n          rowTotal[index].sum += (new ColumnConfigUtil().getValue(row, column) as number);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: T, b: T): number {\r\n    let ws: number = 0;\r\n    this.columnConfig.forEach((column: ColumnConfig): void => {\r\n      if (ws === 0 && column.groupable) {\r\n        if ((new ColumnConfigUtil().getValue(a, column) as number) < (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = -1;\r\n        } else if ((new ColumnConfigUtil().getValue(a, column) as number) > (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = 1;\r\n        }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: T): string {\r\n    let result: string = '';\r\n    this.columnConfig.forEach((column: ColumnConfig): void => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + (new ColumnConfigUtil().getValue(obj, column));\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map((name: string): string => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: T, column: ColumnConfig): T {\r\n    return new ColumnConfigUtil().getValue(obj, column) as T;\r\n  }\r\n\r\n  getValueTooltip(obj: T, column: ColumnConfig): string {\r\n    if (this.showToolTip) {\r\n      return new ColumnConfigUtil().getValue(obj, column) as string;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  searchText(text: string): void {\r\n    this.lastSearch = text;\r\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\r\n  }\r\n\r\n  selectRow(row: RowData<T>, isUser: boolean, column?: ColumnConfig): void {\r\n    if (row === undefined || row === null) {\r\n      return;\r\n    }\r\n    if ((column === undefined || column === null) || (!!column && column.name !== 'bookButton')) {\r\n      this.selectedObject = row.data as T;\r\n      this.select.emit(this.selectedObject);\r\n      this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n    } else if (!!column && column.name === 'bookButton') {\r\n      if (this.selectedObject !== row.data) {\r\n        this.selectedObject = row.data as T;\r\n        this.select.emit(this.selectedObject);\r\n        this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n      }\r\n      this.bookClicked.emit(this.selectedObject);\r\n    }\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n    let isScrollY: boolean;\r\n\r\n    if (this.scrollY !== element.scrollTop) {\r\n      isScrollY = true;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if (this.scrollX !== element.scrollLeft) {\r\n      isScrollY = false;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if ((element.scrollHeight - element.scrollTop < 1000) && isScrollY) {\r\n      this.goNextPage();\r\n    }\r\n\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]): void {\r\n    if (!this.rawData) {\r\n      this.rawData = new Array<T>();\r\n    }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n    this.tableHelisaConnectComponent.isUsed = false;\r\n  }\r\n\r\n  dblClickCell(): void {\r\n    this.selectCell.emit(this.selectedCells as Cell<T>);\r\n  }\r\n\r\n  selectedCell(element: RowData<T>, column: ColumnConfig): void {\r\n    if (column.isSelectable === undefined || column.isSelectable === null || column.isSelectable) {\r\n      this.selectRow(element, true, column);\r\n      this.selectedCells = { column, row: element };\r\n      this.selectCell.emit(this.selectedCells);\r\n    }\r\n  }\r\n\r\n  isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean {\r\n    if (this.isCellSelection) {\r\n      if (this.selectedCells != null) {\r\n        if (this.selectedCells.column.name === column.name &&\r\n          (this.selectedCells.row as RowData<T>).data === row.data) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getClassToCell(row: T, column: ColumnConfig): string[] {\r\n    const classToCell: Array<string> = new Array<string>();\r\n    if (this.configCellStyles) {\r\n      const found: ConfigCellStyles<T> = this.configCellStyles.find((c: ConfigCellStyles<T>): boolean => {\r\n        return c.cellData === this.getValue(row, column);\r\n      });\r\n      if (found) {\r\n        classToCell.push(found.classCell);\r\n      }\r\n    }\r\n    if (column.columnStyle) {\r\n      classToCell.push(column.columnStyle);\r\n    }\r\n    return classToCell;\r\n  }\r\n\r\n  getClassToColumn(): string[] {\r\n    return this.configColumnClass;\r\n  }\r\n\r\n  getClassToRow(row: T): string[] {\r\n    const classToRow: Array<string> = new Array<string>();\r\n    if (row === this.selectedObject && !this.isCellSelection) {\r\n      classToRow.push('');\r\n    }\r\n    if (this.configRowStylesFromColumn) {\r\n      const founds: ConfigRowStyles<T>[] = this.configRowStylesFromColumn.filter((c: ConfigRowStyles<T>): boolean => {\r\n        return c.data === this.getValue(row, c.column);\r\n      });\r\n      if (founds) {\r\n        founds.forEach((c: ConfigRowStyles<T>): void => {\r\n          classToRow.push(c.classRow);\r\n        });\r\n      }\r\n    }\r\n    return classToRow;\r\n  }\r\n\r\n  onDrop(event: MouseEvent): void {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      const array: RowData<T>[] = this.dataBeforeDrag.data;\r\n      const rawData: T[] = this.rawData;\r\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\r\n      this.drop.emit({ value: array[rowIndex].data as T, order: rowIndex });\r\n      this.rawData = rawData;\r\n      this.data = new MatTableDataSource(array);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  tableKeydown(event: KeyboardEvent): void {\r\n    if (!this.isCellSelection) {\r\n      let currentIndex: number = this.data.data.findIndex((row: RowData<T>): boolean => row.data === this.selectedObject);\r\n      let newSelection: number = -10;\r\n      if (event.key === 'ArrowDown') {\r\n        this.scrollCount++;\r\n        this.data.data.forEach((row: RowData<T>, index: number): void => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n      }\r\n      if (event.key === 'ArrowUp') {\r\n        this.scrollCount--;\r\n        currentIndex = this.data.data.length - currentIndex - 1;\r\n        this.data.data.reverse().forEach((row: RowData<T>, index: number): void => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n        this.data.data.reverse();\r\n        if (newSelection !== -10) {\r\n          newSelection = this.data.data.length - newSelection - 1;\r\n        }\r\n      }\r\n      if (newSelection !== -10) {\r\n        this.selectRow(this.data.data[newSelection], true);\r\n      }\r\n      if (Math.abs(this.scrollCount) >= 2) {\r\n        this.scrollCount = 0;\r\n      } else {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emite el evento cuando se da click al boton AddRow\r\n   */\r\n  onAddRow(): void {\r\n    this.addRow.emit();\r\n  }\r\n\r\n\r\n  getHeaderSubtitle(): string[] {\r\n    const x: string[] = this.columnConfig.map((column: ColumnConfig, index: number): string => {\r\n      if (column.visible && column.subtitle !== undefined) {\r\n        return 'subtitle' + index;\r\n      } else {\r\n        return null;\r\n      }\r\n    }).filter((data: string): boolean => data != null);\r\n    return x;\r\n  }\r\n\r\n  getColumnsWithTitle(): string[] {\r\n    return this.columnConfig.filter((column: ColumnConfig): boolean =>\r\n      column.visible && column.title !== undefined\r\n    ).map((col: ColumnConfig): string => col.name);\r\n  }\r\n\r\n  dragger(event: MouseEvent): boolean {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      if (rowIndex !== this.lastIndexRowDrag) {\r\n        this.lastIndexRowDrag = rowIndex;\r\n        // This can have a memory problem with big data\r\n        const array: RowData<T>[] = [...this.dataBeforeDrag.data];\r\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n        this.data = new MatTableDataSource(array);\r\n      }\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  startDrag(event: MouseEvent): void {\r\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\r\n    this.lastIndexRowDrag = this.indexRowStartDrag;\r\n    this.dataBeforeDrag = this.data;\r\n  }\r\n\r\n  private getRowIndex(pageY: number): number {\r\n    let offsetTop: number = 0;\r\n    let container: HTMLElement = this.containerTable.nativeElement;\r\n    while ((container !== null) && (offsetTop === 0)) {\r\n      offsetTop = container.offsetTop;\r\n      container = container.parentElement;\r\n    }\r\n    let rowIndex: number = -1;\r\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\r\n    for (let i: number = 0; i < rows.length; i++) {\r\n      const row: HTMLElement = (rows[i] as HTMLElement);\r\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop) {\r\n        rowIndex = i;\r\n      }\r\n    }\r\n    if (rowIndex < 0) { rowIndex = 0; }\r\n    return rowIndex;\r\n  }\r\n\r\n  get columnType(): typeof ColumnType {\r\n    return ColumnType;\r\n  }\r\n\r\n  showMessageEmpty(data: MatTableDataSource<RowData<T>>): boolean {\r\n    if (this.emptyMessageForColumn.isEnabled) {\r\n      if ((!data.filteredData) || (data.filteredData && data.filteredData.length === 0)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getMessageEmtpy(): string {\r\n    return  this.emptyMessageForColumn.text;\r\n  }\r\n\r\n  getIfButtonDisabled(): boolean {\r\n    if (this.addRowButton && (this.addRowButton.isDisabled !== undefined && this.addRowButton.isDisabled !== null)) {\r\n      if (this.addRowButton.isDisabled) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getToolTipButtonMessage(): string {\r\n    if (this.getIfButtonDisabled()) {\r\n      return this.addRowButton.toolTipText;\r\n    }\r\n    return '';\r\n  }\r\n\r\n}\r\n\r\n","import {ColumnConfig} from './table-helisa.interface';\r\nimport {Observable} from 'rxjs';\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): {} {\r\n    return {};\r\n  }\r\n\r\n  nextPage(): number {\r\n    return this.page++;\r\n  }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport * as moment_ from 'moment';\r\nconst moment: typeof moment_ = moment_;\r\n\r\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material/datepicker';\r\nimport { filter, tap } from 'rxjs/operators';\r\n\r\nexport enum TypeCalendarEnum {\r\n  NORMAL = 'norma',\r\n  MONTH_YEAR = 'mounth-year',\r\n  STRICT = 'strict'\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css'],\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n\r\n  @ViewChild('picker', { static: true }) datePickerShow: MatDatepicker<Date>;\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n  private date: Date = new Date();\r\n\r\n  /**\r\n   * Formato de fecha.\r\n   * Los formatos validos son aquellos que maneja la libreria momentjs y este: 'DD [de] MMMM [de] YYYY'\r\n   * https://momentjs.com/docs/#/parsing/string-format/\r\n   */\r\n  @Input() dateFormat: string = 'DD/MM/YYYY';\r\n  @Input() locale: string = 'es';\r\n  @Input() errorMessage: string = 'La fecha no concuerda con el formato ';\r\n  @Input() placeholder: string = this.dateFormat;\r\n  @Input() showDatePicker: boolean = false;\r\n  @Input() minDate: Date;\r\n  @Input() maxDate: Date;\r\n  @Output() change: EventEmitter<Date> = new EventEmitter<Date>();\r\n  isClosed: boolean = false;\r\n  // tslint:disable-next-line:no-any\r\n  timeout: any;\r\n  isDisabled: boolean = false;\r\n  /**\r\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\r\n   * será tomado en cuenta\r\n   */\r\n  @Input() typeCalendar: TypeCalendarEnum = TypeCalendarEnum.NORMAL;\r\n\r\n  dateToVisualize: FormControl;\r\n\r\n  /**\r\n   * Para evitar nuevos eventos miestras se realiza el parseo\r\n   */\r\n  private isFromInputEvent: boolean = false;\r\n\r\n  /**\r\n   * Verificar si el formato es valido\r\n   */\r\n  invalidFormat: boolean = false;\r\n  private inputFormReal: FormControl = new FormControl('');\r\n\r\n  constructor() { }\r\n\r\n  /*\r\n  * TypeCalendarEnum.MONTH_YEAR = 'MM/YYYY'\r\n  * TypeCalendarEnum.STRICT = 'DD [de] MMMM [de] YYYY'\r\n  * */\r\n  ngOnInit(): void {\r\n    moment.locale(this.locale);\r\n    this.dateToVisualize = new FormControl('', this.dateFormControl.validator);\r\n    this.formHandler();\r\n    this.inputFormReal = this.dateFormControl;\r\n    this.inputFormReal.registerOnDisabledChange((isDisabled: boolean): void => {\r\n      if (isDisabled) {\r\n        this.isDisabled = true;\r\n        this.dateToVisualize.disable();\r\n      } else {\r\n        this.isDisabled = false;\r\n        this.dateToVisualize.enable();\r\n      }\r\n    });\r\n\r\n    /**\r\n     * establecer valor por defecto de la fecha\r\n     */\r\n    if (this.dateFormControl.value !== '' && this.dateFormControl.value !== null) {\r\n      const incomingDate: string = moment(this.dateFormControl.value, this.dateFormat).format(this.dateFormat);\r\n      if (incomingDate !== 'Invalid date') {\r\n        this.dateToVisualize.setValue(incomingDate);\r\n        this.dateFormControl.setValue(this.dateFormControl.value);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  get typeCalendarEnum(): typeof TypeCalendarEnum {\r\n    return TypeCalendarEnum;\r\n  }\r\n\r\n  openDatePicker(): void {\r\n    if (this.showDatePicker && !this.isClosed) {\r\n      this.isClosed = true;\r\n      this.timeout = setTimeout((): void => {\r\n        this.datePickerShow.open();\r\n      }, 2000);\r\n    }\r\n  }\r\n\r\n  onKey(event: KeyboardEvent): void {\r\n    if (event.key === 'Enter') {\r\n      this.onBlur();\r\n      this.isClosed = true;\r\n      this.datePickerShow.open();\r\n    }\r\n  }\r\n\r\n  onBlur(): void {\r\n    if (moment(this.dateToVisualize.value, this.dateFormat, true).isValid()) {\r\n      const incomingDate: string = moment(this.dateToVisualize.value, this.dateFormat).format(this.dateFormat);\r\n      this.dateToVisualize.setValue(incomingDate);\r\n      this.dateFormControl.setValue(moment(this.dateToVisualize.value, this.dateFormat).toDate());\r\n      this.change.emit(moment(this.dateToVisualize.value, this.dateFormat).toDate());\r\n      clearTimeout(this.timeout);\r\n      this.isClosed = false;\r\n      if (this.showDatePicker) {\r\n        this.isClosed = true;\r\n        this.datePickerShow.open();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Determina como se debe inicializar la visualizacion del calendar\r\n   */\r\n  getStartView(): string {\r\n    // multi-year\r\n    if (this.typeCalendar === this.typeCalendarEnum.MONTH_YEAR) {\r\n      return 'multi-year';\r\n    } else if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\r\n      return 'month';\r\n    } else {\r\n      return 'month';\r\n    }\r\n  }\r\n\r\n  private formHandler(): void {\r\n    if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\r\n      this.dateToVisualize.valueChanges.subscribe((date: string): void => {\r\n        this.invalidFormat = false;\r\n        const isValid: boolean = moment(date, this.dateFormat, true).isValid();\r\n        const result: string = moment(date, this.dateFormat).format(this.dateFormat);\r\n        if (!!result && (result === 'Invalid date' || !isValid)) {\r\n          this.invalidFormat = true;\r\n          return;\r\n        }\r\n        if (!!result) {\r\n          if (!this.isFromInputEvent) {\r\n            this.isFromInputEvent = true;\r\n            this.dateToVisualize.setValue(moment(result, this.dateFormat).format(this.dateFormat));\r\n            this.dateFormControl.setValue(moment(result, this.dateFormat).toDate());\r\n            this.isFromInputEvent = false;\r\n          } else {\r\n            setTimeout((): void => {\r\n              this.isFromInputEvent = false;\r\n            }, 1500);\r\n          }\r\n\r\n        }\r\n      });\r\n    } else {\r\n      this.dateToVisualize.valueChanges\r\n        .pipe(\r\n          tap((date: string): void => {\r\n            if (date.trim().length > this.dateFormat.length) {\r\n              this.invalidFormat = true;\r\n            } else {\r\n              this.invalidFormat = false;\r\n            }\r\n          }),\r\n          filter((date: string): boolean => date.length === this.dateFormat.length)\r\n        )\r\n        .subscribe((date: string): void => {\r\n          this.invalidFormat = false;\r\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\r\n          const result: string = moment(date, this.dateFormat).format('YYYY-MM-DD');\r\n\r\n          if (!!result && (result === 'Invalid date' || !isValid)) {\r\n            this.invalidFormat = true;\r\n            return;\r\n          }\r\n\r\n          if (!!result) {\r\n            if (!this.isFromInputEvent) {\r\n              this.isFromInputEvent = true;\r\n              const subString: string[] = result.split('-');\r\n\r\n              const year: number = parseFloat(subString[0]);\r\n              const month: number = parseFloat(subString[1]);\r\n              const day: number = parseFloat(subString[2]);\r\n\r\n              this.date.setFullYear(year);\r\n              this.date.setDate(day);\r\n              this.date.setMonth(month - 1); // -1 por que los meses se toman como los indices en un array\r\n\r\n              /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\r\n              if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n                this.date = moment(this.date).endOf('month').toDate();\r\n              }\r\n\r\n              this.dateToVisualize.setValue(moment(this.date, 'YYYY-MM-DD').format(this.dateFormat));\r\n              this.dateFormControl.setValue(this.date);\r\n              this.isFromInputEvent = false;\r\n            } else {\r\n              setTimeout((): void => {\r\n                this.isFromInputEvent = false;\r\n              }, 1500);\r\n            }\r\n\r\n          }\r\n        });\r\n    }\r\n\r\n\r\n    this.dateFormControl.valueChanges\r\n      .subscribe((date: string): void => {\r\n        const incommingDate: string = moment(date, this.dateFormat).format(this.dateFormat);\r\n        if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\r\n          this.dateToVisualize.setValue(incommingDate);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Evento que se dispara luego seleccionar un mes\r\n   */\r\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void {\r\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n      datepicker.close();\r\n      const date: Date = moment(chosenMonthDate).endOf('month').toDate();\r\n\r\n      this.dateToVisualize.setValue(moment(date, 'YYYY-MM-DD').format(this.dateFormat));\r\n      this.dateFormControl.setValue(date);\r\n      this.change.emit(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evento desde el control touch del calendar\r\n   */\r\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>): void {\r\n    this.dateToVisualize.setValue(moment(event.value, 'YYYY-MM-DD').format(this.dateFormat));\r\n    this.dateFormControl.setValue(new Date(event.value));\r\n    this.change.emit(new Date(event.value));\r\n    this.isClosed = true;\r\n  }\r\n\r\n  getErrorMessage(): string {\r\n    return this.errorMessage + this.dateFormat;\r\n  }\r\n\r\n  getDateToControl(): Date {\r\n    return moment(this.dateToVisualize.value, this.dateFormat).toDate();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Subscriber, Observable } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected: BehaviorSubject<number | string> = new BehaviorSubject<number | string>(1);\r\n    // Observable string streams\r\n    nodeSelected: Observable<string | number> = this.emitNodeSelected.asObservable();\r\n\r\n    // Observable string sources\r\n    private emitDataSource: BehaviorSubject<Node> = new BehaviorSubject<Node>(undefined);\r\n\r\n    // Observable string streams\r\n    dataSourceObservable: Observable<Node> = this.emitDataSource.asObservable();\r\n\r\n    // Expand node observable\r\n    private emitExpandAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n    nodeExpand: Observable<boolean> = this.emitExpandAllNodes.asObservable();\r\n\r\n     // Collapse node observable\r\n     private emitCollapseAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n     nodeCollapse: Observable<boolean> = this.emitCollapseAllNodes.asObservable();\r\n\r\n    private emitRefreshTree: Subject<void> = new Subject<void>();\r\n    refreshTreeObservable: Observable<void> = this.emitRefreshTree.asObservable();\r\n\r\n    private emitRefreshTreeWithPagination: Subject<void> = new Subject<void>();\r\n    refreshTreeWithPaginationObservable: Observable<void> = this.emitRefreshTreeWithPagination.asObservable();\r\n\r\n    private emitExpandOneNode: Subject<Node> = new Subject<Node>();\r\n    expandOneNodeObservable: Observable<Node> = this.emitExpandOneNode.asObservable();\r\n\r\n    private emitCollapseOneNode: Subject<Node> = new Subject<Node>();\r\n    collapseOneNodeObservable: Observable<Node> = this.emitCollapseOneNode.asObservable();\r\n\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number | string): void {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n    // Service message commands\r\n    changeDataSource(data: Node): void {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n    expandAllNodes(expand: boolean): void {\r\n        this.emitExpandAllNodes.next(expand);\r\n    }\r\n\r\n    collapseAllNodes(collapse: boolean): void {\r\n        this.emitCollapseAllNodes.next(collapse);\r\n    }\r\n\r\n    refreshTree(): void {\r\n        this.emitRefreshTree.next();\r\n    }\r\n\r\n\r\n    refreshTreeWithPagination(): void {\r\n        this.emitRefreshTreeWithPagination.next();\r\n    }\r\n\r\n\r\n    expandOneNode(node: Node): void {\r\n    this.emitExpandOneNode.next(node);\r\n    }\r\n\r\n\r\n    collapseOneNode(node: Node): void {\r\n        this.emitCollapseOneNode.next(node);\r\n    }\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n}\r\n","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n\r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }\r\n\r\n    nextPage(): number {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }\r\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, HostListener } from '@angular/core';\r\nimport { NestedTreeControl, TreeControl } from '@angular/cdk/tree';\r\nimport { MatOptionSelectionChange } from '@angular/material/core';\r\nimport { MatTreeNestedDataSource, MatTree } from '@angular/material/tree';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass']\r\n  // host: { '(document:keyup)': 'onKeyDown($event)' }\r\n})\r\nexport class TreeHelisaComponent implements OnInit, AfterViewInit {\r\n  isDisabled: boolean;\r\n  selectedNode: number | string | null;\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService: TreeHelisaService, private router: Router, private elementRef: ElementRef) {\r\n    // cargar datos pasados por el @Input\r\n    if (!!this.data) {\r\n      const data: Node = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = [];\r\n      this.treeControl.dataNodes = [];\r\n    }\r\n  }\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit: FormControl;\r\n  @ViewChild('tree', {static: true}) tree: MatTree<{}>;\r\n  private selectedOptions: Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  > = new Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  >();\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data: Node;\r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed: EventEmitter<string | number> = new EventEmitter<number | string>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue añadido\r\n   */\r\n  @Output() added: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() collapseParent: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled: EventEmitter<RequestTreeHelisa> = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() dobleClick: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() keypressDelete: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() keypressInsert: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() checkedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() uncheckedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() clickAddNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickEditNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickDeleteNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  treeControl: NestedTreeControl<Node> = new NestedTreeControl<Node>((node: Node): Node[] | Observable<Node[]> => node.children);\r\n  dataSource: MatTreeNestedDataSource<Node> = new MatTreeNestedDataSource<Node>();\r\n\r\n  isSingleClick: boolean = true;\r\n  currentNode: Node = null;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node: Node): string {\r\n    let result: string[] = [node.name];\r\n    let concat: string = '';\r\n\r\n    if (node.parent) {\r\n      result.push(this.getDescription(node.parent));\r\n    }\r\n\r\n    if (result.length === 1) {\r\n      return node.name;\r\n    }\r\n\r\n    result = result.reverse();\r\n\r\n    for (let i: number = 0; i < result.length; i++) {\r\n      const element: string = result[i];\r\n      concat = concat + element + (i === result.length - 1 ? '' : ',');\r\n    }\r\n\r\n    return concat;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable.subscribe((res: Node): void => {\r\n      if (!!res && !!res.children) {\r\n        this.selectedNode = res.id;\r\n        this.receivePage(res.children);\r\n      } else {\r\n        this.dataSource.data = [];\r\n        this.treeControl.dataNodes = [];\r\n      }\r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected.subscribe((res: string | number): void => {\r\n      if (!!this.data && !!this.data.children) {\r\n        this.selectNode(this.data, res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeObservable.subscribe((res: void): void => {\r\n      this.refreshTree();\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeWithPaginationObservable.subscribe((res: void): void => {\r\n      this.refreshTreeWithPagination();\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.treeHelisaService.nodeExpand.subscribe((res: boolean): void => {\r\n      if (res != null) {\r\n        if (res) {\r\n          this.tree.treeControl.expandAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.nodeCollapse.subscribe((res: boolean): void => {\r\n      if (res !== null) {\r\n        if (res) {\r\n          this.tree.treeControl.collapseAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.expandOneNodeObservable.subscribe((res: Node): void => {\r\n      if (res !== undefined) {\r\n        this.treeControl.expand(res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.collapseOneNodeObservable.subscribe((res: Node): void => {\r\n      if (res !== undefined) {\r\n        this.treeControl.collapse(res);\r\n      }\r\n    });\r\n  }\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node: Node): void {\r\n    this.isSingleClick = true;\r\n    setTimeout((): void => {\r\n      if (this.isSingleClick) {\r\n        this.selectNode(node, node.id);\r\n\r\n        // if(!!node && !node.children){\r\n        if (!!node) {\r\n          this.nodeSelected.emit(node.id);\r\n          this.currentNode = node;\r\n        }\r\n      }\r\n    }, 350);\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n\r\n    if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node: Node): void {\r\n    this.clickEditNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se edita el nodo ahora solo se emite el evento 'clickEditNode'\r\n     * retornando el nodo al cual le hicieron click en la opción delete\r\n     */\r\n    // node.isEditable = true;\r\n    // this.isDisabled = true;\r\n  }\r\n\r\n  onAdd(node: Node): void {\r\n    this.clickAddNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se crea y se agrega el nodo ahora solo se emite el evento 'clickAddNode'\r\n     * retornando el nodo al cual le hicieron click en la opción add\r\n     */\r\n    //   // si no tiene hijos instanciar el array\r\n    //   if (!node.children) {\r\n    //     node.children = [];\r\n    //   }\r\n    //   node.children.push({\r\n    //     id: Math.random(),\r\n    //     name: '',\r\n    //     isSelected: false,\r\n    //     parent: node,\r\n    //     isEditable: true\r\n    //   });\r\n    //   if (node.children) {\r\n    //     this.isDisabled = true;\r\n    //     this.treeHelisaService.expandOneNode(node);\r\n    //   }\r\n    //   this.refreshTree();\r\n  }\r\n\r\n  onDelete(node: Node): void {\r\n    this.clickDeleteNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se elimina el nodo ahora solo se emite el evento 'clickDeleteNode'\r\n     * retornando el nodo al cual le hicieron click en la opción delete\r\n     */\r\n    // // Remueve el nodo utilizando la libreria de lodash\r\n    // _.remove(node.parent.children, node);\r\n\r\n    // this.refreshTree();\r\n    // this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node: Node, value: string): void {\r\n    node.name = value;\r\n    if (node.id == null && node.name === '') {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    } else if (node.id && node.id != null && node.name.trim() !== '') {\r\n      this.edited.emit(node);\r\n      node.isEditable = false;\r\n      this.selectNode(node, node.id);\r\n    } else if (node.id == null && node.name.trim() !== '') {\r\n      this.added.emit(node);\r\n      node.isEditable = false;\r\n    }\r\n    this.isDisabled = false;\r\n    this.refreshTree();\r\n  }\r\n\r\n  onCancel(node: Node, value: string): void {\r\n    this.isDisabled = false;\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if (node.id == null) {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    }\r\n\r\n    node.isEditable = false;\r\n  }\r\n\r\n  onDblClick(node: Node): void {\r\n    this.isSingleClick = false;\r\n    this.dobleClick.emit(node.id);\r\n  }\r\n\r\n  @HostListener('document:keyup', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    switch (event.key) {\r\n      case 'Delete':\r\n        this.keypressDelete.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'Insert':\r\n        this.keypressInsert.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'ArrowDown':\r\n        this.moveDownIntoTree();\r\n        break;\r\n      case 'ArrowUp':\r\n        this.moveUpIntoTree();\r\n        break;\r\n    }\r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  private moveUpIntoTree(): number {\r\n    if (!!this.data) {\r\n      // si aun no hay ningun node seleccionado selecciona el primero\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode.parent && this.currentNode.id != null) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number = this.currentNode.parent.children.indexOf(this.currentNode);\r\n\r\n          if (this.currentNode.parent.id == null && index === 0) {\r\n            return 0;\r\n          } else {\r\n            // si tiene nodos al mismo nivel salta al nodo anterior\r\n            if (index !== undefined && index === 0) {\r\n              this.currentNode = this.currentNode.parent;\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } else {\r\n              // si no tiene nodos al mismo nivel salta al nodo padre\r\n              this.currentNode = this.currentNode.parent.children[index - 1];\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveDownIntoTree(): void {\r\n    if (!!this.data) {\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number =\r\n            !!this.currentNode && !!this.currentNode.parent ? this.currentNode.parent.children.indexOf(this.currentNode) : null;\r\n\r\n          // si tiene childrens pasa al primer children\r\n          if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n            this.currentNode = this.currentNode.children[0];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else if (\r\n            index !== undefined &&\r\n            index === this.currentNode.parent.children.length - 1 &&\r\n            this.currentNode.parent.parent != null &&\r\n            this.currentNode.parent.parent.children != null &&\r\n            this.currentNode.parent.parent.children.length > 0\r\n          ) {\r\n            const indexOfParent: number = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent);\r\n            this.currentNode =\r\n              this.currentNode.parent.parent.children[indexOfParent + 1] === undefined\r\n                ? this.currentNode\r\n                : this.currentNode.parent.parent.children[indexOfParent + 1];\r\n\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else {\r\n            // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\r\n            this.currentNode = this.currentNode.parent.children[index + 1];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild(t: number, node: Node): boolean {\r\n    return !!node.children && node.children.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\r\n   */\r\n  private refreshTree(): void {\r\n    this.data = null;\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())\r\n   */\r\n  private refreshTreeWithPagination(): void {\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]): void {\r\n    if (!this.data) {\r\n      this.data = { id: null, name: 'root', isSelected: false };\r\n    }\r\n    if (!this.data.children) {\r\n      this.data.children = new Array<Node>();\r\n      this.treeHelisaConnect = new TreeHelisaConnect<Node>();\r\n    }\r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach((node: Node): void => {\r\n      this.fillParent(node, this.data);\r\n    });\r\n    this.data.children = this.reorderByOrderIndex(this.data.children);\r\n    this.dataSource.data = this.data.children;\r\n    this.treeControl.dataNodes = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   */\r\n  private fillParent(node: Node, parent: Node): void {\r\n    node.parent = parent;\r\n    if (node.children && node.children.length > 0) {\r\n      node.children.forEach((item: Node): void => {\r\n        this.fillParent(item, node);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   */\r\n  private selectNode(node: Node, id: number | string): Node {\r\n    if (node == null) {\r\n      return null;\r\n    }\r\n    this.upSelectNode(node);\r\n    if (!!this.selectedNode) {\r\n      const nodeSelected: Node = this.getNodeById(this.selectedNode);\r\n      if (nodeSelected != null) {\r\n        nodeSelected.isSelected = false;\r\n        this.selectedNode = null;\r\n      }\r\n    }\r\n    if (node.id !== undefined && node.id === id) {\r\n      node.isSelected = true;\r\n      this.expandAllParents(node);\r\n      this.selectedNode = node.id;\r\n      return node;\r\n    } else if (node.children != null) {\r\n      let i: number;\r\n      let result: Node = null;\r\n      for (i = 0; result == null && i < node.children.length; i++) {\r\n        result = this.selectNode(node.children[i], id);\r\n      }\r\n      return result;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private expandAllParents(node: Node): void {\r\n    if (!!node && !!node.parent) {\r\n      this.treeHelisaService.expandOneNode(node.parent);\r\n      this.expandAllParents(node.parent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   */\r\n  private upSelectNode(node: Node): void {\r\n    if (!!node && node.isSelected !== undefined) {\r\n      node.isSelected = false;\r\n      if (!!node.children) {\r\n        for (const childrenNode of node.children) {\r\n          this.upSelectNode(childrenNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getClassNode(node: Node): string[] {\r\n    const classNode: string[] = [];\r\n    if (node.isSelected) {\r\n      classNode.push('isSelected');\r\n    }\r\n    if (node.classNode) {\r\n      classNode.push(node.classNode);\r\n    }\r\n    return classNode;\r\n  }\r\n\r\n  onEditMode(node: Node, editMode: boolean): void {\r\n    this.getSelectedOptions(node).editMode = editMode;\r\n  }\r\n\r\n  onSelectOption(event: MatOptionSelectionChange, node: Node): void {\r\n    node.isCheckedOption = event.source.selected;\r\n    if (node.isCheckedOption) {\r\n      this.checkedOptionNode.emit(node.id);\r\n    } else {\r\n      this.uncheckedOptionNode.emit(node.id);\r\n    }\r\n  }\r\n\r\n  getSelectedOptions(\r\n    node: Node\r\n  ): {\r\n    formControl: FormControl;\r\n    editMode: boolean;\r\n  } {\r\n    if (this.selectedOptions.has(node.id)) {\r\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\r\n    } else {\r\n      this.reloadSelectedOptions(node, false);\r\n    }\r\n    return this.selectedOptions.get(node.id);\r\n  }\r\n\r\n  private reloadSelectedOptions(node: Node, editMode: boolean): void {\r\n    const array: Array<string | number | null> = new Array<string | number | null>();\r\n    node.options.forEach((option: Node): void => {\r\n      if (option.isCheckedOption) {\r\n        array.push(option.id);\r\n      }\r\n    });\r\n    const obj: {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    } = { formControl: new FormControl(array), editMode };\r\n    this.selectedOptions.set(node.id, obj);\r\n  }\r\n\r\n  /**\r\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\r\n   * @param id  number | string\r\n   * @returns Node o null si no hay un nodo con ese id\r\n   */\r\n  getNodeById(id: number | string): Node {\r\n    const queue: Node[] = [...this.dataSource.data];\r\n    while (queue.length > 0) {\r\n      const curr: Node = queue.shift();\r\n      if (curr.id === id) {\r\n        return curr;\r\n      } else {\r\n        if (!!curr.children) {\r\n          queue.push(...curr.children);\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  reorderByOrderIndex(node: Node[]): Node[] {\r\n    if (!!node && node.length > 0) {\r\n      try {\r\n        node = _.orderBy(node, (x: Node): number => x.orderIndex, ['asc']);\r\n        node.forEach((element: Node): void => {\r\n          if (!!element.children && element != null) {\r\n            element.children = this.reorderByOrderIndex(element.children);\r\n          }\r\n        });\r\n        return node;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\r\n\r\n@Injectable()\r\nexport class AutocompleteHelisaService<T> {\r\n\r\n  private emitChangeSource: BehaviorSubject<Array<OptionAutocompleteHelisa<T>>> =\r\n  new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\r\n\r\n  public dataSource$: Observable<Array<OptionAutocompleteHelisa<T>>> = this.emitChangeSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>): void {\r\n    this.emitChangeSource.next(options);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { map, startWith, throttleTime, debounceTime } from 'rxjs/operators';\r\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\r\n\r\nexport interface OptionAutocompleteHelisa<T> {\r\n  value: T;\r\n  displayText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-autocomplete',\r\n  templateUrl: './autocomplete-helisa.component.html',\r\n  styleUrls: ['./autocomplete-helisa.component.css'],\r\n  providers: [AutocompleteHelisaService]\r\n})\r\nexport class AutocompleteHelisaComponent<T> implements OnInit {\r\n\r\n  @Input() myControl: FormControl = new FormControl();\r\n  @Input() options: Array<OptionAutocompleteHelisa<T>> = new Array<OptionAutocompleteHelisa<T>>();\r\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\r\n  selectedValue: OptionAutocompleteHelisa<T>;\r\n  @Output() selectedValueEmmiter: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\r\n  @Input() isRemote: boolean = false;\r\n  isLoading: boolean = false;\r\n\r\n\r\n  onScrollObservable: Subject<void> = new Subject<void>();\r\n\r\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.onScrollObservable.asObservable()\r\n    .pipe(\r\n      debounceTime(500),\r\n      throttleTime(500)\r\n    )\r\n    .subscribe((): void => {\r\n      this.nextPage.emit();\r\n    });\r\n\r\n    if (this.isRemote) {\r\n      this.autocompleteHelisaService.dataSource$.subscribe((data: OptionAutocompleteHelisa<T>[]): void => {\r\n        setTimeout((): void => {\r\n          this.options = data;\r\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\r\n        });\r\n      });\r\n    }\r\n\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map((x: string): string => this._checkRegex(x)),\r\n      map((value: string): OptionAutocompleteHelisa<T>[] => this._filter(value))\r\n    );\r\n\r\n  }\r\n\r\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {\r\n    return option ? option.displayText : undefined;\r\n  }\r\n\r\n  getService(): AutocompleteHelisaService<T> {\r\n    return this.autocompleteHelisaService;\r\n  }\r\n\r\n\r\n  /** Elimina caracteres extraños */\r\n  private _checkRegex(value: string): string {\r\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '');\r\n    return value;\r\n  }\r\n\r\n  private _filter(value: string): OptionAutocompleteHelisa<T>[] {\r\n    if (!(value)) {\r\n      if (!this.isRemote) {\r\n        const filterValue: string[] = value.toLowerCase().split(' ');\r\n        return this.options.filter((option: OptionAutocompleteHelisa<T>): boolean => {\r\n          let ws: boolean = true;\r\n          filterValue.forEach((text: string): boolean => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\r\n          return ws;\r\n        }).splice(0, 5);\r\n      } else {\r\n        return this.options;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onSelected(event: {option: {value: OptionAutocompleteHelisa<T>}}): void {\r\n    this.selectedValue = event.option.value;\r\n    this.selectedValueEmmiter.emit(this.selectedValue.value);\r\n  }\r\n\r\n  getNextPage(): void {\r\n    this.onScrollObservable.next();\r\n  }\r\n}\r\n","import { Directive, EventEmitter, Input, Output, OnDestroy } from '@angular/core';\r\nimport { MatAutocomplete } from '@angular/material/autocomplete';\r\nimport { takeUntil, tap } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\nexport interface IAutoCompleteScrollEvent {\r\n  autoComplete: MatAutocomplete;\r\n  scrollEvent: Event;\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'mat-autocomplete[optionsScroll]'\r\n})\r\nexport class OptionsScrollDirective implements OnDestroy {\r\n\r\n  /**\r\n   * This value would different depends of styles\r\n   */\r\n  @Input() thresholdPercent: number = .9;\r\n  @Output() optionsScroll: EventEmitter<IAutoCompleteScrollEvent> = new EventEmitter<IAutoCompleteScrollEvent>();\r\n  destroy: Subject<void> = new Subject<void>();\r\n  lastScrollTop: number = 0;\r\n\r\n  constructor(public autoComplete: MatAutocomplete) {\r\n    this.autoComplete.opened.pipe(\r\n      tap((): void => {\r\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\r\n        // Note: The panel will be available on next tick\r\n        // Note: The panel wil NOT open if there are no options to display\r\n        setTimeout((): void => {\r\n          // Note: remove listner just for safety, in case the close event is skipped.\r\n          this.removeScrollEventListener();\r\n          if (!!this.autoComplete &&\r\n            !!this.autoComplete.panel &&\r\n            !!this.autoComplete.panel.nativeElement) {\r\n            this.autoComplete.panel.nativeElement\r\n              .addEventListener('scroll', this.onScroll.bind(this), false);\r\n          }\r\n        });\r\n      }),\r\n      takeUntil(this.destroy)).subscribe();\r\n\r\n    this.autoComplete.closed.pipe(\r\n      tap((): void => this.removeScrollEventListener()),\r\n      takeUntil(this.destroy)).subscribe();\r\n  }\r\n\r\n  private removeScrollEventListener(): void {\r\n    if (!!this.autoComplete &&\r\n      !!this.autoComplete.panel &&\r\n      !!this.autoComplete.panel.nativeElement) {\r\n      this.autoComplete.panel.nativeElement\r\n        .removeEventListener('scroll', this.onScroll);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy.next();\r\n    this.destroy.complete();\r\n\r\n    this.removeScrollEventListener();\r\n  }\r\n\r\n\r\n  onScroll(event: Event): void {\r\n    // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\r\n    const st: number = (event.target as Window).pageYOffset || (event.target as Element).scrollTop;\r\n    if (st > this.lastScrollTop) {\r\n      // downscroll code\r\n      if (this.thresholdPercent === undefined) {\r\n        this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n      } else {\r\n        const threshold: number = this.thresholdPercent * 100 * (event.target as Element).scrollHeight / 100;\r\n        const current: number = (event.target as Element).scrollTop + (event.target as Element).clientHeight;\r\n        if (current > threshold) {\r\n          this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n        }\r\n      }\r\n    } else {\r\n      // upscroll code\r\n    }\r\n    this.lastScrollTop = st <= 0 ? 0 : st;\r\n  }\r\n\r\n}\r\n","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\r\nimport { MatTooltip } from '@angular/material/tooltip';\r\n\r\n@Directive({\r\n    selector: '[helTooltip]',\r\n    providers: [MatTooltip]\r\n})\r\nexport class HelTooltipDirective {\r\n\r\n    tooltip: MatTooltip;\r\n\r\n    /**\r\n     * Mensaje a mostrar\r\n     */\r\n    @Input('helTooltip') message: string;\r\n\r\n    /**\r\n     * Tiempo antes de ocultarla el mensaje\r\n     */\r\n    @Input() hideDelay: number = 600;\r\n\r\n    /**\r\n     * Tiempo antes de mostra el mensaje\r\n     */\r\n    @Input() showDelay: number = 500;\r\n\r\n\r\n    constructor(tooltip: MatTooltip, private elemRef: ElementRef) {\r\n      this.tooltip = tooltip;\r\n    }\r\n\r\n    @HostListener('mouseover') mouseover(): void {\r\n      const currentContent: string = this.elemRef.nativeElement.innerText;\r\n\r\n      if (!!currentContent && !!this.message) {\r\n        if ((currentContent.toUpperCase() !== this.message.toString().toUpperCase()) || this.isEllipsisActive(this.elemRef.nativeElement)) {\r\n          this.tooltip.message = this.message;\r\n        }\r\n      }\r\n\r\n      this.tooltip.showDelay =  this.showDelay;\r\n      this.tooltip.hideDelay = this.hideDelay;\r\n    }\r\n\r\n\r\n    private isEllipsisActive(e: {offsetWidth: number , scrollWidth: number}): boolean {\r\n      return (e.offsetWidth < e.scrollWidth);\r\n    }\r\n}\r\n","import { Directive, HostBinding, PLATFORM_ID, Inject, Input, OnChanges } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: 'a[href]',\r\n})\r\nexport class ExternalLinkDirective implements OnChanges {\r\n  @HostBinding('attr.rel') relAttr: string = '';\r\n  @HostBinding('attr.target') targetAttr: string = '';\r\n  @HostBinding('attr.href') hrefAttr: string = '';\r\n  @Input() href: string;\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\r\n\r\n  ngOnChanges(): void {\r\n\r\n    this.hrefAttr = this.href;\r\n\r\n    if (this.isLinkExternal()) {\r\n      this.relAttr = 'noopener';\r\n      this.targetAttr = '_blank';\r\n    }\r\n  }\r\n\r\n  private isLinkExternal(): boolean {\r\n    return isPlatformBrowser(this.platformId) && !this.href.includes(location.hostname);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'externalLink'\r\n})\r\nexport class ExternalLinkPipe implements PipeTransform {\r\n    transform(value: string, ...args: string[]): string {\r\n        return '//' + value;\r\n    }\r\n}\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {ComboBoxListable} from './interface/combo-box-listable';\r\nimport {ComboBoxEditable} from './interface/combo-box-editable';\r\n\r\nexport enum ComboBoxHelisaState {\r\n  CLOSED,\r\n  SELECT,\r\n  INSERT\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-combo-box-helisa',\r\n  templateUrl: './combo-box-helisa.component.html',\r\n  styleUrls: ['./combo-box-helisa.component.css']\r\n})\r\nexport class ComboBoxHelisaComponent<TYPE> implements OnInit, AfterViewInit {\r\n\r\n  @Input() editable: ComboBoxEditable<TYPE>;\r\n  @Input() listable: ComboBoxListable<TYPE>;\r\n  @Input() placeholder: string = 'Sin seleccionar';\r\n  @Input() selectedItem: TYPE;\r\n  @Output() selectEmitter: EventEmitter<TYPE> = new EventEmitter<TYPE>();\r\n  @Input() enabled: boolean = true;\r\n\r\n  private page: number = 0;\r\n  private pageSize: number = 50;\r\n  private haveNextPage: boolean = true;\r\n  state: ComboBoxHelisaState = ComboBoxHelisaState.CLOSED;\r\n\r\n  rows: TYPE[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.getNextPage();\r\n  }\r\n\r\n  private getNextPage(): void {\r\n    if (this.haveNextPage) {\r\n      this.listable.getData(this.page++, this.pageSize).subscribe((rows: TYPE[]): void => {\r\n        rows.forEach((item: TYPE): number => this.rows.push(item));\r\n        this.haveNextPage = rows.length > 0;\r\n      });\r\n    }\r\n  }\r\n\r\n  get comboBoxHelisaState(): typeof ComboBoxHelisaState {\r\n    return ComboBoxHelisaState;\r\n  }\r\n\r\n  onFocus(): void {\r\n    if (this.enabled) {\r\n      this.state = ComboBoxHelisaState.SELECT;\r\n    }\r\n  }\r\n\r\n  selectItem(row: TYPE): void {\r\n    this.selectedItem = row;\r\n    this.selectEmitter.emit(row);\r\n    this.state = ComboBoxHelisaState.CLOSED;\r\n  }\r\n\r\n  changeToInsert(): void {\r\n    this.state = ComboBoxHelisaState.INSERT;\r\n  }\r\n\r\n  insert(event: string): void {\r\n    if (event.trim().length > 0) {\r\n      this.editable.insert(event).subscribe(\r\n        (data: TYPE): void => {\r\n          this.rows.push(data);\r\n          this.state = ComboBoxHelisaState.SELECT;\r\n        }\r\n      );\r\n    } else {\r\n      this.state = ComboBoxHelisaState.SELECT;\r\n    }\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n    if (element.scrollHeight - element.scrollTop < 1000) {\r\n      this.getNextPage();\r\n    }\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport enum PagingTreeInitialMode {\r\n  COLLAPSE,\r\n  EXPAND\r\n}\r\n\r\nexport interface PagingTreeHelisaListable<T> {\r\n  get(lastChildOrder: number, size: number): Observable<T[]>;\r\n\r\n  getIdField(): string;\r\n\r\n  getIdParentField(): string;\r\n\r\n  compare(a: T, b: T): number;\r\n}\r\n\r\ninterface HelisaNode<T> {\r\n  object: T;\r\n  level: number;\r\n  haveChildren: boolean;\r\n  expanded: boolean;\r\n  visible: boolean;\r\n  preorder: number;\r\n}\r\n\r\nexport interface HelisaNodeData<T> {\r\n  readonly object: T;\r\n  readonly level: number;\r\n  readonly haveChildren: boolean;\r\n  readonly expanded: boolean;\r\n  readonly visible: boolean;\r\n  readonly preorder: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-paging-tree',\r\n  templateUrl: './paging-tree-helisa.component.html',\r\n  styleUrls: ['./paging-tree-helisa.component.css']\r\n})\r\nexport class PagingTreeHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private pageSize: number = 200000;\r\n  private visibleLimit: number = 0;\r\n  private visibleSize: number = 100;\r\n  private treeMode: PagingTreeInitialMode = PagingTreeInitialMode.EXPAND;\r\n  private visibleObjects: Array<T> = [];\r\n  private service: PagingTreeHelisaListable<T>;\r\n  private searchNode: Map<string, HelisaNode<T>>;\r\n  private allNode: Array<HelisaNode<T>> = [];\r\n\r\n  @Output()\r\n  afterLoadData: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @ContentChild('nodeComponent')\r\n  nodeComponent: TemplateRef<{ data: T, node: HelisaNodeData<T> }>;\r\n\r\n  @ContentChild('nodeTitle')\r\n  nodeTitle: TemplateRef<any>;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n  }\r\n\r\n  @Input()\r\n  set mode(paramMode: PagingTreeInitialMode) {\r\n    this.treeMode = paramMode;\r\n    this.reset();\r\n  }\r\n\r\n  @Input()\r\n  set pagingTreeHelisaListable(paramService: PagingTreeHelisaListable<T>) {\r\n    this.service = paramService;\r\n    this.reset();\r\n  }\r\n\r\n  public reset(): void {\r\n    if (this.service) {\r\n      this.service.get(0, this.pageSize).subscribe((items: T[]): void => this.loadData(items));\r\n    }\r\n  }\r\n\r\n  private loadData(items: T[]): void {\r\n    this.searchNode = new Map<string, HelisaNode<T>>();\r\n    this.visibleObjects = [];\r\n    this.allNode = [];\r\n    items = this.sortItems(items);\r\n    this.searchNode = new Map<string, HelisaNode<T>>();\r\n    items.forEach((item: T): void => {\r\n      const node: HelisaNode<T> = this.createNode(item);\r\n      this.allNode.push(node);\r\n    });\r\n    this.reSort();\r\n    this.loadNextVisibleObjects(null);\r\n    this.afterLoadData.emit();\r\n  }\r\n\r\n  private sortItems(items: T[]): T[] {\r\n    const lAdy: Map<string, T[]> = new Map<string, T[]>();\r\n    const stack: T[] = [];\r\n    items.forEach((item: T): void => {\r\n      const idParent: string = item[this.service.getIdParentField()];\r\n      if (!idParent) {\r\n        stack.unshift(item);\r\n      } else {\r\n        if (!lAdy.has(idParent)) {\r\n          lAdy.set(idParent, []);\r\n        }\r\n        lAdy.get(idParent).push(item);\r\n      }\r\n    });\r\n    const response: T[] = new Array<T>(items.length);\r\n    let index: number = 0;\r\n    while (stack.length > 0) {\r\n      const last: T = stack.pop();\r\n      response[index++] = last;\r\n      const children: T[] = lAdy.get(last[this.service.getIdField()]);\r\n      if (children) {\r\n        for (let i: number = children.length - 1; i >= 0; i--) {\r\n          stack.push(children[i]);\r\n        }\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n\r\n  private createNode(item: T): HelisaNode<T> {\r\n    if (this.searchNode.has(item[this.service.getIdField()])) {\r\n      throw Error('Ya existe el nodo.');\r\n    }\r\n    const parentInformation: HelisaNode<T> = this.getNodeInformationById(item[this.service.getIdParentField()]);\r\n    const nodeInformation: HelisaNode<T> = {\r\n      object: item,\r\n      haveChildren: false,\r\n      level: parentInformation ? parentInformation.level + 1 : 0,\r\n      expanded: this.treeMode === PagingTreeInitialMode.EXPAND,\r\n      visible: false,\r\n      preorder: this.searchNode.size + 1,\r\n    };\r\n    this.searchNode.set(item[this.service.getIdField()], nodeInformation);\r\n    if (parentInformation) {\r\n      parentInformation.haveChildren = true;\r\n    }\r\n    return nodeInformation;\r\n  }\r\n\r\n  public getNodeInformationById(id: string): HelisaNode<T> {\r\n    return this.searchNode.get(id);\r\n  }\r\n\r\n  public getNodeInformation(item: T): HelisaNode<T> {\r\n    return this.searchNode.get(item[this.service.getIdField()]);\r\n  }\r\n\r\n  getLevelClass(item: T): string {\r\n    return 'padding-level-' + this.getNodeInformationById(item[this.service.getIdField()]).level;\r\n  }\r\n\r\n  private loadNextVisibleObjects(nodeFrom: T): void {\r\n    const visibleObjects: T[] = [];\r\n    this.visibleObjects.forEach((item: T): void => {\r\n      if (this.getNodeInformation(item)) {\r\n        if (nodeFrom && this.getNodeInformation(nodeFrom).preorder >= this.getNodeInformation(item).preorder) {\r\n          visibleObjects.push(item);\r\n        } else {\r\n          this.getNodeInformationById(item[this.service.getIdField()]).visible = false;\r\n        }\r\n      }\r\n    });\r\n    this.visibleLimit = visibleObjects.length + this.visibleSize;\r\n    this.allNode.forEach((item: HelisaNode<T>): void => {\r\n      if (visibleObjects.length < this.visibleLimit &&\r\n        (!nodeFrom || this.getNodeInformation(nodeFrom).preorder < item.preorder)) {\r\n        const idParent: string = item.object[this.service.getIdParentField()];\r\n        if (!idParent) {\r\n          visibleObjects.push(item.object);\r\n          item.visible = true;\r\n        } else {\r\n          const parentInformation: HelisaNode<T> = this.getNodeInformationById(idParent);\r\n          if (parentInformation.visible && parentInformation.expanded) {\r\n            visibleObjects.push(item.object);\r\n            item.visible = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    this.visibleObjects = visibleObjects;\r\n  }\r\n\r\n  collapseNode(item: T): void {\r\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = false;\r\n    this.loadNextVisibleObjects(item);\r\n  }\r\n\r\n  expandNode(item: T): void {\r\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = true;\r\n    this.loadNextVisibleObjects(item);\r\n  }\r\n\r\n  showNextPage(): void {\r\n    if (this.visibleObjects.length > 0) {\r\n      this.loadNextVisibleObjects(this.visibleObjects[this.visibleObjects.length - 1]);\r\n    }\r\n  }\r\n\r\n  get visibleData(): ReadonlyArray<T> {\r\n    return this.visibleObjects;\r\n  }\r\n\r\n  removeItem(item: T): void {\r\n    this.removeById(item[this.service.getIdField()]);\r\n  }\r\n\r\n  removeById(id: string): void {\r\n    if (this.getNodeInformationById(id)) {\r\n      const idParent: string = this.getNodeInformationById(id).object[this.service.getIdParentField()];\r\n      const set: Set<string> = new Set<string>();\r\n      set.add(id);\r\n      const beginIndex: number = this.allNode.findIndex(\r\n        (itemSearch: HelisaNode<T>): boolean => itemSearch.object[this.service.getIdField()] === id\r\n      );\r\n      let lastIndex: number = this.allNode.length;\r\n      for (let i: number = beginIndex + 1; i < this.allNode.length; i++) {\r\n        const itemSearch: T = this.allNode[i].object;\r\n        if (set.has(itemSearch[this.service.getIdParentField()])) {\r\n          set.add(itemSearch[this.service.getIdField()]);\r\n        } else {\r\n          lastIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      const deletedItems: HelisaNode<T>[] = this.allNode.splice(beginIndex, lastIndex - beginIndex);\r\n      let parentHaveChildren: boolean = false;\r\n      deletedItems.forEach((deletedItem: HelisaNode<T>): boolean => this.searchNode.delete(deletedItem.object[this.service.getIdField()]));\r\n      this.allNode.forEach((searchItem: HelisaNode<T>, index: number): void => {\r\n        searchItem.preorder = index + 1;\r\n        if (searchItem.object[this.service.getIdParentField()] === idParent) {\r\n          parentHaveChildren = true;\r\n        }\r\n      });\r\n      if (idParent) {\r\n        this.getNodeInformationById(idParent).haveChildren = parentHaveChildren;\r\n      }\r\n      this.loadNextVisibleObjects(beginIndex > 0 ? this.allNode[beginIndex - 1].object : null);\r\n    }\r\n  }\r\n\r\n  addItem(item: T): void {\r\n    const indexParent: number = this.allNode.findIndex((node: HelisaNode<T>): boolean => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\r\n    if (indexParent >= 0) {\r\n      this.allNode.push(this.createNode(item));\r\n      this.allNode[indexParent].haveChildren = true;\r\n      this.reSort();\r\n      this.expandNode(this.allNode[indexParent].object);\r\n    } else {\r\n      throw Error('No existe el padre.');\r\n    }\r\n  }\r\n\r\n  updateItem(item: T): void {\r\n    if (this.getNodeInformation(item)) {\r\n      this.getNodeInformation(item).object = item;\r\n      this.reSort();\r\n      const indexParent: number = this.allNode.findIndex(\r\n        (node: HelisaNode<T>): boolean => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\r\n      if (indexParent >= 0) {\r\n        this.expandNode(this.allNode[indexParent].object);\r\n      } else {\r\n        this.loadNextVisibleObjects(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  private reSort(): void {\r\n    const items: T[] = this.allNode.map((node: HelisaNode<T>): T => node.object);\r\n    items.sort((a: T, b: T): number => this.service.compare(a, b));\r\n    const preorder: T[] = this.sortItems(items);\r\n    preorder.forEach((object: T, index: number): number => this.getNodeInformation(object).preorder = index + 1);\r\n    this.allNode.sort((nodeA: HelisaNode<T>, nodeB: HelisaNode<T>): number => nodeA.preorder - nodeB.preorder);\r\n  }\r\n}\r\n","export enum AlertInformationType {\r\n    AUTHORIZATION_TRANSACTION,\r\n    CONFIRM_DELETE_DATA,\r\n    DELETE_DATA,\r\n    INFORMATION_NOT_VALID,\r\n    LOST_DATA,\r\n    UNCOMPLETED_DATA,\r\n    UNCOMPLETED_SELECTED_DATA,\r\n    DEFINE_COMMERCIAL_STRUCTURE,\r\n    DEFINE_PARKING_STRUCTURE,\r\n    DEFINE_RESIDENCIAL_STRUCTURE,\r\n    NO_SEARCH_RESULTS\r\n  }\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AlertInformationType } from './alert-information-helisa-type.enum';\r\n\r\ninterface AlertInformationDataHelisaProperties {\r\n  alertType: AlertInformationType;\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst TITLE_BY_ALERT_TYPE: string[] = ['!Esta transacción requiere autorización!',\r\n                                       '',\r\n                                       '¿Está seguro que debe anular esta información?',\r\n                                       '',\r\n                                       '¿Está seguro de querer perder lo ya hecho?',\r\n                                       'No ha suministrado la información necesaria.',\r\n                                       '',\r\n                                       '',\r\n                                       '',\r\n                                       ''\r\n                                      ];\r\nconst CONTENT_BY_ALERT_TYPE: string[] = ['',\r\n                                         '¿Esta seguro que desea eliminar esta información?',\r\n                                         'Al anular este concepto, quedará la huella de todo lo que se hizo apoyados en su información. No es una eliminación tácita, es suprimir su uso en adelante.',\r\n                                         'Rectifique. Hay información no válida',\r\n                                         'Si no está seguro, puede continuar o \"aplicar\" y posteriormente cuando tenga clara las respuestas, usando la opción de modificar podrá completar el concepto.',\r\n                                         'Si insite en grabar así, este concepto no será utilizable hasta su conclusión satisfactoria, que deberá completar posteriormente modificando el concepto.',\r\n                                         'Elemento sin información requerida. Modifíquelo para completarlo.',\r\n                                         'Primero defina la estructura comercial en configuración.',\r\n                                         'Primero defina la estructura zona de parqueaderos en configuración.',\r\n                                         'Primero defina la estructura física residencial en configuración.',\r\n                                         'No fueron encontradas coincidencias con el criterio de búsqueda.',\r\n                                        ];\r\nconst OK_LABEL_BY_ALERT_TYPE: string[] = ['Solicitarla',\r\n                                          'Lo asumo',\r\n                                          'Lo asumo',\r\n                                          '',\r\n                                          'Lo asumo',\r\n                                          'Lo asumo',\r\n                                          'Aceptar',\r\n                                          '',\r\n                                          '',\r\n                                          ''\r\n                                         ];\r\nconst CANCEL_LABEL_BY_ALERT_TYPE: string[] = ['Negarla',\r\n                                              'Me retracto',\r\n                                              'Me retracto',\r\n                                              '',\r\n                                              'Me retracto',\r\n                                              'Me retracto',\r\n                                              '',\r\n                                              '',\r\n                                              '',\r\n                                              ''\r\n                                             ];\r\n\r\n@Component({\r\n  selector: 'hel-alert-information-data-helisa',\r\n  templateUrl: './alert-information-data-helisa.component.html',\r\n  styleUrls: ['./alert-information-data-helisa.component.sass']\r\n})\r\nexport class AlertInformationDataHelisaComponent implements OnInit {\r\n\r\n  alertType: AlertInformationType;\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertInformationDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertInformationDataHelisaProperties\r\n  ) {\r\n    this.alertType = data.alertType;\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = TITLE_BY_ALERT_TYPE[this.alertType];\r\n    }\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = CONTENT_BY_ALERT_TYPE[this.alertType];\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = OK_LABEL_BY_ALERT_TYPE[this.alertType];\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = CANCEL_LABEL_BY_ALERT_TYPE[this.alertType];\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.alertType === AlertInformationType.DEFINE_COMMERCIAL_STRUCTURE || this.alertType === AlertInformationType.DEFINE_PARKING_STRUCTURE ||\r\n        this.alertType === AlertInformationType.DEFINE_RESIDENCIAL_STRUCTURE) {\r\n      setTimeout((): void => {\r\n        this.dialogRef.close();\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  hasTitle(): boolean {\r\n    return this.alertType === AlertInformationType.AUTHORIZATION_TRANSACTION || this.alertType === AlertInformationType.DELETE_DATA ||\r\n           this.alertType === AlertInformationType.LOST_DATA || this.alertType === AlertInformationType.UNCOMPLETED_DATA;\r\n  }\r\n\r\n  hasContent(): boolean {\r\n    return this.alertType === AlertInformationType.CONFIRM_DELETE_DATA || this.alertType === AlertInformationType.DELETE_DATA ||\r\n           this.alertType === AlertInformationType.INFORMATION_NOT_VALID || this.alertType === AlertInformationType.LOST_DATA ||\r\n           this.alertType === AlertInformationType.UNCOMPLETED_DATA || this.alertType === AlertInformationType.UNCOMPLETED_SELECTED_DATA ||\r\n           this.alertType === AlertInformationType.DEFINE_COMMERCIAL_STRUCTURE || this.alertType === AlertInformationType.DEFINE_PARKING_STRUCTURE ||\r\n           this.alertType === AlertInformationType.DEFINE_RESIDENCIAL_STRUCTURE || this.alertType === AlertInformationType.NO_SEARCH_RESULTS;\r\n  }\r\n\r\n  hasButtons(): boolean {\r\n    return this.alertType === AlertInformationType.AUTHORIZATION_TRANSACTION || this.alertType === AlertInformationType.CONFIRM_DELETE_DATA ||\r\n           this.alertType === AlertInformationType.DELETE_DATA || this.alertType === AlertInformationType.LOST_DATA ||\r\n           this.alertType === AlertInformationType.UNCOMPLETED_DATA || this.alertType === AlertInformationType.UNCOMPLETED_SELECTED_DATA;\r\n  }\r\n\r\n  hasCancelButton(): boolean {\r\n    return this.alertType !== AlertInformationType.UNCOMPLETED_SELECTED_DATA;\r\n  }\r\n}\r\n","import {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {LayoutModule} from '@angular/cdk/layout';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatNativeDateModule, MatOptionModule } from '@angular/material/core';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport { TableHelisaService } from './components/table-helisa/table-helisa.service';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport { TreeHelisaService } from './components/tree-helisa/tree-helisa.service';\r\nimport { ExternalLinkDirective } from './directives/external-link.directive';\r\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\r\nimport { HelTooltipDirective } from './directives/tooltip.directive';\r\nimport { ExternalLinkPipe } from './pipes/external-link.pipe';\r\nimport { ComboBoxHelisaComponent } from './components/combo-box-helisa/combo-box-helisa.component';\r\nimport { PagingTreeHelisaComponent } from './components/paging-tree-helisa/paging-tree-helisa.component';\r\nimport { AlertInformationDataHelisaComponent } from './components/alert-information-data-helisa/alert-information-data-helisa.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe,\r\n    ComboBoxHelisaComponent,\r\n    PagingTreeHelisaComponent,\r\n    AlertInformationDataHelisaComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule,\r\n    ComboBoxHelisaComponent,\r\n    PagingTreeHelisaComponent,\r\n    AlertInformationDataHelisaComponent\r\n  ],\r\n  providers: [TableHelisaService, TreeHelisaService]\r\n})\r\nexport class HelisaLibModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertInformationDataHelisaComponent} from './alert-information-data-helisa.component';\r\nimport { AlertInformationType } from './alert-information-helisa-type.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertInformationDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(alertType: AlertInformationType, title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertInformationDataHelisaComponent> = this.dialog.open(AlertInformationDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { alertType, title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n"],"mappings":"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"}