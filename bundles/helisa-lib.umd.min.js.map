{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","Output","placeholder","FormControl","Validators","required","requiredMessage","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","subMessages","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","content","title","hasCancel","AlertHelisaType","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","next","setTotal","event","emitTotal","addPage","emitNextPage","Subject","Array","TableHelisaService","total","table","emitChangeSource","obj","page","totalReturn","asObservable","nextPageReturn","DependencyTableHelisaComponent","_this","dependencyTableHelisaService","subscribe","tableService","viewTables","toArray","index","getService","onSelectedDependency","selected","onNextPage","nextPage","onTotal","onSort","sort","providers","ViewChildren","InputHelisaComponent","isFocused","nameInput","nativeElement","focus","search","ViewChild","isSearch","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","o","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","forEach","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","ngAfterViewInit","multipleCell","matTable","renderRows","Object","defineProperty","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","undefined","columnConfiguration","displayedColumns","splice","visible","push","rawData","prepareDataSource","idRowSelected","indexRowSelect","selectRow","rowType","RowType","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","addTotalGroup","MatTableDataSource","selectedObject","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","footerDisplayedColumns","map","TotalType","searchText","text","lastSearch","select","onScroll","element","target","scrollHeight","scrollTop","body","concat","dblClickCell","selectCell","selectedCells","selectedCell","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","getClassToRow","classToRow","configRowStylesFromColumn","classRow","MatSort","MatTable","isSetSelectedRow","showTitle","DateHelisaComponent","dateFormControl","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","expandAllNodes","expand","emitExpandAllNodes","collapseAllNodes","collapse","emitCollapseAllNodes","refreshTree","emitRefreshTree","expandOneNode","node","emitExpandOneNode","collapseOneNode","emitCollapseOneNode","BehaviorSubject","nodeSelected","dataSourceObservable","nodeExpand","nodeCollapse","refreshTreeObservable","expandOneNodeObservable","collapseOneNodeObservable","TreeHelisaConnect","TreeHelisaComponent","treeHelisaService","res","children","treeControl","dataNodes","selectNode","tree","expandAll","collapseAll","onRedirect","isSingleClick","setTimeout","id","currentNode","offsetHeight","onEdit","console","log","isEditable","onAdd","isSelected","parent","onDelete","_.remove","removed","onEdited","trim","edited","added","onDblClick","dobleClick","onKeyDown","key","keypressDelete","keypressInsert","getDescription","reverse","i","_data","treeHelisaConnect","rangeScrolled","fillParent","upSelectNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","checkedOptionNode","uncheckedOptionNode","selectedOptions","has","reloadSelectedOptions","get","array","options","option","formControl","set","host","(document:keyup)","Router","ElementRef","router","elementRef","Map","showOptionsNode","collapseParent","NestedTreeControl","MatTreeNestedDataSource","hasChild","_","AutocompleteHelisaComponent","filteredOptions","myControl","valueChanges","pipe","startWith","_filter","filterValue_1","toLowerCase","filter","displayText","indexOf","onSelected","selectedValue","onSelectedValue","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","DONE","INFO"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string =\"\";  \r\n  @Input() inputFormControl:FormControl = new FormControl('',Validators.required);\r\n  @Input() requiredMessage:string = \"El campo es requerido\";\r\n  @Input() value:string = \"\";\r\n\r\n  @Output() done = new EventEmitter<string>();\r\n  @Output() cancel = new EventEmitter<any>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if(this.value != \"\"){\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n  }\r\n\r\n\r\n  onDone(){\r\n    if(this.inputFormControl.valid)\r\n    {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(){\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type:ToastType, message:String, subMessages?:String[]){\r\n    subMessages = subMessages ? subMessages : [];\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message: message, type: type, subMessages},\r\n      duration: this.durationInSeconds * 1000\r\n    });\r\n  }\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = \"ERROR\",\r\n    CONFIRMATION = \"CONFIRMATION\"\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: String;\r\n  hasCancel: boolean;\r\n\r\n  constructor(public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data) {\r\n      this.content = data.content;\r\n      this.title = data.title;\r\n      this.hasCancel = data.type == AlertHelisaType.CONFIRMATION;\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onCancel(){\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type:AlertHelisaType, title:String, content:String): Observable<any> {\r\n    const dialogRef = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: {title: title, content: content, type:type}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport { ColumnConfig, RequestTableHelisa } from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency } from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable {\r\n  columns: Array<ColumnConfig>,\r\n  isRemote: boolean,\r\n  dataSource?: Array<any>,\r\n  count?: number,\r\n  order?: number,\r\n  showTitle?: boolean\r\n}\r\n\r\n@Injectable() \r\nexport class DependencyTableHelisaService {\r\n  \r\n\r\n  tables: Subject<ConfigTable[]> = new Subject();\r\n  infoTables: Array<ConfigTable> = new Array();\r\n\r\n  emitTotal = new Subject<EventDependency>();\r\n  emitNextPage = new Subject<EventDependency>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable, withRemoveDependency: boolean = false){\r\n    if(withRemoveDependency){\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if(!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if(configTable.isRemote){\r\n      configTable.dataSource = null;\r\n      if(configTable.count === null)\r\n        throw \"hace falta el count\";\r\n    } else {\r\n      if(configTable.dataSource === null)\r\n        throw \"hace falta el dataSource\";\r\n        configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina \r\n   */\r\n  setTotal(event: EventDependency) {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  addPage(event: EventDependency) {\r\n    this.emitNextPage.next(event);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\r\nimport {TotalTableHelisa} from \"./table-helisa.interface\";\r\nimport {TableHelisaComponent} from \"./table-helisa.component\";\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: TableHelisaComponent<any>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn = this.emitChangeSource.asObservable();\r\n  nextPageReturn = this.emitNextPage.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<T>) {\r\n    this.emitChangeSource.next({obj: total, table: table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>) {\r\n    this.emitNextPage.next({obj: page, table: table});\r\n  }\r\n}\r\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren } from '@angular/core';\r\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\r\nimport { ColumnConfig, RequestTableHelisa } from '../table-helisa/table-helisa.interface';\r\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\r\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency{\r\n  index: number,\r\n  data: any\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [ DependencyTableHelisaService ]\r\n})\r\nexport class DependencyTableHelisaComponent implements OnInit {\r\n\r\n  tables: Array<ConfigTable> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<any>>;\r\n  \r\n\r\n  @Output() selected: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() nextPage: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() total: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() sort: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService, private tableService: TableHelisaService<any>) { }\r\n\r\n  ngOnInit() {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      event => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n    \r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      event => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService() : DependencyTableHelisaService {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables(){\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe(tables => {\r\n        this.tables = tables;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: any){\r\n    this.selected.emit({index:index, data:event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa) {\r\n    this.nextPage.emit({index:index, data:event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: any){\r\n    this.total.emit({index:index, data:event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: any){\r\n    this.sort.emit({index:index, data:event});\r\n  }\r\n\r\n\r\n\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef} from '@angular/core';\r\nimport {FormControl} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit {\r\n\r\n  @Input() placeholder = '';\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n  @Input() isSearch = false;\r\n  @Input() inputFormControl: FormControl = new FormControl('');\r\n  @Input() isFocused = false;\r\n\r\n  @ViewChild('inputText') nameInput: ElementRef;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if (this.isFocused) {\r\n      this.nameInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  search() {\r\n    this.setValue.emit(this.inputFormControl.value);\r\n  }\r\n\r\n}\r\n","import {SortDirection} from \"@angular/material\";\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa {\r\n  page: number;\r\n  body: any;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n\r\nexport interface Cell {\r\n  column: ColumnConfig;\r\n  row: any;\r\n }\r\n\r\n export interface ConfigCellStyles{\r\n   cellData: any;\r\n   classCell: string \r\n }\r\n\r\n export interface ConfigRowStyles{\r\n  column: ColumnConfig;\r\n  data: any,\r\n  classRow: string \r\n}\r\n\r\n//@dynamic\r\nexport abstract class ColumnConfigUtil {\r\n  static getValue(obj: any, column: ColumnConfig): any {\r\n    return column.name.split('.').reduce((o, field) => o && o[field], obj);\r\n  }\r\n}\r\n","import {ColumnConfig} from \"./table-helisa.interface\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): any {\r\n    return {};\r\n  }\r\n\r\n  nextPage() {\r\n    return this.page++;\r\n  }\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output, ViewChild, AfterViewInit } from '@angular/core';\r\nimport {MatSort, MatTableDataSource, MatTable} from '@angular/material';\r\nimport {Sort} from '@angular/material/typings/sort';\r\nimport {\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  EventColumn,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType,\r\n  Cell,\r\n  ConfigCellStyles,\r\n  ConfigRowStyles\r\n} from './table-helisa.interface';\r\nimport {TableHelisaService} from './table-helisa.service';\r\nimport {TableHelisaConnectComponent} from './table-helisa-connect.component';\r\n\r\ninterface RowData {\r\n  data: any;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData>;\r\n  displayedColumns: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n  isSetSelectedRow = false;\r\n  indexRowSelect: number;\r\n\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n  @ViewChild(MatTable) matTable: MatTable<any>;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() selectCell = new EventEmitter<Cell[]>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa> = new EventEmitter<RequestTableHelisa>();\r\n  @Input() showTitle = true;\r\n  @Input() multipleCell = false;\r\n  @Input() count: number;\r\n  @Input() configCellStyles: Array<ConfigCellStyles>;\r\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles>;\r\n  @Input() selectedCells: Array<Cell> = new Array<Cell>();\r\n  showFooter = false;\r\n  showSearch = false;\r\n\r\n  constructor(private tableService: TableHelisaService<T>) {  }\r\n\r\n  ngOnInit() {\r\n    this.tableService.nextPageReturn.subscribe(\r\n      data => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe(info => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column, idx) => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, {sum: info.obj.value, count: this.count});\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort) => {\r\n        const column: ColumnConfig = this.columnConfig.find(c => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT});\r\n      }\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n     if (this.multipleCell) {\r\n      this.matTable.renderRows();\r\n     }\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n      this.goNextPage();\r\n    } else { this.tableHelisaConnectComponent = undefined; }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.columnConfig = columnConfiguration;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n    if (columnConfiguration) {\r\n      columnConfiguration.forEach(column => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<any>) {\r\n    this.rawData = dataSource;\r\n    if (this.rawData) { this.prepareDataSource(); }\r\n  }\r\n\r\n  @Input()\r\n  set selectedIndexRow(idRowSelected: number) {\r\n    this.indexRowSelect = idRowSelected;\r\n    if (this.rawData && this.rawData.length) {\r\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({data: this.rawData[this.indexRowSelect], rowType: RowType.ROW});\r\n    }\r\n  }\r\n\r\n  private prepareDataSource() {\r\n    const changeData = Array<RowData>();\r\n    let haveGroup = false;\r\n    let groupFooter: Array<TotalGroup>;\r\n    this.columnConfig.forEach(column => {\r\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n        this.totalData = new Array<number>(this.columnConfig.length);\r\n        this.showFooter = true;\r\n        this.total.emit({column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL});\r\n      }\r\n      this.showSearch = this.showSearch || column.searchable;\r\n      haveGroup = haveGroup || column.groupable;\r\n    });\r\n    if (haveGroup) {\r\n      this.rawData = this.rawData.sort((a, b) => {\r\n        let result = 0;\r\n        this.columnConfig.forEach(column => {\r\n          if (result === 0) {\r\n            result = this.compare(a, b);\r\n          }\r\n        });\r\n        return result;\r\n      });\r\n    }\r\n    this.rawData.forEach(row => {\r\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data, row) !== 0)) {\r\n        if (groupFooter) {\r\n          changeData.push({data: groupFooter, rowType: RowType.GROUP_FOOTER});\r\n        }\r\n        changeData.push({data: row, rowType: RowType.GROUP_TITLE});\r\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n      }\r\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\r\n      changeData.push({data: row, rowType: RowType.ROW});\r\n    });\r\n    this.data = new MatTableDataSource<RowData>(changeData);\r\n    if(this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject){\r\n      if(this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0)\r\n        this.indexRowSelect = 0;\r\n      this.selectRow({data: this.rawData[this.indexRowSelect], rowType: RowType.ROW});\r\n    }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: any) {\r\n    this.columnConfig.forEach((column, index) => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = {sum: ColumnConfigUtil.getValue(row, column), count: 1};\r\n        } else {\r\n          rowTotal[index].sum += ColumnConfigUtil.getValue(row, column);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: any, b: any): number {\r\n    let ws = 0;\r\n    this.columnConfig.forEach(column => {\r\n      if (ws === 0 && column.groupable) {\r\n        if (ColumnConfigUtil.getValue(a, column) < ColumnConfigUtil.getValue(b, column)) { ws = -1; } else if (ColumnConfigUtil.getValue(a, column) > ColumnConfigUtil.getValue(b, column)) { ws = 1; }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: any): string {\r\n    let result = '';\r\n    this.columnConfig.forEach(column => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + ColumnConfigUtil.getValue(obj, column);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index, item): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map(name => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: any, column: ColumnConfig) {\r\n    return ColumnConfigUtil.getValue(obj, column);\r\n  }\r\n\r\n  searchText(text) {\r\n    this.lastSearch = text;\r\n    this.search.emit({text, columnConfigurations: this.columnConfig});\r\n  }\r\n\r\n  selectRow(row) {\r\n    this.selectedObject = row.data;\r\n    this.select.emit(this.selectedObject);\r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n    if (element.scrollHeight - element.scrollTop < 1000) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  private goNextPage() {\r\n    if (this.type === TableHelisaType.REMOTE && !this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]) {\r\n    if (!this.rawData) { this.rawData = new Array<T>(); }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n      this.tableHelisaConnectComponent.isUsed = false;\r\n    }\r\n  }\r\n  dblClickCell(){\r\n    this.selectCell.emit(this.selectedCells);  \r\n  }\r\n\r\n  selectedCell(element, column: ColumnConfig) {\r\n    let index = this.isSelectedCell(element, column);\r\n    if(index >= 0){\r\n      this.selectedCells.splice(index, 1);\r\n    } else {\r\n      this.selectedCells.push({column: column, row: element});\r\n    }\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  isSelectedCell(element, column: ColumnConfig): number {\r\n    if(this.multipleCell) {\r\n      for (let index = 0; index < this.selectedCells.length; index++) {\r\n        if (this.selectedCells[index].column.name === column.name &&\r\n            this.selectedCells[index].row.data === element.data) {\r\n          return index;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  getClassToCell(row, column: ColumnConfig){\r\n    let classToCell = '';\r\n    if(this.configCellStyles){\r\n      let found = this.configCellStyles.find(c => {\r\n        return c.cellData === this.getValue(row, column);\r\n      });\r\n      if(found){\r\n        classToCell = found.classCell;\r\n      }\r\n    }\r\n    return classToCell;\r\n  }\r\n\r\n  getClassToRow(row){\r\n    let classToRow = '';\r\n    if(this.configRowStylesFromColumn){\r\n      let found = this.configRowStylesFromColumn.find(c => {\r\n        return c.data === this.getValue(row, c.column);\r\n      });\r\n      if(found){\r\n        classToRow = found.classRow;\r\n      }\r\n    }\r\n    return classToRow;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css']\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n\r\n  @Input() placeholder = \"\";\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Subscriber } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected = new BehaviorSubject<number>(1);    \r\n    // Observable string streams\r\n    nodeSelected = this.emitNodeSelected.asObservable();\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number) {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n\r\n\r\n    // Observable string sources\r\n    private emitDataSource = new BehaviorSubject<Node>(undefined);    \r\n    // Observable string streams\r\n    dataSourceObservable = this.emitDataSource.asObservable();\r\n    // Service message commands\r\n    changeDataSource(data:Node) {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n\r\n      \r\n    // Expand node observable\r\n      private emitExpandAllNodes = new BehaviorSubject<boolean>(null);          \r\n      nodeExpand = this.emitExpandAllNodes.asObservable();      \r\n      expandAllNodes(expand:boolean) {\r\n          this.emitExpandAllNodes.next(expand);\r\n      }\r\n\r\n\r\n      // Collapse node observable\r\n      private emitCollapseAllNodes = new BehaviorSubject<boolean>(null);          \r\n      nodeCollapse = this.emitCollapseAllNodes.asObservable();      \r\n      collapseAllNodes(collapse:boolean) {\r\n          this.emitCollapseAllNodes.next(collapse);\r\n      }\r\n\r\n\r\n      private emitRefreshTree = new Subject<void>();\r\n      refreshTreeObservable = this.emitRefreshTree.asObservable();\r\n      refreshTree(){\r\n          this.emitRefreshTree.next();\r\n      }\r\n\r\n\r\n\r\n      private emitExpandOneNode = new Subject<Node>();\r\n      expandOneNodeObservable = this.emitExpandOneNode.asObservable();\r\n      expandOneNode(node:Node){\r\n        this.emitExpandOneNode.next(node);\r\n      }\r\n\r\n      private emitCollapseOneNode = new Subject<Node>();\r\n      collapseOneNodeObservable = this.emitCollapseOneNode.asObservable();\r\n      collapseOneNode(node:Node){\r\n        this.emitCollapseOneNode.next(node);\r\n      }\r\n\r\n    constructor(){\r\n        \r\n    }\r\n  \r\n}","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n  \r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }          \r\n  \r\n    nextPage() {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef } from '@angular/core';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource, MatTree } from '@angular/material';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;  \r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass'],\r\n  host:{\r\n    '(document:keyup)': 'onKeyDown($event)'\r\n  }\r\n})\r\nexport class TreeHelisaComponent implements OnInit,AfterViewInit {\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit:FormControl;\r\n  @ViewChild('tree') tree:MatTree<any>;\r\n  private selectedOptions = new Map<any, any>();\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data:Node;\r\n\r\n  \r\n  /**\r\n   * Establece si se mostraran las opciones de \r\n   * Creacion, ediciÃ³n y eliminacion del nodo\r\n   */\r\n  @Input() showOptionsNode:boolean = true; \r\n  \r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed = new EventEmitter<number | string>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue aÃ±adido\r\n   */\r\n  @Output() added = new EventEmitter<Node>();\r\n  @Output() collapseParent = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected = new EventEmitter<number | string>();\r\n  @Output() dobleClick = new EventEmitter<number | string>();\r\n  @Output() keypressDelete = new EventEmitter<number | string | null>();\r\n  @Output() keypressInsert = new EventEmitter<number | string | null>();\r\n  @Output() checkedOptionNode = new EventEmitter<number | string | null>();\r\n  @Output() uncheckedOptionNode = new EventEmitter<number | string | null>();\r\n  \r\n  treeControl = new NestedTreeControl<Node>(node => node.children);\r\n  dataSource = new MatTreeNestedDataSource<Node>();\r\n\r\n\r\n  isSingleClick: Boolean = true;  \r\n  currentNode: Node = null;\r\n\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService:TreeHelisaService,\r\n    private router:Router,\r\n    private elementRef:ElementRef) {    \r\n      \r\n    //cargar datos pasados por el @Input\r\n    if (!!this.data) {      \r\n      let data = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = [];     \r\n      this.treeControl.dataNodes = []; \r\n    }\r\n    \r\n  }\r\n\r\n  \r\n\r\n  ngOnInit() {     \r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable\r\n    .subscribe((res) => {            \r\n      if(!!res && !!res.children){              \r\n        this.receivePage(res.children)\r\n      }else{\r\n        this.dataSource.data = [];\r\n        this.treeControl.dataNodes = [];\r\n      }    \r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected\r\n      .subscribe((res)=>{\r\n        if(!!this.data && !!this.data.children)\r\n        this.selectNode(this.data,res);\r\n      })\r\n\r\n    \r\n      this.treeHelisaService.refreshTreeObservable\r\n      .subscribe(res=>{\r\n        this.refreshTree();\r\n      })          \r\n  }\r\n\r\n  ngAfterViewInit() {     \r\n    this.treeHelisaService.nodeExpand.subscribe(res=>{\r\n      if(res != null){\r\n        if(res){\r\n          this.tree.treeControl.expandAll();\r\n        }\r\n      }\r\n    })\r\n\r\n    this.treeHelisaService.nodeCollapse.subscribe(res=>{\r\n      if(res != null){\r\n        if(res){\r\n          this.tree.treeControl.collapseAll();\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n    this.treeHelisaService.expandOneNodeObservable\r\n      .subscribe(res => {        \r\n        if (res != undefined) {          \r\n          this.treeControl.expand(res);          \r\n        }\r\n      })\r\n\r\n      this.treeHelisaService.collapseOneNodeObservable\r\n      .subscribe(res => {        \r\n        if (res != undefined) {\r\n          this.treeControl.collapse(res);\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node:Node){\r\n\r\n    this.isSingleClick = true;\r\n        setTimeout(()=>{\r\n            if(this.isSingleClick){\r\n              \r\n              this.selectNode(this.data,node.id);    \r\n\r\n              // if(!!node && !node.children){\r\n              if(!!node){\r\n                this.nodeSelected.emit(node.id);\r\n                this.currentNode = node;\r\n              }\r\n            }\r\n         },350)   \r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n\r\n    if ((element.offsetHeight + element.scrollTop) >= element.scrollHeight) {      \r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node:Node){\r\n    console.log(node.id)\r\n    console.log(node)\r\n    node.isEditable = true;\r\n  }\r\n\r\n  onAdd(node:Node){\r\n    // si no tiene hijos instanciar el array\r\n    if(!node.children){\r\n      node.children = [];\r\n    }\r\n    node.children.push(\r\n      {\r\n        id: null,\r\n        name: \"\",       \r\n        isSelected: false,\r\n        parent : node,\r\n        isEditable : true\r\n      }\r\n    );     \r\n    this.refreshTree();\r\n  }\r\n\r\n  onDelete(node:Node){ \r\n    // Remueve el nodo utilizando la libreria de lodash   \r\n    _.remove(node.parent.children, node);\r\n    \r\n    this.refreshTree();\r\n    this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node:Node,value:any){\r\n    \r\n      node.name = value;\r\n\r\n      if(node.id == null && node.name == \"\"){              \r\n        _.remove(node.parent.children, node);\r\n        this.refreshTree();\r\n      }\r\n      else if(node.id && node.id != null && node.name.trim() !== \"\"){\r\n        this.edited.emit(node);\r\n        node.isEditable = false;\r\n      }else if(!!node.id && node.id == null && node.name.trim() !== \"\"){\r\n        this.added.emit(node);\r\n        node.isEditable = false;\r\n      }         \r\n  }\r\n\r\n  onCancel(node:Node,value:string){\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if(node.id == null){\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();  \r\n    }\r\n\r\n    node.isEditable = false; \r\n  }\r\n\r\n  onDblClick(node:Node){\r\n    this.isSingleClick = false;\r\n    this.dobleClick.emit(node.id);\r\n  }\r\n\r\n  onKeyDown(event:KeyboardEvent){    \r\n    switch (event.key) {\r\n      case 'Delete':\r\n        this.keypressDelete.emit((!!this.currentNode && this.currentNode.id)?this.currentNode.id:null)\r\n        break;\r\n      case 'Insert':\r\n        this.keypressInsert.emit((!!this.currentNode && this.currentNode.id)?this.currentNode.id:null)\r\n        break;     \r\n    }\r\n    \r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild = (_: number, node: Node) => !!node.children && node.children.length > 0;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node:Node):string{\r\n      let result:string[]=[node.name];        \r\n      let concat:string=\"\";\r\n\r\n      if(node.parent){          \r\n        result.push(this.getDescription(node.parent))\r\n      }                \r\n\r\n\r\n      if(result.length == 1)\r\n          return node.name;\r\n\r\n      result = result.reverse();\r\n\r\n      for (let i = 0; i < result.length; i++) {            \r\n          let element = result[i];\r\n          concat = concat + element + ((i == result.length-1)?\"\":\",\");                \r\n      }\r\n              \r\n      return concat;\r\n  }\r\n\r\n\r\n  /**\r\n   * Actualiza el arbol\r\n   */\r\n  private refreshTree(){\r\n    let _data = this.dataSource.data; \r\n    this.dataSource.data = null; \r\n    this.dataSource.data = _data;\r\n    this.treeControl.dataNodes = _data;\r\n  }\r\n\r\n  private goNextPage() {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()              \r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]) {    \r\n    if(!this.data){ this.data = {id:null,name:\"root\",isSelected:false}}\r\n    if (!this.data.children) { this.data.children = new Array<Node>(); this.treeHelisaConnect = new TreeHelisaConnect<Node>(); }    \r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach(node=>{\r\n      this.fillParent(node,this.data);\r\n    })\r\n\r\n    this.dataSource.data = this.data.children;    \r\n    this.treeControl.dataNodes = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   * @param node \r\n   * @param parent \r\n   */\r\n  private fillParent(node:Node,parent:Node){\r\n\r\n    node.parent = parent;\r\n    if(node.children && node.children.length > 0){\r\n      node.children.forEach(item=>{\r\n        this.fillParent(item,node);   \r\n      })      \r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   * @param node \r\n   * @param id \r\n   */\r\n  private selectNode(node:Node,id:number|string){ \r\n      \r\n      this.upSelectNode(node)\r\n      \r\n      if(node.id == id){\r\n        node.isSelected = true   \r\n        return node;\r\n      }else if (node.children != null){\r\n           var i;\r\n           var result = null;\r\n           for(i=0; result == null && i < node.children.length; i++){\r\n                result = this.selectNode(node.children[i], id);                \r\n           }\r\n           return result;\r\n      }\r\n      return null; \r\n  }\r\n\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   * @param node \r\n   */\r\n  private upSelectNode(node:Node){\r\n     node.isSelected = false;\r\n     if(!!node.children)\r\n     for(var i=0; i < node.children.length; i++){\r\n         this.upSelectNode(node.children[i]);                \r\n    }\r\n  }\r\n\r\n  getClassNode(node: Node): string[]{\r\n    let classNode = [];\r\n    if(node.isSelected) {\r\n      classNode.push(\"isSelected\");\r\n    }\r\n    if(node.classNode){\r\n      classNode.push(node.classNode);\r\n    }\r\n    return classNode;\r\n  }\r\n\r\n  onEditMode(node, editMode) {\r\n    this.getSelectedOptions(node).editMode = editMode;\r\n  }\r\n\r\n  onSelectOption(event, node) {\r\n    node.isCheckedOption = event.source.selected;\r\n    if (node.isCheckedOption)\r\n      this.checkedOptionNode.emit(node.id);\r\n    else\r\n      this.uncheckedOptionNode.emit(node.id);\r\n  }\r\n\r\n  getSelectedOptions(node: Node): any {\r\n    if (this.selectedOptions.has(node.id))\r\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\r\n    else\r\n      this.reloadSelectedOptions(node, false);\r\n    return this.selectedOptions.get(node.id);\r\n  }\r\n\r\n  private reloadSelectedOptions(node: Node, editMode: boolean) {\r\n    const array = new Array();\r\n    node.options.forEach(option => {\r\n      if (option.isCheckedOption)\r\n        array.push(option.id);\r\n    });\r\n    const obj = {formControl: new FormControl(array), editMode: editMode};\r\n    this.selectedOptions.set(node.id, obj);\r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface OptionAutocompleteHelisa<T> {\r\n  value: T;\r\n  displayText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-autocomplete',\r\n  templateUrl: './autocomplete-helisa.component.html',\r\n  styleUrls: ['./autocomplete-helisa.component.css']\r\n})\r\nexport class AutocompleteHelisaComponent<T> implements OnInit {\r\n\r\n  @Input() myControl = new FormControl();\r\n  @Input() options = new Array<OptionAutocompleteHelisa<T>>();\r\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\r\n  selectedValue: OptionAutocompleteHelisa<T>;\r\n  @Output() onSelectedValue: EventEmitter<T> = new EventEmitter<T>();\r\n\r\n  ngOnInit() {\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this._filter(value))\r\n    );\r\n  }\r\n\r\n  private _filter(value): OptionAutocompleteHelisa<T>[] {\r\n    if (value instanceof Object) {\r\n      this.myControl.setValue(value.displayText); \r\n    }\r\n    else {\r\n      const filterValue = value.toLowerCase().split(' ');\r\n      return this.options.filter(option => {\r\n        let ws = true;\r\n        filterValue.forEach(text => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\r\n        return ws;\r\n      }).splice(0, 5);\r\n    }\r\n  }\r\n\r\n  public onSelected(event) { \r\n    this.selectedValue = event.option.value;\r\n    this.onSelectedValue.emit(this.selectedValue.value);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\n\r\n\r\nimport {MatAutocompleteModule} from '@angular/material';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatSidenavModule, MatGridListModule,  MatMenuModule, MatRadioModule, MatButtonModule, MatCheckboxModule, MatInputModule, MatOptionModule, MatSnackBarModule, MatTableModule, MatPaginatorModule, MatSortModule } from '@angular/material';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from \"@angular/material\";\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport {TableHelisaService} from \"./components/table-helisa/table-helisa.service\";\r\nimport {\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  EventColumn, TotalType\r\n} from \"./components/table-helisa/table-helisa.interface\";\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport {TreeHelisaService} from \"./components/tree-helisa/tree-helisa.service\";\r\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ \r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n\r\n\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  providers: [\r\n    TableHelisaService,\r\n    TreeHelisaService\r\n  ]\r\n})\r\nexport class HelisaLibModule { }\r\n","export enum ToastType {\r\n    DONE = \"done\",\r\n    ERROR = \"error\",\r\n    INFO = \"info\"\r\n}\r\n"]}