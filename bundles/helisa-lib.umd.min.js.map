{"version":3,"sources":["../esm2015/projects/helisa-lib/src/lib/components/input-with-button/input-with-button.component.ts","../esm2015/projects/helisa-lib/src/lib/components/toast-helisa/toast-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/toast-helisa/toast-type.enum.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa-type.enum.ts","../esm2015/projects/helisa-lib/src/lib/components/toast-helisa/toast-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-helisa/alert-helisa.service.ts","../../../node_modules/tslib/tslib.es6.js","../esm2015/projects/helisa-lib/src/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/input-helisa/input-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa.interface.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/table-helisa/table-helisa-connect.component.ts","../esm2015/projects/helisa-lib/src/lib/components/date-helisa/date-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa.service.ts","../esm2015/projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa-connect.ts","../esm2015/projects/helisa-lib/src/lib/components/tree-helisa/tree-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","../esm2015/projects/helisa-lib/src/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","../projects/helisa-lib/src/lib/directives/options-scroll.directive.ts","../projects/helisa-lib/src/lib/directives/tooltip.directive.ts","../projects/helisa-lib/src/lib/directives/external-link.directive.ts","../esm2015/projects/helisa-lib/src/lib/components/combo-box-helisa/combo-box-helisa.component.ts","../projects/helisa-lib/src/lib/pipes/external-link.pipe.ts","../esm2015/projects/helisa-lib/src/lib/components/paging-tree-helisa/paging-tree-helisa.component.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-helisa-type.enum.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-data-helisa.component.ts","../../projects/helisa-lib/src/lib/helisa-lib.module.ts","../esm2015/projects/helisa-lib/src/lib/components/alert-information-data-helisa/alert-information-data-helisa.service.ts"],"names":["InputWithButtonComponent","this","placeholder","inputFormControl","FormControl","Validators","required","requiredMessage","value","isFocused","done","EventEmitter","cancel","prototype","ngOnInit","setValue","nameField","nativeElement","focus","onDone","valid","emit","onCancel","Component","args","selector","template","Input","ViewChild","static","Output","ToastHelisaComponent","data","Inject","MAT_SNACK_BAR_DATA","ToastType","AlertHelisaType","ToastHelisaService","snackBar","durationInSeconds","showToast","type","message","subMessages","openFromComponent","duration","Injectable","providedIn","MatSnackBar","AlertHelisaComponent","dialogRef","_this","content","title","okLabel","undefined","cancelLabel","hasCancel","CONFIRMATION","disableClose","keydownEvents","subscribe","event","code","close","MatDialogRef","MAT_DIALOG_DATA","AlertHelisaService","dialog","openDialog","open","width","afterClosed","MatDialog","Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","DependencyTableHelisaService","tables","Subject","infoTables","Array","emitVisibilityButton$","emitVisibilityButton","asObservable","emitVisibilityAllButtons$","emitVisibilityAllButtons","emitIsCellSelection$","emitIsCellSelection","emitChangeColumns$","emitChangeColumns","emitTotal","emitNextPage","getTables","updateDependency","configTable","withRemoveDependency","slice","order","isRemote","dataSource","count","Error","setTotal","addPage","selectIndexRow","config","indexRowSelect","changeVisibilityButton","changeVisibilityAllButtons","show","changeisCellSelection","changeColumnsByTable","TableHelisaService","emitChangeSource","totalReturn","nextPageReturn","emitVisibleButton$","emitVisibleButton","total","table","obj","page","change","InputHelisaType","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","showToolTip","selected","selectObject","nextPage","sort","drop","addRow","selectCell","bookClicked","selectedObject","hideDelay","showDelay","viewTables","toArray","index","addRowButton","showButton","forEach","element","isCellSelection","columns","getService","_a","splice","apply","item","reload","onSelectedDependency","onNextPage","onTotal","onSort","onDrop","onAddRow","selectedCell","onBookClicked","providers","ViewChildren","ColumnType","EventScope","TotalType","ChangeColumnConfigurationType","TableHelisaType","InputHelisaComponent","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","NEGATIVE_SIGN","floatLabel","autocompleteMode","isSearch","disabled","DEFAULT","blur","formControlMask","realValue","inputFormReal","defineProperty","formControl","registerOnDisabledChange","isDisabled","disable","enable","valueChanges","statusChange","status","getMaskedValue","onFocus","setValidators","validator","onlySelf","statusChanges","setErrors","key","markAsTouched","inputText","ngAfterViewInit","search","position","selectionStart","getRealValue","selectionEnd","str","PHONE","maskedStr","IDENTITY","j","NUMERIC","DOUBLE","getMaskedValueDouble","POSITIVEORNEGATIVEDOUBLE","isNegativeValue","indexOf","newStr","replace","realStr","str_1","str_1_1","strItem","match","getRealValueDouble","haveDot","str_2","str_2_1","$event","Number","select","RowType","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","isLastPage","isUsed","getBody","columnConfig","TableHelisaComponent","MatTableDataSource","displayedColumns","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","LOCAL","scrollCount","hasSubtitle","indexRowStartDrag","lastIndexRowDrag","dataBeforeDrag","dataSource$","scrollX","scrollY","showTitle","isDragged","text","addBookButton","showFooter","showSearch","reloadColumnConfig","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","SORT","matTable","renderRows","w","REMOTE","tableHelisaConnectComponent","goNextPage","columnConfiguration","rawData","idRowSelected","selectRow","rowType","ROW","columnCount","countSubtitle_1","showBookButton_1","subtitle","subtitleTemp","visible","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","groupFooter_1","changeData_1","haveGroup_1","totalType","TOTAL","searchable","groupable","a","b","result","compare","row","GROUP_FOOTER","GROUP_TITLE","addTotalGroup","rowTotal","ws","getGroupDescription","isGroupTitle","isRow","isGroupFooter","map","SUM","COUNT","AVERAGE","getValueTooltip","searchText","lastSearch","isUser","scope","USER","CODE_CALL","onScroll","isScrollY","target","scrollTop","scrollLeft","scrollHeight","body","dblClickCell","selectedCells","isSelectable","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToColumn","configColumnClass","getClassToRow","classToRow","configRowStylesFromColumn","founds","filter","classRow","rowIndex","getRowIndex","pageY","array","moveItemInArray","stopPropagation","tableKeydown","currentIndex_1","findIndex","newSelection_1","reverse","Math","abs","preventDefault","dragger","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","MatSort","MatTable","read","ElementRef","TypeCalendarEnum","moment","moment_","DateHelisaComponent","dateFormControl","date","Date","dateFormat","locale","errorMessage","showDatePicker","isClosed","typeCalendar","NORMAL","isFromInputEvent","invalidFormat","dateToVisualize","formHandler","incomingDate","format","openDatePicker","timeout","setTimeout","datePickerShow","onKey","onBlur","isValid","toDate","clearTimeout","getStartView","typeCalendarEnum","MONTH_YEAR","STRICT","pipe","tap","trim","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","incommingDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","getDateToControl","TreeHelisaService","emitNodeSelected","BehaviorSubject","nodeSelected","emitDataSource","dataSourceObservable","emitExpandAllNodes","nodeExpand","emitCollapseAllNodes","nodeCollapse","emitRefreshTree","refreshTreeObservable","emitRefreshTreeWithPagination","refreshTreeWithPaginationObservable","emitExpandOneNode","expandOneNodeObservable","emitCollapseOneNode","collapseOneNodeObservable","changeNodeSelected","idResidentialArea","changeDataSource","expandAllNodes","expand","collapseAllNodes","collapse","refreshTree","refreshTreeWithPagination","expandOneNode","node","collapseOneNode","TreeHelisaConnect","TreeHelisaComponent","treeHelisaService","router","elementRef","selectedOptions","Map","removed","edited","added","collapseParent","rangeScrolled","dobleClick","keypressDelete","keypressInsert","checkedOptionNode","uncheckedOptionNode","clickAddNode","clickEditNode","clickDeleteNode","treeControl","NestedTreeControl","MatTreeNestedDataSource","isSingleClick","currentNode","dataNodes","getDescription","parent","res","selectedNode","id","selectNode","tree","expandAll","collapseAll","onRedirect","offsetHeight","onEdit","onAdd","onDelete","onEdited","_.remove","isEditable","onDblClick","onKeyDown","moveDownIntoTree","moveUpIntoTree","indexOfParent","hasChild","t","datasourceData","treeHelisaConnect","isSelected","fillParent","reorderByOrderIndex","upSelectNode","getNodeById","expandAllParents","_b","_c","childrenNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","has","reloadSelectedOptions","get","options","option","set","queue","curr","shift","_.orderBy","x","orderIndex","console","log","Router","HostListener","AutocompleteHelisaService","setDataSource","AutocompleteHelisaComponent","autocompleteHelisaService","myControl","selectedValueEmmiter","isLoading","onScrollObservable","debounceTime","throttleTime","filteredOptions","of","startWith","_checkRegex","_filter","displayFn","displayText","filterValue_1","toLowerCase","onSelected","selectedValue","getNextPage","OptionsScrollDirective","autoComplete","thresholdPercent","optionsScroll","destroy","lastScrollTop","opened","removeScrollEventListener","panel","addEventListener","bind","takeUntil","closed","removeEventListener","ngOnDestroy","complete","st","pageYOffset","scrollEvent","threshold","clientHeight","Directive","MatAutocomplete","HelTooltipDirective","tooltip","elemRef","mouseover","currentContent","innerText","toUpperCase","toString","isEllipsisActive","offsetWidth","scrollWidth","MatTooltip","ExternalLinkDirective","platformId","relAttr","targetAttr","hrefAttr","ngOnChanges","href","isLinkExternal","isPlatformBrowser","includes","location","hostname","PLATFORM_ID","HostBinding","ComboBoxHelisaState","ExternalLinkPipe","transform","_i","Pipe","PagingTreeInitialMode","ComboBoxHelisaComponent","selectEmitter","enabled","pageSize","haveNextPage","state","CLOSED","listable","getData","SELECT","selectItem","selectedItem","changeToInsert","INSERT","insert","editable","AlertInformationType","PagingTreeHelisaComponent","visibleLimit","visibleSize","treeMode","EXPAND","visibleObjects","allNode","afterLoadData","paramMode","reset","paramService","service","items","loadData","searchNode","sortItems","createNode","reSort","loadNextVisibleObjects","lAdy","stack","idParent","getIdParentField","unshift","response","last","pop","getIdField","parentInformation","getNodeInformationById","nodeInformation","object","haveChildren","level","expanded","preorder","size","getNodeInformation","getLevelClass","nodeFrom","collapseNode","expandNode","showNextPage","removeItem","removeById","idParent_1","Set","add","beginIndex","itemSearch","lastIndex","deletedItems","parentHaveChildren_1","deletedItem","delete","searchItem","addItem","indexParent","updateItem","nodeA","nodeB","ContentChild","TITLE_BY_ALERT_TYPE","CONTENT_BY_ALERT_TYPE","OK_LABEL_BY_ALERT_TYPE","CANCEL_LABEL_BY_ALERT_TYPE","AlertInformationDataHelisaComponent","alertType","DEFINE_COMMERCIAL_STRUCTURE","DEFINE_PARKING_STRUCTURE","DEFINE_RESIDENCIAL_STRUCTURE","hasTitle","AUTHORIZATION_TRANSACTION","DELETE_DATA","LOST_DATA","UNCOMPLETED_DATA","hasContent","CONFIRM_DELETE_DATA","INFORMATION_NOT_VALID","UNCOMPLETED_SELECTED_DATA","NO_SEARCH_RESULTS","hasButtons","hasCancelButton","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","AlertInformationDataHelisaService"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'hel-input-with-button',\n  templateUrl: './input-with-button.component.html',\n  styleUrls: ['./input-with-button.component.sass']\n})\nexport class InputWithButtonComponent implements OnInit {\n\n  @Input() placeholder: string = '';\n  @Input() inputFormControl: FormControl = new FormControl('', Validators.required);\n  @Input() requiredMessage: string = 'El campo es requerido';\n  @Input() value: string = '';\n  @Input() isFocused: boolean = false;\n  @ViewChild('inputText', {static: true}) nameField: ElementRef;\n\n  @Output() done: EventEmitter<string> = new EventEmitter<string>();\n  @Output() cancel: EventEmitter<void> = new EventEmitter<void>();\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n    if (this.value !== '') {\n      this.inputFormControl.setValue(this.value);\n    }\n    this.nameField.nativeElement.focus();\n  }\n\n\n  onDone(): void {\n    if (this.inputFormControl.valid) {\n      this.done.emit(this.inputFormControl.value);\n    }\n  }\n\n  onCancel(): void {\n    this.cancel.emit();\n  }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\nimport { ToastType } from './toast-type.enum';\n\n// @dynamic\n@Component({\n  selector: 'hel-toast',\n  templateUrl: './toast-helisa.component.html',\n  styleUrls: ['./toast-helisa.component.sass']\n})\nexport class ToastHelisaComponent implements OnInit {\n\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: {type: ToastType, message: string, subMessages?: string[]}) { }\n\n  ngOnInit(): void {}\n\n}\n","export enum ToastType {\n    DONE = 'done',\n    ERROR = 'error',\n    INFO = 'info'\n}\n","export enum AlertHelisaType {\n    ERROR = 'ERROR',\n    CONFIRMATION = 'CONFIRMATION'\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ToastType } from './toast-type.enum';\nimport { ToastHelisaComponent } from './toast-helisa.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastHelisaService {\n\n  durationInSeconds: number = 5;\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  showToast(type: ToastType, message: string, subMessages?: string[]): void {\n    subMessages = subMessages ? subMessages : [];\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\n      data: {message, type, subMessages},\n      duration: this.durationInSeconds * 1000\n    });\n  }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AlertHelisaType } from './alert-helisa-type.enum';\n\ninterface AlertHelisaProperties {\n  title: string;\n  content: string;\n  type: AlertHelisaType;\n  okLabel: string;\n  cancelLabel: string;\n}\n\n@Component({\n  selector: 'hel-alert',\n  templateUrl: './alert-helisa.component.html',\n  styleUrls: ['./alert-helisa.component.sass']\n})\nexport class AlertHelisaComponent implements OnInit {\n\n  content: string;\n  title: string;\n  hasCancel: boolean;\n  okLabel: string;\n  cancelLabel: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertHelisaProperties\n  ) {\n    this.content = data.content;\n    this.title = data.title;\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = 'aceptar';\n    }\n    this.cancelLabel = data.cancelLabel;\n    if (this.cancelLabel === undefined) {\n      this.cancelLabel = 'cancelar';\n    }\n    this.hasCancel = data.type === AlertHelisaType.CONFIRMATION;\n    dialogRef.disableClose = true;\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent): void => {\n      if (event.code === 'Escape') {\n        this.dialogRef.close(this.onCancel());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { AlertHelisaType } from './alert-helisa-type.enum';\nimport { AlertHelisaComponent } from './alert-helisa.component';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(type: AlertHelisaType, title: string, content: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertHelisaComponent> = this.dialog.open(AlertHelisaComponent, {\n      width: '250px',\n      data: { title, content, type, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport {ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\nimport { EventDependency} from './dependency-table-helisa.component';\n\nexport interface ConfigTable<T> {\n  columns: Array<ColumnConfig>;\n  isRemote: boolean;\n  dataSource?: Array<T>;\n  count?: number;\n  order?: number;\n  showTitle?: boolean;\n  indexRowSelect?: number;\n  isDragged?: boolean;\n  addRowButton?: AddRowButton;\n  configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\n  configColumnClass?: Array<string>,\n  isCellSelection?: boolean;\n  addBookButton?: boolean;\n}\n\n@Injectable()\nexport class DependencyTableHelisaService<T> {\n\n\n  tables: Subject<ConfigTable<T>[]> = new Subject();\n  infoTables: Array<ConfigTable<T>> = new Array();\n\n  private emitVisibilityButton$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\n  emitVisibilityButton: Observable<EventDependency<boolean>> = this.emitVisibilityButton$.asObservable();\n\n  private emitVisibilityAllButtons$: Subject<boolean> = new Subject<boolean>();\n  emitVisibilityAllButtons: Observable<boolean> = this.emitVisibilityAllButtons$.asObservable();\n\n  private emitIsCellSelection$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\n  emitIsCellSelection: Observable<EventDependency<boolean>> = this.emitIsCellSelection$.asObservable();\n\n  private emitChangeColumns$: Subject<EventDependency<ColumnConfig[]>> = new Subject<EventDependency<ColumnConfig[]>>();\n  emitChangeColumns: Observable<EventDependency<ColumnConfig[]>> = this.emitChangeColumns$.asObservable();\n\n  emitTotal: Subject<EventDependency<TotalTableHelisa>> = new Subject<EventDependency<TotalTableHelisa>>();\n  emitNextPage: Subject<EventDependency<T[]>> = new Subject<EventDependency<T[]>>();\n\n  constructor() { }\n\n  /**\n   * retorna un Observable<ConfigTable[]>\n   */\n  getTables(): Observable<ConfigTable<T>[]> {\n    return this.tables;\n  }\n\n  /**\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\n   * También remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\n   * @param configTable Objeto que contiene la configuración para la tabla.\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\n   */\n  updateDependency(configTable: ConfigTable<T>, withRemoveDependency: boolean = false): void {\n    if (withRemoveDependency) {\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\n    }\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\n      configTable.order = this.infoTables.length;\n    }\n    this.infoTables[configTable.order] = configTable;\n    if (configTable.isRemote) {\n      configTable.dataSource = null;\n      if (configTable.count === null) {\n        throw new Error('hace falta el count');\n      }\n    } else {\n      if (configTable.dataSource === null) {\n        throw new Error('hace falta el dataSource');\n      }\n      configTable.count = configTable.dataSource.length;\n    }\n    this.tables.next(this.infoTables);\n  }\n\n  /**\n   * Emite un evento de total con la información para la tabla correspondiente\n   * @param event wrapper que contiene el indice de la tabla y la información de la pagina\n   */\n  setTotal(event: EventDependency<TotalTableHelisa>): void {\n    this.emitTotal.next(event);\n  }\n\n  /**\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\n   * @param event wrapper que contiene el indice de la tabla y la información de la pagina\n   */\n  addPage(event: EventDependency<T[]>): void {\n    this.emitNextPage.next(event);\n  }\n\n  selectIndexRow(config: ConfigTable<T>): void {\n    if (this.infoTables[config.order]) {\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\n      this.tables.next(this.infoTables);\n    }\n  }\n\n\n  /**\n   * Muestra o esconde el boton una tabla en especifico\n   * @param event para indicar el index de la tabla y en \"data\" true o false\n   */\n  changeVisibilityButton(event: EventDependency<boolean>): void {\n    this.emitVisibilityButton$.next(event);\n  }\n\n\n  /**\n   * Esconde los botones de todas las tablas\n   * @param show indicar si se muestran o no todos los botones de las tablas\n   */\n  changeVisibilityAllButtons(show: boolean): void {\n    this.emitVisibilityAllButtons$.next(show);\n  }\n\n  /**\n   * Para habilitar el manejo de selección de celda\n   * @param event para indicar el index de la tabla y en \"data\" true o false\n   */\n  changeisCellSelection(event: EventDependency<boolean>): void {\n    this.emitIsCellSelection$.next(event);\n  }\n\n   /**\n    * Para habilitar el cambio de columnas\n    * @param event para indicar el index de la tabla y en \"data\" columnas\n    */\n  changeColumnsByTable( event: EventDependency<ColumnConfig[]>): void {\n    this.emitChangeColumns$.next(event);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {TotalTableHelisa} from './table-helisa.interface';\nimport {TableHelisaComponent} from './table-helisa.component';\n\nexport interface TableHelisaServiceInfo<T> {\n  obj: T;\n  table?: {} | TableHelisaComponent<T>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableHelisaService<T> {\n\n  private emitChangeSource: Subject<TableHelisaServiceInfo<TotalTableHelisa>> = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\n  private emitNextPage: Subject<TableHelisaServiceInfo<T[]>> = new Subject<TableHelisaServiceInfo<T[]>>();\n\n  totalReturn: Observable<TableHelisaServiceInfo<TotalTableHelisa>> = this.emitChangeSource.asObservable();\n  nextPageReturn: Observable<TableHelisaServiceInfo<T[]>> = this.emitNextPage.asObservable();\n\n  private emitVisibleButton$: Subject<boolean> = new Subject<boolean>();\n  /**\n   * Observable para saber si se debe mostrar o esconder el boton de add row\n   */\n  emitVisibleButton: Observable<boolean> = this.emitVisibleButton$.asObservable();\n\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<TotalTableHelisa>): void {\n    this.emitChangeSource.next({obj: total, table});\n  }\n\n  addPage(page: T[], table?: TableHelisaComponent<T>): void {\n    this.emitNextPage.next({obj: page, table});\n  }\n\n  /**\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\n   * @param change indicar si se muestra o no el boton de add row de la tabla\n   */\n  changeVisibilityButton(change: boolean): void {\n    this.emitVisibleButton$.next(change);\n  }\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nexport enum InputHelisaType {\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE, POSITIVEORNEGATIVEDOUBLE, PHONE\n}\n\n@Component({\n  selector: 'hel-input',\n  templateUrl: './input-helisa.component.html',\n  styleUrls: ['./input-helisa.component.sass']\n})\nexport class InputHelisaComponent implements OnInit, AfterViewInit {\n\n  private readonly DECIMAL_SEPARATOR: string = '.';\n  private readonly THOUSAND_SEPARATOR: string = ',';\n  private readonly NEGATIVE_SIGN: string = '-';\n\n  @Input() placeholder: string = '';\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\n  @Input() minlength: number;\n  @Input() maxlength: number;\n\n  /** Activar o desactivar el autocompletado\n   * (Caracteristica de los navegadores para campos comunes como\n   * Direccion , Usuario, Password ... etc)\n   */\n  @Input() autocompleteMode: boolean = false;\n\n  // Mostrar o no el icono de buscar\n  @Input() isSearch: boolean = false;\n  // @Input() inputFormControl: FormControl = new FormControl('');\n  @Input() isFocused: boolean = false;\n\n  /**\n   * Deprecated\n   */\n  @Input() disabled: boolean = false;\n  @Input() type: InputHelisaType = InputHelisaType.DEFAULT;\n\n  /**\n   * Deprecated\n   */\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\n\n  // tslint:disable-next-line:no-any\n  @Output() blur: EventEmitter<any> = new EventEmitter();\n\n  formControlMask: FormControl = new FormControl('');\n  private realValue: string = '';\n  private inputFormReal: FormControl = new FormControl('');\n\n  @ViewChild('inputText', {static: true}) inputText: ElementRef;\n\n  constructor() {\n  }\n\n  @Input()\n  set inputFormControl(formControl: FormControl) {\n    this.inputFormReal = formControl;\n    this.inputFormReal.registerOnDisabledChange(((isDisabled: boolean): void => {\n      if (isDisabled) {\n        this.formControlMask.disable();\n      } else {\n        this.formControlMask.enable();\n      }\n    }));\n    this.inputFormReal.valueChanges.subscribe((data: string): void => {\n      this.statusChange(this.inputFormReal.status);\n      if (this.getMaskedValue(data) !== this.formControlMask.value) {\n        this.change(data);\n        if (this.isFocused) {\n          this.onFocus(null);\n        }\n      }\n    });\n    this.formControlMask.setValidators(this.inputFormReal.validator);\n    this.change(this.inputFormReal.value);\n    // disable control\n    if (formControl.disabled) {\n      this.formControlMask.disable({ onlySelf: true });\n    }\n    this.inputFormReal.statusChanges.subscribe(\n      (data: string): void => {\n        this.statusChange(data);\n        if (this.isFocused) {\n          this.onFocus(null);\n        }\n      }\n    );\n  }\n\n\n  private statusChange(data: string): void {\n    if (data === 'INVALID') {\n      this.formControlMask.setErrors({ key: 'Error de validación.' });\n      this.formControlMask.markAsTouched();\n    } else {\n      this.formControlMask.setErrors(null);\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.isFocused) {\n      this.inputText.nativeElement.focus();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // this.isParentDisabled();\n  }\n\n  /*isParentDisabled(): void {\n    setTimeout(() => {\n      if (this.nameInput.nativeElement.closest('.hw-disabled-mode')) {\n        this.disabled = true;\n      } else {\n        this.disabled = false;\n      }\n    });\n  }*/\n\n  search(): void {\n    this.setValue.emit(this.realValue);\n  }\n\n  change(event: string): void {\n    if (event != null) {\n      event = event + '';\n    }\n    let position: number = this.inputText.nativeElement.selectionStart;\n    const length: number = event ? event.length : 0;\n    this.realValue = this.getRealValue(event);\n    if (this.getMaskedValue(this.realValue) !== this.formControlMask.value) {\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue));\n      position += this.inputText.nativeElement.value.length - length;\n      this.inputText.nativeElement.selectionStart = position;\n      this.inputText.nativeElement.selectionEnd = position;\n    }\n    this.inputFormReal.setValue(this.realValue);\n  }\n\n  private getMaskedValue(str: string): string {\n    if (str == null) {\n      return str;\n    }\n    str = str + '';\n    if (this.type === InputHelisaType.DEFAULT || this.type === InputHelisaType.PHONE) {\n      return str;\n    }\n    let maskedStr: string = '';\n    if (this.type === InputHelisaType.IDENTITY) {\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n    }\n    if (this.type === InputHelisaType.NUMERIC) {\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n    }\n    if (this.type === InputHelisaType.DOUBLE) {\n      maskedStr = this.getMaskedValueDouble(str);\n    }\n    if (this.type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {\n      const isNegativeValue: boolean = str.indexOf(this.NEGATIVE_SIGN) === 0;\n      const newStr: string = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;\n      maskedStr = this.getMaskedValueDouble(newStr);\n      if (isNegativeValue) {\n        maskedStr = this.NEGATIVE_SIGN + maskedStr;\n      }\n    }\n    return maskedStr;\n  }\n\n  private getMaskedValueDouble(str: string): string {\n    let maskedStr: string = '';\n    if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {\n      for (let i: number = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {\n        maskedStr += str[i];\n      }\n    }\n    for (let i: number = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1,\n      j: number = 0; i >= 0; i--, j++) {\n\n      if (j > 0 && j % 3 === 0) {\n        maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\n      }\n      maskedStr = str[i] + maskedStr;\n    }\n    return maskedStr;\n  }\n\n  private getRealValue(str: string): string {\n    if (str == null) {\n      return str;\n    }\n    str = str + '';\n    let realStr: string = '';\n    if (this.type === InputHelisaType.DEFAULT) {\n      return str;\n    }\n    if (this.type === InputHelisaType.IDENTITY || this.type === InputHelisaType.NUMERIC || this.type === InputHelisaType.PHONE) {\n      for (const strItem of str) {\n        if (strItem.match('[0-9]')) {\n          realStr += strItem;\n        }\n      }\n    }\n    if (this.type === InputHelisaType.DOUBLE) {\n      realStr = this.getRealValueDouble(str);\n    }\n    if (this.type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {\n      const isNegativeValue: boolean = str.indexOf(this.NEGATIVE_SIGN) === 0;\n      const newStr: string = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;\n      realStr = this.getRealValueDouble(newStr)\n      if (isNegativeValue) {\n        realStr = this.NEGATIVE_SIGN + realStr;\n      } \n    }\n    return realStr;\n  }\n\n  getRealValueDouble(str: string): string {\n    let realStr: string = '';\n    let haveDot: boolean = false;\n\n      for (const strItem of str) {\n        if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {\n          realStr += strItem;\n        }\n        haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);\n      }\n    return realStr;\n  }\n\n  onFocus($event: FocusEvent): void {\n    if ((this.type === InputHelisaType.NUMERIC || this.type === InputHelisaType.DOUBLE || this.type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) &&\n      Number(this.getRealValue(this.inputText.nativeElement.value)) === 0) {\n      this.inputText.nativeElement.select();\n    }\n  }\n}\n","import {Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input} from '@angular/core';\nimport {DependencyTableHelisaService, ConfigTable} from './dependency-table-helisa.service';\nimport {Cell, ColumnConfig, EventColumn, RequestTableHelisa, SelectObject, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\nimport {TableHelisaService} from '../table-helisa/table-helisa.service';\nimport {TableHelisaComponent} from '../table-helisa/table-helisa.component';\n\nexport interface EventDependency<T> {\n  index: number;\n  data: T;\n}\n\n@Component({\n  selector: 'hel-dependency-table',\n  templateUrl: './dependency-table-helisa.component.html',\n  styleUrls: ['./dependency-table-helisa.component.sass'],\n  providers: [DependencyTableHelisaService]\n})\nexport class DependencyTableHelisaComponent<T> implements OnInit {\n\n  tables: Array<ConfigTable<T>> = [];\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<T>>;\n  @Input() showToolTip: boolean = true;\n\n  /**\n   * deprecated, use selectObject\n   */\n  @Output() selected: EventEmitter<EventDependency<T>> = new EventEmitter<EventDependency<T>>();\n  @Output() selectObject: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() nextPage: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() total: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() sort: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() drop: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\n  @Output() selectCell: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() bookClicked: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  selectedObject: EventDependency<{}> = null;\n\n\n  /**\n   * Tiempo antes de ocultarla el mensaje del tooltip\n   */\n  @Input() hideDelay: number = 600;\n\n  /**\n   * Tiempo antes de mostra el mensaje del tooltip\n   */\n  @Input() showDelay: number = 500;\n\n\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService<T>, private tableService: TableHelisaService<T>) {\n  }\n\n  ngOnInit(): void {\n    this.getTables();\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\n      (event: EventDependency<T[]>): void => {\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\n      }\n    );\n\n    this.dependencyTableHelisaService.emitTotal.subscribe(\n      (event: EventDependency<TotalTableHelisa>): void => {\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\n      }\n    );\n\n    // Observable para mostrar o esconder el boton de una tabla\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\n      (data: EventDependency<boolean>): void => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (!!table) {\n            table.addRowButton.showButton = data.data;\n          }\n        }\n      }\n    );\n\n    // Observable para mostrar o esconder los botones de todas las tablas\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\n      (data: boolean): void => {\n        if (data !== undefined && data != null) {\n          this.tables.forEach((element: ConfigTable<T>): void => {\n            if (!!element.addRowButton) {\n              element.addRowButton.showButton = data;\n            }\n          });\n        }\n      }\n    );\n\n    // Observable para manejo de selección de celdas\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\n      (data: EventDependency<boolean>): void => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (table) {\n            table.isCellSelection = data.data;\n          }\n        }\n      });\n\n    // Observable para manejo de columnas\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\n      (data: EventDependency<ColumnConfig[]>): void => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (table) {\n            table.columns = data.data;\n          }\n        }\n      });\n  }\n\n  /**\n   * retorna el servicio que gestiona el componente.\n   */\n  getService(): DependencyTableHelisaService<T> {\n    return this.dependencyTableHelisaService;\n  }\n\n  /**\n   * Obtiene un observable con las tablas dependientes desde el servicio.\n   */\n  getTables(): void {\n    this.dependencyTableHelisaService.getTables()\n      .subscribe((tables: ConfigTable<T>[]): void => {\n          this.tables.splice(0, this.tables.length, ...tables);\n          this.viewTables.forEach((item: TableHelisaComponent<T>): void => {\n            item.reload();\n          });\n        }\n      );\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla seleccionada\n   * @param data retorna la fila que fue seleccionada\n   */\n  onSelectedDependency(index: number, event: SelectObject<T>): void {\n    this.selectedObject = {index, data: event};\n    this.selected.emit({index, data: event.value});\n    this.selectObject.emit({index, data: event});\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onNextPage(index: number, event: RequestTableHelisa<T>): void {\n    this.nextPage.emit({index, data: event});\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onTotal(index: number, event: EventColumn): void {\n    this.total.emit({index, data: event});\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onSort(index: number, event: EventColumn): void {\n    this.sort.emit({index, data: event});\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onDrop(index: number, event: EventDependency<T>): void {\n    this.drop.emit({index, data: event});\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe añadir una nueva fila\n   * @param index indica el indice de la tabla de la cual se dispara el evento\n   */\n  onAddRow(index: number): void {\n    this.addRow.emit(index);\n  }\n\n  selectedCell(index: number, event: Cell<T>): void {\n    if (this.tables[index].isCellSelection) {\n      this.selectCell.emit({index, data: event});\n    }\n  }\n\n  onBookClicked(index: number, event: EventDependency<T>): void {\n    this.bookClicked.emit({index, data: event});\n  }\n}\n","import { SortDirection } from '@angular/material/sort';\nimport { RowData } from './table-helisa.component';\n\nexport enum ColumnType {\n  NORMAL, URL\n}\n\nexport interface ColumnConfig {\n  name: string;\n  title?: string;\n  visible?: boolean;\n  sortable?: boolean;\n  groupable?: boolean;\n  totalType?: TotalType;\n  searchable?: boolean;\n  sortDirection?: SortDirection;\n  subtitle?: string;\n  colspanTitle?: number;\n  colspanSubtitle?: number;\n  columnStyle?: string;\n  columnType?: ColumnType;\n  isSelectable?: boolean;\n}\n\nexport interface AddRowButton {\n  text: string;\n  showButton: boolean;\n}\n\nexport enum EventScope {\n  USER, CODE_CALL\n}\n\nexport enum TotalType {\n  SUM, AVERAGE, COUNT\n}\n\nexport enum ChangeColumnConfigurationType {\n  SORT, UNKNOWN, TOTAL\n}\n\nexport interface EventColumn {\n  column: ColumnConfig;\n  columnConfigurations: Array<ColumnConfig>;\n  type: ChangeColumnConfigurationType;\n}\n\nexport interface TotalTableHelisa {\n  column: ColumnConfig;\n  value: number;\n}\n\nexport interface TotalGroup {\n  sum: number;\n  count: number;\n}\n\nexport interface EventSearch {\n  text: string;\n  columnConfigurations: Array<ColumnConfig>;\n}\n\nexport interface RequestTableHelisa<T> {\n  page: number;\n  body: {} | T;\n}\n\nexport interface DropElement<T> {\n value: T;\n order: number;\n}\n\nexport interface SelectObject<T> {\n  value: T;\n  scope: EventScope;\n}\n\nexport enum TableHelisaType {\n  REMOTE, LOCAL\n}\n\n\nexport interface Cell<T> {\n  column: ColumnConfig;\n  row: RowData<T> | T;\n }\n\nexport interface ConfigCellStyles<T> {\n   cellData: T;\n   classCell: string;\n }\n\nexport interface ConfigRowStyles<T> {\n  column: ColumnConfig;\n  data: {} | T;\n  classRow: string;\n}\n\n// @dynamic\nexport class ColumnConfigUtil<T> {\n\n  getValue(obj: T, column: ColumnConfig): T | number | string {\n    return column.name.split('.').reduce((o: T, field: string): T | string => o && o[field], obj);\n  }\n}\n\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, DoCheck} from '@angular/core';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\n\nimport {\n  AddRowButton,\n  Cell,\n  ChangeColumnConfigurationType,\n  ColumnConfig,\n  ColumnConfigUtil,\n  ConfigCellStyles,\n  ConfigRowStyles,\n  DropElement,\n  EventColumn,\n  EventScope,\n  EventSearch,\n  RequestTableHelisa,\n  SelectObject,\n  TableHelisaType,\n  TotalGroup,\n  TotalType,\n  ColumnType,\n  TotalTableHelisa\n} from './table-helisa.interface';\nimport { TableHelisaService, TableHelisaServiceInfo } from './table-helisa.service';\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\n\nexport interface RowData<T> {\n  data: {} | T;\n  rowType: RowType;\n}\n\nenum RowType {\n  GROUP_TITLE, GROUP_FOOTER, ROW\n}\n\n\n\n@Component({\n  selector: 'hel-table',\n  templateUrl: './table-helisa.component.html',\n  styleUrls: ['./table-helisa.component.sass']\n})\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\n\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\n  totalData: Array<number>;\n  rawData: Array<T>;\n  data: MatTableDataSource<RowData<T>> = new MatTableDataSource<RowData<T>>([]);\n  displayedColumns: string[] = [];\n  displayedColumnsWithTitle: string[] = [];\n  displayedColumnsWithSubtitle: string[] = [];\n  displayedColumnsWithFooter: string[] = [];\n  columnConfig: Array<ColumnConfig>;\n  selectedObject: T;\n  lastSearch: string;\n  type: TableHelisaType = TableHelisaType.LOCAL;\n  indexRowSelect: number;\n  private scrollCount: number = 0;\n  hasSubtitle: boolean = false;\n  private indexRowStartDrag: number = -1;\n  private lastIndexRowDrag: number = -1;\n  private dataBeforeDrag: { data: RowData<T>[] } = null;\n  private dataSource$: Array<T> = [];\n  private scrollX: number = 0;\n  private scrollY: number = 0;\n\n  @ViewChild(MatSort, {static: true}) matSort: MatSort;\n  @ViewChild(MatTable, {static: true}) matTable: MatTable<T>;\n  @ViewChild(MatTable, { read: ElementRef, static: true }) matTableElement: ElementRef;\n  @ViewChild('containerTable', {static: true}) containerTable: ElementRef;\n\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\n\n  /**\n   * Deprecado, cambiar por electObject\n   */\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\n  @Output() selectCell: EventEmitter<Cell<T>> = new EventEmitter<Cell<T>>();\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\n  @Output() nextPage: EventEmitter<RequestTableHelisa<T>> = new EventEmitter<RequestTableHelisa<T>>();\n  @Input() showTitle: boolean = true;\n  @Input() isCellSelection: boolean = false;\n  @Input() count: number;\n  @Input() configCellStyles: Array<ConfigCellStyles<T>>;\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\n  @Input() configColumnClass: Array<string>;\n  @Input() selectedCells: Cell<T>;\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\n  @Input() isDragged: boolean = false;\n  @Input() addRowButton: AddRowButton = { showButton: false, text: '' };\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\n  @Input() addBookButton: boolean = false;\n  @Input() showToolTip: boolean = true;\n  showFooter: boolean = false;\n  showSearch: boolean = false;\n\n\n\n  /**\n   * Tiempo antes de ocultarla el mensaje del tooltip\n   */\n  @Input() hideDelay: number = 600;\n\n  /**\n   * Tiempo antes de mostra el mensaje del tooltip\n   */\n  @Input() showDelay: number = 500;\n\n\n  constructor(private tableService: TableHelisaService<T>) { }\n\n  ngOnInit(): void {\n    this.reloadColumnConfig();\n    this.tableService.nextPageReturn.subscribe(\n      (data: TableHelisaServiceInfo<T[]>): void => {\n        if (!data.table || data.table === this) {\n          this.receivePage(data.obj);\n        }\n      }\n    );\n    this.tableService.totalReturn.subscribe((info: TableHelisaServiceInfo<TotalTableHelisa>): void => {\n      if (info) {\n        this.columnConfig.forEach((column: ColumnConfig, idx: number): void => {\n          if (column === info.obj.column) {\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\n          }\n        });\n      }\n    });\n    this.matSort.sortChange.subscribe(\n      (event: Sort): void => {\n        const column: ColumnConfig = this.columnConfig.find((c: ColumnConfig): boolean => c.name === event.active);\n        column.sortDirection = event.direction;\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\n      }\n    );\n\n    this.tableService.emitVisibleButton.subscribe(\n      (data: boolean): void => {\n        if (data !== undefined && data != null) {\n          this.addRowButton.showButton = data;\n        }\n      }\n    );\n    this.reload();\n  }\n\n  ngAfterViewInit(): void {\n    if (this.isCellSelection) {\n      this.matTable.renderRows();\n    }\n  }\n\n  @Input()\n  set isRemote(w: boolean) {\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\n    if (this.type === TableHelisaType.REMOTE) {\n      this.goNextPage();\n    } else {\n      this.tableHelisaConnectComponent.page++;\n    }\n  }\n\n  @Input()\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\n    this.columnConfig = columnConfiguration;\n    this.reload();\n    this.reloadColumnConfig();\n  }\n\n  @Input()\n  set dataSource(dataSource: Array<T>) {\n    this.dataSource$ = dataSource;\n    this.rawData = dataSource;\n    this.reload();\n  }\n\n  get dataSource(): Array<T> {\n    return this.dataSource$;\n  }\n\n  @Input()\n  set selectedIndexRow(idRowSelected: number) {\n    this.indexRowSelect = idRowSelected;\n    if (this.rawData && this.rawData.length) {\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\n        this.indexRowSelect = 0;\n      }\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\n    }\n  }\n\n  private reloadColumnConfig(): void {\n    this.hasSubtitle = false;\n    this.displayedColumns.splice(0, this.displayedColumns.length);\n\n    if (this.columnConfig) {\n      if (this.addBookButton) {\n        const columnCount: number = this.columnConfig.length;\n        let countSubtitle: number = 0;\n        let showBookButton: boolean = false;\n        this.columnConfig.forEach((column: ColumnConfig): void => {\n          if (!!column.subtitle) {\n            countSubtitle = countSubtitle + 1;\n          }\n          if ((!showBookButton) && (column.name === 'bookButton')) {\n            showBookButton = true;\n          }\n        });\n        const subtitleTemp: boolean = columnCount === countSubtitle;\n        if (!showBookButton) {\n          this.columnConfig.push({\n            name: 'bookButton',\n            title: '',\n            subtitle: subtitleTemp ? '' : undefined ,\n            visible: true\n          });\n        }\n      }\n      this.columnConfig.forEach((column: ColumnConfig): void => {\n        if (column.visible) {\n          this.displayedColumns.push(column.name);\n        }\n        if (!this.hasSubtitle) {\n          this.hasSubtitle = column.subtitle !== undefined;\n        }\n      });\n      if (this.rawData) {\n        this.dataSource = this.rawData;\n      }\n    }\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\n    this.getColumnsWithTitle().forEach((col: string): number => this.displayedColumnsWithTitle.push(col));\n    this.getHeaderSubtitle().forEach((col: string): number => this.displayedColumnsWithSubtitle.push(col));\n    this.footerDisplayedColumns().forEach((col: string): number => this.displayedColumnsWithFooter.push(col));\n  }\n\n  public reload(): void {\n    if(this.columnConfig) {\n      const changeData: Array<RowData<T>> = Array<RowData<T>>();\n      let haveGroup: boolean = false;\n      let groupFooter: Array<TotalGroup>;\n      this.columnConfig.forEach((column: ColumnConfig): void => {\n        if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\n          this.totalData = new Array<number>(this.columnConfig.length);\n          this.showFooter = true;\n          this.total.emit({column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL});\n        }\n        this.showSearch = this.showSearch || column.searchable;\n        haveGroup = haveGroup || column.groupable;\n      });\n      if (haveGroup) {\n        this.rawData = this.rawData.sort((a: T, b: T): number => {\n          let result: number = 0;\n          this.columnConfig.forEach((column: ColumnConfig): void => {\n            if (result === 0) {\n              result = this.compare(a, b);\n            }\n          });\n          return result;\n        });\n      }\n      if(this.rawData) {\n        this.rawData.forEach((row: T): void => {\n          if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data as T, row) !== 0)) {\n            if (groupFooter) {\n              changeData.push({data: groupFooter, rowType: RowType.GROUP_FOOTER});\n            }\n            changeData.push({data: row, rowType: RowType.GROUP_TITLE});\n            groupFooter = new Array<TotalGroup>(this.columnConfig.length);\n          }\n          if (haveGroup) {\n            this.addTotalGroup(groupFooter, row);\n          }\n          changeData.push({data: row, rowType: RowType.ROW});\n        });\n        this.data = new MatTableDataSource<RowData<T>>(changeData);\n      }\n      if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\n        if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0) {\n          this.indexRowSelect = 0;\n        }\n        this.selectRow({data: this.rawData[this.indexRowSelect], rowType: RowType.ROW}, false);\n      }\n    }\n  }\n\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: T): void {\n    this.columnConfig.forEach((column: ColumnConfig, index: number): void => {\n      if (column.totalType !== undefined) {\n        if (rowTotal[index] === undefined) {\n          rowTotal[index] = { sum: (new ColumnConfigUtil().getValue(row, column) as number), count: 1 };\n        } else {\n          rowTotal[index].sum += (new ColumnConfigUtil().getValue(row, column) as number);\n          rowTotal[index].count++;\n        }\n      }\n    });\n  }\n\n  private compare(a: T, b: T): number {\n    let ws: number = 0;\n    this.columnConfig.forEach((column: ColumnConfig): void => {\n      if (ws === 0 && column.groupable) {\n        if ((new ColumnConfigUtil().getValue(a, column) as number) < (new ColumnConfigUtil().getValue(b, column) as number)) {\n          ws = -1;\n        } else if ((new ColumnConfigUtil().getValue(a, column) as number) > (new ColumnConfigUtil().getValue(b, column) as number)) {\n          ws = 1;\n        }\n      }\n    });\n    return ws;\n  }\n\n  getGroupDescription(obj: T): string {\n    let result: string = '';\n    this.columnConfig.forEach((column: ColumnConfig): void => {\n      if (column.groupable) {\n        result += (result.length ? ' - ' : '') + (new ColumnConfigUtil().getValue(obj, column));\n      }\n    });\n    return result;\n  }\n\n  isGroupTitle(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.GROUP_TITLE;\n  }\n\n  isRow(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.ROW;\n  }\n\n  isGroupFooter(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.GROUP_FOOTER;\n  }\n\n  footerDisplayedColumns(): Array<string> {\n    return this.displayedColumns.map((name: string): string => 'footer-' + name);\n  }\n\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\n    if (column.totalType === TotalType.SUM) { return data.sum; }\n    if (column.totalType === TotalType.COUNT) { return data.count; }\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\n    return undefined;\n  }\n\n  getValue(obj: T, column: ColumnConfig): T {\n    return new ColumnConfigUtil().getValue(obj, column) as T;\n  }\n\n  getValueTooltip(obj: T, column: ColumnConfig): string {\n    if (this.showToolTip) {\n      return new ColumnConfigUtil().getValue(obj, column) as string;\n    } else {\n      return null;\n    }\n  }\n\n  searchText(text: string): void {\n    this.lastSearch = text;\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\n  }\n\n  selectRow(row: RowData<T>, isUser: boolean, column?: ColumnConfig): void {\n    if (row === undefined || row === null) {\n      return;\n    }\n    if ((column === undefined || column === null) || (!!column && column.name !== 'bookButton')) {\n      this.selectedObject = row.data as T;\n      this.select.emit(this.selectedObject);\n      this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\n    } else if (!!column && column.name === 'bookButton') {\n      if (this.selectedObject !== row.data) {\n        this.selectedObject = row.data as T;\n        this.select.emit(this.selectedObject);\n        this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\n      }\n      this.bookClicked.emit(this.selectedObject);\n    }\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n    let isScrollY: boolean;\n\n    if (this.scrollY !== element.scrollTop) {\n      isScrollY = true;\n      this.scrollY = element.scrollTop;\n      this.scrollX = element.scrollLeft;\n    }\n\n    if (this.scrollX !== element.scrollLeft) {\n      isScrollY = false;\n      this.scrollY = element.scrollTop;\n      this.scrollX = element.scrollLeft;\n    }\n\n    if ((element.scrollHeight - element.scrollTop < 1000) && isScrollY) {\n      this.goNextPage();\n    }\n\n  }\n\n  private goNextPage(): void {\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\n      this.tableHelisaConnectComponent.isUsed = true;\n      this.nextPage.emit({\n        page: this.tableHelisaConnectComponent.nextPage(),\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\n      });\n    }\n  }\n\n  private receivePage(data: T[]): void {\n    if (!this.rawData) {\n      this.rawData = new Array<T>();\n    }\n    this.rawData = this.rawData.concat(data);\n    this.dataSource = this.rawData;\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\n    this.tableHelisaConnectComponent.isUsed = false;\n  }\n\n  dblClickCell(): void {\n    this.selectCell.emit(this.selectedCells as Cell<T>);\n  }\n\n  selectedCell(element: RowData<T>, column: ColumnConfig): void {\n    if (column.isSelectable === undefined || column.isSelectable === null || column.isSelectable) {\n      this.selectRow(element, true, column);\n      this.selectedCells = { column, row: element };\n      this.selectCell.emit(this.selectedCells);\n    }\n  }\n\n  isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean {\n    if (this.isCellSelection) {\n      if (this.selectedCells != null) {\n        if (this.selectedCells.column.name === column.name &&\n          (this.selectedCells.row as RowData<T>).data === row.data) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  getClassToCell(row: T, column: ColumnConfig): string[] {\n    const classToCell: Array<string> = new Array<string>();\n    if (this.configCellStyles) {\n      const found: ConfigCellStyles<T> = this.configCellStyles.find((c: ConfigCellStyles<T>): boolean => {\n        return c.cellData === this.getValue(row, column);\n      });\n      if (found) {\n        classToCell.push(found.classCell);\n      }\n    }\n    if (column.columnStyle) {\n      classToCell.push(column.columnStyle);\n    }\n    return classToCell;\n  }\n\n  getClassToColumn(): string[] {\n    return this.configColumnClass;\n  }\n\n  getClassToRow(row: T): string[] {\n    const classToRow: Array<string> = new Array<string>();\n    if (row === this.selectedObject && !this.isCellSelection) {\n      classToRow.push('');\n    }\n    if (this.configRowStylesFromColumn) {\n      const founds: ConfigRowStyles<T>[] = this.configRowStylesFromColumn.filter((c: ConfigRowStyles<T>): boolean => {\n        return c.data === this.getValue(row, c.column);\n      });\n      if (founds) {\n        founds.forEach((c: ConfigRowStyles<T>): void => {\n          classToRow.push(c.classRow);\n        });\n      }\n    }\n    return classToRow;\n  }\n\n  onDrop(event: MouseEvent): void {\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\n      const rowIndex: number = this.getRowIndex(event.pageY);\n      const array: RowData<T>[] = this.dataBeforeDrag.data;\n      const rawData: T[] = this.rawData;\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\n      this.drop.emit({ value: array[rowIndex].data as T, order: rowIndex });\n      this.rawData = rawData;\n      this.data = new MatTableDataSource(array);\n      event.stopPropagation();\n    }\n  }\n\n  tableKeydown(event: KeyboardEvent): void {\n    if (!this.isCellSelection) {\n      let currentIndex: number = this.data.data.findIndex((row: RowData<T>): boolean => row.data === this.selectedObject);\n      let newSelection: number = -10;\n      if (event.key === 'ArrowDown') {\n        this.scrollCount++;\n        this.data.data.forEach((row: RowData<T>, index: number): void => {\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\n            newSelection = index;\n          }\n        });\n      }\n      if (event.key === 'ArrowUp') {\n        this.scrollCount--;\n        currentIndex = this.data.data.length - currentIndex - 1;\n        this.data.data.reverse().forEach((row: RowData<T>, index: number): void => {\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\n            newSelection = index;\n          }\n        });\n        this.data.data.reverse();\n        if (newSelection !== -10) {\n          newSelection = this.data.data.length - newSelection - 1;\n        }\n      }\n      if (newSelection !== -10) {\n        this.selectRow(this.data.data[newSelection], true);\n      }\n      if (Math.abs(this.scrollCount) >= 2) {\n        this.scrollCount = 0;\n      } else {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Emite el evento cuando se da click al boton AddRow\n   */\n  onAddRow(): void {\n    this.addRow.emit();\n  }\n\n\n  getHeaderSubtitle(): string[] {\n    const x: string[] = this.columnConfig.map((column: ColumnConfig, index: number): string => {\n      if (column.visible && column.subtitle !== undefined) {\n        return 'subtitle' + index;\n      } else {\n        return null;\n      }\n    }).filter((data: string): boolean => data != null);\n    return x;\n  }\n\n  getColumnsWithTitle(): string[] {\n    return this.columnConfig.filter((column: ColumnConfig): boolean =>\n      column.visible && column.title !== undefined\n    ).map((col: ColumnConfig): string => col.name);\n  }\n\n  dragger(event: MouseEvent): boolean {\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\n      const rowIndex: number = this.getRowIndex(event.pageY);\n      if (rowIndex !== this.lastIndexRowDrag) {\n        this.lastIndexRowDrag = rowIndex;\n        // This can have a memory problem with big data\n        const array: RowData<T>[] = [...this.dataBeforeDrag.data];\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\n        this.data = new MatTableDataSource(array);\n      }\n      event.preventDefault();\n      return true;\n    }\n  }\n\n  startDrag(event: MouseEvent): void {\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\n    this.lastIndexRowDrag = this.indexRowStartDrag;\n    this.dataBeforeDrag = this.data;\n  }\n\n  private getRowIndex(pageY: number): number {\n    let offsetTop: number = 0;\n    let container: HTMLElement = this.containerTable.nativeElement;\n    while ((container !== null) && (offsetTop === 0)) {\n      offsetTop = container.offsetTop;\n      container = container.parentElement;\n    }\n    let rowIndex: number = -1;\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\n    for (let i: number = 0; i < rows.length; i++) {\n      const row: HTMLElement = (rows[i] as HTMLElement);\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop) {\n        rowIndex = i;\n      }\n    }\n    if (rowIndex < 0) { rowIndex = 0; }\n    return rowIndex;\n  }\n\n  get columnType(): typeof ColumnType {\n    return ColumnType;\n  }\n\n}\n\n","import {ColumnConfig} from './table-helisa.interface';\nimport {Observable} from 'rxjs';\n\n\nexport class TableHelisaConnectComponent<T> {\n  page: number;\n  isLastPage: boolean;\n  isUsed: boolean;\n\n  constructor() {\n    this.page = 0;\n    this.isLastPage = false;\n    this.isUsed = false;\n  }\n\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): {} {\n    return {};\n  }\n\n  nextPage(): number {\n    return this.page++;\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport * as moment_ from 'moment';\nconst moment: typeof moment_ = moment_;\n\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material/datepicker';\nimport { filter, tap } from 'rxjs/operators';\n\nexport enum TypeCalendarEnum {\n  NORMAL = 'norma',\n  MONTH_YEAR = 'mounth-year',\n  STRICT = 'strict'\n}\n\n\n@Component({\n  selector: 'hel-date-helisa',\n  templateUrl: './date-helisa.component.html',\n  styleUrls: ['./date-helisa.component.css'],\n})\nexport class DateHelisaComponent implements OnInit {\n\n  @ViewChild('picker', { static: true }) datePickerShow: MatDatepicker<Date>;\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\n  @Input() dateFormControl: FormControl = new FormControl('');\n  private date: Date = new Date();\n\n  /**\n   * Formato de fecha.\n   * Los formatos validos son aquellos que maneja la libreria momentjs y este: 'DD [de] MMMM [de] YYYY'\n   * https://momentjs.com/docs/#/parsing/string-format/\n   */\n  @Input() dateFormat: string = 'DD/MM/YYYY';\n  @Input() locale: string = 'es';\n  @Input() errorMessage: string = 'La fecha no concuerda con el formato ';\n  @Input() placeholder: string = this.dateFormat;\n  @Input() showDatePicker: boolean = false;\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  @Output() change: EventEmitter<Date> = new EventEmitter<Date>();\n  isClosed: boolean = false;\n  // tslint:disable-next-line:no-any\n  timeout: any;\n  isDisabled: boolean = false;\n  /**\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\n   * será tomado en cuenta\n   */\n  @Input() typeCalendar: TypeCalendarEnum = TypeCalendarEnum.NORMAL;\n\n  dateToVisualize: FormControl;\n\n  /**\n   * Para evitar nuevos eventos miestras se realiza el parseo\n   */\n  private isFromInputEvent: boolean = false;\n\n  /**\n   * Verificar si el formato es valido\n   */\n  invalidFormat: boolean = false;\n  private inputFormReal: FormControl = new FormControl('');\n\n  constructor() { }\n\n  /*\n  * TypeCalendarEnum.MONTH_YEAR = 'MM/YYYY'\n  * TypeCalendarEnum.STRICT = 'DD [de] MMMM [de] YYYY'\n  * */\n  ngOnInit(): void {\n    moment.locale(this.locale);\n    this.dateToVisualize = new FormControl('', this.dateFormControl.validator);\n    this.formHandler();\n    this.inputFormReal = this.dateFormControl;\n    this.inputFormReal.registerOnDisabledChange((isDisabled: boolean): void => {\n      if (isDisabled) {\n        this.isDisabled = true;\n        this.dateToVisualize.disable();\n      } else {\n        this.isDisabled = false;\n        this.dateToVisualize.enable();\n      }\n    });\n\n    /**\n     * establecer valor por defecto de la fecha\n     */\n    if (this.dateFormControl.value !== '' && this.dateFormControl.value !== null) {\n      const incomingDate: string = moment(this.dateFormControl.value, this.dateFormat).format(this.dateFormat);\n      if (incomingDate !== 'Invalid date') {\n        this.dateToVisualize.setValue(incomingDate);\n        this.dateFormControl.setValue(this.dateFormControl.value);\n      }\n    }\n\n  }\n\n  get typeCalendarEnum(): typeof TypeCalendarEnum {\n    return TypeCalendarEnum;\n  }\n\n  openDatePicker(): void {\n    if (this.showDatePicker && !this.isClosed) {\n      this.isClosed = true;\n      this.timeout = setTimeout((): void => {\n        this.datePickerShow.open();\n      }, 2000);\n    }\n  }\n\n  onKey(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      this.onBlur();\n      this.isClosed = true;\n      this.datePickerShow.open();\n    }\n  }\n\n  onBlur(): void {\n    if (moment(this.dateToVisualize.value, this.dateFormat, true).isValid()) {\n      const incomingDate: string = moment(this.dateToVisualize.value, this.dateFormat).format(this.dateFormat);\n      this.dateToVisualize.setValue(incomingDate);\n      this.dateFormControl.setValue(moment(this.dateToVisualize.value, this.dateFormat).toDate());\n      this.change.emit(moment(this.dateToVisualize.value, this.dateFormat).toDate());\n      clearTimeout(this.timeout);\n      this.isClosed = false;\n      if (this.showDatePicker) {\n        this.isClosed = true;\n        this.datePickerShow.open();\n      }\n    }\n  }\n\n\n  /**\n   * Determina como se debe inicializar la visualizacion del calendar\n   */\n  getStartView(): string {\n    // multi-year\n    if (this.typeCalendar === this.typeCalendarEnum.MONTH_YEAR) {\n      return 'multi-year';\n    } else if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\n      return 'month';\n    } else {\n      return 'month';\n    }\n  }\n\n  private formHandler(): void {\n    if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\n      this.dateToVisualize.valueChanges.subscribe((date: string): void => {\n        this.invalidFormat = false;\n        const isValid: boolean = moment(date, this.dateFormat, true).isValid();\n        const result: string = moment(date, this.dateFormat).format(this.dateFormat);\n        if (!!result && (result === 'Invalid date' || !isValid)) {\n          this.invalidFormat = true;\n          return;\n        }\n        if (!!result) {\n          if (!this.isFromInputEvent) {\n            this.isFromInputEvent = true;\n            this.dateToVisualize.setValue(moment(result, this.dateFormat).format(this.dateFormat));\n            this.dateFormControl.setValue(moment(result, this.dateFormat).toDate());\n            this.isFromInputEvent = false;\n          } else {\n            setTimeout((): void => {\n              this.isFromInputEvent = false;\n            }, 1500);\n          }\n\n        }\n      });\n    } else {\n      this.dateToVisualize.valueChanges\n        .pipe(\n          tap((date: string): void => {\n            if (date.trim().length > this.dateFormat.length) {\n              this.invalidFormat = true;\n            } else {\n              this.invalidFormat = false;\n            }\n          }),\n          filter((date: string): boolean => date.length === this.dateFormat.length)\n        )\n        .subscribe((date: string): void => {\n          this.invalidFormat = false;\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\n          const result: string = moment(date, this.dateFormat).format('YYYY-MM-DD');\n\n          if (!!result && (result === 'Invalid date' || !isValid)) {\n            this.invalidFormat = true;\n            return;\n          }\n\n          if (!!result) {\n            if (!this.isFromInputEvent) {\n              this.isFromInputEvent = true;\n              const subString: string[] = result.split('-');\n\n              const year: number = parseFloat(subString[0]);\n              const month: number = parseFloat(subString[1]);\n              const day: number = parseFloat(subString[2]);\n\n              this.date.setFullYear(year);\n              this.date.setDate(day);\n              this.date.setMonth(month - 1); // -1 por que los meses se toman como los indices en un array\n\n              /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\n              if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\n                this.date = moment(this.date).endOf('month').toDate();\n              }\n\n              this.dateToVisualize.setValue(moment(this.date, 'YYYY-MM-DD').format(this.dateFormat));\n              this.dateFormControl.setValue(this.date);\n              this.isFromInputEvent = false;\n            } else {\n              setTimeout((): void => {\n                this.isFromInputEvent = false;\n              }, 1500);\n            }\n\n          }\n        });\n    }\n\n\n    this.dateFormControl.valueChanges\n      .subscribe((date: string): void => {\n        const incommingDate: string = moment(date, this.dateFormat).format(this.dateFormat);\n        if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\n          this.dateToVisualize.setValue(incommingDate);\n        }\n      });\n  }\n\n\n  /**\n   * Evento que se dispara luego seleccionar un mes\n   */\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void {\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\n      datepicker.close();\n      const date: Date = moment(chosenMonthDate).endOf('month').toDate();\n\n      this.dateToVisualize.setValue(moment(date, 'YYYY-MM-DD').format(this.dateFormat));\n      this.dateFormControl.setValue(date);\n      this.change.emit(date);\n    }\n  }\n\n  /**\n   * Evento desde el control touch del calendar\n   */\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>): void {\n    this.dateToVisualize.setValue(moment(event.value, 'YYYY-MM-DD').format(this.dateFormat));\n    this.dateFormControl.setValue(new Date(event.value));\n    this.change.emit(new Date(event.value));\n    this.isClosed = true;\n  }\n\n  getErrorMessage(): string {\n    return this.errorMessage + this.dateFormat;\n  }\n\n  getDateToControl(): Date {\n    return moment(this.dateToVisualize.value, this.dateFormat).toDate();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, BehaviorSubject, Subscriber, Observable } from 'rxjs';\nimport { Node } from './node';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TreeHelisaService {\n\n    // Observable string sources\n    private emitNodeSelected: BehaviorSubject<number | string> = new BehaviorSubject<number | string>(1);\n    // Observable string streams\n    nodeSelected: Observable<string | number> = this.emitNodeSelected.asObservable();\n\n    // Observable string sources\n    private emitDataSource: BehaviorSubject<Node> = new BehaviorSubject<Node>(undefined);\n\n    // Observable string streams\n    dataSourceObservable: Observable<Node> = this.emitDataSource.asObservable();\n\n    // Expand node observable\n    private emitExpandAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n    nodeExpand: Observable<boolean> = this.emitExpandAllNodes.asObservable();\n\n     // Collapse node observable\n     private emitCollapseAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n     nodeCollapse: Observable<boolean> = this.emitCollapseAllNodes.asObservable();\n\n    private emitRefreshTree: Subject<void> = new Subject<void>();\n    refreshTreeObservable: Observable<void> = this.emitRefreshTree.asObservable();\n\n    private emitRefreshTreeWithPagination: Subject<void> = new Subject<void>();\n    refreshTreeWithPaginationObservable: Observable<void> = this.emitRefreshTreeWithPagination.asObservable();\n\n    private emitExpandOneNode: Subject<Node> = new Subject<Node>();\n    expandOneNodeObservable: Observable<Node> = this.emitExpandOneNode.asObservable();\n\n    private emitCollapseOneNode: Subject<Node> = new Subject<Node>();\n    collapseOneNodeObservable: Observable<Node> = this.emitCollapseOneNode.asObservable();\n\n    // Service message commands\n    changeNodeSelected(idResidentialArea: number | string): void {\n        this.emitNodeSelected.next(idResidentialArea);\n    }\n\n    // Service message commands\n    changeDataSource(data: Node): void {\n        this.emitDataSource.next(data);\n    }\n\n    expandAllNodes(expand: boolean): void {\n        this.emitExpandAllNodes.next(expand);\n    }\n\n    collapseAllNodes(collapse: boolean): void {\n        this.emitCollapseAllNodes.next(collapse);\n    }\n\n    refreshTree(): void {\n        this.emitRefreshTree.next();\n    }\n\n\n    refreshTreeWithPagination(): void {\n        this.emitRefreshTreeWithPagination.next();\n    }\n\n\n    expandOneNode(node: Node): void {\n    this.emitExpandOneNode.next(node);\n    }\n\n\n    collapseOneNode(node: Node): void {\n        this.emitCollapseOneNode.next(node);\n    }\n\n    constructor() {\n\n    }\n\n}\n","export class TreeHelisaConnect<T> {\n    page: number;\n    isLastPage: boolean;\n    isUsed: boolean;\n\n    constructor() {\n      this.page = 0;\n      this.isLastPage = false;\n      this.isUsed = false;\n    }\n\n    nextPage(): number {\n      return this.page = this.page + 1;\n    }\n  }\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, HostListener } from '@angular/core';\nimport { NestedTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { MatOptionSelectionChange } from '@angular/material/core';\nimport { MatTreeNestedDataSource, MatTree } from '@angular/material/tree';\nimport { Node } from './node';\nimport { TreeHelisaService } from './tree-helisa.service';\nimport { Router } from '@angular/router';\nimport * as _ from 'lodash';\nimport { TreeHelisaConnect } from './tree-helisa-connect';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nexport interface RequestTreeHelisa {\n  page: number;\n}\n\n@Component({\n  selector: 'hel-tree',\n  templateUrl: './tree-helisa.component.html',\n  styleUrls: ['./tree-helisa.component.sass']\n  // host: { '(document:keyup)': 'onKeyDown($event)' }\n})\nexport class TreeHelisaComponent implements OnInit, AfterViewInit {\n  isDisabled: boolean;\n  selectedNode: number | string | null;\n  //#endregion ====== Variables ========\n\n  constructor(private treeHelisaService: TreeHelisaService, private router: Router, private elementRef: ElementRef) {\n    // cargar datos pasados por el @Input\n    if (!!this.data) {\n      const data: Node = this.data;\n      this.data = null;\n      this.receivePage(data.children);\n    } else {\n      this.dataSource.data = [];\n      this.treeControl.dataNodes = [];\n    }\n  }\n\n  //#region  ====== Variables =============\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\n  formEdit: FormControl;\n  @ViewChild('tree', {static: true}) tree: MatTree<{}>;\n  private selectedOptions: Map<\n    string | number,\n    {\n      formControl: FormControl;\n      editMode: boolean;\n    }\n  > = new Map<\n    string | number,\n    {\n      formControl: FormControl;\n      editMode: boolean;\n    }\n  >();\n  /**\n   * Datos del Arbol\n   */\n  @Input() data: Node;\n\n  /**\n   * Retorna el id del nodo removido\n   */\n  @Output() removed: EventEmitter<string | number> = new EventEmitter<number | string>();\n\n  /**\n   * Retorna un nodo editado\n   */\n  @Output() edited: EventEmitter<Node> = new EventEmitter<Node>();\n\n  /**\n   * Retorna un nodo sin id del nodo , pero si con el parent\n   * para conocer a cual fue añadido\n   */\n  @Output() added: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() collapseParent: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() rangeScrolled: EventEmitter<RequestTreeHelisa> = new EventEmitter<RequestTreeHelisa>();\n  @Output() nodeSelected: EventEmitter<number | string> = new EventEmitter<number | string>();\n  @Output() dobleClick: EventEmitter<number | string> = new EventEmitter<number | string>();\n  @Output() keypressDelete: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() keypressInsert: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() checkedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() uncheckedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() clickAddNode: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() clickEditNode: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() clickDeleteNode: EventEmitter<Node> = new EventEmitter<Node>();\n\n  treeControl: NestedTreeControl<Node> = new NestedTreeControl<Node>((node: Node): Node[] | Observable<Node[]> => node.children);\n  dataSource: MatTreeNestedDataSource<Node> = new MatTreeNestedDataSource<Node>();\n\n  isSingleClick: boolean = true;\n  currentNode: Node = null;\n\n  /**\n   * Obtiene la descripcion completa del nodo\n   * @example Nodo padre,nodo hijo,nodo nieto\n   * @param node Debe tener todos los parent llenos hacia arriba\n   */\n  public static getDescription(node: Node): string {\n    let result: string[] = [node.name];\n    let concat: string = '';\n\n    if (node.parent) {\n      result.push(this.getDescription(node.parent));\n    }\n\n    if (result.length === 1) {\n      return node.name;\n    }\n\n    result = result.reverse();\n\n    for (let i: number = 0; i < result.length; i++) {\n      const element: string = result[i];\n      concat = concat + element + (i === result.length - 1 ? '' : ',');\n    }\n\n    return concat;\n  }\n\n  ngOnInit(): void {\n    // si se cargan datos por medio del servicio\n    this.treeHelisaService.dataSourceObservable.subscribe((res: Node): void => {\n      if (!!res && !!res.children) {\n        this.selectedNode = res.id;\n        this.receivePage(res.children);\n      } else {\n        this.dataSource.data = [];\n        this.treeControl.dataNodes = [];\n      }\n    });\n\n    // Observable, si cambia el nodo seleccionado por medio del servicio\n    this.treeHelisaService.nodeSelected.subscribe((res: string | number): void => {\n      if (!!this.data && !!this.data.children) {\n        this.selectNode(this.data, res);\n      }\n    });\n\n    this.treeHelisaService.refreshTreeObservable.subscribe((res: void): void => {\n      this.refreshTree();\n    });\n\n    this.treeHelisaService.refreshTreeWithPaginationObservable.subscribe((res: void): void => {\n      this.refreshTreeWithPagination();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.treeHelisaService.nodeExpand.subscribe((res: boolean): void => {\n      if (res != null) {\n        if (res) {\n          this.tree.treeControl.expandAll();\n        }\n      }\n    });\n\n    this.treeHelisaService.nodeCollapse.subscribe((res: boolean): void => {\n      if (res !== null) {\n        if (res) {\n          this.tree.treeControl.collapseAll();\n        }\n      }\n    });\n\n    this.treeHelisaService.expandOneNodeObservable.subscribe((res: Node): void => {\n      if (res !== undefined) {\n        this.treeControl.expand(res);\n      }\n    });\n\n    this.treeHelisaService.collapseOneNodeObservable.subscribe((res: Node): void => {\n      if (res !== undefined) {\n        this.treeControl.collapse(res);\n      }\n    });\n  }\n\n  //#region  ====== Events ===========\n  onRedirect(node: Node): void {\n    this.isSingleClick = true;\n    setTimeout((): void => {\n      if (this.isSingleClick) {\n        this.selectNode(node, node.id);\n\n        // if(!!node && !node.children){\n        if (!!node) {\n          this.nodeSelected.emit(node.id);\n          this.currentNode = node;\n        }\n      }\n    }, 350);\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n\n    if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\n      this.goNextPage();\n    }\n  }\n\n  onEdit(node: Node): void {\n    this.clickEditNode.emit(node);\n    /** @Deprecated\n     *  Ya no se edita el nodo ahora solo se emite el evento 'clickEditNode'\n     * retornando el nodo al cual le hicieron click en la opción delete\n     */\n    // node.isEditable = true;\n    // this.isDisabled = true;\n  }\n\n  onAdd(node: Node): void {\n    this.clickAddNode.emit(node);\n    /** @Deprecated\n     *  Ya no se crea y se agrega el nodo ahora solo se emite el evento 'clickAddNode'\n     * retornando el nodo al cual le hicieron click en la opción add\n     */\n    //   // si no tiene hijos instanciar el array\n    //   if (!node.children) {\n    //     node.children = [];\n    //   }\n    //   node.children.push({\n    //     id: Math.random(),\n    //     name: '',\n    //     isSelected: false,\n    //     parent: node,\n    //     isEditable: true\n    //   });\n    //   if (node.children) {\n    //     this.isDisabled = true;\n    //     this.treeHelisaService.expandOneNode(node);\n    //   }\n    //   this.refreshTree();\n  }\n\n  onDelete(node: Node): void {\n    this.clickDeleteNode.emit(node);\n    /** @Deprecated\n     *  Ya no se elimina el nodo ahora solo se emite el evento 'clickDeleteNode'\n     * retornando el nodo al cual le hicieron click en la opción delete\n     */\n    // // Remueve el nodo utilizando la libreria de lodash\n    // _.remove(node.parent.children, node);\n\n    // this.refreshTree();\n    // this.removed.emit(node.id);\n  }\n\n  onEdited(node: Node, value: string): void {\n    node.name = value;\n    if (node.id == null && node.name === '') {\n      _.remove(node.parent.children, node);\n      this.refreshTree();\n    } else if (node.id && node.id != null && node.name.trim() !== '') {\n      this.edited.emit(node);\n      node.isEditable = false;\n      this.selectNode(node, node.id);\n    } else if (node.id == null && node.name.trim() !== '') {\n      this.added.emit(node);\n      node.isEditable = false;\n    }\n    this.isDisabled = false;\n    this.refreshTree();\n  }\n\n  onCancel(node: Node, value: string): void {\n    this.isDisabled = false;\n    // Si no tiene id por ser un nuevo item, lo elimina\n    if (node.id == null) {\n      _.remove(node.parent.children, node);\n      this.refreshTree();\n    }\n\n    node.isEditable = false;\n  }\n\n  onDblClick(node: Node): void {\n    this.isSingleClick = false;\n    this.dobleClick.emit(node.id);\n  }\n\n  @HostListener('document:keyup', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    switch (event.key) {\n      case 'Delete':\n        this.keypressDelete.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\n        break;\n      case 'Insert':\n        this.keypressInsert.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\n        break;\n      case 'ArrowDown':\n        this.moveDownIntoTree();\n        break;\n      case 'ArrowUp':\n        this.moveUpIntoTree();\n        break;\n    }\n  }\n\n  //#endregion ======= Events ========\n\n  //#region  ======== Metodos =============\n\n  private moveUpIntoTree(): number {\n    if (!!this.data) {\n      // si aun no hay ningun node seleccionado selecciona el primero\n      if (this.currentNode == null) {\n        this.selectNode(this.data, this.data.children[0].id);\n        this.currentNode = this.data.children[0];\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n          this.treeHelisaService.expandOneNode(this.currentNode);\n        }\n      } else {\n        if (!!this.currentNode.parent && this.currentNode.id != null) {\n          // obtiene el indice del nodo seleccionado actualmente\n          const index: number = this.currentNode.parent.children.indexOf(this.currentNode);\n\n          if (this.currentNode.parent.id == null && index === 0) {\n            return 0;\n          } else {\n            // si tiene nodos al mismo nivel salta al nodo anterior\n            if (index !== undefined && index === 0) {\n              this.currentNode = this.currentNode.parent;\n              this.selectNode(this.data, this.currentNode.id);\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n                this.treeHelisaService.expandOneNode(this.currentNode);\n              }\n            } else {\n              // si no tiene nodos al mismo nivel salta al nodo padre\n              this.currentNode = this.currentNode.parent.children[index - 1];\n              this.selectNode(this.data, this.currentNode.id);\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n                this.treeHelisaService.expandOneNode(this.currentNode);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private moveDownIntoTree(): void {\n    if (!!this.data) {\n      if (this.currentNode == null) {\n        this.selectNode(this.data, this.data.children[0].id);\n        this.currentNode = this.data.children[0];\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n          this.treeHelisaService.expandOneNode(this.currentNode);\n        }\n      } else {\n        if (!!this.currentNode) {\n          // obtiene el indice del nodo seleccionado actualmente\n          const index: number =\n            !!this.currentNode && !!this.currentNode.parent ? this.currentNode.parent.children.indexOf(this.currentNode) : null;\n\n          // si tiene childrens pasa al primer children\n          if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n            this.currentNode = this.currentNode.children[0];\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          } else if (\n            index !== undefined &&\n            index === this.currentNode.parent.children.length - 1 &&\n            this.currentNode.parent.parent != null &&\n            this.currentNode.parent.parent.children != null &&\n            this.currentNode.parent.parent.children.length > 0\n          ) {\n            const indexOfParent: number = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent);\n            this.currentNode =\n              this.currentNode.parent.parent.children[indexOfParent + 1] === undefined\n                ? this.currentNode\n                : this.currentNode.parent.parent.children[indexOfParent + 1];\n\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          } else {\n            // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\n            this.currentNode = this.currentNode.parent.children[index + 1];\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Verifica si el nodo tiene hijos\n   */\n  hasChild(t: number, node: Node): boolean {\n    return !!node.children && node.children.length > 0;\n  }\n\n  /**\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\n   */\n  private refreshTree(): void {\n    this.data = null;\n    const datasourceData: Node[] = this.dataSource.data;\n    this.dataSource.data = null;\n    this.dataSource.data = datasourceData;\n    this.treeControl.dataNodes = datasourceData;\n  }\n\n  /**\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())\n   */\n  private refreshTreeWithPagination(): void {\n    const datasourceData: Node[] = this.dataSource.data;\n    this.dataSource.data = null;\n    this.dataSource.data = datasourceData;\n    this.treeControl.dataNodes = datasourceData;\n  }\n\n  private goNextPage(): void {\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\n      this.treeHelisaConnect.isUsed = true;\n      this.rangeScrolled.emit({\n        page: this.treeHelisaConnect.nextPage()\n      });\n    }\n  }\n\n  private receivePage(data: Node[]): void {\n    if (!this.data) {\n      this.data = { id: null, name: 'root', isSelected: false };\n    }\n    if (!this.data.children) {\n      this.data.children = new Array<Node>();\n      this.treeHelisaConnect = new TreeHelisaConnect<Node>();\n    }\n    this.data.children = this.data.children.concat(data);\n    this.data.children.forEach((node: Node): void => {\n      this.fillParent(node, this.data);\n    });\n    this.data.children = this.reorderByOrderIndex(this.data.children);\n    this.dataSource.data = this.data.children;\n    this.treeControl.dataNodes = this.data.children;\n    this.treeHelisaConnect.isLastPage = data.length === 0;\n    this.treeHelisaConnect.isUsed = false;\n  }\n\n  /**\n   * Llenan el campo parent de todos los nodos hijos\n   */\n  private fillParent(node: Node, parent: Node): void {\n    node.parent = parent;\n    if (node.children && node.children.length > 0) {\n      node.children.forEach((item: Node): void => {\n        this.fillParent(item, node);\n      });\n    }\n  }\n\n  /**\n   * coloca como true del isSelected del nodo que concuerde con el id\n   */\n  private selectNode(node: Node, id: number | string): Node {\n    if (node == null) {\n      return null;\n    }\n    this.upSelectNode(node);\n    if (!!this.selectedNode) {\n      const nodeSelected: Node = this.getNodeById(this.selectedNode);\n      if (nodeSelected != null) {\n        nodeSelected.isSelected = false;\n        this.selectedNode = null;\n      }\n    }\n    if (node.id !== undefined && node.id === id) {\n      node.isSelected = true;\n      this.expandAllParents(node);\n      this.selectedNode = node.id;\n      return node;\n    } else if (node.children != null) {\n      let i: number;\n      let result: Node = null;\n      for (i = 0; result == null && i < node.children.length; i++) {\n        result = this.selectNode(node.children[i], id);\n      }\n      return result;\n    }\n    return null;\n  }\n\n  private expandAllParents(node: Node): void {\n    if (!!node && !!node.parent) {\n      this.treeHelisaService.expandOneNode(node.parent);\n      this.expandAllParents(node.parent);\n    }\n  }\n\n  /**\n   * Elimina el isSelected de todos los nodos\n   */\n  private upSelectNode(node: Node): void {\n    if (!!node && node.isSelected !== undefined) {\n      node.isSelected = false;\n      if (!!node.children) {\n        for (const childrenNode of node.children) {\n          this.upSelectNode(childrenNode);\n        }\n      }\n    }\n  }\n\n  getClassNode(node: Node): string[] {\n    const classNode: string[] = [];\n    if (node.isSelected) {\n      classNode.push('isSelected');\n    }\n    if (node.classNode) {\n      classNode.push(node.classNode);\n    }\n    return classNode;\n  }\n\n  onEditMode(node: Node, editMode: boolean): void {\n    this.getSelectedOptions(node).editMode = editMode;\n  }\n\n  onSelectOption(event: MatOptionSelectionChange, node: Node): void {\n    node.isCheckedOption = event.source.selected;\n    if (node.isCheckedOption) {\n      this.checkedOptionNode.emit(node.id);\n    } else {\n      this.uncheckedOptionNode.emit(node.id);\n    }\n  }\n\n  getSelectedOptions(\n    node: Node\n  ): {\n    formControl: FormControl;\n    editMode: boolean;\n  } {\n    if (this.selectedOptions.has(node.id)) {\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\n    } else {\n      this.reloadSelectedOptions(node, false);\n    }\n    return this.selectedOptions.get(node.id);\n  }\n\n  private reloadSelectedOptions(node: Node, editMode: boolean): void {\n    const array: Array<string | number | null> = new Array<string | number | null>();\n    node.options.forEach((option: Node): void => {\n      if (option.isCheckedOption) {\n        array.push(option.id);\n      }\n    });\n    const obj: {\n      formControl: FormControl;\n      editMode: boolean;\n    } = { formControl: new FormControl(array), editMode };\n    this.selectedOptions.set(node.id, obj);\n  }\n\n  /**\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\n   * @param id  number | string\n   * @returns Node o null si no hay un nodo con ese id\n   */\n  getNodeById(id: number | string): Node {\n    const queue: Node[] = [...this.dataSource.data];\n    while (queue.length > 0) {\n      const curr: Node = queue.shift();\n      if (curr.id === id) {\n        return curr;\n      } else {\n        if (!!curr.children) {\n          queue.push(...curr.children);\n        }\n      }\n    }\n    return null;\n  }\n\n  reorderByOrderIndex(node: Node[]): Node[] {\n    if (!!node && node.length > 0) {\n      try {\n        node = _.orderBy(node, (x: Node): number => x.orderIndex, ['asc']);\n        node.forEach((element: Node): void => {\n          if (!!element.children && element != null) {\n            element.children = this.reorderByOrderIndex(element.children);\n          }\n        });\n        return node;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  //#endregion ====== Metodos ============\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\n\n@Injectable()\nexport class AutocompleteHelisaService<T> {\n\n  private emitChangeSource: BehaviorSubject<Array<OptionAutocompleteHelisa<T>>> =\n  new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\n\n  public dataSource$: Observable<Array<OptionAutocompleteHelisa<T>>> = this.emitChangeSource.asObservable();\n\n  constructor() { }\n\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>): void {\n    this.emitChangeSource.next(options);\n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable, of, Subject } from 'rxjs';\nimport { map, startWith, throttleTime, debounceTime } from 'rxjs/operators';\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\n\nexport interface OptionAutocompleteHelisa<T> {\n  value: T;\n  displayText: string;\n}\n\n@Component({\n  selector: 'hel-autocomplete',\n  templateUrl: './autocomplete-helisa.component.html',\n  styleUrls: ['./autocomplete-helisa.component.css'],\n  providers: [AutocompleteHelisaService]\n})\nexport class AutocompleteHelisaComponent<T> implements OnInit {\n\n  @Input() myControl: FormControl = new FormControl();\n  @Input() options: Array<OptionAutocompleteHelisa<T>> = new Array<OptionAutocompleteHelisa<T>>();\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\n  selectedValue: OptionAutocompleteHelisa<T>;\n  @Output() selectedValueEmmiter: EventEmitter<T> = new EventEmitter<T>();\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\n  @Input() isRemote: boolean = false;\n  isLoading: boolean = false;\n\n\n  onScrollObservable: Subject<void> = new Subject<void>();\n\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\n  }\n\n  ngOnInit(): void {\n\n    this.onScrollObservable.asObservable()\n    .pipe(\n      debounceTime(500),\n      throttleTime(500)\n    )\n    .subscribe((): void => {\n      this.nextPage.emit();\n    });\n\n    if (this.isRemote) {\n      this.autocompleteHelisaService.dataSource$.subscribe((data: OptionAutocompleteHelisa<T>[]): void => {\n        setTimeout((): void => {\n          this.options = data;\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\n        });\n      });\n    }\n\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map((x: string): string => this._checkRegex(x)),\n      map((value: string): OptionAutocompleteHelisa<T>[] => this._filter(value))\n    );\n\n  }\n\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {\n    return option ? option.displayText : undefined;\n  }\n\n  getService(): AutocompleteHelisaService<T> {\n    return this.autocompleteHelisaService;\n  }\n\n\n  /** Elimina caracteres extraños */\n  private _checkRegex(value: string): string {\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '');\n    return value;\n  }\n\n  private _filter(value: string): OptionAutocompleteHelisa<T>[] {\n    if (!(value)) {\n      if (!this.isRemote) {\n        const filterValue: string[] = value.toLowerCase().split(' ');\n        return this.options.filter((option: OptionAutocompleteHelisa<T>): boolean => {\n          let ws: boolean = true;\n          filterValue.forEach((text: string): boolean => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\n          return ws;\n        }).splice(0, 5);\n      } else {\n        return this.options;\n      }\n    }\n  }\n\n  public onSelected(event: {option: {value: OptionAutocompleteHelisa<T>}}): void {\n    this.selectedValue = event.option.value;\n    this.selectedValueEmmiter.emit(this.selectedValue.value);\n  }\n\n  getNextPage(): void {\n    this.onScrollObservable.next();\n  }\n}\n","import { Directive, EventEmitter, Input, Output, OnDestroy } from '@angular/core';\nimport { MatAutocomplete } from '@angular/material/autocomplete';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n\nexport interface IAutoCompleteScrollEvent {\n  autoComplete: MatAutocomplete;\n  scrollEvent: Event;\n}\n\n\n@Directive({\n  selector: 'mat-autocomplete[optionsScroll]'\n})\nexport class OptionsScrollDirective implements OnDestroy {\n\n  /**\n   * This value would different depends of styles\n   */\n  @Input() thresholdPercent: number = .9;\n  @Output() optionsScroll: EventEmitter<IAutoCompleteScrollEvent> = new EventEmitter<IAutoCompleteScrollEvent>();\n  destroy: Subject<void> = new Subject<void>();\n  lastScrollTop: number = 0;\n\n  constructor(public autoComplete: MatAutocomplete) {\n    this.autoComplete.opened.pipe(\n      tap((): void => {\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\n        // Note: The panel will be available on next tick\n        // Note: The panel wil NOT open if there are no options to display\n        setTimeout((): void => {\n          // Note: remove listner just for safety, in case the close event is skipped.\n          this.removeScrollEventListener();\n          if (!!this.autoComplete &&\n            !!this.autoComplete.panel &&\n            !!this.autoComplete.panel.nativeElement) {\n            this.autoComplete.panel.nativeElement\n              .addEventListener('scroll', this.onScroll.bind(this), false);\n          }\n        });\n      }),\n      takeUntil(this.destroy)).subscribe();\n\n    this.autoComplete.closed.pipe(\n      tap((): void => this.removeScrollEventListener()),\n      takeUntil(this.destroy)).subscribe();\n  }\n\n  private removeScrollEventListener(): void {\n    if (!!this.autoComplete &&\n      !!this.autoComplete.panel &&\n      !!this.autoComplete.panel.nativeElement) {\n      this.autoComplete.panel.nativeElement\n        .removeEventListener('scroll', this.onScroll);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.next();\n    this.destroy.complete();\n\n    this.removeScrollEventListener();\n  }\n\n\n  onScroll(event: Event): void {\n    // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\n    const st: number = (event.target as Window).pageYOffset || (event.target as Element).scrollTop;\n    if (st > this.lastScrollTop) {\n      // downscroll code\n      if (this.thresholdPercent === undefined) {\n        this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\n      } else {\n        const threshold: number = this.thresholdPercent * 100 * (event.target as Element).scrollHeight / 100;\n        const current: number = (event.target as Element).scrollTop + (event.target as Element).clientHeight;\n        // console.log(`scroll ${current}, threshold: ${threshold}`)\n        if (current > threshold) {\n          // console.log('load next page');\n          this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\n        }\n      }\n    } else {\n      // upscroll code\n    }\n    this.lastScrollTop = st <= 0 ? 0 : st;\n  }\n\n}\n","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\n\n@Directive({\n    selector: '[helTooltip]',\n    providers: [MatTooltip]\n})\nexport class HelTooltipDirective {\n\n    tooltip: MatTooltip;\n\n    /**\n     * Mensaje a mostrar\n     */\n    @Input('helTooltip') message: string;\n\n    /**\n     * Tiempo antes de ocultarla el mensaje\n     */\n    @Input() hideDelay: number = 600;\n\n    /**\n     * Tiempo antes de mostra el mensaje\n     */\n    @Input() showDelay: number = 500;\n\n\n    constructor(tooltip: MatTooltip, private elemRef: ElementRef) {\n      this.tooltip = tooltip;\n    }\n\n    @HostListener('mouseover') mouseover(): void {\n      const currentContent: string = this.elemRef.nativeElement.innerText;\n\n      if (!!currentContent && !!this.message) {\n        if ((currentContent.toUpperCase() !== this.message.toString().toUpperCase()) || this.isEllipsisActive(this.elemRef.nativeElement)) {\n          this.tooltip.message = this.message;\n        }\n      }\n\n      this.tooltip.showDelay =  this.showDelay;\n      this.tooltip.hideDelay = this.hideDelay;\n    }\n\n\n    private isEllipsisActive(e: {offsetWidth: number , scrollWidth: number}): boolean {\n      return (e.offsetWidth < e.scrollWidth);\n    }\n}\n","import { Directive, HostBinding, PLATFORM_ID, Inject, Input, OnChanges } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Directive({\n  selector: 'a[href]',\n})\nexport class ExternalLinkDirective implements OnChanges {\n  @HostBinding('attr.rel') relAttr: string = '';\n  @HostBinding('attr.target') targetAttr: string = '';\n  @HostBinding('attr.href') hrefAttr: string = '';\n  @Input() href: string;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n\n  ngOnChanges(): void {\n\n    this.hrefAttr = this.href;\n\n    if (this.isLinkExternal()) {\n      this.relAttr = 'noopener';\n      this.targetAttr = '_blank';\n    }\n  }\n\n  private isLinkExternal(): boolean {\n    return isPlatformBrowser(this.platformId) && !this.href.includes(location.hostname);\n  }\n}\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {ComboBoxListable} from './interface/combo-box-listable';\nimport {ComboBoxEditable} from './interface/combo-box-editable';\n\nexport enum ComboBoxHelisaState {\n  CLOSED,\n  SELECT,\n  INSERT\n}\n\n@Component({\n  selector: 'lib-combo-box-helisa',\n  templateUrl: './combo-box-helisa.component.html',\n  styleUrls: ['./combo-box-helisa.component.css']\n})\nexport class ComboBoxHelisaComponent<TYPE> implements OnInit, AfterViewInit {\n\n  @Input() editable: ComboBoxEditable<TYPE>;\n  @Input() listable: ComboBoxListable<TYPE>;\n  @Input() placeholder: string = 'Sin seleccionar';\n  @Input() selectedItem: TYPE;\n  @Output() selectEmitter: EventEmitter<TYPE> = new EventEmitter<TYPE>();\n  @Input() enabled: boolean = true;\n\n  private page: number = 0;\n  private pageSize: number = 50;\n  private haveNextPage: boolean = true;\n  state: ComboBoxHelisaState = ComboBoxHelisaState.CLOSED;\n\n  rows: TYPE[] = [];\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    this.getNextPage();\n  }\n\n  private getNextPage(): void {\n    if (this.haveNextPage) {\n      this.listable.getData(this.page++, this.pageSize).subscribe((rows: TYPE[]): void => {\n        rows.forEach((item: TYPE): number => this.rows.push(item));\n        this.haveNextPage = rows.length > 0;\n      });\n    }\n  }\n\n  get comboBoxHelisaState(): typeof ComboBoxHelisaState {\n    return ComboBoxHelisaState;\n  }\n\n  onFocus(): void {\n    if (this.enabled) {\n      this.state = ComboBoxHelisaState.SELECT;\n    }\n  }\n\n  selectItem(row: TYPE): void {\n    this.selectedItem = row;\n    this.selectEmitter.emit(row);\n    this.state = ComboBoxHelisaState.CLOSED;\n  }\n\n  changeToInsert(): void {\n    this.state = ComboBoxHelisaState.INSERT;\n  }\n\n  insert(event: string): void {\n    if (event.trim().length > 0) {\n      this.editable.insert(event).subscribe(\n        (data: TYPE): void => {\n          this.rows.push(data);\n          this.state = ComboBoxHelisaState.SELECT;\n        }\n      );\n    } else {\n      this.state = ComboBoxHelisaState.SELECT;\n    }\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n    if (element.scrollHeight - element.scrollTop < 1000) {\n      this.getNextPage();\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'externalLink'\n})\nexport class ExternalLinkPipe implements PipeTransform {\n    transform(value: string, ...args: string[]): string {\n        return '//' + value;\n    }\n}\n","import { AfterViewInit, Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport enum PagingTreeInitialMode {\n  COLLAPSE,\n  EXPAND\n}\n\nexport interface PagingTreeHelisaListable<T> {\n  get(lastChildOrder: number, size: number): Observable<T[]>;\n\n  getIdField(): string;\n\n  getIdParentField(): string;\n\n  compare(a: T, b: T): number;\n}\n\ninterface HelisaNode<T> {\n  object: T;\n  level: number;\n  haveChildren: boolean;\n  expanded: boolean;\n  visible: boolean;\n  preorder: number;\n}\n\nexport interface HelisaNodeData<T> {\n  readonly object: T;\n  readonly level: number;\n  readonly haveChildren: boolean;\n  readonly expanded: boolean;\n  readonly visible: boolean;\n  readonly preorder: number;\n}\n\n@Component({\n  selector: 'hel-paging-tree',\n  templateUrl: './paging-tree-helisa.component.html',\n  styleUrls: ['./paging-tree-helisa.component.css']\n})\nexport class PagingTreeHelisaComponent<T> implements OnInit, AfterViewInit {\n\n  private pageSize: number = 200000;\n  private visibleLimit: number = 0;\n  private visibleSize: number = 100;\n  private treeMode: PagingTreeInitialMode = PagingTreeInitialMode.EXPAND;\n  private visibleObjects: Array<T> = [];\n  private service: PagingTreeHelisaListable<T>;\n  private searchNode: Map<string, HelisaNode<T>>;\n  private allNode: Array<HelisaNode<T>> = [];\n\n  @Output()\n  afterLoadData: EventEmitter<void> = new EventEmitter<void>();\n\n  @ContentChild('nodeComponent')\n  nodeComponent: TemplateRef<{ data: T, node: HelisaNodeData<T> }>;\n\n  @ContentChild('nodeTitle')\n  nodeTitle: TemplateRef<any>;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  @Input()\n  set mode(paramMode: PagingTreeInitialMode) {\n    this.treeMode = paramMode;\n    this.reset();\n  }\n\n  @Input()\n  set pagingTreeHelisaListable(paramService: PagingTreeHelisaListable<T>) {\n    this.service = paramService;\n    this.reset();\n  }\n\n  public reset(): void {\n    if (this.service) {\n      this.service.get(0, this.pageSize).subscribe((items: T[]): void => this.loadData(items));\n    }\n  }\n\n  private loadData(items: T[]): void {\n    this.searchNode = new Map<string, HelisaNode<T>>();\n    this.visibleObjects = [];\n    this.allNode = [];\n    items = this.sortItems(items);\n    this.searchNode = new Map<string, HelisaNode<T>>();\n    items.forEach((item: T): void => {\n      const node: HelisaNode<T> = this.createNode(item);\n      this.allNode.push(node);\n    });\n    this.reSort();\n    this.loadNextVisibleObjects(null);\n    this.afterLoadData.emit();\n  }\n\n  private sortItems(items: T[]): T[] {\n    const lAdy: Map<string, T[]> = new Map<string, T[]>();\n    const stack: T[] = [];\n    items.forEach((item: T): void => {\n      const idParent: string = item[this.service.getIdParentField()];\n      if (!idParent) {\n        stack.unshift(item);\n      } else {\n        if (!lAdy.has(idParent)) {\n          lAdy.set(idParent, []);\n        }\n        lAdy.get(idParent).push(item);\n      }\n    });\n    const response: T[] = new Array<T>(items.length);\n    let index: number = 0;\n    while (stack.length > 0) {\n      const last: T = stack.pop();\n      response[index++] = last;\n      const children: T[] = lAdy.get(last[this.service.getIdField()]);\n      if (children) {\n        for (let i: number = children.length - 1; i >= 0; i--) {\n          stack.push(children[i]);\n        }\n      }\n    }\n    return response;\n  }\n\n  private createNode(item: T): HelisaNode<T> {\n    if (this.searchNode.has(item[this.service.getIdField()])) {\n      throw Error('Ya existe el nodo.');\n    }\n    const parentInformation: HelisaNode<T> = this.getNodeInformationById(item[this.service.getIdParentField()]);\n    const nodeInformation: HelisaNode<T> = {\n      object: item,\n      haveChildren: false,\n      level: parentInformation ? parentInformation.level + 1 : 0,\n      expanded: this.treeMode === PagingTreeInitialMode.EXPAND,\n      visible: false,\n      preorder: this.searchNode.size + 1,\n    };\n    this.searchNode.set(item[this.service.getIdField()], nodeInformation);\n    if (parentInformation) {\n      parentInformation.haveChildren = true;\n    }\n    return nodeInformation;\n  }\n\n  public getNodeInformationById(id: string): HelisaNode<T> {\n    return this.searchNode.get(id);\n  }\n\n  public getNodeInformation(item: T): HelisaNode<T> {\n    return this.searchNode.get(item[this.service.getIdField()]);\n  }\n\n  getLevelClass(item: T): string {\n    return 'padding-level-' + this.getNodeInformationById(item[this.service.getIdField()]).level;\n  }\n\n  private loadNextVisibleObjects(nodeFrom: T): void {\n    const visibleObjects: T[] = [];\n    this.visibleObjects.forEach((item: T): void => {\n      if (this.getNodeInformation(item)) {\n        if (nodeFrom && this.getNodeInformation(nodeFrom).preorder >= this.getNodeInformation(item).preorder) {\n          visibleObjects.push(item);\n        } else {\n          this.getNodeInformationById(item[this.service.getIdField()]).visible = false;\n        }\n      }\n    });\n    this.visibleLimit = visibleObjects.length + this.visibleSize;\n    this.allNode.forEach((item: HelisaNode<T>): void => {\n      if (visibleObjects.length < this.visibleLimit &&\n        (!nodeFrom || this.getNodeInformation(nodeFrom).preorder < item.preorder)) {\n        const idParent: string = item.object[this.service.getIdParentField()];\n        if (!idParent) {\n          visibleObjects.push(item.object);\n          item.visible = true;\n        } else {\n          const parentInformation: HelisaNode<T> = this.getNodeInformationById(idParent);\n          if (parentInformation.visible && parentInformation.expanded) {\n            visibleObjects.push(item.object);\n            item.visible = true;\n          }\n        }\n      }\n    });\n    this.visibleObjects = visibleObjects;\n  }\n\n  collapseNode(item: T): void {\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = false;\n    this.loadNextVisibleObjects(item);\n  }\n\n  expandNode(item: T): void {\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = true;\n    this.loadNextVisibleObjects(item);\n  }\n\n  showNextPage(): void {\n    if (this.visibleObjects.length > 0) {\n      this.loadNextVisibleObjects(this.visibleObjects[this.visibleObjects.length - 1]);\n    }\n  }\n\n  get visibleData(): ReadonlyArray<T> {\n    return this.visibleObjects;\n  }\n\n  removeItem(item: T): void {\n    this.removeById(item[this.service.getIdField()]);\n  }\n\n  removeById(id: string): void {\n    if (this.getNodeInformationById(id)) {\n      const idParent: string = this.getNodeInformationById(id).object[this.service.getIdParentField()];\n      const set: Set<string> = new Set<string>();\n      set.add(id);\n      const beginIndex: number = this.allNode.findIndex(\n        (itemSearch: HelisaNode<T>): boolean => itemSearch.object[this.service.getIdField()] === id\n      );\n      let lastIndex: number = this.allNode.length;\n      for (let i: number = beginIndex + 1; i < this.allNode.length; i++) {\n        const itemSearch: T = this.allNode[i].object;\n        if (set.has(itemSearch[this.service.getIdParentField()])) {\n          set.add(itemSearch[this.service.getIdField()]);\n        } else {\n          lastIndex = i;\n          break;\n        }\n      }\n      const deletedItems: HelisaNode<T>[] = this.allNode.splice(beginIndex, lastIndex - beginIndex);\n      let parentHaveChildren: boolean = false;\n      deletedItems.forEach((deletedItem: HelisaNode<T>): boolean => this.searchNode.delete(deletedItem.object[this.service.getIdField()]));\n      this.allNode.forEach((searchItem: HelisaNode<T>, index: number): void => {\n        searchItem.preorder = index + 1;\n        if (searchItem.object[this.service.getIdParentField()] === idParent) {\n          parentHaveChildren = true;\n        }\n      });\n      if (idParent) {\n        this.getNodeInformationById(idParent).haveChildren = parentHaveChildren;\n      }\n      this.loadNextVisibleObjects(beginIndex > 0 ? this.allNode[beginIndex - 1].object : null);\n    }\n  }\n\n  addItem(item: T): void {\n    const indexParent: number = this.allNode.findIndex((node: HelisaNode<T>): boolean => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\n    if (indexParent >= 0) {\n      this.allNode.push(this.createNode(item));\n      this.allNode[indexParent].haveChildren = true;\n      this.reSort();\n      this.expandNode(this.allNode[indexParent].object);\n    } else {\n      throw Error('No existe el padre.');\n    }\n  }\n\n  updateItem(item: T): void {\n    if (this.getNodeInformation(item)) {\n      this.getNodeInformation(item).object = item;\n      this.reSort();\n      const indexParent: number = this.allNode.findIndex(\n        (node: HelisaNode<T>): boolean => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\n      if (indexParent >= 0) {\n        this.expandNode(this.allNode[indexParent].object);\n      } else {\n        this.loadNextVisibleObjects(null);\n      }\n    }\n  }\n\n  private reSort(): void {\n    const items: T[] = this.allNode.map((node: HelisaNode<T>): T => node.object);\n    items.sort((a: T, b: T): number => this.service.compare(a, b));\n    const preorder: T[] = this.sortItems(items);\n    preorder.forEach((object: T, index: number): number => this.getNodeInformation(object).preorder = index + 1);\n    this.allNode.sort((nodeA: HelisaNode<T>, nodeB: HelisaNode<T>): number => nodeA.preorder - nodeB.preorder);\n  }\n}\n","export enum AlertInformationType {\n    AUTHORIZATION_TRANSACTION,\n    CONFIRM_DELETE_DATA,\n    DELETE_DATA,\n    INFORMATION_NOT_VALID,\n    LOST_DATA,\n    UNCOMPLETED_DATA,\n    UNCOMPLETED_SELECTED_DATA,\n    DEFINE_COMMERCIAL_STRUCTURE,\n    DEFINE_PARKING_STRUCTURE,\n    DEFINE_RESIDENCIAL_STRUCTURE,\n    NO_SEARCH_RESULTS\n  }\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AlertInformationType } from './alert-information-helisa-type.enum';\n\ninterface AlertInformationDataHelisaProperties {\n  alertType: AlertInformationType;\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\n}\n\nconst TITLE_BY_ALERT_TYPE: string[] = ['!Esta transacción requiere autorización!',\n                                       '',\n                                       '¿Está seguro que debe anular esta información?',\n                                       '',\n                                       '¿Está seguro de querer perder lo ya hecho?',\n                                       'No ha suministrado la información necesaria.',\n                                       '',\n                                       '',\n                                       '',\n                                       ''\n                                      ];\nconst CONTENT_BY_ALERT_TYPE: string[] = ['',\n                                         '¿Esta seguro que desea eliminar esta información?',\n                                         'Al anular este concepto, quedará la huella de todo lo que se hizo apoyados en su información. No es una eliminación tácita, es suprimir su uso en adelante.',\n                                         'Rectifique. Hay información no válida',\n                                         'Si no está seguro, puede continuar o \"aplicar\" y posteriormente cuando tenga clara las respuestas, usando la opción de modificar podrá completar el concepto.',\n                                         'Si insite en grabar así, este concepto no será utilizable hasta su conclusión satisfactoria, que deberá completar posteriormente modificando el concepto.',\n                                         'Elemento sin información requerida. Modifíquelo para completarlo.',\n                                         'Primero defina la estructura comercial en configuración.',\n                                         'Primero defina la estructura zona de parqueaderos en configuración.',\n                                         'Primero defina la estructura física residencial en configuración.',\n                                         'No fueron encontradas coincidencias con el criterio de búsqueda.',\n                                        ];\nconst OK_LABEL_BY_ALERT_TYPE: string[] = ['Solicitarla',\n                                          'Lo asumo',\n                                          'Lo asumo',\n                                          '',\n                                          'Lo asumo',\n                                          'Lo asumo',\n                                          'Aceptar',\n                                          '',\n                                          '',\n                                          ''\n                                         ];\nconst CANCEL_LABEL_BY_ALERT_TYPE: string[] = ['Negarla',\n                                              'Me retracto',\n                                              'Me retracto',\n                                              '',\n                                              'Me retracto',\n                                              'Me retracto',\n                                              '',\n                                              '',\n                                              '',\n                                              ''\n                                             ];\n\n@Component({\n  selector: 'hel-alert-information-data-helisa',\n  templateUrl: './alert-information-data-helisa.component.html',\n  styleUrls: ['./alert-information-data-helisa.component.sass']\n})\nexport class AlertInformationDataHelisaComponent implements OnInit {\n\n  alertType: AlertInformationType;\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertInformationDataHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertInformationDataHelisaProperties\n  ) {\n    this.alertType = data.alertType;\n    this.title = data.title;\n    if (this.title === undefined) {\n      this.title = TITLE_BY_ALERT_TYPE[this.alertType];\n    }\n    this.content = data.content;\n    if (this.content === undefined) {\n      this.content = CONTENT_BY_ALERT_TYPE[this.alertType];\n    }\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = OK_LABEL_BY_ALERT_TYPE[this.alertType];\n    }\n    this.cancelLabel = data.cancelLabel;\n    if (this.cancelLabel === undefined) {\n      this.cancelLabel = CANCEL_LABEL_BY_ALERT_TYPE[this.alertType];\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.alertType === AlertInformationType.DEFINE_COMMERCIAL_STRUCTURE || this.alertType === AlertInformationType.DEFINE_PARKING_STRUCTURE ||\n        this.alertType === AlertInformationType.DEFINE_RESIDENCIAL_STRUCTURE) {\n      setTimeout((): void => {\n        this.dialogRef.close();\n      }, 3000);\n    }\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  hasTitle(): boolean {\n    return this.alertType === AlertInformationType.AUTHORIZATION_TRANSACTION || this.alertType === AlertInformationType.DELETE_DATA ||\n           this.alertType === AlertInformationType.LOST_DATA || this.alertType === AlertInformationType.UNCOMPLETED_DATA;\n  }\n\n  hasContent(): boolean {\n    return this.alertType === AlertInformationType.CONFIRM_DELETE_DATA || this.alertType === AlertInformationType.DELETE_DATA ||\n           this.alertType === AlertInformationType.INFORMATION_NOT_VALID || this.alertType === AlertInformationType.LOST_DATA ||\n           this.alertType === AlertInformationType.UNCOMPLETED_DATA || this.alertType === AlertInformationType.UNCOMPLETED_SELECTED_DATA ||\n           this.alertType === AlertInformationType.DEFINE_COMMERCIAL_STRUCTURE || this.alertType === AlertInformationType.DEFINE_PARKING_STRUCTURE ||\n           this.alertType === AlertInformationType.DEFINE_RESIDENCIAL_STRUCTURE || this.alertType === AlertInformationType.NO_SEARCH_RESULTS;\n  }\n\n  hasButtons(): boolean {\n    return this.alertType === AlertInformationType.AUTHORIZATION_TRANSACTION || this.alertType === AlertInformationType.CONFIRM_DELETE_DATA ||\n           this.alertType === AlertInformationType.DELETE_DATA || this.alertType === AlertInformationType.LOST_DATA ||\n           this.alertType === AlertInformationType.UNCOMPLETED_DATA || this.alertType === AlertInformationType.UNCOMPLETED_SELECTED_DATA;\n  }\n\n  hasCancelButton(): boolean {\n    return this.alertType !== AlertInformationType.UNCOMPLETED_SELECTED_DATA;\n  }\n}\n","import {DragDropModule} from '@angular/cdk/drag-drop';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatNativeDateModule, MatOptionModule } from '@angular/material/core';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\nimport { TableHelisaService } from './components/table-helisa/table-helisa.service';\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\nimport { TreeHelisaService } from './components/tree-helisa/tree-helisa.service';\nimport { ExternalLinkDirective } from './directives/external-link.directive';\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\nimport { HelTooltipDirective } from './directives/tooltip.directive';\nimport { ExternalLinkPipe } from './pipes/external-link.pipe';\nimport { ComboBoxHelisaComponent } from './components/combo-box-helisa/combo-box-helisa.component';\nimport { PagingTreeHelisaComponent } from './components/paging-tree-helisa/paging-tree-helisa.component';\nimport { AlertInformationDataHelisaComponent } from './components/alert-information-data-helisa/alert-information-data-helisa.component';\n\n@NgModule({\n  declarations: [\n    InputWithButtonComponent,\n    ToastHelisaComponent,\n    AlertHelisaComponent,\n    DependencyTableHelisaComponent,\n    InputHelisaComponent,\n    TableHelisaComponent,\n    TreeHelisaComponent,\n    DateHelisaComponent,\n    AutocompleteHelisaComponent,\n    OptionsScrollDirective,\n    HelTooltipDirective,\n    ExternalLinkDirective,\n    ExternalLinkPipe,\n    ComboBoxHelisaComponent,\n    PagingTreeHelisaComponent,\n    AlertInformationDataHelisaComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatListModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatCardModule,\n    LayoutModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTabsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatStepperModule,\n    MatChipsModule,\n    DragDropModule,\n    MatTreeModule\n  ],\n  exports: [\n    InputWithButtonComponent,\n    ToastHelisaComponent,\n    AlertHelisaComponent,\n    DependencyTableHelisaComponent,\n    InputHelisaComponent,\n    TableHelisaComponent,\n    TreeHelisaComponent,\n    DateHelisaComponent,\n    AutocompleteHelisaComponent,\n    OptionsScrollDirective,\n    HelTooltipDirective,\n    ExternalLinkDirective,\n    ExternalLinkPipe,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatListModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatCardModule,\n    LayoutModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTabsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatStepperModule,\n    MatChipsModule,\n    DragDropModule,\n    MatTreeModule,\n    ComboBoxHelisaComponent,\n    PagingTreeHelisaComponent,\n    AlertInformationDataHelisaComponent\n  ],\n  providers: [TableHelisaService, TreeHelisaService]\n})\nexport class HelisaLibModule { }\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { AlertInformationDataHelisaComponent} from './alert-information-data-helisa.component';\nimport { AlertInformationType } from './alert-information-helisa-type.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertInformationDataHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(alertType: AlertInformationType, title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertInformationDataHelisaComponent> = this.dialog.open(AlertInformationDataHelisaComponent, {\n      width: '250px',\n      data: { alertType, title, content, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n"]}