{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","node_modules/tslib/tslib.es6.js","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","ng://helisa-lib/lib/directives/options-scroll.directive.ts","ng://helisa-lib/lib/directives/tooltip.directive.ts","ng://helisa-lib/lib/pipes/external-link.pipe.ts","ng://helisa-lib/lib/directives/external-link.directive.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","Output","placeholder","FormControl","Validators","required","requiredMessage","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","subMessages","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","_this","content","title","hasCancel","AlertHelisaType","disableClose","keydownEvents","subscribe","event","code","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","Error","next","setTotal","emitTotal","addPage","emitNextPage","selectIndexRow","config","indexRowSelect","changeVisibilityButton","emitVisibilityButton$","changeVisibilityAllButtons","show","emitVisibilityAllButtons$","changeisCellSelection","emitIsCellSelection$","changeColumnsByTable","emitChangeColumns$","Subject","Array","emitVisibilityButton","asObservable","emitVisibilityAllButtons","emitIsCellSelection","emitChangeColumns","TableHelisaService","total","table","emitChangeSource","obj","page","change","emitVisibleButton$","totalReturn","nextPageReturn","emitVisibleButton","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","viewTables","toArray","index","undefined","addRowButton","showButton","forEach","element","isCellSelection","columns","getService","onSelectedDependency","selectedObject","selected","selectObject","onNextPage","nextPage","onTotal","onSort","sort","onDrop","drop","onAddRow","addRow","selectedCell","selectCell","onBookClicked","bookClicked","providers","ViewChildren","showToolTip","hideDelay","showDelay","__values","o","m","Symbol","iterator","i","call","__read","n","r","e","ar","push","error","__spread","arguments","concat","DEFAULT","IDENTITY","NUMERIC","DOUBLE","InputHelisaComponent","Object","defineProperty","formControl","inputFormReal","valueChanges","statusChange","status","getMaskedValue","formControlMask","setValidators","validator","disabled","disable","onlySelf","statusChanges","setErrors","key","isFocused","nameInput","nativeElement","focus","search","realValue","position","selectionStart","getRealValue","selectionEnd","str","InputHelisaType","maskedStr","j","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","indexOf","realStr","str_1","tslib_1.__values","str_1_1","strItem","match","str_2","str_2_1","haveDot","str_3","str_3_1","ViewChild","isSearch","NORMAL","URL","USER","CODE_CALL","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","ngAfterViewInit","matTable","renderRows","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","columnConfiguration","hasSubtitle","displayedColumns","splice","addBookButton","findIndex","x","visible","subtitle","rawData","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","dataSource$","prepareDataSource","idRowSelected","selectRow","rowType","RowType","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","addTotalGroup","MatTableDataSource","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","map","TotalType","getValueTooltip","searchText","text","lastSearch","isUser","select","scope","EventScope","onScroll","isScrollY","scrollY","scrollTop","scrollX","scrollLeft","scrollHeight","body","dblClickCell","selectedCells","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToRow","classToRow","configRowStylesFromColumn","classRow","isDragged","indexRowStartDrag","rowIndex","getRowIndex","pageY","array","dataBeforeDrag","moveItemInArray","stopPropagation","tableKeydown","currentIndex_1","newSelection_1","scrollCount","reverse","Math","abs","preventDefault","filter","dragger","lastIndexRowDrag","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","ColumnType","MatSort","MatTable","read","ElementRef","showTitle","moment","moment_","MONTH_YEAR","DateHelisaComponent","dateToVisualize","dateFormControl","formHandler","typeCalendar","TypeCalendarEnum","dateFormat","incommingDate","format","getStartView","typeCalendarEnum","pipe","tap","date","invalidFormat","isValid","isFromInputEvent","setTimeout","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","toDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","errorMessage","floatLabel","Date","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","expandAllNodes","expand","emitExpandAllNodes","collapseAllNodes","collapse","emitCollapseAllNodes","refreshTree","emitRefreshTree","refreshTreeWithPagination","emitRefreshTreeWithPagination","expandOneNode","node","emitExpandOneNode","collapseOneNode","emitCollapseOneNode","BehaviorSubject","nodeSelected","dataSourceObservable","nodeExpand","nodeCollapse","refreshTreeObservable","refreshTreeWithPaginationObservable","expandOneNodeObservable","collapseOneNodeObservable","TreeHelisaConnect","TreeHelisaComponent","getDescription","parent","treeHelisaService","res","treeControl","dataNodes","selectNode","tree","expandAll","collapseAll","onRedirect","isSingleClick","id","currentNode","offsetHeight","onEdit","isEditable","onAdd","isSelected","onDelete","_.remove","removed","onEdited","trim","edited","added","onDblClick","dobleClick","onKeyDown","keypressDelete","keypressInsert","moveDownIntoTree","moveUpIntoTree","indexOfParent","datasourceData","treeHelisaConnect","rangeScrolled","fillParent","reorderByOrderIndex","upSelectNode","expandAllParents","_b","_c","childrenNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","checkedOptionNode","uncheckedOptionNode","selectedOptions","has","reloadSelectedOptions","get","options","option","set","getNodeById","queue","curr","shift","apply","_.orderBy","orderIndex","console","log","Router","HostListener","router","elementRef","Map","showOptionsNode","collapseParent","NestedTreeControl","MatTreeNestedDataSource","hasChild","t","AutocompleteHelisaService","setDataSource","AutocompleteHelisaComponent","onScrollObservable","debounceTime","throttleTime","autocompleteHelisaService","filteredOptions","of","myControl","startWith","_checkRegex","_filter","displayFn","displayText","replace","filterValue_1","toLowerCase","onSelected","selectedValue","selectedValueEmmiter","getNextPage","isLoading","OptionsScrollDirective","removeScrollEventListener","autoComplete","panel","removeEventListener","ngOnDestroy","destroy","complete","st","pageYOffset","lastScrollTop","thresholdPercent","optionsScroll","scrollEvent","clientHeight","Directive","MatAutocomplete","opened","addEventListener","bind","takeUntil","closed","HelTooltipDirective","mouseover","currentContent","elemRef","innerText","toUpperCase","toString","isEllipsisActive","tooltip","offsetWidth","scrollWidth","MatTooltip","ExternalLinkPipe","transform","_i","Pipe","ExternalLinkDirective","ngOnChanges","hrefAttr","href","isLinkExternal","relAttr","targetAttr","isPlatformBrowser","platformId","includes","location","hostname","PLATFORM_ID","HostBinding","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","DONE","INFO"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'hel-input-with-button',\n  templateUrl: './input-with-button.component.html',\n  styleUrls: ['./input-with-button.component.sass']\n})\nexport class InputWithButtonComponent implements OnInit {\n\n  @Input() placeholder: string = '';\n  @Input() inputFormControl: FormControl = new FormControl('', Validators.required);\n  @Input() requiredMessage: string = 'El campo es requerido';\n  @Input() value: string = '';\n\n  @Output() done: EventEmitter<string> = new EventEmitter<string>();\n  @Output() cancel: EventEmitter<void> = new EventEmitter<void>();\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n    if (this.value !== '') {\n      this.inputFormControl.setValue(this.value);\n    }\n  }\n\n\n  onDone(): void {\n    if (this.inputFormControl.valid) {\n      this.done.emit(this.inputFormControl.value);\n    }\n  }\n\n  onCancel(): void {\n    this.cancel.emit();\n  }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\nimport { ToastType } from './toast-type.enum';\n\n// @dynamic\n@Component({\n  selector: 'hel-toast',\n  templateUrl: './toast-helisa.component.html',\n  styleUrls: ['./toast-helisa.component.sass']\n})\nexport class ToastHelisaComponent implements OnInit {\n\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: {type: ToastType, message: string, subMessages?: string[]}) { }\n\n  ngOnInit(): void {}\n\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\nimport { ToastType } from './toast-type.enum';\nimport { ToastHelisaComponent } from './toast-helisa.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastHelisaService {\n\n  durationInSeconds: number = 5;\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  showToast(type: ToastType, message: string, subMessages?: string[]): void {\n    subMessages = subMessages ? subMessages : [];\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\n      data: {message, type, subMessages},\n      duration: this.durationInSeconds * 1000\n    });\n  }\n}\n","export enum AlertHelisaType {\n    ERROR = 'ERROR',\n    CONFIRMATION = 'CONFIRMATION'\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { AlertHelisaType } from './alert-helisa-type.enum';\n\ninterface AlertHelisaProperties {\n  title: string;\n  content: string;\n  type: AlertHelisaType;\n}\n\n@Component({\n  selector: 'hel-alert',\n  templateUrl: './alert-helisa.component.html',\n  styleUrls: ['./alert-helisa.component.sass']\n})\nexport class AlertHelisaComponent implements OnInit {\n\n  content: string;\n  title: string;\n  hasCancel: boolean;\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertHelisaProperties\n  ) {\n    this.content = data.content;\n    this.title = data.title;\n    this.hasCancel = data.type === AlertHelisaType.CONFIRMATION;\n    dialogRef.disableClose = true;\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      if (event.code === 'Escape') {\n        this.dialogRef.close(this.onCancel());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable } from 'rxjs';\nimport { AlertHelisaType } from './alert-helisa-type.enum';\nimport { AlertHelisaComponent } from './alert-helisa.component';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(type: AlertHelisaType, title: string, content: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertHelisaComponent> = this.dialog.open(AlertHelisaComponent, {\n      width: '250px',\n      data: { title, content, type }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport {ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\nimport { EventDependency} from './dependency-table-helisa.component';\n\nexport interface ConfigTable<T> {\n  columns: Array<ColumnConfig>;\n  isRemote: boolean;\n  dataSource?: Array<T>;\n  count?: number;\n  order?: number;\n  showTitle?: boolean;\n  indexRowSelect?: number;\n  isDragged?: boolean;\n  addRowButton?: AddRowButton;\n  configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\n  isCellSelection?: boolean;\n  addBookButton?: boolean;\n}\n\n@Injectable()\nexport class DependencyTableHelisaService<T> {\n\n\n  tables: Subject<ConfigTable<T>[]> = new Subject();\n  infoTables: Array<ConfigTable<T>> = new Array();\n\n  private emitVisibilityButton$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\n  emitVisibilityButton: Observable<EventDependency<boolean>> = this.emitVisibilityButton$.asObservable();\n\n  private emitVisibilityAllButtons$: Subject<boolean> = new Subject<boolean>();\n  emitVisibilityAllButtons: Observable<boolean> = this.emitVisibilityAllButtons$.asObservable();\n\n  private emitIsCellSelection$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\n  emitIsCellSelection: Observable<EventDependency<boolean>> = this.emitIsCellSelection$.asObservable();\n\n  private emitChangeColumns$: Subject<EventDependency<ColumnConfig[]>> = new Subject<EventDependency<ColumnConfig[]>>();\n  emitChangeColumns: Observable<EventDependency<ColumnConfig[]>> = this.emitChangeColumns$.asObservable();\n\n  emitTotal: Subject<EventDependency<TotalTableHelisa>> = new Subject<EventDependency<TotalTableHelisa>>();\n  emitNextPage: Subject<EventDependency<T[]>> = new Subject<EventDependency<T[]>>();\n\n  constructor() { }\n\n  /**\n   * retorna un Observable<ConfigTable[]>\n   */\n  getTables(): Observable<ConfigTable<T>[]> {\n    return this.tables;\n  }\n\n  /**\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\n   */\n  updateDependency(configTable: ConfigTable<T>, withRemoveDependency: boolean = false): void {\n    if (withRemoveDependency) {\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\n    }\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\n      configTable.order = this.infoTables.length;\n    }\n    this.infoTables[configTable.order] = configTable;\n    if (configTable.isRemote) {\n      configTable.dataSource = null;\n      if (configTable.count === null) {\n        throw new Error('hace falta el count');\n      }\n    } else {\n      if (configTable.dataSource === null) {\n        throw new Error('hace falta el dataSource');\n      }\n      configTable.count = configTable.dataSource.length;\n    }\n    this.tables.next(this.infoTables);\n  }\n\n  /**\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\n   */\n  setTotal(event: EventDependency<TotalTableHelisa>): void {\n    this.emitTotal.next(event);\n  }\n\n  /**\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\n   */\n  addPage(event: EventDependency<T[]>): void {\n    this.emitNextPage.next(event);\n  }\n\n  selectIndexRow(config: ConfigTable<T>): void {\n    if (this.infoTables[config.order]) {\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\n      this.tables.next(this.infoTables);\n    }\n  }\n\n\n  /**\n   * Muestra o esconde el boton una tabla en especifico\n   * @param event para indicar el index de la tabla y en \"data\" true o false\n   */\n  changeVisibilityButton(event: EventDependency<boolean>): void {\n    this.emitVisibilityButton$.next(event);\n  }\n\n\n  /**\n   * Esconde los botones de todas las tablas\n   * @param show indicar si se muestran o no todos los botones de las tablas\n   */\n  changeVisibilityAllButtons(show: boolean): void {\n    this.emitVisibilityAllButtons$.next(show);\n  }\n\n  /**\n   * Para habilitar el manejo de selecciÃ³n de celda\n   * @param event para indicar el index de la tabla y en \"data\" true o false\n   */\n  changeisCellSelection(event: EventDependency<boolean>): void {\n    this.emitIsCellSelection$.next(event);\n  }\n\n   /**\n    * Para habilitar el cambio de columnas\n    * @param event para indicar el index de la tabla y en \"data\" columnas\n    */\n  changeColumnsByTable( event: EventDependency<ColumnConfig[]>): void {\n    this.emitChangeColumns$.next(event);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {TotalTableHelisa} from './table-helisa.interface';\nimport {TableHelisaComponent} from './table-helisa.component';\n\nexport interface TableHelisaServiceInfo<T> {\n  obj: T;\n  table?: {} | TableHelisaComponent<T>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableHelisaService<T> {\n\n  private emitChangeSource: Subject<TableHelisaServiceInfo<TotalTableHelisa>> = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\n  private emitNextPage: Subject<TableHelisaServiceInfo<T[]>> = new Subject<TableHelisaServiceInfo<T[]>>();\n\n  totalReturn: Observable<TableHelisaServiceInfo<TotalTableHelisa>> = this.emitChangeSource.asObservable();\n  nextPageReturn: Observable<TableHelisaServiceInfo<T[]>> = this.emitNextPage.asObservable();\n\n  private emitVisibleButton$: Subject<boolean> = new Subject<boolean>();\n  /**\n   * Observable para saber si se debe mostrar o esconder el boton de add row\n   */\n  emitVisibleButton: Observable<boolean> = this.emitVisibleButton$.asObservable();\n\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<TotalTableHelisa>): void {\n    this.emitChangeSource.next({obj: total, table});\n  }\n\n  addPage(page: T[], table?: TableHelisaComponent<T>): void {\n    this.emitNextPage.next({obj: page, table});\n  }\n\n  /**\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\n   * @param change indicar si se muestra o no el boton de add row de la tabla\n   */\n  changeVisibilityButton(change: boolean): void {\n    this.emitVisibleButton$.next(change);\n  }\n\n}\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input } from '@angular/core';\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\nimport { ColumnConfig, RequestTableHelisa, SelectObject, TotalTableHelisa } from '../table-helisa/table-helisa.interface';\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\n\nexport interface EventDependency<T> {\n  index: number;\n  data: T;\n}\n\n\n\n@Component({\n  selector: 'hel-dependency-table',\n  templateUrl: './dependency-table-helisa.component.html',\n  styleUrls: ['./dependency-table-helisa.component.sass'],\n  providers: [DependencyTableHelisaService]\n})\nexport class DependencyTableHelisaComponent<T> implements OnInit {\n\n  tables: Array<ConfigTable<T>> = [];\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<T>>;\n  @Input() showToolTip: boolean = true;\n\n  /**\n   * deprecated, use selectObject\n   */\n  @Output() selected: EventEmitter<EventDependency<T>> = new EventEmitter<EventDependency<T>>();\n  @Output() selectObject: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}  | T>>();\n  @Output() nextPage: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() total: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() sort: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() drop: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\n  @Output() selectCell: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() bookClicked: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  selectedObject: EventDependency<{}> = null;\n\n\n  /**\n   * Tiempo antes de ocultarla el mensaje del tooltip\n   */\n  @Input() hideDelay: number = 600;\n\n  /**\n   * Tiempo antes de mostra el mensaje del tooltip\n   */\n  @Input() showDelay: number = 500;\n\n\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService<T>, private tableService: TableHelisaService<T>) { }\n\n  ngOnInit(): void {\n    this.getTables();\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\n      (event: EventDependency<T[]>) => {\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\n      }\n    );\n\n    this.dependencyTableHelisaService.emitTotal.subscribe(\n      (event: EventDependency<TotalTableHelisa>) => {\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\n      }\n    );\n\n    // Observable para mostrar o esconder el boton de una tabla\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\n      (data: EventDependency<boolean>) => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (!!table) {\n            table.addRowButton.showButton = data.data;\n          }\n        }\n      }\n    );\n\n    // Observable para mostrar o esconder los botones de todas las tablas\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\n      (data: boolean) => {\n        if (data !== undefined && data != null) {\n          this.tables.forEach((element: ConfigTable<T>) => {\n            if (!!element.addRowButton) {\n              element.addRowButton.showButton = data;\n            }\n          });\n        }\n      }\n    );\n\n    // Observable para manejo de selecciÃ³n de celdas\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\n      (data: EventDependency<boolean>) => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (table) {\n            table.isCellSelection = data.data;\n          }\n        }\n      });\n\n    // Observable para manejo de columnas\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\n      (data: EventDependency<ColumnConfig[]>) => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (table) {\n            table.columns = data.data;\n          }\n        }\n      });\n  }\n\n  /**\n   * retorna el servicio que gestiona el componente.\n   */\n  getService(): DependencyTableHelisaService<T> {\n    return this.dependencyTableHelisaService;\n  }\n\n  /**\n   * Obtiene un observable con las tablas dependientes desde el servicio.\n   */\n  getTables(): void {\n    this.dependencyTableHelisaService.getTables()\n      .subscribe((tables: ConfigTable<T>[]) => {\n        this.tables = tables;\n      }\n      );\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla seleccionada\n   * @param data retorna la fila que fue seleccionada\n   */\n  onSelectedDependency(index: number, event: SelectObject<T>): void {\n    this.selectedObject = { index, data: event };\n    this.selected.emit({ index, data: event.value });\n    this.selectObject.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onNextPage(index: number, event: RequestTableHelisa<T>): void {\n    this.nextPage.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onTotal(index: number, event: EventDependency<T>): void {\n    this.total.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onSort(index: number, event: EventDependency<T>): void {\n    this.sort.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onDrop(index: number, event: EventDependency<T>): void {\n    this.drop.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe aÃ±adir una nueva fila\n   * @param index indica el indice de la tabla de la cual se dispara el evento\n   */\n  onAddRow(index: number): void {\n    this.addRow.emit(index);\n  }\n\n  selectedCell(index: number, event: EventDependency<T>): void {\n    if (this.tables[index].isCellSelection) {\n      this.selectCell.emit({ index, data: event });\n    }\n  }\n\n  onBookClicked(index: number, event: EventDependency<T>): void {\n    this.bookClicked.emit({ index, data: event });\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nexport enum InputHelisaType {\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE\n}\n\n@Component({\n  selector: 'hel-input',\n  templateUrl: './input-helisa.component.html',\n  styleUrls: ['./input-helisa.component.sass']\n})\nexport class InputHelisaComponent implements OnInit {\n\n  private readonly DECIMAL_SEPARATOR: string = '.';\n  private readonly THOUSAND_SEPARATOR: string = ',';\n\n  @Input() placeholder: string = '';\n\n  // Mostrar o no el icono de buscar\n  @Input() isSearch: boolean = false;\n  // @Input() inputFormControl: FormControl = new FormControl('');\n  @Input() isFocused: boolean = false;\n\n  /**\n   * Deprecated\n   */\n  @Input() disabled: boolean = false;\n  @Input() type: InputHelisaType = InputHelisaType.DEFAULT;\n\n  /**\n   * Deprecated\n   */\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\n\n\n  formControlMask: FormControl = new FormControl('');\n  private realValue: string = '';\n  private inputFormReal: FormControl = new FormControl('');\n\n  @ViewChild('inputText') nameInput: ElementRef;\n\n  constructor() {\n  }\n\n  @Input()\n  set inputFormControl(formControl: FormControl) {\n    this.inputFormReal = formControl;\n    this.inputFormReal.valueChanges.subscribe((data: string) => {\n      this.statusChange(this.inputFormReal.status);\n      if (this.getMaskedValue(data) !== this.formControlMask.value) {\n        this.change(data);\n      }\n    });\n    this.formControlMask.setValidators(this.inputFormReal.validator);\n    this.change(this.inputFormReal.value);\n\n    // disable control\n    if (formControl.disabled) {\n      this.formControlMask.disable({ onlySelf: true });\n    }\n\n\n    this.inputFormReal.statusChanges.subscribe(\n      (data: string) => {\n        this.statusChange(data);\n      }\n    );\n  }\n\n  private statusChange(data: string): void {\n    if (data === 'INVALID') {\n      this.formControlMask.setErrors({ key: 'Error de validaciÃ³n.' });\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.isFocused) {\n      this.nameInput.nativeElement.focus();\n    }\n  }\n\n  search(): void {\n    this.setValue.emit(this.realValue);\n  }\n\n  change(event: string): void {\n    if (event != null) { event = event + ''; }\n    let position: number = this.nameInput.nativeElement.selectionStart;\n    const length: number = event ? event.length : 0;\n    this.realValue = this.getRealValue(event);\n    if (this.getMaskedValue(this.realValue) !== this.formControlMask.value) {\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue));\n      position += this.nameInput.nativeElement.value.length - length;\n      this.nameInput.nativeElement.selectionStart = position;\n      this.nameInput.nativeElement.selectionEnd = position;\n    }\n    this.inputFormReal.setValue(this.realValue);\n  }\n\n  private getMaskedValue(str: string): string {\n    if (str == null) {\n      return str;\n    }\n    str = str + '';\n    if (this.type === InputHelisaType.DEFAULT) {\n      return str;\n    }\n    let maskedStr: string = '';\n    if (this.type === InputHelisaType.IDENTITY) {\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i-- , j++) {\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n    }\n    if (this.type === InputHelisaType.NUMERIC) {\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i-- , j++) {\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n    }\n    if (this.type === InputHelisaType.DOUBLE) {\n      if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {\n        for (let i: number = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {\n          maskedStr += str[i];\n        }\n      }\n      for (let i: number = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1,\n           j: number = 0; i >= 0; i-- , j++) {\n\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n    }\n    return maskedStr;\n  }\n\n  private getRealValue(str: string): string {\n    if (str == null) {\n      return str;\n    }\n    str = str + '';\n    let realStr: string = '';\n    if (this.type === InputHelisaType.DEFAULT) {\n      return str;\n    }\n    if (this.type ===  InputHelisaType.IDENTITY) {\n      for (const strItem of str) {\n        if (strItem.match('[a-zA-Z0-9]')) {\n          realStr += strItem;\n        }\n      }\n    }\n    if (this.type === InputHelisaType.NUMERIC) {\n      for (const strItem of str) {\n        if (strItem.match('[0-9]')) {\n          realStr += strItem;\n        }\n      }\n    }\n    if (this.type === InputHelisaType.DOUBLE) {\n      let haveDot: boolean = false;\n\n      for (const strItem of str) {\n        if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {\n          realStr += strItem;\n        }\n        haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);\n      }\n    }\n    return realStr;\n  }\n}\n","import {SortDirection} from '@angular/material';\nimport { RowData } from './table-helisa.component';\n\nexport enum ColumnType {\n  NORMAL, URL\n}\n\nexport interface ColumnConfig {\n  name: string;\n  title?: string;\n  visible?: boolean;\n  sortable?: boolean;\n  groupable?: boolean;\n  totalType?: TotalType;\n  searchable?: boolean;\n  sortDirection?: SortDirection;\n  subtitle?: string;\n  colspanTitle?: number;\n  colspanSubtitle?: number;\n  columnStyle?: string;\n  columnType?: ColumnType;\n}\n\nexport interface AddRowButton {\n  text: string;\n  showButton: boolean;\n}\n\nexport enum EventScope {\n  USER, CODE_CALL\n}\n\nexport enum TotalType {\n  SUM, AVERAGE, COUNT\n}\n\nexport enum ChangeColumnConfigurationType {\n  SORT, UNKNOWN, TOTAL\n}\n\nexport interface EventColumn {\n  column: ColumnConfig;\n  columnConfigurations: Array<ColumnConfig>;\n  type: ChangeColumnConfigurationType;\n}\n\nexport interface TotalTableHelisa {\n  column: ColumnConfig;\n  value: number;\n}\n\nexport interface TotalGroup {\n  sum: number;\n  count: number;\n}\n\nexport interface EventSearch {\n  text: string;\n  columnConfigurations: Array<ColumnConfig>;\n}\n\nexport interface RequestTableHelisa<T> {\n  page: number;\n  body: {} | T;\n}\n\nexport interface DropElement<T> {\n value: T;\n order: number;\n}\n\nexport interface SelectObject<T> {\n  value: T;\n  scope: EventScope;\n}\n\nexport enum TableHelisaType {\n  REMOTE, LOCAL\n}\n\n\nexport interface Cell<T> {\n  column: ColumnConfig;\n  row: RowData<T> | T;\n }\n\nexport interface ConfigCellStyles<T> {\n   cellData: T;\n   classCell: string;\n }\n\nexport interface ConfigRowStyles<T> {\n  column: ColumnConfig;\n  data: {} | T;\n  classRow: string;\n}\n\n// @dynamic\nexport class ColumnConfigUtil<T> {\n\n  getValue(obj: T, column: ColumnConfig): T | number | string {\n    return column.name.split('.').reduce((o: T, field: string) => o && o[field], obj);\n  }\n}\n\n","import {ColumnConfig} from './table-helisa.interface';\nimport {Observable} from 'rxjs';\n\n\nexport class TableHelisaConnectComponent<T> {\n  page: number;\n  isLastPage: boolean;\n  isUsed: boolean;\n\n  constructor() {\n    this.page = 0;\n    this.isLastPage = false;\n    this.isUsed = false;\n  }\n\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): {} {\n    return {};\n  }\n\n  nextPage(): number {\n    return this.page++;\n  }\n}\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef } from '@angular/core';\nimport { MatSort, MatTable, MatTableDataSource } from '@angular/material';\nimport { Sort } from '@angular/material/typings/sort';\n\nimport {\n  AddRowButton,\n  Cell,\n  ChangeColumnConfigurationType,\n  ColumnConfig,\n  ColumnConfigUtil,\n  ConfigCellStyles,\n  ConfigRowStyles,\n  DropElement,\n  EventColumn,\n  EventScope,\n  EventSearch,\n  RequestTableHelisa,\n  SelectObject,\n  TableHelisaType,\n  TotalGroup,\n  TotalType,\n  ColumnType,\n  TotalTableHelisa\n} from './table-helisa.interface';\nimport { TableHelisaService, TableHelisaServiceInfo } from './table-helisa.service';\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { of } from 'rxjs';\n\nexport interface RowData<T> {\n  data: {} | T;\n  rowType: RowType;\n}\n\nenum RowType {\n  GROUP_TITLE, GROUP_FOOTER, ROW\n}\n\n\n\n@Component({\n  selector: 'hel-table',\n  templateUrl: './table-helisa.component.html',\n  styleUrls: ['./table-helisa.component.sass']\n})\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\n\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\n  totalData: Array<number>;\n  rawData: Array<T>;\n  data: MatTableDataSource<RowData<T>>;\n  displayedColumns: string[] = [];\n  displayedColumnsWithTitle: string[] = [];\n  displayedColumnsWithSubtitle: string[] = [];\n  displayedColumnsWithFooter: string[] = [];\n  columnConfig: Array<ColumnConfig>;\n  selectedObject: T;\n  lastSearch: string;\n  type: TableHelisaType = TableHelisaType.LOCAL;\n  indexRowSelect: number;\n  private scrollCount: number = 0;\n  hasSubtitle: boolean = false;\n  private indexRowStartDrag: number = -1;\n  private lastIndexRowDrag: number = -1;\n  private dataBeforeDrag: { data: RowData<T>[] } = null;\n  private dataSource$: Array<T> = [];\n  private scrollX: number = 0;\n  private scrollY: number = 0;\n\n  @ViewChild(MatSort) matSort: MatSort;\n  @ViewChild(MatTable) matTable: MatTable<T>;\n  @ViewChild(MatTable, { read: ElementRef }) matTableElement: ElementRef;\n  @ViewChild('containerTable') containerTable: ElementRef;\n\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\n\n  /**\n   * Deprecado, cambiar por electObject\n   */\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\n  @Output() selectCell: EventEmitter<Cell<T>> = new EventEmitter<Cell<T>>();\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\n  @Output() nextPage: EventEmitter<RequestTableHelisa<T>> = new EventEmitter<RequestTableHelisa<T>>();\n  @Input() showTitle: boolean = true;\n  @Input() isCellSelection: boolean = false;\n  @Input() count: number;\n  @Input() configCellStyles: Array<ConfigCellStyles<T>>;\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\n  @Input() selectedCells: Cell<T>;\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\n  @Input() isDragged: boolean = false;\n  @Input() addRowButton: AddRowButton = { showButton: false, text: '' };\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\n  @Input() addBookButton: boolean = false;\n  @Input() showToolTip: boolean = true;\n  showFooter: boolean = false;\n  showSearch: boolean = false;\n\n\n\n  /**\n   * Tiempo antes de ocultarla el mensaje del tooltip\n   */\n  @Input() hideDelay: number = 600;\n\n  /**\n   * Tiempo antes de mostra el mensaje del tooltip\n   */\n  @Input() showDelay: number = 500;\n\n\n  constructor(private tableService: TableHelisaService<T>) { }\n\n  ngOnInit(): void {\n    this.tableService.nextPageReturn.subscribe(\n      (data: TableHelisaServiceInfo<T[]>) => {\n        if (!data.table || data.table) {\n          this.receivePage(data.obj);\n        }\n      }\n    );\n    this.tableService.totalReturn.subscribe((info: TableHelisaServiceInfo<TotalTableHelisa>) => {\n      if (info) {\n        this.columnConfig.forEach((column: ColumnConfig, idx: number) => {\n          if (column === info.obj.column) {\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\n          }\n        });\n      }\n    });\n    this.matSort.sortChange.subscribe(\n      (event: Sort) => {\n        const column: ColumnConfig = this.columnConfig.find((c: ColumnConfig) => c.name === event.active);\n        column.sortDirection = event.direction;\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\n      }\n    );\n\n    this.tableService.emitVisibleButton.subscribe(\n      (data: boolean) => {\n        if (data !== undefined && data != null) {\n          this.addRowButton.showButton = data;\n        }\n\n      }\n    );\n  }\n\n  ngAfterViewInit(): void {\n    if (this.isCellSelection) {\n      this.matTable.renderRows();\n    }\n  }\n\n  @Input()\n  set isRemote(w: boolean) {\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\n    if (this.type === TableHelisaType.REMOTE) {\n      this.goNextPage();\n    } else {\n      this.tableHelisaConnectComponent.page++;\n    }\n  }\n\n  @Input()\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\n    this.hasSubtitle = false;\n    this.columnConfig = columnConfiguration;\n    this.displayedColumns.splice(0, this.displayedColumns.length);\n\n    if (columnConfiguration) {\n      if (this.addBookButton &&\n        columnConfiguration.findIndex((x: ColumnConfig) => x.name === 'bookButton') === -1) {\n        columnConfiguration.push({\n          name: 'bookButton',\n          title: '',\n          visible: true\n        });\n      }\n\n      columnConfiguration.forEach((column: ColumnConfig) => {\n        if (column.visible) {\n          this.displayedColumns.push(column.name);\n        }\n        if (!this.hasSubtitle) {\n          this.hasSubtitle = column.subtitle !== undefined;\n        }\n      });\n      if (this.rawData) {\n        this.dataSource = this.rawData;\n      }\n    }\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\n    this.getColumnsWithTitle().forEach((col: string) => this.displayedColumnsWithTitle.push(col));\n    this.getHeaderSubtitle().forEach((col: string) => this.displayedColumnsWithSubtitle.push(col));\n    this.footerDisplayedColumns().forEach((col: string) => this.displayedColumnsWithFooter.push(col));\n  }\n\n\n\n  @Input()\n  set dataSource(dataSource: Array<T>) {\n    this.dataSource$ = dataSource;\n    this.rawData = dataSource;\n    if (this.rawData) { this.prepareDataSource(); }\n  }\n\n  get dataSource(): Array<T> {\n    return this.dataSource$;\n  }\n\n  @Input()\n  set selectedIndexRow(idRowSelected: number) {\n    this.indexRowSelect = idRowSelected;\n    if (this.rawData && this.rawData.length) {\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\n        this.indexRowSelect = 0;\n      }\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\n    }\n  }\n\n  private prepareDataSource(): void {\n    const changeData: Array<RowData<T>> = Array<RowData<T>>();\n    let haveGroup: boolean = false;\n    let groupFooter: Array<TotalGroup>;\n    this.columnConfig.forEach((column: ColumnConfig) => {\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\n        this.totalData = new Array<number>(this.columnConfig.length);\n        this.showFooter = true;\n        this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\n      }\n      this.showSearch = this.showSearch || column.searchable;\n      haveGroup = haveGroup || column.groupable;\n    });\n    if (haveGroup) {\n      this.rawData = this.rawData.sort((a: T, b: T) => {\n        let result: number = 0;\n        this.columnConfig.forEach((column: ColumnConfig) => {\n          if (result === 0) {\n            result = this.compare(a, b);\n          }\n        });\n        return result;\n      });\n    }\n    this.rawData.forEach((row: T) => {\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data as T, row) !== 0)) {\n        if (groupFooter) {\n          changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\n        }\n        changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\n      }\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\n      changeData.push({ data: row, rowType: RowType.ROW });\n    });\n    this.data = new MatTableDataSource<RowData<T>>(changeData);\n    if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\n      if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0) {\n        this.indexRowSelect = 0;\n      }\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\n    }\n  }\n\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: T): void {\n    this.columnConfig.forEach((column: ColumnConfig, index: number) => {\n      if (column.totalType !== undefined) {\n        if (rowTotal[index] === undefined) {\n          rowTotal[index] = { sum: (new ColumnConfigUtil().getValue(row, column) as number), count: 1 };\n        } else {\n          rowTotal[index].sum += (new ColumnConfigUtil().getValue(row, column) as number);\n          rowTotal[index].count++;\n        }\n      }\n    });\n  }\n\n  private compare(a: T, b: T): number {\n    let ws: number = 0;\n    this.columnConfig.forEach((column: ColumnConfig) => {\n      if (ws === 0 && column.groupable) {\n        if ((new ColumnConfigUtil().getValue(a, column) as number) < (new ColumnConfigUtil().getValue(b, column) as number)) {\n          ws = -1;\n        } else if ((new ColumnConfigUtil().getValue(a, column) as number) > (new ColumnConfigUtil().getValue(b, column) as number)) {\n          ws = 1;\n        }\n      }\n    });\n    return ws;\n  }\n\n  getGroupDescription(obj: T): string {\n    let result: string = '';\n    this.columnConfig.forEach((column: ColumnConfig) => {\n      if (column.groupable) {\n        result += (result.length ? ' - ' : '') + (new ColumnConfigUtil().getValue(obj, column));\n      }\n    });\n    return result;\n  }\n\n  isGroupTitle(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.GROUP_TITLE;\n  }\n\n  isRow(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.ROW;\n  }\n\n  isGroupFooter(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.GROUP_FOOTER;\n  }\n\n  footerDisplayedColumns(): Array<string> {\n    return this.displayedColumns.map((name: string) => 'footer-' + name);\n  }\n\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\n    if (column.totalType === TotalType.SUM) { return data.sum; }\n    if (column.totalType === TotalType.COUNT) { return data.count; }\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\n    return undefined;\n  }\n\n  getValue(obj: T, column: ColumnConfig): T {\n    return new ColumnConfigUtil().getValue(obj, column) as T;\n  }\n\n  getValueTooltip(obj: T, column: ColumnConfig): string {\n    if (this.showToolTip) {\n      return new ColumnConfigUtil().getValue(obj, column) as string;\n    } else {\n      return null;\n    }\n  }\n\n  searchText(text: string): void {\n    this.lastSearch = text;\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\n  }\n\n  selectRow(row: RowData<T>, isUser: boolean): void {\n    this.selectedObject = row.data as T;\n    this.select.emit(this.selectedObject);\n    this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n    let isScrollY: boolean;\n\n    if (this.scrollY !== element.scrollTop) {\n      isScrollY = true;\n      this.scrollY = element.scrollTop;\n      this.scrollX = element.scrollLeft;\n    }\n\n    if (this.scrollX !== element.scrollLeft) {\n      isScrollY = false;\n      this.scrollY = element.scrollTop;\n      this.scrollX = element.scrollLeft;\n    }\n\n    if ((element.scrollHeight - element.scrollTop < 1000) && isScrollY) {\n      this.goNextPage();\n    }\n\n  }\n\n  private goNextPage(): void {\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\n      this.tableHelisaConnectComponent.isUsed = true;\n      this.nextPage.emit({\n        page: this.tableHelisaConnectComponent.nextPage(),\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\n      });\n    }\n  }\n\n  private receivePage(data: T[]): void {\n    if (!this.rawData) {\n      this.rawData = new Array<T>();\n    }\n    this.rawData = this.rawData.concat(data);\n    this.dataSource = this.rawData;\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\n    this.tableHelisaConnectComponent.isUsed = false;\n  }\n\n  dblClickCell(): void {\n    this.selectCell.emit(this.selectedCells as Cell<T>);\n  }\n\n  selectedCell(element: RowData<T>, column: ColumnConfig): void {\n    this.selectedCells = { column, row: element };\n    this.selectCell.emit(this.selectedCells);\n  }\n\n  isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean {\n    if (this.isCellSelection) {\n      if (this.selectedCells != null) {\n        if (this.selectedCells.column.name === column.name &&\n          (this.selectedCells.row as RowData<T>).data === row.data) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  getClassToCell(row: T, column: ColumnConfig): string[] {\n    const classToCell: Array<string> = new Array<string>();\n    if (this.configCellStyles) {\n      const found: ConfigCellStyles<T> = this.configCellStyles.find((c: ConfigCellStyles<T>) => {\n        return c.cellData === this.getValue(row, column);\n      });\n      if (found) {\n        classToCell.push(found.classCell);\n      }\n    }\n    if (column.columnStyle) {\n      classToCell.push(column.columnStyle);\n    }\n    return classToCell;\n  }\n\n  getClassToRow(row: T): string[] {\n    const classToRow: Array<string> = new Array<string>();\n    if (row === this.selectedObject && !this.isCellSelection) {\n      classToRow.push('');\n    }\n    if (this.configRowStylesFromColumn) {\n      const found: ConfigRowStyles<T> = this.configRowStylesFromColumn.find((c: ConfigRowStyles<T>) => {\n        return c.data === this.getValue(row, c.column);\n      });\n      if (found) {\n        classToRow.push(found.classRow);\n      }\n    }\n    return classToRow;\n  }\n\n  onDrop(event: MouseEvent): void {\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\n      const rowIndex: number = this.getRowIndex(event.pageY);\n      const array: RowData<T>[] = this.dataBeforeDrag.data;\n      const rawData: T[] = this.rawData;\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\n      this.drop.emit({ value: array[rowIndex].data as T, order: rowIndex });\n      this.rawData = rawData;\n      this.data = new MatTableDataSource(array);\n      event.stopPropagation();\n    }\n  }\n\n  tableKeydown(event: KeyboardEvent): void {\n    if (!this.isCellSelection) {\n      let currentIndex: number = this.data.data.findIndex((row: RowData<T>) => row.data === this.selectedObject);\n      let newSelection: number = -10;\n      if (event.key === 'ArrowDown') {\n        this.scrollCount++;\n        this.data.data.forEach((row: RowData<T>, index: number) => {\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\n            newSelection = index;\n          }\n        });\n      }\n      if (event.key === 'ArrowUp') {\n        this.scrollCount--;\n        currentIndex = this.data.data.length - currentIndex - 1;\n        this.data.data.reverse().forEach((row: RowData<T>, index: number) => {\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\n            newSelection = index;\n          }\n        });\n        this.data.data.reverse();\n        if (newSelection !== -10) {\n          newSelection = this.data.data.length - newSelection - 1;\n        }\n      }\n      if (newSelection !== -10) {\n        this.selectRow(this.data.data[newSelection], true);\n      }\n      if (Math.abs(this.scrollCount) >= 2) {\n        this.scrollCount = 0;\n      } else {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Emite el evento cuando se da click al boton AddRow\n   */\n  onAddRow(): void {\n    this.addRow.emit();\n  }\n\n  onBookClicked(selectedObject: T): void {\n    this.bookClicked.emit(selectedObject);\n  }\n\n  getHeaderSubtitle(): string[] {\n    const x: string[] = this.columnConfig.map((column: ColumnConfig, index: number) => {\n      if (column.visible && column.subtitle !== undefined) {\n        return 'subtitle' + index;\n      } else {\n        return null;\n      }\n    }).filter((data: string) => data != null);\n    return x;\n  }\n\n  getColumnsWithTitle(): string[] {\n    return this.columnConfig.filter((column: ColumnConfig) =>\n      column.visible && column.title !== undefined\n    ).map((col: ColumnConfig) => col.name);\n  }\n\n  dragger(event: MouseEvent): boolean {\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\n      const rowIndex: number = this.getRowIndex(event.pageY);\n      if (rowIndex !== this.lastIndexRowDrag) {\n        this.lastIndexRowDrag = rowIndex;\n        // This can have a memory problem with big data\n        const array: RowData<T>[] = [...this.dataBeforeDrag.data];\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\n        this.data = new MatTableDataSource(array);\n      }\n      event.preventDefault();\n      return true;\n    }\n  }\n\n  startDrag(event: MouseEvent): void {\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\n    this.lastIndexRowDrag = this.indexRowStartDrag;\n    this.dataBeforeDrag = this.data;\n  }\n\n  private getRowIndex(pageY: number): number {\n    let offsetTop: number = 0;\n    let container: HTMLElement = this.containerTable.nativeElement;\n    while ((container !== null) && (offsetTop === 0)) {\n      offsetTop = container.offsetTop;\n      container = container.parentElement;\n    }\n    let rowIndex: number = -1;\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\n    for (let i: number = 0; i < rows.length; i++) {\n      const row: HTMLElement = (rows[i] as HTMLElement);\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop) {\n        rowIndex = i;\n      }\n    }\n    if (rowIndex < 0) { rowIndex = 0; }\n    return rowIndex;\n  }\n\n  get columnType(): typeof ColumnType {\n    return ColumnType;\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport * as moment_ from 'moment';\nconst moment: typeof moment_ = moment_;\n\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material';\nimport { filter, tap } from 'rxjs/operators';\n\n\nexport enum TypeCalendarEnum {\n  NORMAL = 'norma',\n  MONTH_YEAR = 'mounth-year'\n}\n\n\n@Component({\n  selector: 'hel-date-helisa',\n  templateUrl: './date-helisa.component.html',\n  styleUrls: ['./date-helisa.component.css'],\n})\nexport class DateHelisaComponent implements OnInit {\n\n\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\n  @Input() dateFormControl: FormControl = new FormControl('');\n  private date: Date = new Date();\n\n  /**\n   * Formato de fecha.\n   * Los formatos validos son aquellos que maneja la libreria momentjs\n   * https://momentjs.com/docs/#/parsing/string-format/\n   */\n  @Input() dateFormat: string = 'DD/MM/YYYY';\n  @Input() errorMessage: string = 'La fecha no concuerda con el formato ';\n  @Input() placeholder: string = this.dateFormat;\n\n  /**\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\n   * serÃ¡ tomado en cuenta\n   */\n  @Input() typeCalendar: TypeCalendarEnum = TypeCalendarEnum.NORMAL;\n\n\n  dateToVisualize: FormControl;\n\n  /**\n   * Para evitar nuevos eventos miestras se realiza el parseo\n   */\n  private isFromInputEvent: boolean = false;\n\n  /**\n   * Verificar si el formato es valido\n   */\n  invalidFormat: boolean = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.dateToVisualize = new FormControl('', this.dateFormControl.validator);\n    this.formHandler();\n\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\n      this.dateFormat = 'MM/YYYY';\n      this.placeholder = this.dateFormat;\n    }\n\n    /**\n     * establecer valor por defecto de la fecha\n     */\n    const incommingDate: string = moment(this.dateFormControl.value, this.dateFormat).format(this.dateFormat);\n    if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\n      this.dateToVisualize.setValue(incommingDate);\n    }\n\n  }\n\n  get typeCalendarEnum(): typeof TypeCalendarEnum {\n    return TypeCalendarEnum;\n  }\n\n  /**\n   * Determina como se debe inicializar la visualizacion del calendar\n   */\n  getStartView(): string {\n    // multi-year\n    if (this.typeCalendar === this.typeCalendarEnum.MONTH_YEAR) {\n      return 'multi-year';\n    } else {\n      return 'month';\n    }\n  }\n\n  private formHandler(): void {\n    this.dateToVisualize.valueChanges\n      .pipe(\n        tap((date: string) => {\n          if (date.length > this.dateFormat.length) {\n            this.invalidFormat = true;\n          } else {\n            this.invalidFormat = false;\n          }\n        }),\n        filter((date: string) => date.length === this.dateFormat.length)\n      )\n      .subscribe((date: string) => {\n        this.invalidFormat = false;\n        const isValid: boolean = moment(date, this.dateFormat, true).isValid();\n        const result: string = moment(date, this.dateFormat).format('YYYY-MM-DD');\n\n        if (!!result && (result === 'Invalid date' || !isValid)) {\n          this.invalidFormat = true;\n          return;\n        }\n\n        if (!!result) {\n          if (!this.isFromInputEvent) {\n            this.isFromInputEvent = true;\n            const subString: string[] = result.split('-');\n\n            const year: number = parseFloat(subString[0]);\n            const month: number = parseFloat(subString[1]);\n            const day: number = parseFloat(subString[2]);\n\n            this.date.setFullYear(year);\n            this.date.setDate(day);\n            this.date.setMonth(month - 1); // -1 por que los meses se toman como los indices en un array\n\n            /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\n            if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\n              this.date = moment(this.date).endOf('month').toDate();\n            }\n\n            this.dateToVisualize.setValue(moment(this.date, 'YYYY-MM-DD').format(this.dateFormat));\n            this.dateFormControl.setValue(this.date);\n\n            this.isFromInputEvent = false;\n          } else {\n            setTimeout(() => {\n              this.isFromInputEvent = false;\n            }, 1500);\n          }\n\n        }\n      });\n\n\n    this.dateFormControl.valueChanges\n      .subscribe((date: string) => {\n        const incommingDate: string = moment(date, this.dateFormat).format(this.dateFormat);\n        if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\n          this.dateToVisualize.setValue(incommingDate);\n        }\n      });\n  }\n\n\n  /**\n   * Evento que se dispara luego seleccionar un mes\n   */\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void {\n\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\n      datepicker.close();\n      const date: Date = moment(chosenMonthDate).endOf('month').toDate();\n\n      this.dateToVisualize.setValue(moment(date, 'YYYY-MM-DD').format(this.dateFormat));\n      this.dateFormControl.setValue(date);\n    }\n  }\n\n  /**\n   * Evento desde el control touch del calendar\n   */\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>): void {\n\n    this.dateToVisualize.setValue(moment(event.value, 'YYYY-MM-DD').format(this.dateFormat));\n    this.dateFormControl.setValue(event.value);\n  }\n\n  getErrorMessage(): string {\n    return this.errorMessage + this.dateFormat;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, BehaviorSubject, Subscriber, Observable } from 'rxjs';\nimport { Node } from './node';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TreeHelisaService {\n\n    // Observable string sources\n    private emitNodeSelected: BehaviorSubject<number | string> = new BehaviorSubject<number | string>(1);\n    // Observable string streams\n    nodeSelected: Observable<string | number> = this.emitNodeSelected.asObservable();\n\n    // Observable string sources\n    private emitDataSource: BehaviorSubject<Node> = new BehaviorSubject<Node>(undefined);\n\n    // Observable string streams\n    dataSourceObservable: Observable<Node> = this.emitDataSource.asObservable();\n\n    // Expand node observable\n    private emitExpandAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n    nodeExpand: Observable<boolean> = this.emitExpandAllNodes.asObservable();\n\n     // Collapse node observable\n     private emitCollapseAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n     nodeCollapse: Observable<boolean> = this.emitCollapseAllNodes.asObservable();\n\n    private emitRefreshTree: Subject<void> = new Subject<void>();\n    refreshTreeObservable: Observable<void> = this.emitRefreshTree.asObservable();\n\n    private emitRefreshTreeWithPagination: Subject<void> = new Subject<void>();\n    refreshTreeWithPaginationObservable: Observable<void> = this.emitRefreshTreeWithPagination.asObservable();\n\n    private emitExpandOneNode: Subject<Node> = new Subject<Node>();\n    expandOneNodeObservable: Observable<Node> = this.emitExpandOneNode.asObservable();\n\n    private emitCollapseOneNode: Subject<Node> = new Subject<Node>();\n    collapseOneNodeObservable: Observable<Node> = this.emitCollapseOneNode.asObservable();\n\n    // Service message commands\n    changeNodeSelected(idResidentialArea: number | string): void {\n        this.emitNodeSelected.next(idResidentialArea);\n    }\n\n    // Service message commands\n    changeDataSource(data: Node): void {\n        this.emitDataSource.next(data);\n    }\n\n    expandAllNodes(expand: boolean): void {\n        this.emitExpandAllNodes.next(expand);\n    }\n\n    collapseAllNodes(collapse: boolean): void {\n        this.emitCollapseAllNodes.next(collapse);\n    }\n\n    refreshTree(): void {\n        this.emitRefreshTree.next();\n    }\n\n\n    refreshTreeWithPagination(): void {\n        this.emitRefreshTreeWithPagination.next();\n    }\n\n\n    expandOneNode(node: Node): void {\n    this.emitExpandOneNode.next(node);\n    }\n\n\n    collapseOneNode(node: Node): void {\n        this.emitCollapseOneNode.next(node);\n    }\n\n    constructor() {\n\n    }\n\n}\n","export class TreeHelisaConnect<T> {\n    page: number;\n    isLastPage: boolean;\n    isUsed: boolean;\n\n    constructor() {\n      this.page = 0;\n      this.isLastPage = false;\n      this.isUsed = false;\n    }\n\n    nextPage(): number {\n      return this.page = this.page + 1;\n    }\n  }\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, HostListener } from '@angular/core';\nimport { NestedTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { MatTreeNestedDataSource, MatTree, MatOptionSelectionChange } from '@angular/material';\nimport { Node } from './node';\nimport { TreeHelisaService } from './tree-helisa.service';\nimport { Router } from '@angular/router';\nimport * as _ from 'lodash';\nimport { TreeHelisaConnect } from './tree-helisa-connect';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n\nexport interface RequestTreeHelisa {\n  page: number;\n}\n\n@Component({\n  selector: 'hel-tree',\n  templateUrl: './tree-helisa.component.html',\n  styleUrls: ['./tree-helisa.component.sass'],\n  // host: { '(document:keyup)': 'onKeyDown($event)' }\n})\nexport class TreeHelisaComponent implements OnInit, AfterViewInit {\n\n  //#endregion ====== Variables ========\n\n  constructor(private treeHelisaService: TreeHelisaService,\n              private router: Router,\n              private elementRef: ElementRef) {\n    // cargar datos pasados por el @Input\n    if (!!this.data) {\n      const data: Node = this.data;\n      this.data = null;\n      this.receivePage(data.children);\n    } else {\n      this.dataSource.data = [];\n      this.treeControl.dataNodes = [];\n    }\n\n  }\n\n  //#region  ====== Variables =============\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\n  formEdit: FormControl;\n  @ViewChild('tree') tree: MatTree<{}>;\n  private selectedOptions: Map<string | number, {\n    formControl: FormControl;\n    editMode: boolean;\n  }> = new Map<string | number, {\n    formControl: FormControl;\n    editMode: boolean;\n  }>();\n  /**\n   * Datos del Arbol\n   */\n  @Input() data: Node;\n\n\n  /**\n   * Establece si se mostraran las opciones de\n   * Creacion, ediciÃ³n y eliminacion del nodo\n   */\n  @Input() showOptionsNode: boolean = true;\n\n  /**\n   * Retorna el id del nodo removido\n   */\n  @Output() removed: EventEmitter<string | number> = new EventEmitter<number | string>();\n\n  /**\n   * Retorna un nodo editado\n   */\n  @Output() edited: EventEmitter<Node> = new EventEmitter<Node>();\n\n  /**\n   * Retorna un nodo sin id del nodo , pero si con el parent\n   * para conocer a cual fue aÃ±adido\n   */\n  @Output() added: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() collapseParent: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() rangeScrolled: EventEmitter<RequestTreeHelisa> = new EventEmitter<RequestTreeHelisa>();\n  @Output() nodeSelected: EventEmitter<number | string> = new EventEmitter<number | string>();\n  @Output() dobleClick: EventEmitter<number | string> = new EventEmitter<number | string>();\n  @Output() keypressDelete: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() keypressInsert: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() checkedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() uncheckedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n\n  treeControl: NestedTreeControl<Node> = new NestedTreeControl<Node>((node: Node): Node[] | Observable<Node[]> => node.children);\n  dataSource: MatTreeNestedDataSource<Node> = new MatTreeNestedDataSource<Node>();\n\n\n  isSingleClick: boolean = true;\n  currentNode: Node = null;\n\n  /**\n   * Obtiene la descripcion completa del nodo\n   * @example Nodo padre,nodo hijo,nodo nieto\n   * @param node Debe tener todos los parent llenos hacia arriba\n   */\n  public static getDescription(node: Node): string {\n    let result: string[] = [node.name];\n    let concat: string = '';\n\n    if (node.parent) {\n      result.push(this.getDescription(node.parent));\n    }\n\n\n    if (result.length === 1) {\n      return node.name;\n    }\n\n    result = result.reverse();\n\n    for (let i: number = 0; i < result.length; i++) {\n      const element: string = result[i];\n      concat = concat + element + ((i === result.length - 1) ? '' : ',');\n    }\n\n    return concat;\n  }\n\n\n\n  ngOnInit(): void {\n    // si se cargan datos por medio del servicio\n    this.treeHelisaService.dataSourceObservable\n      .subscribe((res: Node) => {\n        if (!!res && !!res.children) {\n          this.receivePage(res.children);\n        } else {\n          this.dataSource.data = [];\n          this.treeControl.dataNodes = [];\n        }\n      });\n\n    // Observable, si cambia el nodo seleccionado por medio del servicio\n    this.treeHelisaService.nodeSelected\n      .subscribe((res: string | number) => {\n        if (!!this.data && !!this.data.children) {\n          this.selectNode(this.data, res);\n        }\n      });\n\n\n    this.treeHelisaService.refreshTreeObservable\n      .subscribe((res: void) => {\n        this.refreshTree();\n      });\n\n    this.treeHelisaService.refreshTreeWithPaginationObservable\n      .subscribe((res: void) => {\n        this.refreshTreeWithPagination();\n      });\n  }\n\n  ngAfterViewInit(): void {\n    this.treeHelisaService.nodeExpand.subscribe((res: boolean) => {\n      if (res != null) {\n        if (res) {\n          this.tree.treeControl.expandAll();\n        }\n      }\n    });\n\n    this.treeHelisaService.nodeCollapse.subscribe((res: boolean) => {\n      if (res !== null) {\n        if (res) {\n          this.tree.treeControl.collapseAll();\n        }\n      }\n    });\n\n\n    this.treeHelisaService.expandOneNodeObservable\n      .subscribe((res: Node) => {\n        if (res !== undefined) {\n          this.treeControl.expand(res);\n        }\n      });\n\n    this.treeHelisaService.collapseOneNodeObservable\n      .subscribe((res: Node) => {\n        if (res !== undefined) {\n          this.treeControl.collapse(res);\n        }\n      });\n  }\n\n\n  //#region  ====== Events ===========\n  onRedirect(node: Node): void {\n\n    this.isSingleClick = true;\n    setTimeout(() => {\n      if (this.isSingleClick) {\n\n        this.selectNode(this.data, node.id);\n\n        // if(!!node && !node.children){\n        if (!!node) {\n          this.nodeSelected.emit(node.id);\n          this.currentNode = node;\n        }\n      }\n    }, 350);\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n\n    if ((element.offsetHeight + element.scrollTop) >= element.scrollHeight) {\n      this.goNextPage();\n    }\n  }\n\n  onEdit(node: Node): void {\n    node.isEditable = true;\n  }\n\n  onAdd(node: Node): void {\n    // si no tiene hijos instanciar el array\n    if (!node.children) {\n      node.children = [];\n    }\n    node.children.push(\n      {\n        id: null,\n        name: '',\n        isSelected: false,\n        parent: node,\n        isEditable: true\n      }\n    );\n    this.refreshTree();\n  }\n\n  onDelete(node: Node): void {\n    // Remueve el nodo utilizando la libreria de lodash\n    _.remove(node.parent.children, node);\n\n    this.refreshTree();\n    this.removed.emit(node.id);\n  }\n\n  onEdited(node: Node, value: string): void {\n\n    node.name = value;\n\n    if (node.id == null && node.name === '') {\n      _.remove(node.parent.children, node);\n      this.refreshTree();\n    } else if (node.id && node.id != null && node.name.trim() !== '') {\n      this.edited.emit(node);\n      node.isEditable = false;\n    } else if (!!node.id && node.id == null && node.name.trim() !== '') {\n      this.added.emit(node);\n      node.isEditable = false;\n    }\n  }\n\n  onCancel(node: Node, value: string): void {\n    // Si no tiene id por ser un nuevo item, lo elimina\n    if (node.id == null) {\n      _.remove(node.parent.children, node);\n      this.refreshTree();\n    }\n\n    node.isEditable = false;\n  }\n\n  onDblClick(node: Node): void {\n    this.isSingleClick = false;\n    this.dobleClick.emit(node.id);\n  }\n\n  @HostListener('document:keyup', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    switch (event.key) {\n      case 'Delete':\n        this.keypressDelete.emit((!!this.currentNode && this.currentNode.id) ? this.currentNode.id : null);\n        break;\n      case 'Insert':\n        this.keypressInsert.emit((!!this.currentNode && this.currentNode.id) ? this.currentNode.id : null);\n        break;\n      case 'ArrowDown':\n        this.moveDownIntoTree();\n        break;\n      case 'ArrowUp':\n        this.moveUpIntoTree();\n        break;\n    }\n\n  }\n\n  //#endregion ======= Events ========\n\n\n\n  //#region  ======== Metodos =============\n\n  private moveUpIntoTree(): number {\n    if (!!this.data) {\n      // si aun no hay ningun node seleccionado selecciona el primero\n      if (this.currentNode == null) {\n        this.selectNode(this.data, this.data.children[0].id);\n        this.currentNode = this.data.children[0];\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n          this.treeHelisaService.expandOneNode(this.currentNode);\n        }\n      } else {\n        if (!!this.currentNode.parent && this.currentNode.id != null) {\n          // obtiene el indice del nodo seleccionado actualmente\n          const index: number = this.currentNode.parent.children.indexOf(this.currentNode);\n\n          if (this.currentNode.parent.id == null && index === 0) {\n            return 0;\n          } else {// si tiene nodos al mismo nivel salta al nodo anterior\n            if (index !== undefined && index === 0) {\n              this.currentNode = this.currentNode.parent;\n              this.selectNode(this.data, this.currentNode.id);\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n                this.treeHelisaService.expandOneNode(this.currentNode);\n              }\n            } else { // si no tiene nodos al mismo nivel salta al nodo padre\n              this.currentNode = this.currentNode.parent.children[index - 1];\n              this.selectNode(this.data, this.currentNode.id);\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n                this.treeHelisaService.expandOneNode(this.currentNode);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private moveDownIntoTree(): void {\n    if (!!this.data) {\n      if (this.currentNode == null) {\n        this.selectNode(this.data, this.data.children[0].id);\n        this.currentNode = this.data.children[0];\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n          this.treeHelisaService.expandOneNode(this.currentNode);\n        }\n      } else {\n        if (!!this.currentNode) {\n          // obtiene el indice del nodo seleccionado actualmente\n          const index: number = (!!this.currentNode && !!this.currentNode.parent) ?\n          this.currentNode.parent.children.indexOf(this.currentNode) :\n          null;\n\n          // si tiene childrens pasa al primer children\n          if (!!this.currentNode.children &&\n            this.currentNode.children.length > 0) {\n\n            this.currentNode = this.currentNode.children[0];\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          } else if (index !== undefined &&\n            index === this.currentNode.parent.children.length - 1 &&\n            this.currentNode.parent.parent != null &&\n            this.currentNode.parent.parent.children != null &&\n            this.currentNode.parent.parent.children.length > 0) {\n\n            const indexOfParent: number = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent);\n            this.currentNode = (this.currentNode.parent.parent.children[indexOfParent + 1] === undefined) ?\n            this.currentNode : this.currentNode.parent.parent.children[indexOfParent + 1];\n\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          } else { // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\n            this.currentNode = this.currentNode.parent.children[index + 1];\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          }\n\n        }\n      }\n    }\n  }\n\n  /**\n   * Verifica si el nodo tiene hijos\n   */\n  hasChild = (t: number, node: Node): boolean => {\n    return !!node.children && node.children.length > 0;\n  }\n\n\n  /**\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\n   */\n  private refreshTree(): void {\n    this.data = null;\n    const datasourceData: Node[] = this.dataSource.data;\n    this.dataSource.data = null;\n    this.dataSource.data = datasourceData;\n    this.treeControl.dataNodes = datasourceData;\n  }\n\n  /**\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())\n   */\n  private refreshTreeWithPagination(): void {\n    const datasourceData: Node[] = this.dataSource.data;\n    this.dataSource.data = null;\n    this.dataSource.data = datasourceData;\n    this.treeControl.dataNodes = datasourceData;\n  }\n\n\n\n\n  private goNextPage(): void {\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\n      this.treeHelisaConnect.isUsed = true;\n      this.rangeScrolled.emit({\n        page: this.treeHelisaConnect.nextPage()\n      });\n    }\n  }\n\n  private receivePage(data: Node[]): void {\n    if (!this.data) { this.data = { id: null, name: 'root', isSelected: false }; }\n    if (!this.data.children) { this.data.children = new Array<Node>(); this.treeHelisaConnect = new TreeHelisaConnect<Node>(); }\n    this.data.children = this.data.children.concat(data);\n    this.data.children.forEach((node: Node) => {\n      this.fillParent(node, this.data);\n    });\n\n\n    this.data.children = this.reorderByOrderIndex(this.data.children);\n\n    this.dataSource.data = this.data.children;\n    this.treeControl.dataNodes = this.data.children;\n    this.treeHelisaConnect.isLastPage = data.length === 0;\n    this.treeHelisaConnect.isUsed = false;\n  }\n\n  /**\n   * Llenan el campo parent de todos los nodos hijos\n   */\n  private fillParent(node: Node, parent: Node): void {\n\n    node.parent = parent;\n    if (node.children && node.children.length > 0) {\n      node.children.forEach((item: Node) => {\n        this.fillParent(item, node);\n      });\n    }\n  }\n\n\n  /**\n   * coloca como true del isSelected del nodo que concuerde con el id\n   */\n  private selectNode(node: Node, id: number | string): Node {\n\n    this.upSelectNode(node);\n\n    if (node === undefined || node.id === undefined) {\n      return null;\n    }\n    if (node.id === id) {\n      node.isSelected = true;\n      this.expandAllParents(node);\n      return node;\n    } else if (node.children != null) {\n      let i: number;\n      let result: Node = null;\n      for (i = 0; result == null && i < node.children.length; i++) {\n        result = this.selectNode(node.children[i], id);\n      }\n      return result;\n    }\n    return null;\n  }\n\n  private expandAllParents(node: Node): void {\n    if (!!node && !!node.parent) {\n      this.treeHelisaService.expandOneNode(node.parent);\n      this.expandAllParents(node.parent);\n    }\n  }\n\n  /**\n   * Elimina el isSelected de todos los nodos\n   */\n  private upSelectNode(node: Node): void {\n    if (!!node && node.isSelected !== undefined) {\n      node.isSelected = false;\n      if (!!node.children) {\n        for (const childrenNode of node.children) {\n          this.upSelectNode(childrenNode);\n        }\n      }\n    }\n  }\n\n  getClassNode(node: Node): string[] {\n    const classNode: string[] = [];\n    if (node.isSelected) {\n      classNode.push('isSelected');\n    }\n    if (node.classNode) {\n      classNode.push(node.classNode);\n    }\n    return classNode;\n  }\n\n  onEditMode(node: Node, editMode: boolean): void {\n    this.getSelectedOptions(node).editMode = editMode;\n  }\n\n  onSelectOption(event: MatOptionSelectionChange, node: Node): void {\n    node.isCheckedOption = event.source.selected;\n    if (node.isCheckedOption) {\n      this.checkedOptionNode.emit(node.id);\n    } else {\n      this.uncheckedOptionNode.emit(node.id);\n    }\n  }\n\n  getSelectedOptions(node: Node): {\n    formControl: FormControl;\n    editMode: boolean;\n} {\n    if (this.selectedOptions.has(node.id)) {\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\n    } else {\n      this.reloadSelectedOptions(node, false);\n    }\n    return this.selectedOptions.get(node.id);\n  }\n\n  private reloadSelectedOptions(node: Node, editMode: boolean): void {\n    const array: Array<string | number | null> = new Array<string | number | null>();\n    node.options.forEach((option: Node) => {\n      if (option.isCheckedOption) {\n        array.push(option.id);\n      }\n    });\n    const obj: {\n      formControl: FormControl;\n      editMode: boolean;\n    } = { formControl: new FormControl(array), editMode };\n    this.selectedOptions.set(node.id, obj);\n  }\n\n  /**\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\n   * @param id  number | string\n   * @returns Node o null si no hay un nodo con ese id\n   */\n  getNodeById(id: number | string): Node {\n    const queue: Node[] = [...this.dataSource.data];\n    while (queue.length > 0) {\n      const curr: Node = queue.shift();\n      if (curr.id === id) {\n        return curr;\n      } else {\n        if (!!curr.children) {\n          queue.push(...curr.children);\n        }\n      }\n    }\n    return null;\n  }\n\n  reorderByOrderIndex(node: Node[]): Node[] {\n    if (!!node && node.length > 0) {\n\n      try {\n        node = _.orderBy(node, (x: Node) => x.orderIndex, ['asc']);\n        node.forEach((element: Node) => {\n          if (!!element.children && element != null) {\n            element.children = this.reorderByOrderIndex(element.children);\n          }\n        });\n        return node;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n\n  }\n\n  //#endregion ====== Metodos ============\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\n\n@Injectable()\nexport class AutocompleteHelisaService<T> {\n\n  private emitChangeSource: BehaviorSubject<Array<OptionAutocompleteHelisa<T>>> =\n  new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\n\n  public dataSource$: Observable<Array<OptionAutocompleteHelisa<T>>> = this.emitChangeSource.asObservable();\n\n  constructor() { }\n\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>): void {\n    this.emitChangeSource.next(options);\n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable, of, Subject } from 'rxjs';\nimport { map, startWith, throttleTime, debounceTime } from 'rxjs/operators';\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\n\nexport interface OptionAutocompleteHelisa<T> {\n  value: T;\n  displayText: string;\n}\n\n@Component({\n  selector: 'hel-autocomplete',\n  templateUrl: './autocomplete-helisa.component.html',\n  styleUrls: ['./autocomplete-helisa.component.css'],\n  providers: [AutocompleteHelisaService]\n})\nexport class AutocompleteHelisaComponent<T> implements OnInit {\n\n  @Input() myControl: FormControl = new FormControl();\n  @Input() options: Array<OptionAutocompleteHelisa<T>> = new Array<OptionAutocompleteHelisa<T>>();\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\n  selectedValue: OptionAutocompleteHelisa<T>;\n  @Output() selectedValueEmmiter: EventEmitter<T> = new EventEmitter<T>();\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\n  @Input() isRemote: boolean = false;\n  isLoading: boolean = false;\n\n\n  onScrollObservable: Subject<void> = new Subject<void>();\n\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\n  }\n\n  ngOnInit(): void {\n\n    this.onScrollObservable.asObservable()\n    .pipe(\n      debounceTime(500),\n      throttleTime(500)\n    )\n    .subscribe(() => {\n      this.nextPage.emit();\n    });\n\n    if (this.isRemote) {\n      this.autocompleteHelisaService.dataSource$.subscribe((data: OptionAutocompleteHelisa<T>[]) => {\n        setTimeout(() => {\n          this.options = data;\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\n        });\n      });\n    }\n\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map((x: string) => this._checkRegex(x)),\n      map((value: string) => this._filter(value))\n    );\n\n  }\n\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {\n    return option ? option.displayText : undefined;\n  }\n\n  getService(): AutocompleteHelisaService<T> {\n    return this.autocompleteHelisaService;\n  }\n\n\n  /** Elimina caracteres extraÃ±os */\n  private _checkRegex(value: string): string {\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '');\n    return value;\n  }\n\n  private _filter(value: string): OptionAutocompleteHelisa<T>[] {\n    if (!(value)) {\n      if (!this.isRemote) {\n        const filterValue: string[] = value.toLowerCase().split(' ');\n        return this.options.filter((option: OptionAutocompleteHelisa<T>) => {\n          let ws: boolean = true;\n          filterValue.forEach((text: string) => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\n          return ws;\n        }).splice(0, 5);\n      } else {\n        return this.options;\n      }\n    }\n  }\n\n  public onSelected(event: {option: {value: OptionAutocompleteHelisa<T>}}): void {\n    this.selectedValue = event.option.value;\n    this.selectedValueEmmiter.emit(this.selectedValue.value);\n  }\n\n  getNextPage(): void {\n    this.onScrollObservable.next();\n  }\n}\n","import { Directive, EventEmitter, Input, Output, OnDestroy} from '@angular/core';\nimport { MatAutocomplete} from '@angular/material';\nimport { takeUntil, tap} from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n\nexport interface IAutoCompleteScrollEvent {\n  autoComplete: MatAutocomplete;\n  scrollEvent: Event;\n}\n\n\n@Directive({\n  selector: 'mat-autocomplete[optionsScroll]'\n})\nexport class OptionsScrollDirective implements OnDestroy  {\n\n  /**\n   * This value would different depends of styles\n   */\n  @Input() thresholdPercent: number = .9;\n  @Output() optionsScroll: EventEmitter<IAutoCompleteScrollEvent> = new EventEmitter<IAutoCompleteScrollEvent>();\n  destroy: Subject<void> = new Subject<void>();\n  lastScrollTop: number  = 0;\n\n  constructor(public autoComplete: MatAutocomplete) {\n    this.autoComplete.opened.pipe(\n      tap(() => {\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\n        // Note: The panel will be available on next tick\n        // Note: The panel wil NOT open if there are no options to display\n        setTimeout(() => {\n          // Note: remove listner just for safety, in case the close event is skipped.\n          this.removeScrollEventListener();\n          if (!!this.autoComplete &&\n            !!this.autoComplete.panel &&\n            !!this.autoComplete.panel.nativeElement) {\n              this.autoComplete.panel.nativeElement\n                .addEventListener('scroll', this.onScroll.bind(this), false);\n            }\n        });\n      }),\n      takeUntil(this.destroy)).subscribe();\n\n    this.autoComplete.closed.pipe(\n      tap(() => this.removeScrollEventListener()),\n      takeUntil(this.destroy)).subscribe();\n  }\n\n  private removeScrollEventListener(): void {\n    if (!!this.autoComplete &&\n      !!this.autoComplete.panel &&\n      !!this.autoComplete.panel.nativeElement) {\n    this.autoComplete.panel.nativeElement\n      .removeEventListener('scroll', this.onScroll);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.next();\n    this.destroy.complete();\n\n    this.removeScrollEventListener();\n  }\n\n\n  onScroll(event: Event): void {\n    // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\n    const st: number = (event.target as Window).pageYOffset || (event.target as Element).scrollTop;\n    if (st > this.lastScrollTop) {\n       // downscroll code\n       if (this.thresholdPercent === undefined) {\n        this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\n      } else {\n        const threshold: number = this.thresholdPercent * 100 * (event.target as Element).scrollHeight / 100;\n        const current: number = (event.target as Element).scrollTop + (event.target as Element).clientHeight;\n        // console.log(`scroll ${current}, threshold: ${threshold}`)\n        if (current > threshold) {\n          // console.log('load next page');\n          this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\n        }\n      }\n    } else {\n       // upscroll code\n    }\n    this.lastScrollTop = st <= 0 ? 0 : st;\n  }\n\n}\n","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\nimport { MatTooltip } from '@angular/material';\n\n@Directive({\n    selector: '[helTooltip]',\n    providers: [MatTooltip]\n})\nexport class HelTooltipDirective {\n\n    tooltip: MatTooltip;\n\n    /**\n     * Mensaje a mostrar\n     */\n    @Input('helTooltip') message: string;\n\n    /**\n     * Tiempo antes de ocultarla el mensaje\n     */\n    @Input() hideDelay: number = 600;\n\n    /**\n     * Tiempo antes de mostra el mensaje\n     */\n    @Input() showDelay: number = 500;\n\n\n    constructor(tooltip: MatTooltip, private elemRef: ElementRef) {\n      this.tooltip = tooltip;\n    }\n\n    @HostListener('mouseover') mouseover(): void {\n      const currentContent: string = this.elemRef.nativeElement.innerText;\n\n      if (!!currentContent && !!this.message) {\n        if ((currentContent.toUpperCase() !== this.message.toString().toUpperCase()) || this.isEllipsisActive(this.elemRef.nativeElement)) {\n          this.tooltip.message = this.message;\n        }\n      }\n\n      this.tooltip.showDelay =  this.showDelay;\n      this.tooltip.hideDelay = this.hideDelay;\n    }\n\n\n    private isEllipsisActive(e: {offsetWidth: number , scrollWidth: number}): boolean {\n      return (e.offsetWidth < e.scrollWidth);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'externalLink'\n})\nexport class ExternalLinkPipe implements PipeTransform {\n    transform(value: string, ...args: string[]): string {\n        return '//' + value;\n    }\n}\n","import { Directive, HostBinding, PLATFORM_ID, Inject, Input, OnChanges } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Directive({\n  selector: 'a[href]',\n})\nexport class ExternalLinkDirective implements OnChanges {\n  @HostBinding('attr.rel') relAttr: string = '';\n  @HostBinding('attr.target') targetAttr: string = '';\n  @HostBinding('attr.href') hrefAttr: string = '';\n  @Input() href: string;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n\n  ngOnChanges(): void {\n\n    this.hrefAttr = this.href;\n\n    if (this.isLinkExternal()) {\n      this.relAttr = 'noopener';\n      this.targetAttr = '_blank';\n    }\n  }\n\n  private isLinkExternal(): boolean {\n    return isPlatformBrowser(this.platformId) && !this.href.includes(location.hostname);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\n\n\nimport {MatAutocompleteModule} from '@angular/material';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatListModule} from '@angular/material/list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCardModule} from '@angular/material/card';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatSidenavModule,\n  MatGridListModule,\n  MatMenuModule,\n  MatRadioModule,\n  MatButtonModule,\n  MatCheckboxModule,\n  MatInputModule,\n  MatOptionModule,\n  MatSnackBarModule, MatTableModule, MatPaginatorModule, MatSortModule } from '@angular/material';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\nimport {TableHelisaService} from './components/table-helisa/table-helisa.service';\nimport {\n  ChangeColumnConfigurationType,\n  ColumnConfig,\n  EventColumn, TotalType\n} from './components/table-helisa/table-helisa.interface';\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\nimport {MatTreeModule} from '@angular/material/tree';\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\nimport {TreeHelisaService} from './components/tree-helisa/tree-helisa.service';\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport { HelTooltipDirective } from './directives/tooltip.directive';\nimport { ExternalLinkPipe } from './pipes/external-link.pipe';\nimport { ExternalLinkDirective } from './directives/external-link.directive';\n\n\n@NgModule({\n  declarations: [\n    InputWithButtonComponent,\n    ToastHelisaComponent,\n    AlertHelisaComponent,\n    DependencyTableHelisaComponent,\n    InputHelisaComponent,\n    TableHelisaComponent,\n    TreeHelisaComponent,\n    DateHelisaComponent,\n    AutocompleteHelisaComponent,\n    OptionsScrollDirective,\n    HelTooltipDirective,\n    ExternalLinkDirective,\n    ExternalLinkPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatListModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatCardModule,\n    LayoutModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTabsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatStepperModule,\n    MatChipsModule,\n    DragDropModule,\n    MatTreeModule\n  ],\n  exports: [\n    InputWithButtonComponent,\n    ToastHelisaComponent,\n    AlertHelisaComponent,\n    DependencyTableHelisaComponent,\n    InputHelisaComponent,\n    TableHelisaComponent,\n    TreeHelisaComponent,\n    DateHelisaComponent,\n    AutocompleteHelisaComponent,\n    OptionsScrollDirective,\n    HelTooltipDirective,\n    ExternalLinkDirective,\n    ExternalLinkPipe,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatListModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatCardModule,\n    LayoutModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTabsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatStepperModule,\n    MatChipsModule,\n    DragDropModule,\n    MatTreeModule\n  ],\n  providers: [\n    TableHelisaService,\n    TreeHelisaService\n  ]\n})\nexport class HelisaLibModule { }\n","export enum ToastType {\n    DONE = 'done',\n    ERROR = 'error',\n    INFO = 'info'\n}\n"]}