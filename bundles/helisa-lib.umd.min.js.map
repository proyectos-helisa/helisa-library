{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","Output","placeholder","FormControl","Validators","required","requiredMessage","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","subMessages","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","content","title","hasCancel","AlertHelisaType","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","next","setTotal","event","emitTotal","addPage","emitNextPage","selectIndexRow","config","indexRowSelect","Subject","Array","TableHelisaService","total","table","emitChangeSource","obj","page","totalReturn","asObservable","nextPageReturn","DependencyTableHelisaComponent","_this","dependencyTableHelisaService","subscribe","tableService","viewTables","toArray","index","getService","onSelectedDependency","selectedObject","selected","onNextPage","nextPage","onTotal","onSort","sort","onDrop","drop","providers","ViewChildren","InputHelisaComponent","isFocused","nameInput","nativeElement","focus","search","ViewChild","isSearch","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","o","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","forEach","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","ngAfterViewInit","multipleCell","matTable","renderRows","Object","defineProperty","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","undefined","columnConfiguration","displayedColumns","splice","visible","push","rawData","prepareDataSource","idRowSelected","selectRow","rowType","RowType","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","addTotalGroup","MatTableDataSource","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","footerDisplayedColumns","map","TotalType","searchText","text","lastSearch","select","onScroll","element","target","scrollHeight","scrollTop","body","concat","dblClickCell","selectCell","selectedCells","selectedCell","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","getClassToRow","classToRow","configRowStylesFromColumn","classRow","array","moveItemInArray","previousIndex","currentIndex","clonedeep","tableKeydown","currentIndex_1","findIndex","newSelection_1","key","scrollCount","reverse","Math","abs","preventDefault","MatSort","MatTable","isSetSelectedRow","showTitle","isDragged","DateHelisaComponent","dateFormControl","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","expandAllNodes","expand","emitExpandAllNodes","collapseAllNodes","collapse","emitCollapseAllNodes","refreshTree","emitRefreshTree","refreshTreeWithPagination","emitRefreshTreeWithPagination","expandOneNode","node","emitExpandOneNode","collapseOneNode","emitCollapseOneNode","BehaviorSubject","nodeSelected","dataSourceObservable","nodeExpand","nodeCollapse","refreshTreeObservable","refreshTreeWithPaginationObservable","expandOneNodeObservable","collapseOneNodeObservable","TreeHelisaConnect","TreeHelisaComponent","treeHelisaService","res","children","treeControl","dataNodes","selectNode","tree","expandAll","collapseAll","onRedirect","isSingleClick","setTimeout","id","currentNode","offsetHeight","onEdit","isEditable","onAdd","isSelected","parent","onDelete","_.remove","removed","onEdited","trim","edited","added","onDblClick","dobleClick","onKeyDown","keypressDelete","keypressInsert","moveDownIntoTree","moveUpIntoTree","indexOf","indexOfParent","getDescription","i","_data","treeHelisaConnect","rangeScrolled","fillParent","upSelectNode","expandAllParents","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","checkedOptionNode","uncheckedOptionNode","selectedOptions","has","reloadSelectedOptions","get","options","option","formControl","set","host","(document:keyup)","Router","ElementRef","router","elementRef","Map","showOptionsNode","collapseParent","NestedTreeControl","MatTreeNestedDataSource","hasChild","_","AutocompleteHelisaService","setDataSource","dataSource$","AutocompleteHelisaComponent","autocompleteHelisaService","filteredOptions","of","myControl","valueChanges","pipe","startWith","_filter","filterValue_1","toLowerCase","filter","displayText","onSelected","selectedValue","onSelectedValue","isLoading","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","DONE","INFO"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string =\"\";  \r\n  @Input() inputFormControl:FormControl = new FormControl('',Validators.required);\r\n  @Input() requiredMessage:string = \"El campo es requerido\";\r\n  @Input() value:string = \"\";\r\n\r\n  @Output() done = new EventEmitter<string>();\r\n  @Output() cancel = new EventEmitter<any>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if(this.value != \"\"){\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n  }\r\n\r\n\r\n  onDone(){\r\n    if(this.inputFormControl.valid)\r\n    {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(){\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type:ToastType, message:String, subMessages?:String[]){\r\n    subMessages = subMessages ? subMessages : [];\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message: message, type: type, subMessages},\r\n      duration: this.durationInSeconds * 1000\r\n    });\r\n  }\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = \"ERROR\",\r\n    CONFIRMATION = \"CONFIRMATION\"\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: String;\r\n  hasCancel: boolean;\r\n\r\n  constructor(public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data) {\r\n      this.content = data.content;\r\n      this.title = data.title;\r\n      this.hasCancel = data.type == AlertHelisaType.CONFIRMATION;\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onCancel(){\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type:AlertHelisaType, title:String, content:String): Observable<any> {\r\n    const dialogRef = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: {title: title, content: content, type:type}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport { ColumnConfig, RequestTableHelisa } from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency } from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable {\r\n  columns: Array<ColumnConfig>,\r\n  isRemote: boolean,\r\n  dataSource?: Array<any>,\r\n  count?: number,\r\n  order?: number,\r\n  showTitle?: boolean,\r\n  indexRowSelect?: number,\r\n  isDragged?: Boolean\r\n}\r\n\r\n@Injectable()\r\nexport class DependencyTableHelisaService {\r\n\r\n\r\n  tables: Subject<ConfigTable[]> = new Subject();\r\n  infoTables: Array<ConfigTable> = new Array();\r\n\r\n  emitTotal = new Subject<EventDependency>();\r\n  emitNextPage = new Subject<EventDependency>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable, withRemoveDependency: boolean = false) {\r\n    if (withRemoveDependency) {\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if (configTable.isRemote) {\r\n      configTable.dataSource = null;\r\n      if (configTable.count === null)\r\n        throw \"hace falta el count\";\r\n    } else {\r\n      if (configTable.dataSource === null)\r\n        throw \"hace falta el dataSource\";\r\n      configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina \r\n   */\r\n  setTotal(event: EventDependency) {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  addPage(event: EventDependency) {\r\n    this.emitNextPage.next(event);\r\n  }\r\n\r\n  selectIndexRow(config: ConfigTable) {\r\n    if (this.infoTables[config.order]) {\r\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\r\n      this.tables.next(this.infoTables); }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\r\nimport {TotalTableHelisa} from \"./table-helisa.interface\";\r\nimport {TableHelisaComponent} from \"./table-helisa.component\";\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: TableHelisaComponent<any>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn = this.emitChangeSource.asObservable();\r\n  nextPageReturn = this.emitNextPage.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<T>) {\r\n    this.emitChangeSource.next({obj: total, table: table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>) {\r\n    this.emitNextPage.next({obj: page, table: table});\r\n  }\r\n}\r\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input } from '@angular/core';\r\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\r\nimport { ColumnConfig, RequestTableHelisa } from '../table-helisa/table-helisa.interface';\r\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\r\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency {\r\n  index: number,\r\n  data: any\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [DependencyTableHelisaService]\r\n})\r\nexport class DependencyTableHelisaComponent implements OnInit {\r\n\r\n  tables: Array<ConfigTable> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<any>>;\r\n\r\n  @Output() selected: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() nextPage: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() total: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() sort: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() drop: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  selectedObject: EventDependency = null;\r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService, private tableService: TableHelisaService<any>) { }\r\n\r\n  ngOnInit() {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      event => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n\r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      event => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService(): DependencyTableHelisaService {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables() {\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe(tables => {\r\n        this.tables = tables;\r\n      }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: any) {\r\n    this.selectedObject = { index: index, data: event };\r\n    this.selected.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa) {\r\n    this.nextPage.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: any) {\r\n    this.total.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: any) {\r\n    this.sort.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onDrop(index: number, event: any) {\r\n    this.drop.emit({ index: index, data: event });\r\n  }\r\n\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef} from '@angular/core';\r\nimport {FormControl} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit {\r\n\r\n  @Input() placeholder = '';\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n  @Input() isSearch = false;\r\n  @Input() inputFormControl: FormControl = new FormControl('');\r\n  @Input() isFocused = false;\r\n\r\n  @ViewChild('inputText') nameInput: ElementRef;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if (this.isFocused) {\r\n      this.nameInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  search() {\r\n    this.setValue.emit(this.inputFormControl.value);\r\n  }\r\n\r\n}\r\n","import {SortDirection} from \"@angular/material\";\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa {\r\n  page: number;\r\n  body: any;\r\n}\r\n\r\nexport interface DropElement<T>{\r\n value: T;\r\n order: number;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n\r\nexport interface Cell {\r\n  column: ColumnConfig;\r\n  row: any;\r\n }\r\n\r\n export interface ConfigCellStyles{\r\n   cellData: any;\r\n   classCell: string \r\n }\r\n\r\n export interface ConfigRowStyles{\r\n  column: ColumnConfig;\r\n  data: any,\r\n  classRow: string \r\n}\r\n\r\n//@dynamic\r\nexport abstract class ColumnConfigUtil {\r\n  static getValue(obj: any, column: ColumnConfig): any {\r\n    return column.name.split('.').reduce((o, field) => o && o[field], obj);\r\n  }\r\n}\r\n","import {ColumnConfig} from \"./table-helisa.interface\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): any {\r\n    return {};\r\n  }\r\n\r\n  nextPage() {\r\n    return this.page++;\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, AfterViewInit } from '@angular/core';\r\nimport { MatSort, MatTableDataSource, MatTable } from '@angular/material';\r\nimport { Sort } from '@angular/material/typings/sort';\r\nimport clonedeep from 'lodash.clonedeep';\r\nimport {\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  EventColumn,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType,\r\n  Cell,\r\n  ConfigCellStyles,\r\n  ConfigRowStyles,\r\n  DropElement\r\n} from './table-helisa.interface';\r\nimport { TableHelisaService } from './table-helisa.service';\r\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\r\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n\r\ninterface RowData {\r\n  data: any;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData>;\r\n  displayedColumns: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n  isSetSelectedRow = false;\r\n  indexRowSelect: number;\r\n  private scrollCount: number = 0;\r\n\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n  @ViewChild(MatTable) matTable: MatTable<any>;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() selectCell = new EventEmitter<Cell[]>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa> = new EventEmitter<RequestTableHelisa>();\r\n  @Input() showTitle = true;\r\n  @Input() multipleCell = false;\r\n  @Input() count: number;\r\n  @Input() configCellStyles: Array<ConfigCellStyles>;\r\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles>;\r\n  @Input() selectedCells: Array<Cell> = new Array<Cell>();\r\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\r\n  @Input() isDragged = false;\r\n  showFooter = false;\r\n  showSearch = false;\r\n\r\n  constructor(private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit() {\r\n    this.tableService.nextPageReturn.subscribe(\r\n      data => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe(info => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column, idx) => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort) => {\r\n        const column: ColumnConfig = this.columnConfig.find(c => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\r\n      }\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.multipleCell) {\r\n      this.matTable.renderRows();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n      this.goNextPage();\r\n    } else { this.tableHelisaConnectComponent = undefined; }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.columnConfig = columnConfiguration;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n    if (columnConfiguration) {\r\n      columnConfiguration.forEach(column => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<any>) {\r\n    this.rawData = dataSource;\r\n    if (this.rawData) { this.prepareDataSource(); }\r\n  }\r\n\r\n  @Input()\r\n  set selectedIndexRow(idRowSelected: number) {\r\n    this.indexRowSelect = idRowSelected;\r\n    if (this.rawData && this.rawData.length) {\r\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW });\r\n    }\r\n  }\r\n\r\n  private prepareDataSource() {\r\n    const changeData = Array<RowData>();\r\n    let haveGroup = false;\r\n    let groupFooter: Array<TotalGroup>;\r\n    this.columnConfig.forEach(column => {\r\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n        this.totalData = new Array<number>(this.columnConfig.length);\r\n        this.showFooter = true;\r\n        this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\r\n      }\r\n      this.showSearch = this.showSearch || column.searchable;\r\n      haveGroup = haveGroup || column.groupable;\r\n    });\r\n    if (haveGroup) {\r\n      this.rawData = this.rawData.sort((a, b) => {\r\n        let result = 0;\r\n        this.columnConfig.forEach(column => {\r\n          if (result === 0) {\r\n            result = this.compare(a, b);\r\n          }\r\n        });\r\n        return result;\r\n      });\r\n    }\r\n    this.rawData.forEach(row => {\r\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data, row) !== 0)) {\r\n        if (groupFooter) {\r\n          changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\r\n        }\r\n        changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\r\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n      }\r\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\r\n      changeData.push({ data: row, rowType: RowType.ROW });\r\n    });\r\n    this.data = new MatTableDataSource<RowData>(changeData);\r\n    if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\r\n      if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0)\r\n        this.indexRowSelect = 0;\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW });\r\n    }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: any) {\r\n    this.columnConfig.forEach((column, index) => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = { sum: ColumnConfigUtil.getValue(row, column), count: 1 };\r\n        } else {\r\n          rowTotal[index].sum += ColumnConfigUtil.getValue(row, column);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: any, b: any): number {\r\n    let ws = 0;\r\n    this.columnConfig.forEach(column => {\r\n      if (ws === 0 && column.groupable) {\r\n        if (ColumnConfigUtil.getValue(a, column) < ColumnConfigUtil.getValue(b, column)) { ws = -1; } else if (ColumnConfigUtil.getValue(a, column) > ColumnConfigUtil.getValue(b, column)) { ws = 1; }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: any): string {\r\n    let result = '';\r\n    this.columnConfig.forEach(column => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + ColumnConfigUtil.getValue(obj, column);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index, item): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map(name => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: any, column: ColumnConfig) {\r\n    return ColumnConfigUtil.getValue(obj, column);\r\n  }\r\n\r\n  searchText(text) {\r\n    this.lastSearch = text;\r\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\r\n  }\r\n\r\n  selectRow(row) {\r\n    this.selectedObject = row.data;\r\n    this.select.emit(this.selectedObject);\r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n    if (element.scrollHeight - element.scrollTop < 1000) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  private goNextPage() {\r\n    if (this.type === TableHelisaType.REMOTE && !this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]) {\r\n    if (!this.rawData) { this.rawData = new Array<T>(); }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n      this.tableHelisaConnectComponent.isUsed = false;\r\n    }\r\n  }\r\n  dblClickCell() {\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  selectedCell(element, column: ColumnConfig) {\r\n    let index = this.isSelectedCell(element, column);\r\n    if (index >= 0) {\r\n      this.selectedCells.splice(index, 1);\r\n    } else {\r\n      this.selectedCells.push({ column: column, row: element });\r\n    }\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  isSelectedCell(element, column: ColumnConfig): number {\r\n    if (this.multipleCell) {\r\n      for (let index = 0; index < this.selectedCells.length; index++) {\r\n        if (this.selectedCells[index].column.name === column.name &&\r\n          this.selectedCells[index].row.data === element.data) {\r\n          return index;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  getClassToCell(row, column: ColumnConfig) {\r\n    let classToCell = '';\r\n    if (this.configCellStyles) {\r\n      let found = this.configCellStyles.find(c => {\r\n        return c.cellData === this.getValue(row, column);\r\n      });\r\n      if (found) {\r\n        classToCell = found.classCell;\r\n      }\r\n    }\r\n    return classToCell;\r\n  }\r\n\r\n  getClassToRow(row) {\r\n    let classToRow = '';\r\n    if (this.configRowStylesFromColumn) {\r\n      let found = this.configRowStylesFromColumn.find(c => {\r\n        return c.data === this.getValue(row, c.column);\r\n      });\r\n      if (found) {\r\n        classToRow = found.classRow;\r\n      }\r\n    }\r\n    return classToRow;\r\n  }\r\n\r\n  onDrop(event: CdkDragDrop<any>) {\r\n    let array: RowData[] = this.data.data;\r\n    moveItemInArray(array, event.previousIndex, event.currentIndex);\r\n    this.drop.emit({value: array[event.previousIndex].data, order: event.currentIndex});\r\n    this.data.data = clonedeep(array);\r\n  }\r\n\r\n  tableKeydown(event: KeyboardEvent) {\r\n    if (!this.multipleCell) {\r\n      let currentIndex = this.data.data.findIndex(row => row.data === this.selectedObject);\r\n      let newSelection = -10;\r\n      if (event.key === 'ArrowDown') {\r\n        this.scrollCount++;\r\n        this.data.data.forEach((row, index) => {\r\n          if (newSelection == -10 && index > currentIndex && row.rowType == RowType.ROW)\r\n            newSelection = index;\r\n        });\r\n      }\r\n      if (event.key === 'ArrowUp') {\r\n        this.scrollCount--;\r\n        currentIndex = this.data.data.length - currentIndex - 1;\r\n        this.data.data.reverse().forEach((row, index) => {\r\n          if (newSelection == -10 && index > currentIndex && row.rowType == RowType.ROW)\r\n            newSelection = index;\r\n        });\r\n        this.data.data.reverse();\r\n        if (newSelection != -10) {\r\n          newSelection = this.data.data.length - newSelection - 1;\r\n        }\r\n      }\r\n      if (newSelection != -10) {\r\n        this.selectedObject = this.data.data[newSelection].data;\r\n      }\r\n      if(Math.abs(this.scrollCount)>=2)\r\n        this.scrollCount = 0;\r\n      else\r\n        event.preventDefault();\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css']\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n\r\n  @Input() placeholder = \"\";\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Subscriber } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected = new BehaviorSubject<number>(1);    \r\n    // Observable string streams\r\n    nodeSelected = this.emitNodeSelected.asObservable();\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number) {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n\r\n\r\n    // Observable string sources\r\n    private emitDataSource = new BehaviorSubject<Node>(undefined);    \r\n    // Observable string streams\r\n    dataSourceObservable = this.emitDataSource.asObservable();\r\n    // Service message commands\r\n    changeDataSource(data:Node) {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n\r\n      \r\n    // Expand node observable\r\n      private emitExpandAllNodes = new BehaviorSubject<boolean>(null);          \r\n      nodeExpand = this.emitExpandAllNodes.asObservable();      \r\n      expandAllNodes(expand:boolean) {\r\n          this.emitExpandAllNodes.next(expand);\r\n      }\r\n\r\n\r\n      // Collapse node observable\r\n      private emitCollapseAllNodes = new BehaviorSubject<boolean>(null);          \r\n      nodeCollapse = this.emitCollapseAllNodes.asObservable();      \r\n      collapseAllNodes(collapse:boolean) {\r\n          this.emitCollapseAllNodes.next(collapse);\r\n      }\r\n\r\n\r\n      private emitRefreshTree = new Subject<void>();\r\n      refreshTreeObservable = this.emitRefreshTree.asObservable();\r\n      refreshTree(){\r\n          this.emitRefreshTree.next();\r\n      }\r\n\r\n      private emitRefreshTreeWithPagination = new Subject<void>();\r\n      refreshTreeWithPaginationObservable = this.emitRefreshTreeWithPagination.asObservable();\r\n      refreshTreeWithPagination(){\r\n          this.emitRefreshTreeWithPagination.next();\r\n      }\r\n\r\n\r\n\r\n      private emitExpandOneNode = new Subject<Node>();\r\n      expandOneNodeObservable = this.emitExpandOneNode.asObservable();\r\n      expandOneNode(node:Node){\r\n        this.emitExpandOneNode.next(node);\r\n      }\r\n\r\n      private emitCollapseOneNode = new Subject<Node>();\r\n      collapseOneNodeObservable = this.emitCollapseOneNode.asObservable();\r\n      collapseOneNode(node:Node){\r\n        this.emitCollapseOneNode.next(node);\r\n      }\r\n\r\n    constructor(){\r\n        \r\n    }\r\n  \r\n}","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n  \r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }          \r\n  \r\n    nextPage() {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef } from '@angular/core';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource, MatTree } from '@angular/material';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\nimport { take, reduce, first } from 'rxjs/operators';\r\n\r\n\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;  \r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass'],\r\n  host:{\r\n    '(document:keyup)': 'onKeyDown($event)'\r\n  }\r\n})\r\nexport class TreeHelisaComponent implements OnInit,AfterViewInit {\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit:FormControl;\r\n  @ViewChild('tree') tree:MatTree<any>;\r\n  private selectedOptions = new Map<any, any>();\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data:Node;\r\n\r\n  \r\n  /**\r\n   * Establece si se mostraran las opciones de \r\n   * Creacion, ediciÃ³n y eliminacion del nodo\r\n   */\r\n  @Input() showOptionsNode:boolean = true; \r\n  \r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed = new EventEmitter<number | string>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue aÃ±adido\r\n   */\r\n  @Output() added = new EventEmitter<Node>();\r\n  @Output() collapseParent = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected = new EventEmitter<number | string>();\r\n  @Output() dobleClick = new EventEmitter<number | string>();\r\n  @Output() keypressDelete = new EventEmitter<number | string | null>();\r\n  @Output() keypressInsert = new EventEmitter<number | string | null>();\r\n  @Output() checkedOptionNode = new EventEmitter<number | string | null>();\r\n  @Output() uncheckedOptionNode = new EventEmitter<number | string | null>();\r\n  \r\n  treeControl = new NestedTreeControl<Node>(node => node.children);\r\n  dataSource = new MatTreeNestedDataSource<Node>();\r\n\r\n\r\n  isSingleClick: Boolean = true;  \r\n  currentNode: Node = null;\r\n\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService:TreeHelisaService,\r\n    private router:Router,\r\n    private elementRef:ElementRef) {    \r\n      \r\n    //cargar datos pasados por el @Input\r\n    if (!!this.data) {      \r\n      let data = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = [];     \r\n      this.treeControl.dataNodes = []; \r\n    }\r\n    \r\n  }\r\n\r\n  \r\n\r\n  ngOnInit() {     \r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable    \r\n    .subscribe((res) => {            \r\n      if(!!res && !!res.children){              \r\n        this.receivePage(res.children)\r\n      }else{\r\n        this.dataSource.data = [];\r\n        this.treeControl.dataNodes = [];\r\n      }    \r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected\r\n      .subscribe((res)=>{\r\n        if(!!this.data && !!this.data.children)\r\n        this.selectNode(this.data,res);\r\n      })\r\n\r\n    \r\n      this.treeHelisaService.refreshTreeObservable\r\n      .subscribe(res=>{\r\n        this.refreshTree();\r\n      })\r\n      \r\n      this.treeHelisaService.refreshTreeWithPaginationObservable\r\n      .subscribe(res=>{\r\n        this.refreshTreeWithPagination();\r\n      })    \r\n  }\r\n\r\n  ngAfterViewInit() {     \r\n    this.treeHelisaService.nodeExpand.subscribe(res=>{\r\n      if(res != null){\r\n        if(res){\r\n          this.tree.treeControl.expandAll();\r\n        }\r\n      }\r\n    })\r\n\r\n    this.treeHelisaService.nodeCollapse.subscribe(res=>{\r\n      if(res != null){\r\n        if(res){\r\n          this.tree.treeControl.collapseAll();\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n    this.treeHelisaService.expandOneNodeObservable\r\n      .subscribe(res => {        \r\n        if (res != undefined) {          \r\n          this.treeControl.expand(res);          \r\n        }\r\n      })\r\n\r\n      this.treeHelisaService.collapseOneNodeObservable\r\n      .subscribe(res => {        \r\n        if (res != undefined) {\r\n          this.treeControl.collapse(res);\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node:Node){\r\n\r\n    this.isSingleClick = true;\r\n        setTimeout(()=>{\r\n            if(this.isSingleClick){\r\n              \r\n              this.selectNode(this.data,node.id);    \r\n\r\n              // if(!!node && !node.children){\r\n              if(!!node){\r\n                this.nodeSelected.emit(node.id);\r\n                this.currentNode = node;\r\n              }\r\n            }\r\n         },350)   \r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n\r\n    if ((element.offsetHeight + element.scrollTop) >= element.scrollHeight) {      \r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node:Node){  \r\n    node.isEditable = true;\r\n  }\r\n\r\n  onAdd(node:Node){\r\n    // si no tiene hijos instanciar el array\r\n    if(!node.children){\r\n      node.children = [];\r\n    }\r\n    node.children.push(\r\n      {\r\n        id: null,\r\n        name: \"\",       \r\n        isSelected: false,\r\n        parent : node,\r\n        isEditable : true\r\n      }\r\n    );     \r\n    this.refreshTree();\r\n  }\r\n\r\n  onDelete(node:Node){ \r\n    // Remueve el nodo utilizando la libreria de lodash   \r\n    _.remove(node.parent.children, node);\r\n    \r\n    this.refreshTree();\r\n    this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node:Node,value:any){\r\n    \r\n      node.name = value;\r\n\r\n      if(node.id == null && node.name == \"\"){              \r\n        _.remove(node.parent.children, node);\r\n        this.refreshTree();\r\n      }\r\n      else if(node.id && node.id != null && node.name.trim() !== \"\"){\r\n        this.edited.emit(node);\r\n        node.isEditable = false;\r\n      }else if(!!node.id && node.id == null && node.name.trim() !== \"\"){\r\n        this.added.emit(node);\r\n        node.isEditable = false;\r\n      }         \r\n  }\r\n\r\n  onCancel(node:Node,value:string){\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if(node.id == null){\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();  \r\n    }\r\n\r\n    node.isEditable = false; \r\n  }\r\n\r\n  onDblClick(node:Node){\r\n    this.isSingleClick = false;\r\n    this.dobleClick.emit(node.id);\r\n  }\r\n\r\n  onKeyDown(event:KeyboardEvent){      \r\n    switch (event.key) {\r\n      case 'Delete':\r\n        this.keypressDelete.emit((!!this.currentNode && this.currentNode.id)?this.currentNode.id:null)\r\n        break;\r\n      case 'Insert':\r\n        this.keypressInsert.emit((!!this.currentNode && this.currentNode.id)?this.currentNode.id:null)\r\n        break;\r\n      case 'ArrowDown':        \r\n        this.moveDownIntoTree();\r\n        break;\r\n      case 'ArrowUp':          \r\n          this.moveUpIntoTree();\r\n        break;     \r\n    }\r\n    \r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  private moveUpIntoTree(){\r\n    if(!!this.data){\r\n      // si aun no hay ningun node seleccionado selecciona el primero\r\n      if(this.currentNode == null){\r\n        this.selectNode(this.data,this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      }else{\r\n        if(!!this.currentNode.parent && this.currentNode.id != null){\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          let index = this.currentNode.parent.children.indexOf(this.currentNode);\r\n          \r\n          if(this.currentNode.parent.id == null && index == 0){ \r\n            return 0;\r\n          }else{// si tiene nodos al mismo nivel salta al nodo anterior\r\n            if (index != undefined && index == 0) {\r\n              this.currentNode = this.currentNode.parent;\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } else { // si no tiene nodos al mismo nivel salta al nodo padre\r\n              this.currentNode = this.currentNode.parent.children[index - 1];\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } \r\n          }         \r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveDownIntoTree(){      \r\n    if(!!this.data){\r\n      if(this.currentNode == null){\r\n        this.selectNode(this.data,this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      }else{\r\n        if(!!this.currentNode){\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          let index = (!!this.currentNode && !!this.currentNode.parent)?this.currentNode.parent.children.indexOf(this.currentNode): null;\r\n          \r\n          // si tiene childrens pasa al primer children\r\n          if(!!this.currentNode.children  &&\r\n            this.currentNode.children.length > 0){\r\n\r\n            this.currentNode = this.currentNode.children[0];\r\n            this.selectNode(this.data,this.currentNode.id);\r\n            if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n          // Si es el ultimo nodo del array pasa al nodo hermano del padre (tio) hacia abajo\r\n          else if(index != undefined &&  \r\n            index == this.currentNode.parent.children.length - 1 &&\r\n            this.currentNode.parent.parent != null &&\r\n            this.currentNode.parent.parent.children != null &&\r\n            this.currentNode.parent.parent.children.length > 0){\r\n\r\n            let indexOfParent = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent); \r\n            this.currentNode = (this.currentNode.parent.parent.children[indexOfParent + 1] == undefined)? this.currentNode : this.currentNode.parent.parent.children[indexOfParent + 1];\r\n\r\n            this.selectNode(this.data,this.currentNode.id);\r\n            if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }else{ // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\r\n            this.currentNode = this.currentNode.parent.children[index + 1];\r\n            this.selectNode(this.data,this.currentNode.id);\r\n            if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild = (_: number, node: Node) => !!node.children && node.children.length > 0;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node:Node):string{\r\n      let result:string[]=[node.name];        \r\n      let concat:string=\"\";\r\n\r\n      if(node.parent){          \r\n        result.push(this.getDescription(node.parent))\r\n      }                \r\n\r\n\r\n      if(result.length == 1)\r\n          return node.name;\r\n\r\n      result = result.reverse();\r\n\r\n      for (let i = 0; i < result.length; i++) {            \r\n          let element = result[i];\r\n          concat = concat + element + ((i == result.length-1)?\"\":\",\");                \r\n      }\r\n              \r\n      return concat;\r\n  }\r\n\r\n\r\n  /**\r\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\r\n   */\r\n  private refreshTree(){\r\n    this.data = null;\r\n    let _data = this.dataSource.data; \r\n    this.dataSource.data = null;\r\n    this.dataSource.data = _data;\r\n    this.treeControl.dataNodes = _data;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())    \r\n   */\r\n  private refreshTreeWithPagination(){    \r\n    let _data = this.dataSource.data; \r\n    this.dataSource.data = null;\r\n    this.dataSource.data = _data;\r\n    this.treeControl.dataNodes = _data;\r\n  }\r\n\r\n\r\n\r\n\r\n  private goNextPage() {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()              \r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]) {    \r\n    if(!this.data){ this.data = {id:null,name:\"root\",isSelected:false}}\r\n    if (!this.data.children) { this.data.children = new Array<Node>(); this.treeHelisaConnect = new TreeHelisaConnect<Node>(); }    \r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach(node=>{\r\n      this.fillParent(node,this.data);\r\n    })\r\n\r\n    this.dataSource.data = this.data.children;    \r\n    this.treeControl.dataNodes = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   * @param node \r\n   * @param parent \r\n   */\r\n  private fillParent(node:Node,parent:Node){\r\n\r\n    node.parent = parent;\r\n    if(node.children && node.children.length > 0){\r\n      node.children.forEach(item=>{\r\n        this.fillParent(item,node);   \r\n      })      \r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   * @param node \r\n   * @param id \r\n   */\r\n  private selectNode(node:Node,id:number|string){ \r\n      \r\n      this.upSelectNode(node)      \r\n      \r\n      if(node.id == id){\r\n        node.isSelected = true\r\n        this.expandAllParents(node);\r\n        return node;\r\n      }else if (node.children != null){\r\n           var i;\r\n           var result = null;\r\n           for(i=0; result == null && i < node.children.length; i++){\r\n                result = this.selectNode(node.children[i], id);                \r\n           }\r\n           return result;\r\n      }\r\n      return null; \r\n  }\r\n\r\n  private expandAllParents(node:Node){\r\n    if(!!node && !!node.parent){\r\n      this.treeHelisaService.expandOneNode(node.parent);\r\n      this.expandAllParents(node.parent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   * @param node \r\n   */\r\n  private upSelectNode(node:Node){\r\n     node.isSelected = false;\r\n     if(!!node.children)\r\n     for(var i=0; i < node.children.length; i++){\r\n         this.upSelectNode(node.children[i]);                \r\n    }\r\n  }\r\n\r\n  getClassNode(node: Node): string[]{\r\n    let classNode = [];\r\n    if(node.isSelected) {\r\n      classNode.push(\"isSelected\");\r\n    }\r\n    if(node.classNode){\r\n      classNode.push(node.classNode);\r\n    }\r\n    return classNode;\r\n  }\r\n\r\n  onEditMode(node, editMode) {\r\n    this.getSelectedOptions(node).editMode = editMode;\r\n  }\r\n\r\n  onSelectOption(event, node) {\r\n    node.isCheckedOption = event.source.selected;\r\n    if (node.isCheckedOption)\r\n      this.checkedOptionNode.emit(node.id);\r\n    else\r\n      this.uncheckedOptionNode.emit(node.id);\r\n  }\r\n\r\n  getSelectedOptions(node: Node): any {\r\n    if (this.selectedOptions.has(node.id))\r\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\r\n    else\r\n      this.reloadSelectedOptions(node, false);\r\n    return this.selectedOptions.get(node.id);\r\n  }\r\n\r\n  private reloadSelectedOptions(node: Node, editMode: boolean) {\r\n    const array = new Array();\r\n    node.options.forEach(option => {\r\n      if (option.isCheckedOption)\r\n        array.push(option.id);\r\n    });\r\n    const obj = {formControl: new FormControl(array), editMode: editMode};\r\n    this.selectedOptions.set(node.id, obj);\r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\r\n\r\n@Injectable()\r\nexport class AutocompleteHelisaService<T> {\r\n\r\n  private emitChangeSource = new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\r\n  public dataSource$ = this.emitChangeSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>) {\r\n    this.emitChangeSource.next(options);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\r\n\r\nexport interface OptionAutocompleteHelisa<T> {\r\n  value: T;\r\n  displayText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-autocomplete',\r\n  templateUrl: './autocomplete-helisa.component.html',\r\n  styleUrls: ['./autocomplete-helisa.component.css'],\r\n  providers: [AutocompleteHelisaService]\r\n})\r\nexport class AutocompleteHelisaComponent<T> implements OnInit {\r\n\r\n  @Input() myControl = new FormControl();\r\n  @Input() options = new Array<OptionAutocompleteHelisa<T>>();\r\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\r\n  selectedValue: OptionAutocompleteHelisa<T>;\r\n  @Output() onSelectedValue: EventEmitter<T> = new EventEmitter<T>();\r\n  @Input() isRemote = false;\r\n  isLoading = false;\r\n\r\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.isRemote) {\r\n      this.autocompleteHelisaService.dataSource$.subscribe(data => {\r\n        this.options = data;\r\n        this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\r\n      });\r\n    }\r\n\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this._filter(value))\r\n    );\r\n\r\n  }\r\n\r\n  getService(): AutocompleteHelisaService<T> {\r\n    return this.autocompleteHelisaService;\r\n  }\r\n\r\n  private _filter(value): OptionAutocompleteHelisa<T>[] {\r\n    if (value instanceof Object) {\r\n      this.myControl.setValue(value.displayText);\r\n    } else {\r\n      if (!this.isRemote) {\r\n        const filterValue = value.toLowerCase().split(' ');\r\n        return this.options.filter(option => {\r\n          let ws = true;\r\n          filterValue.forEach(text => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\r\n          return ws;\r\n        }).splice(0, 5);\r\n      } else {\r\n        return this.options;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onSelected(event) {\r\n    this.selectedValue = event.option.value;\r\n    this.onSelectedValue.emit(this.selectedValue.value);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\n\r\n\r\nimport {MatAutocompleteModule} from '@angular/material';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatSidenavModule, MatGridListModule,  MatMenuModule, MatRadioModule, MatButtonModule, MatCheckboxModule, MatInputModule, MatOptionModule, MatSnackBarModule, MatTableModule, MatPaginatorModule, MatSortModule } from '@angular/material';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from \"@angular/material\";\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport {TableHelisaService} from \"./components/table-helisa/table-helisa.service\";\r\nimport {\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  EventColumn, TotalType\r\n} from \"./components/table-helisa/table-helisa.interface\";\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport {TreeHelisaService} from \"./components/tree-helisa/tree-helisa.service\";\r\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ \r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n\r\n\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  providers: [\r\n    TableHelisaService,\r\n    TreeHelisaService\r\n  ]\r\n})\r\nexport class HelisaLibModule { }\r\n","export enum ToastType {\r\n    DONE = \"done\",\r\n    ERROR = \"error\",\r\n    INFO = \"info\"\r\n}\r\n"]}