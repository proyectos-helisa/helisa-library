{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","node_modules/tslib/tslib.es6.js","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","ng://helisa-lib/lib/directives/options-scroll.directive.ts","ng://helisa-lib/lib/directives/tooltip.directive.ts","ng://helisa-lib/lib/directives/external-link.directive.ts","ng://helisa-lib/lib/pipes/external-link.pipe.ts","ng://helisa-lib/lib/components/alert-uncompleted-data-helisa/alert-uncompleted-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-lost-data-helisa/alert-lost-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-delete-data-helisa/alert-delete-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-uncompleted-selected-data-helisa/alert-uncompleted-selected-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-information-not-valid-helisa/alert-information-not-valid-helisa.component.ts","ng://helisa-lib/lib/components/combo-box-helisa/combo-box-helisa.component.ts","ng://helisa-lib/lib/components/alert-authorization-transaction-helisa/alert-authorization-transaction-helisa.component.ts","ng://helisa-lib/lib/components/paging-tree-helisa/paging-tree-helisa.component.ts","ng://helisa-lib/lib/components/alert-confirm-delete-data-helisa/alert-confirm-delete-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-define-residential-physical-structure-helisa/alert-define-residential-physical-structure-helisa.component.ts","ng://helisa-lib/lib/components/alert-define-commercial-structure-helisa/alert-define-commercial-structure-helisa.component.ts","ng://helisa-lib/lib/components/alert-define-parking-structure-helisa/alert-define-parking-structure-helisa.component.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/alert-uncompleted-data-helisa/alert-uncompleted-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-lost-data-helisa/alert-lost-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-delete-data-helisa/alert-delete-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-uncompleted-selected-data-helisa/alert-uncompleted-selected-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-information-not-valid-helisa/alert-information-not-valid-helisa.service.ts","ng://helisa-lib/lib/components/alert-authorization-transaction-helisa/alert-authorization-transaction-helisa.service.ts","ng://helisa-lib/lib/components/alert-confirm-delete-data-helisa/alert-confirm-delete-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-define-residential-physical-structure-helisa/alert-define-residential-physical-structure-helisa.service.ts","ng://helisa-lib/lib/components/alert-define-commercial-structure-helisa/alert-define-commercial-structure-helisa.service.ts","ng://helisa-lib/lib/components/alert-define-parking-structure-helisa/alert-define-parking-structure-helisa.service.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","nameField","nativeElement","focus","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","ViewChild","Output","placeholder","FormControl","Validators","required","requiredMessage","isFocused","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","subMessages","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","_this","content","title","okLabel","undefined","cancelLabel","hasCancel","AlertHelisaType","disableClose","keydownEvents","subscribe","event","code","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","Error","next","setTotal","emitTotal","addPage","emitNextPage","selectIndexRow","config","indexRowSelect","changeVisibilityButton","emitVisibilityButton$","changeVisibilityAllButtons","show","emitVisibilityAllButtons$","changeisCellSelection","emitIsCellSelection$","changeColumnsByTable","emitChangeColumns$","Subject","Array","emitVisibilityButton","asObservable","emitVisibilityAllButtons","emitIsCellSelection","emitChangeColumns","TableHelisaService","total","table","emitChangeSource","obj","page","change","emitVisibleButton$","totalReturn","nextPageReturn","emitVisibleButton","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","viewTables","toArray","index","addRowButton","showButton","forEach","element","isCellSelection","columns","getService","onSelectedDependency","selectedObject","selected","selectObject","onNextPage","nextPage","onTotal","onSort","sort","onDrop","drop","onAddRow","addRow","selectedCell","selectCell","onBookClicked","bookClicked","providers","ViewChildren","showToolTip","hideDelay","showDelay","__values","o","s","Symbol","iterator","m","i","call","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","DEFAULT","IDENTITY","NUMERIC","DOUBLE","InputHelisaComponent","Object","defineProperty","formControl","inputFormReal","valueChanges","statusChange","status","getMaskedValue","formControlMask","onFocus","setValidators","validator","disabled","disable","onlySelf","statusChanges","setErrors","key","nameInput","ngAfterViewInit","search","realValue","position","selectionStart","getRealValue","selectionEnd","str","InputHelisaType","maskedStr","j","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","indexOf","realStr","str_1","tslib_1.__values","str_1_1","strItem","match","str_2","str_2_1","haveDot","str_3","str_3_1","$event","Number","select","floatLabel","autocompleteMode","isSearch","blur","NORMAL","URL","USER","CODE_CALL","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","matTable","renderRows","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","columnConfiguration","hasSubtitle","displayedColumns","splice","addBookButton","columnCount","countSubtitle_1","showBookButton_1","subtitle","subtitleTemp","visible","rawData","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","dataSource$","prepareDataSource","idRowSelected","selectRow","rowType","RowType","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","addTotalGroup","MatTableDataSource","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","map","TotalType","getValueTooltip","searchText","text","lastSearch","isUser","scope","EventScope","onScroll","isScrollY","scrollY","scrollTop","scrollX","scrollLeft","scrollHeight","body","dblClickCell","selectedCells","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToRow","classToRow","configRowStylesFromColumn","classRow","isDragged","indexRowStartDrag","rowIndex","getRowIndex","pageY","array","dataBeforeDrag","moveItemInArray","stopPropagation","tableKeydown","currentIndex_1","findIndex","newSelection_1","scrollCount","reverse","Math","abs","preventDefault","filter","dragger","lastIndexRowDrag","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","ColumnType","MatSort","MatTable","read","ElementRef","showTitle","moment","moment_","MONTH_YEAR","STRICT","DateHelisaComponent","locale","dateToVisualize","dateFormControl","formHandler","incomingDate","dateFormat","format","TypeCalendarEnum","openDatePicker","showDatePicker","isClosed","timeout","setTimeout","datePickerShow","onKey","onBlur","clearTimeout","getStartView","typeCalendar","typeCalendarEnum","date","invalidFormat","isValid","isFromInputEvent","toDate","pipe","tap","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","incommingDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","errorMessage","Date","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","expandAllNodes","expand","emitExpandAllNodes","collapseAllNodes","collapse","emitCollapseAllNodes","refreshTree","emitRefreshTree","refreshTreeWithPagination","emitRefreshTreeWithPagination","expandOneNode","node","emitExpandOneNode","collapseOneNode","emitCollapseOneNode","BehaviorSubject","nodeSelected","dataSourceObservable","nodeExpand","nodeCollapse","refreshTreeObservable","refreshTreeWithPaginationObservable","expandOneNodeObservable","collapseOneNodeObservable","TreeHelisaConnect","TreeHelisaComponent","getDescription","parent","treeHelisaService","res","selectedNode","id","treeControl","dataNodes","selectNode","tree","expandAll","collapseAll","onRedirect","isSingleClick","currentNode","offsetHeight","onEdit","clickEditNode","onAdd","clickAddNode","onDelete","clickDeleteNode","onEdited","_.remove","trim","edited","isEditable","added","isDisabled","onDblClick","dobleClick","onKeyDown","keypressDelete","keypressInsert","moveDownIntoTree","moveUpIntoTree","indexOfParent","hasChild","t","datasourceData","treeHelisaConnect","rangeScrolled","isSelected","fillParent","reorderByOrderIndex","upSelectNode","getNodeById","expandAllParents","_b","_c","childrenNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","checkedOptionNode","uncheckedOptionNode","selectedOptions","has","reloadSelectedOptions","get","options","option","set","queue","curr","shift","apply","_.orderBy","x","orderIndex","console","log","Router","HostListener","router","elementRef","Map","removed","collapseParent","NestedTreeControl","MatTreeNestedDataSource","AutocompleteHelisaService","setDataSource","AutocompleteHelisaComponent","onScrollObservable","debounceTime","throttleTime","autocompleteHelisaService","filteredOptions","of","myControl","startWith","_checkRegex","_filter","displayFn","displayText","replace","filterValue_1","toLowerCase","onSelected","selectedValue","selectedValueEmmiter","getNextPage","isLoading","OptionsScrollDirective","removeScrollEventListener","autoComplete","panel","removeEventListener","ngOnDestroy","destroy","complete","st","pageYOffset","lastScrollTop","thresholdPercent","optionsScroll","scrollEvent","clientHeight","Directive","MatAutocomplete","opened","addEventListener","bind","takeUntil","closed","HelTooltipDirective","mouseover","currentContent","elemRef","innerText","toUpperCase","toString","isEllipsisActive","tooltip","offsetWidth","scrollWidth","MatTooltip","ExternalLinkDirective","ngOnChanges","hrefAttr","href","isLinkExternal","relAttr","targetAttr","isPlatformBrowser","platformId","includes","location","hostname","PLATFORM_ID","HostBinding","ExternalLinkPipe","transform","_i","Pipe","AlertUncompletedDataHelisaComponent","AlertLostDataHelisaComponent","AlertDeleteDataHelisaComponent","decorators","AlertUncompletedSelectedDataHelisaComponent","AlertInformationNotValidHelisaComponent","CLOSED","SELECT","INSERT","ComboBoxHelisaComponent","haveNextPage","listable","getData","pageSize","ComboBoxHelisaState","enabled","state","selectItem","selectedItem","selectEmitter","changeToInsert","insert","editable","AlertAuthorizationTransactionHelisaComponent","COLLAPSE","EXPAND","PagingTreeHelisaComponent","paramMode","treeMode","reset","paramService","service","items","loadData","searchNode","visibleObjects","allNode","sortItems","createNode","loadNextVisibleObjects","afterLoadData","lAdy","stack","idParent","getIdParentField","unshift","response","last","pop","getIdField","parentInformation","getNodeInformationById","nodeInformation","object","haveChildren","level","expanded","PagingTreeInitialMode","preorder","size","getNodeInformation","getLevelClass","nodeFrom","visibleLimit","visibleSize","collapseNode","expandNode","showNextPage","removeItem","removeById","idParent_1","Set","add","beginIndex","itemSearch","lastIndex","deletedItems","parentHaveChildren_1","deletedItem","delete","searchItem","addItem","indexParent","reSort","updateItem","nodeA","nodeB","ContentChild","AlertConfirmDeleteDataHelisaComponent","AlertDefineResidentialPhysicalStructureHelisaComponent","AlertDefineCommercialStructureHelisaComponent","AlertDefineParkingStructureHelisaComponent","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","AlertUncompletedDataHelisaService","AlertLostDataHelisaService","AlertDeleteDataHelisaService","AlertUncompletedSelectedDataHelisaService","AlertInformationNotValidHelisaService","AlertAuthorizationTransactionHelisaService","AlertConfirmDeleteDataHelisaService","AlertDefineResidentialPhysicalStructureHelisaService","AlertDefineCommercialStructureHelisaService","AlertDefineParkingStructureHelisaService","DONE","INFO"],"mappings":"2wEAAA,IAAAA,GAuBEA,EAAAC,UAAAC,SAAA,WACqB,KAAfC,KAAKC,OACPD,KAAKE,iBAAiBC,SAASH,KAAKC,OAEtCD,KAAKI,UAAUC,cAAcC,SAI/BT,EAAAC,UAAAS,OAAA,WACMP,KAAKE,iBAAiBM,OACxBR,KAAKS,KAAKC,KAAKV,KAAKE,iBAAiBD,QAIzCJ,EAAAC,UAAAa,SAAA,WACEX,KAAKY,OAAOF,4BAnCfG,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,wBACVC,SAAA,yfAKCC,EAAAA,gCACAA,EAAAA,+BACAA,EAAAA,qBACAA,EAAAA,yBACAA,EAAAA,yBACAC,EAAAA,UAASJ,KAAA,CAAC,2BAEVK,EAAAA,uBACAA,EAAAA,UAuBHtB,GApBE,SAAAA,IAXSG,KAAAoB,YAAsB,GACtBpB,KAAAE,iBAAgC,IAAImB,EAAAA,YAAY,GAAIC,EAAAA,WAAWC,UAC/DvB,KAAAwB,gBAA0B,wBAC1BxB,KAAAC,MAAgB,GAChBD,KAAAyB,WAAqB,EAGpBzB,KAAAS,KAA6B,IAAIiB,EAAAA,aACjC1B,KAAAY,OAA6B,IAAIc,EAAAA,aCb7C,IAAAC,GASEA,EAAA7B,UAAAC,SAAA,iCATDc,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,oYAKaY,EAAAA,OAAMd,KAAA,CAACe,EAAAA,yBAItBF,GAJE,SAAAA,EAA+CG,GAAA9B,KAAA8B,KAAAA,ECZjD,IAAAC,GAcEA,EAAAjC,UAAAkC,UAAA,SAAUC,EAAiBC,EAAiBC,GAC1CA,EAAcA,GAA4B,GAC1CnC,KAAKoC,SAASC,kBAAkBV,EAAsB,CACpDG,KAAM,CAACI,QAAOA,EAAED,KAAIA,EAAEE,YAAWA,GACjCG,SAAmC,IAAzBtC,KAAKuC,yCAbpBC,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,oDALLC,EAAAA,8IAWP,SAAAX,EAAoBK,GAAApC,KAAAoC,SAAAA,EAFpBpC,KAAAuC,kBAA4B,SCT1BI,MAAQ,QACRC,aAAe,gBCFnBC,GAgDEA,EAAA/C,UAAAC,SAAA,aAGA8C,EAAA/C,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,6BAxClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,0XAbOgC,EAAAA,gDA0BJpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBA2BZJ,GA7BE,SAAAA,EACSC,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QACpBnD,KAAKoD,MAAQtB,EAAKsB,MAClBpD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,WAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,YAErBvD,KAAKwD,UAAY1B,EAAKG,OAASwB,EAAgBb,aAC/CE,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,cC3ClC,IAAAoD,GAeEA,EAAAjE,UAAAkE,WAAA,SAAW/B,EAAuBmB,EAAeD,EAAiBE,EAAkBE,GAMlF,OALsDvD,KAAKiE,OAAOC,KAAKrB,EAAsB,CAC3FsB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAElB,KAAIA,EAAEoB,QAAOA,EAAEE,YAAWA,KAGnCa,mCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,oDARL4B,EAAAA,0IAYP,SAAAN,EAAmBE,GAAAjE,KAAAiE,OAAAA,ECOrB,IAAAK,GA2BEA,EAAAxE,UAAAyE,UAAA,WACE,OAAOvE,KAAKwE,QASdF,EAAAxE,UAAA2E,iBAAA,SAAiBC,EAA6BC,GAQ5C,QAR4C,IAAAA,IAAAA,GAAA,GACxCA,IACF3E,KAAK4E,WAAa5E,KAAK4E,WAAWC,MAAM,EAAIH,EAAYI,MAAYJ,EAAYI,MAAhB,MAE7DJ,EAAYI,OAASJ,EAAYI,OAAS9E,KAAK4E,WAAWG,UAC7DL,EAAYI,MAAQ9E,KAAK4E,WAAWG,SAEtC/E,KAAK4E,WAAWF,EAAYI,OAASJ,GACrBM,UAEd,IADAN,EAAYO,WAAa,QACrBP,EAAYQ,MACd,MAAM,IAAIC,MAAM,2BAEb,CACL,GAA+B,OAA3BT,EAAYO,WACd,MAAM,IAAIE,MAAM,4BAElBT,EAAYQ,MAAQR,EAAYO,WAAWF,OAE7C/E,KAAKwE,OAAOY,KAAKpF,KAAK4E,aAOxBN,EAAAxE,UAAAuF,SAAA,SAASxB,GACP7D,KAAKsF,UAAUF,KAAKvB,IAOtBS,EAAAxE,UAAAyF,QAAA,SAAQ1B,GACN7D,KAAKwF,aAAaJ,KAAKvB,IAGzBS,EAAAxE,UAAA2F,eAAA,SAAeC,GACT1F,KAAK4E,WAAWc,EAAOZ,SACzB9E,KAAK4E,WAAWc,EAAOZ,OAAOa,eAAiBD,EAAOC,eACtD3F,KAAKwE,OAAOY,KAAKpF,KAAK4E,cAS1BN,EAAAxE,UAAA8F,uBAAA,SAAuB/B,GACrB7D,KAAK6F,sBAAsBT,KAAKvB,IAQlCS,EAAAxE,UAAAgG,2BAAA,SAA2BC,GACzB/F,KAAKgG,0BAA0BZ,KAAKW,IAOtCzB,EAAAxE,UAAAmG,sBAAA,SAAsBpC,GACpB7D,KAAKkG,qBAAqBd,KAAKvB,IAOjCS,EAAAxE,UAAAqG,qBAAA,SAAsBtC,GACpB7D,KAAKoG,mBAAmBhB,KAAKvB,wBAjHhCrB,EAAAA,mDAoHD8B,GA9FE,SAAAA,IAlBAtE,KAAAwE,OAAoC,IAAI6B,EAAAA,QACxCrG,KAAA4E,WAAoC,IAAI0B,MAEhCtG,KAAA6F,sBAA2D,IAAIQ,EAAAA,QACvErG,KAAAuG,qBAA6DvG,KAAK6F,sBAAsBW,eAEhFxG,KAAAgG,0BAA8C,IAAIK,EAAAA,QAC1DrG,KAAAyG,yBAAgDzG,KAAKgG,0BAA0BQ,eAEvExG,KAAAkG,qBAA0D,IAAIG,EAAAA,QACtErG,KAAA0G,oBAA4D1G,KAAKkG,qBAAqBM,eAE9ExG,KAAAoG,mBAA+D,IAAIC,EAAAA,QAC3ErG,KAAA2G,kBAAiE3G,KAAKoG,mBAAmBI,eAEzFxG,KAAAsF,UAAwD,IAAIe,EAAAA,QAC5DrG,KAAAwF,aAA8C,IAAIa,EAAAA,QC9BpD,IAAAO,GAiBEA,EAAA9G,UAAAuF,SAAA,SAASwB,EAAyBC,GAChC9G,KAAK+G,iBAAiB3B,KAAK,CAAC4B,IAAKH,EAAOC,MAAKA,KAG/CF,EAAA9G,UAAAyF,QAAA,SAAQ0B,EAAWH,GACjB9G,KAAKwF,aAAaJ,KAAK,CAAC4B,IAAKC,EAAMH,MAAKA,KAO1CF,EAAA9G,UAAA8F,uBAAA,SAAuBsB,GACrBlH,KAAKmH,mBAAmB/B,KAAK8B,wBA9BhC1E,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,iHADd,SAAAmE,IAKU5G,KAAA+G,iBAAsE,IAAIV,EAAAA,QAC1ErG,KAAAwF,aAAqD,IAAIa,EAAAA,QAEjErG,KAAAoH,YAAoEpH,KAAK+G,iBAAiBP,eAC1FxG,KAAAqH,eAA0DrH,KAAKwF,aAAagB,eAEpExG,KAAAmH,mBAAuC,IAAId,EAAAA,QAInDrG,KAAAsH,kBAAyCtH,KAAKmH,mBAAmBX,eCZnE,IAAAe,GAwCEA,EAAAzH,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACEA,KAAKuE,YACLvE,KAAKwH,6BAA6BhC,aAAa5B,UAAS,SACrDC,GACCX,EAAKuE,aAAalC,QAAQ1B,EAAM/B,KAAMoB,EAAKwE,WAAWC,UAAU9D,EAAM+D,UAI1E5H,KAAKwH,6BAA6BlC,UAAU1B,UAAS,SAClDC,GACCX,EAAKuE,aAAapC,SAASxB,EAAM/B,KAAMoB,EAAKwE,WAAW7D,EAAM+D,UAKjE5H,KAAKwH,6BAA6BjB,qBAAqB3C,UAAS,SAC7D9B,GACC,GAAMA,GAAQA,EAAK8F,QAAUtE,UAAW,KAChCwD,EAAwB5D,EAAKsB,OAAO1C,EAAK8F,OACzCd,IACJA,EAAMe,aAAaC,WAAahG,EAAKA,SAO7C9B,KAAKwH,6BAA6Bf,yBAAyB7C,UAAS,SACjE9B,GACKA,IAASwB,WAAqB,MAARxB,GACxBoB,EAAKsB,OAAOuD,QAAO,SAAEC,GACbA,EAAQH,eACZG,EAAQH,aAAaC,WAAahG,OAQ5C9B,KAAKwH,6BAA6Bd,oBAAoB9C,UAAS,SAC5D9B,GACC,GAAMA,GAAQA,EAAK8F,QAAUtE,UAAW,KAChCwD,EAAwB5D,EAAKsB,OAAO1C,EAAK8F,OAC3Cd,IACFA,EAAMmB,gBAAkBnG,EAAKA,SAMrC9B,KAAKwH,6BAA6Bb,kBAAkB/C,UAAS,SAC1D9B,GACC,GAAMA,GAAQA,EAAK8F,QAAUtE,UAAW,KAChCwD,EAAwB5D,EAAKsB,OAAO1C,EAAK8F,OAC3Cd,IACFA,EAAMoB,QAAUpG,EAAKA,UAS/ByF,EAAAzH,UAAAqI,WAAA,WACE,OAAOnI,KAAKwH,8BAMdD,EAAAzH,UAAAyE,UAAA,WAAA,IAAArB,EAAAlD,KACEA,KAAKwH,6BAA6BjD,YAC/BX,UAAS,SAAEY,GACVtB,EAAKsB,OAASA,KAUpB+C,EAAAzH,UAAAsI,qBAAA,SAAqBR,EAAe/D,GAClC7D,KAAKqI,eAAiB,CAAET,MAAKA,EAAE9F,KAAM+B,GACrC7D,KAAKsI,SAAS5H,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,EAAM5D,QACxCD,KAAKuI,aAAa7H,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAQxC0D,EAAAzH,UAAA0I,WAAA,SAAWZ,EAAe/D,GACxB7D,KAAKyI,SAAS/H,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAQpC0D,EAAAzH,UAAA4I,QAAA,SAAQd,EAAe/D,GACrB7D,KAAK6G,MAAMnG,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAQjC0D,EAAAzH,UAAA6I,OAAA,SAAOf,EAAe/D,GACpB7D,KAAK4I,KAAKlI,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAQhC0D,EAAAzH,UAAA+I,OAAA,SAAOjB,EAAe/D,GACpB7D,KAAK8I,KAAKpI,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAOhC0D,EAAAzH,UAAAiJ,SAAA,SAASnB,GACP5H,KAAKgJ,OAAOtI,KAAKkH,IAGnBL,EAAAzH,UAAAmJ,aAAA,SAAarB,EAAe/D,GACtB7D,KAAKwE,OAAOoD,GAAOK,iBACrBjI,KAAKkJ,WAAWxI,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,KAIxC0D,EAAAzH,UAAAqJ,cAAA,SAAcvB,EAAe/D,GAC3B7D,KAAKoJ,YAAY1I,KAAK,CAAEkH,MAAKA,EAAE9F,KAAM+B,yBAtLxChD,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uBACVC,SAAA,u7BAEAqI,UAAW,CAAC/E,4DAhBLA,SAEAsC,yCAmBN0C,EAAAA,aAAYxI,KAAA,CAAC,mCACbG,EAAAA,wBAKAE,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,uBACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,0BAOAF,EAAAA,yBAKAA,EAAAA,SAqJHsG,GAlJE,SAAAA,EAAoBC,EAAuEC,GAAvEzH,KAAAwH,6BAAAA,EAAuExH,KAAAyH,aAAAA,EA9B3FzH,KAAAwE,OAAgC,GAEvBxE,KAAAuJ,aAAuB,EAKtBvJ,KAAAsI,SAA6C,IAAI5G,EAAAA,aACjD1B,KAAAuI,aAAsD,IAAI7G,EAAAA,aAC1D1B,KAAAyI,SAAkD,IAAI/G,EAAAA,aACtD1B,KAAA6G,MAA+C,IAAInF,EAAAA,aACnD1B,KAAA4I,KAA8C,IAAIlH,EAAAA,aAClD1B,KAAA8I,KAA8C,IAAIpH,EAAAA,aAClD1B,KAAAgJ,OAA+B,IAAItH,EAAAA,aACnC1B,KAAAkJ,WAAoD,IAAIxH,EAAAA,aACxD1B,KAAAoJ,YAAqD,IAAI1H,EAAAA,aACnE1B,KAAAqI,eAAsC,KAM7BrI,KAAAwJ,UAAoB,IAKpBxJ,KAAAyJ,UAAoB,IClC/B,SA+FgBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBA,OAAOC,SAAUC,EAAIH,GAAKD,EAAEC,GAAII,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAEE,KAAKN,GACrB,GAAIA,GAAyB,iBAAbA,EAAE5E,OAAqB,MAAO,CAC1CK,KAAM,WAEF,OADIuE,GAAKK,GAAKL,EAAE5E,SAAQ4E,OAAI,GACrB,CAAE1J,MAAO0J,GAAKA,EAAEK,KAAMvJ,MAAOkJ,KAG5C,MAAM,IAAIO,UAAUN,EAAI,0BAA4B,mCAGxD,SAAgBO,EAAOR,EAAGS,GACtB,IAAIL,EAAsB,mBAAXF,QAAyBF,EAAEE,OAAOC,UACjD,IAAKC,EAAG,OAAOJ,EACf,IAAmBU,EAAYC,EAA3BN,EAAID,EAAEE,KAAKN,GAAOY,EAAK,GAC3B,IACI,WAAc,IAANH,GAAsB,EAANA,QAAcC,EAAIL,EAAE5E,QAAQ3E,MAAM8J,EAAGC,KAAKH,EAAEpK,OAExE,MAAOwK,GAASH,EAAI,CAAEG,MAAOA,WAEzB,IACQJ,IAAMA,EAAE5J,OAASsJ,EAAIC,EAAU,YAAID,EAAEE,KAAKD,WAExC,GAAIM,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGX,SAAgBG,IACZ,IAAK,IAAIH,EAAK,GAAIP,EAAI,EAAGA,EAAIW,UAAU5F,OAAQiF,IAC3CO,EAAKA,EAAGK,OAAOT,EAAOQ,UAAUX,KACpC,OAAOO,SCzITM,QAAA,EAASC,SAAA,EAAUC,QAAA,EAASC,OAAA,+FAG9B,IAAAC,GA+CEC,OAAAC,eACIF,EAAAnL,UAAA,mBAAgB,KADpB,SACqBsL,GADrB,IAAAlI,EAAAlD,KAEEA,KAAKqL,cAAgBD,EACrBpL,KAAKqL,cAAcC,aAAa1H,UAAS,SAAE9B,GACzCoB,EAAKqI,aAAarI,EAAKmI,cAAcG,QACjCtI,EAAKuI,eAAe3J,KAAUoB,EAAKwI,gBAAgBzL,QACrDiD,EAAKgE,OAAOpF,GACRoB,EAAKzB,WACPyB,EAAKyI,QAAQ,SAInB3L,KAAK0L,gBAAgBE,cAAc5L,KAAKqL,cAAcQ,WACtD7L,KAAKkH,OAAOlH,KAAKqL,cAAcpL,OAE3BmL,EAAYU,UACd9L,KAAK0L,gBAAgBK,QAAQ,CAAEC,UAAU,IAE3ChM,KAAKqL,cAAcY,cAAcrI,UAAS,SACvC9B,GACCoB,EAAKqI,aAAazJ,GACdoB,EAAKzB,WACPyB,EAAKyI,QAAQ,yCAObV,EAAAnL,UAAAyL,aAAR,SAAqBzJ,GACN,YAATA,EACF9B,KAAK0L,gBAAgBQ,UAAU,CAAEC,IAAK,yBAEtCnM,KAAK0L,gBAAgBQ,UAAU,OAInCjB,EAAAnL,UAAAC,SAAA,WACMC,KAAKyB,WACPzB,KAAKoM,UAAU/L,cAAcC,SAIjC2K,EAAAnL,UAAAuM,gBAAA,aAcApB,EAAAnL,UAAAwM,OAAA,WACEtM,KAAKG,SAASO,KAAKV,KAAKuM,YAG1BtB,EAAAnL,UAAAoH,OAAA,SAAOrD,GACQ,MAATA,IACFA,GAAgB,QAEd2I,EAAmBxM,KAAKoM,UAAU/L,cAAcoM,eAC9C1H,EAAiBlB,EAAQA,EAAMkB,OAAS,EAC9C/E,KAAKuM,UAAYvM,KAAK0M,aAAa7I,GAC/B7D,KAAKyL,eAAezL,KAAKuM,aAAevM,KAAK0L,gBAAgBzL,QAC/DD,KAAK0L,gBAAgBvL,SAASH,KAAKyL,eAAezL,KAAKuM,YACvDC,GAAYxM,KAAKoM,UAAU/L,cAAcJ,MAAM8E,OAASA,EACxD/E,KAAKoM,UAAU/L,cAAcoM,eAAiBD,EAC9CxM,KAAKoM,UAAU/L,cAAcsM,aAAeH,GAE9CxM,KAAKqL,cAAclL,SAASH,KAAKuM,YAG3BtB,EAAAnL,UAAA2L,eAAR,SAAuBmB,GACrB,GAAW,MAAPA,EACF,OAAOA,EAGT,GADAA,GAAY,GACR5M,KAAKiC,OAAS4K,EAAgBhC,QAChC,OAAO+B,MAELE,EAAoB,GACxB,GAAI9M,KAAKiC,OAAS4K,EAAgB/B,SAChC,IAAK,IAAId,EAAY4C,EAAI7H,OAAS,EAAGgI,EAAY,EAAQ,GAAL/C,EAAQA,IAAK+C,IACvD,EAAJA,GAASA,EAAI,GAAM,IACrBD,EAAY9M,KAAKgN,kBAAoBF,GAEvCA,EAAYF,EAAI5C,GAAK8C,EAGzB,GAAI9M,KAAKiC,OAAS4K,EAAgB9B,QAChC,IAASf,EAAY4C,EAAI7H,OAAS,EAAGgI,EAAY,EAAQ,GAAL/C,EAAQA,IAAK+C,IACvD,EAAJA,GAASA,EAAI,GAAM,IACrBD,EAAY9M,KAAKiN,mBAAqBH,GAExCA,EAAYF,EAAI5C,GAAK8C,EAGzB,GAAI9M,KAAKiC,OAAS4K,EAAgB7B,OAAQ,CACxC,GAA2C,GAAvC4B,EAAIM,QAAQlN,KAAKgN,mBACnB,IAAShD,EAAY4C,EAAIM,QAAQlN,KAAKgN,mBAAoBhD,EAAI4C,EAAI7H,OAAQiF,IACxE8C,GAAaF,EAAI5C,GAGrB,IAASA,GAAoD,GAAvC4C,EAAIM,QAAQlN,KAAKgN,mBAA0BJ,EAAIM,QAAQlN,KAAKgN,mBAAqBJ,EAAI7H,QAAU,EACnHgI,EAAY,EAAQ,GAAL/C,EAAQA,IAAK+C,IAEpB,EAAJA,GAASA,EAAI,GAAM,IACrBD,EAAY9M,KAAKiN,mBAAqBH,GAExCA,EAAYF,EAAI5C,GAAK8C,EAGzB,OAAOA,GAGD7B,EAAAnL,UAAA4M,aAAR,SAAqBE,mBACnB,GAAW,MAAPA,EACF,OAAOA,EAETA,GAAY,OACRO,EAAkB,GACtB,GAAInN,KAAKiC,OAAS4K,EAAgBhC,QAChC,OAAO+B,EAET,GAAI5M,KAAKiC,OAAS4K,EAAgB/B,aAChC,IAAsB,IAAAsC,EAAAC,EAAAT,GAAGU,EAAAF,EAAAhI,QAAAkI,EAAA7M,KAAA6M,EAAAF,EAAAhI,QAAdmI,EAAOD,EAAArN,OACJuN,MAAM,iBAChBL,GAAWI,uGAIjB,GAAIvN,KAAKiC,OAAS4K,EAAgB9B,YAChC,IAAsB,IAAA0C,EAAAJ,EAAAT,GAAGc,EAAAD,EAAArI,QAAAsI,EAAAjN,KAAAiN,EAAAD,EAAArI,QAAdmI,EAAOG,EAAAzN,OACJuN,MAAM,WAChBL,GAAWI,uGAIjB,GAAIvN,KAAKiC,OAAS4K,EAAgB7B,OAAQ,KACpC2C,GAAmB,MAEvB,IAAsB,IAAAC,EAAAP,EAAAT,GAAGiB,EAAAD,EAAAxI,QAAAyI,EAAApN,KAAAoN,EAAAD,EAAAxI,OAAE,CAAtB,IAAMmI,IAAAA,EAAOM,EAAA5N,OACJuN,MAAM,UAAcD,IAAYvN,KAAKgN,oBAAuBW,KACtER,GAAWI,GAEbI,EAAUA,GAAYJ,IAAYvN,KAAKgN,wHAG3C,OAAOG,GAGTlC,EAAAnL,UAAA6L,QAAA,SAAQmC,GACD9N,KAAKiC,OAAS4K,EAAgB9B,SAAW/K,KAAKiC,OAAS4K,EAAgB7B,QACR,IAAlE+C,OAAO/N,KAAK0M,aAAa1M,KAAKoM,UAAU/L,cAAcJ,SACtDD,KAAKoM,UAAU/L,cAAc2N,8BA9MlCnN,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,8rBAQCC,EAAAA,0BACAA,EAAAA,gCAMAA,EAAAA,wBAGAA,EAAAA,yBAEAA,EAAAA,wBAKAA,EAAAA,oBACAA,EAAAA,wBAKAE,EAAAA,qBAGAA,EAAAA,0BAMAD,EAAAA,UAASJ,KAAA,CAAC,uCAKVG,EAAAA,SAkKHgK,GArKE,SAAAA,IArCiBjL,KAAAgN,kBAA4B,IAC5BhN,KAAAiN,mBAA6B,IAErCjN,KAAAoB,YAAsB,GACtBpB,KAAAiO,WAA0C,QAM1CjO,KAAAkO,kBAA4B,EAG5BlO,KAAAmO,UAAoB,EAEpBnO,KAAAyB,WAAqB,EAKrBzB,KAAA8L,UAAoB,EACpB9L,KAAAiC,KAAwB4K,EAAgBhC,QAKvC7K,KAAAG,SAAiC,IAAIuB,EAAAA,aAGrC1B,KAAAoO,KAA0B,IAAI1M,EAAAA,aAExC1B,KAAA0L,gBAA+B,IAAIrK,EAAAA,YAAY,IACvCrB,KAAAuM,UAAoB,GACpBvM,KAAAqL,cAA6B,IAAIhK,EAAAA,YAAY,WC3CrDgN,OAAA,EAAQC,IAAA,8CAyBRC,KAAA,EAAMC,UAAA,uDAINC,IAAA,EAAKC,QAAA,EAASC,MAAA,0EAIdC,KAAA,EAAMC,QAAA,EAASC,MAAA,4EAwCfC,OAAA,EAAQC,MAAA,+CAqBV,QAEEC,GAAAnP,UAAAoP,SAAA,SAASlI,EAAQmI,GACf,OAAOA,EAAOC,KAAKC,MAAM,KAAKC,OAAM,SAAE3F,EAAM4F,GAAkB,OAAA5F,GAAKA,EAAE4F,IAAQvI,IAEjFiI,IALA,SAAAA,MC9FA,QAWSO,GAAA1P,UAAA2P,QAAP,SAAeC,EAAmCpD,GAChD,MAAO,IAGTkD,GAAA1P,UAAA2I,SAAA,WACE,OAAOzI,KAAKiH,QAEhBuI,IAbE,SAAAA,KACExP,KAAKiH,KAAO,EACZjH,KAAK2P,YAAa,EAClB3P,KAAK4P,QAAS,UCuBhBC,YAAA,EAAaC,aAAA,EAAcC,IAAA,wFAK7B,IAAAC,IA4EEA,GAAAlQ,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACEA,KAAKyH,aAAaJ,eAAezD,UAAS,SACvC9B,GACMA,EAAKgF,OAAShF,EAAKgF,QAAU5D,GAChCA,EAAK+M,YAAYnO,EAAKkF,OAI5BhH,KAAKyH,aAAaL,YAAYxD,UAAS,SAAEsM,GACnCA,GACFhN,EAAKwM,aAAa3H,QAAO,SAAEoH,EAAsBgB,GAC3ChB,IAAWe,EAAKlJ,IAAImI,SACtBjM,EAAKkN,UAAUD,GAAOjN,EAAKmN,cAAclB,EAAQ,CAAEmB,IAAKJ,EAAKlJ,IAAI/G,MAAOiF,MAAOhC,EAAKgC,aAK5FlF,KAAKuQ,QAAQC,WAAW5M,UAAS,SAC9BC,OACOsL,EAAuBjM,EAAKwM,aAAae,KAAI,SAAEC,GAAoB,OAAAA,EAAEtB,OAASvL,EAAM8M,SAC1FxB,EAAOyB,cAAgB/M,EAAMgN,UAC7B3N,EAAK0F,KAAKlI,KAAK,CAAEyO,OAAMA,EAAE2B,qBAAsB5N,EAAKwM,aAAczN,KAAM8O,GAA8BnC,SAI1G5O,KAAKyH,aAAaH,kBAAkB1D,UAAS,SAC1C9B,GACKA,IAASwB,WAAqB,MAARxB,IACxBoB,EAAK2E,aAAaC,WAAahG,MAOvCkO,GAAAlQ,UAAAuM,gBAAA,WACMrM,KAAKiI,iBACPjI,KAAKgR,SAASC,cAIlB/F,OAAAC,eACI6E,GAAAlQ,UAAA,WAAQ,KADZ,SACaoR,GACXlR,KAAKiC,KAAOiP,EAAIC,GAAgBpC,OAASoC,GAAgBnC,MACzDhP,KAAKoR,4BAA8B,IAAI5B,GACnCxP,KAAKiC,OAASkP,GAAgBpC,OAChC/O,KAAKqR,aAELrR,KAAKoR,4BAA4BnK,wCAIrCiE,OAAAC,eACI6E,GAAAlQ,UAAA,sBAAmB,KADvB,SACwBwR,GADxB,IAAApO,EAAAlD,KAME,GAJAA,KAAKuR,aAAc,EACnBvR,KAAK0P,aAAe4B,EACpBtR,KAAKwR,iBAAiBC,OAAO,EAAGzR,KAAKwR,iBAAiBzM,QAElDuM,EAAqB,CACvB,GAAItR,KAAK0R,cAAe,KAChBC,EAAsBL,EAAoBvM,OAC5C6M,EAAwB,EACxBC,GAA0B,EAC9BP,EAAoBvJ,QAAO,SAAEoH,GACrBA,EAAO2C,WACXF,GAAgC,GAE5BC,GAAoC,eAAhB1C,EAAOC,OAC/ByC,GAAiB,SAGfE,EAAwBJ,IAAgBC,EACzCC,GACHP,EAAoB9G,KAAK,CACvB4E,KAAM,aACNhM,MAAO,GACP0O,SAAUC,EAAe,GAAKzO,UAC9B0O,SAAS,IAKfV,EAAoBvJ,QAAO,SAAEoH,GACvBA,EAAO6C,SACT9O,EAAKsO,iBAAiBhH,KAAK2E,EAAOC,MAE/BlM,EAAKqO,cACRrO,EAAKqO,YAAcpC,EAAO2C,WAAaxO,aAGvCtD,KAAKiS,UACPjS,KAAKiF,WAAajF,KAAKiS,SAG3BjS,KAAKkS,0BAA0BT,OAAO,EAAGzR,KAAKkS,0BAA0BnN,QACxE/E,KAAKmS,6BAA6BV,OAAO,EAAGzR,KAAKmS,6BAA6BpN,QAC9E/E,KAAKoS,2BAA2BX,OAAO,EAAGzR,KAAKoS,2BAA2BrN,QAC1E/E,KAAKqS,sBAAsBtK,QAAO,SAAEuK,GAAgB,OAAApP,EAAKgP,0BAA0B1H,KAAK8H,KACxFtS,KAAKuS,oBAAoBxK,QAAO,SAAEuK,GAAgB,OAAApP,EAAKiP,6BAA6B3H,KAAK8H,KACzFtS,KAAKwS,yBAAyBzK,QAAO,SAAEuK,GAAgB,OAAApP,EAAKkP,2BAA2B5H,KAAK8H,sCAK9FpH,OAAAC,eACI6E,GAAAlQ,UAAA,aAAU,KAMd,WACE,OAAOE,KAAKyS,iBARd,SACexN,GACbjF,KAAKyS,YAAcxN,EACnBjF,KAAKiS,QAAUhN,EACXjF,KAAKiS,SAAWjS,KAAK0S,qDAO3BxH,OAAAC,eACI6E,GAAAlQ,UAAA,mBAAgB,KADpB,SACqB6S,GACnB3S,KAAK2F,eAAiBgN,EAClB3S,KAAKiS,SAAWjS,KAAKiS,QAAQlN,UAC1B4N,GAAiB3S,KAAKiS,QAAQlN,QAAU4N,EAAgB,KAC3D3S,KAAK2F,eAAiB,GAExB3F,KAAK4S,UAAU,CAAE9Q,KAAM9B,KAAKiS,QAAQjS,KAAK2F,gBAAiBkN,QAASC,GAAQ/C,MAAO,qCAI9EC,GAAAlQ,UAAA4S,kBAAR,WAAA,IAGMK,EAHN7P,EAAAlD,KACQgT,EAAgC1M,QAClC2M,GAAqB,EAEzBjT,KAAK0P,aAAa3H,QAAO,SAAEoH,GACrBA,EAAO+D,YAAc5P,YAAcJ,EAAKjB,OAASkP,GAAgBnC,OAAS9L,EAAKkO,4BAA4BnK,MAAQ,KACrH/D,EAAKkN,UAAY,IAAI9J,MAAcpD,EAAKwM,aAAa3K,QACrD7B,EAAKiQ,YAAa,EAClBjQ,EAAK2D,MAAMnG,KAAK,CAAEyO,OAAMA,EAAE2B,qBAAsB5N,EAAKwM,aAAczN,KAAM8O,GAA8BjC,SAEzG5L,EAAKkQ,WAAalQ,EAAKkQ,YAAcjE,EAAOkE,WAC5CJ,EAAYA,GAAa9D,EAAOmE,YAE9BL,IACFjT,KAAKiS,QAAUjS,KAAKiS,QAAQrJ,KAAI,SAAE2K,EAAMC,OAClCC,EAAiB,EAMrB,OALAvQ,EAAKwM,aAAa3H,QAAO,SAAEoH,GACV,IAAXsE,IACFA,EAASvQ,EAAKwQ,QAAQH,EAAGC,MAGtBC,KAGXzT,KAAKiS,QAAQlK,QAAO,SAAE4L,IAChBV,GAAoC,IAAtBD,EAAWjO,QAAmF,IAAnE7B,EAAKwQ,QAAQV,EAAWA,EAAWjO,OAAS,GAAO,KAAO4O,KACjGZ,GACFC,EAAWxI,KAAK,CAAE1I,KAAMiR,EAAaF,QAASC,GAAQhD,eAExDkD,EAAWxI,KAAK,CAAE1I,KAAM6R,EAAKd,QAASC,GAAQjD,cAC9CkD,EAAc,IAAIzM,MAAkBpD,EAAKwM,aAAa3K,SAEpDkO,GAAa/P,EAAK0Q,cAAcb,EAAaY,GACjDX,EAAWxI,KAAK,CAAE1I,KAAM6R,EAAKd,QAASC,GAAQ/C,QAEhD/P,KAAK8B,KAAO,IAAI+R,EAAAA,mBAA+Bb,GAC3ChT,KAAKiS,SAAWjS,KAAKiS,QAAQlN,QAAU/E,KAAK2F,iBAAmB3F,KAAKqI,kBAClErI,KAAK2F,gBAAkB3F,KAAKiS,QAAQlN,QAAU/E,KAAK2F,eAAiB,KACtE3F,KAAK2F,eAAiB,GAExB3F,KAAK4S,UAAU,CAAE9Q,KAAM9B,KAAKiS,QAAQjS,KAAK2F,gBAAiBkN,QAASC,GAAQ/C,MAAO,KAI9EC,GAAAlQ,UAAA8T,cAAR,SAAsBE,EAA6BH,GACjD3T,KAAK0P,aAAa3H,QAAO,SAAEoH,EAAsBvH,GAC3CuH,EAAO+D,YAAc5P,YACnBwQ,EAASlM,KAAWtE,UACtBwQ,EAASlM,GAAS,CAAE0I,KAAM,IAAIrB,IAAmBC,SAASyE,EAAKxE,GAAoBjK,MAAO,IAE1F4O,EAASlM,GAAO0I,MAAQ,IAAIrB,IAAmBC,SAASyE,EAAKxE,GAC7D2E,EAASlM,GAAO1C,aAMhB8K,GAAAlQ,UAAA4T,QAAR,SAAgBH,EAAMC,OAChBO,EAAa,EAUjB,OATA/T,KAAK0P,aAAa3H,QAAO,SAAEoH,GACd,IAAP4E,GAAY5E,EAAOmE,aAChB,IAAIrE,IAAmBC,SAASqE,EAAGpE,IAAsB,IAAIF,IAAmBC,SAASsE,EAAGrE,GAC/F4E,GAAM,GACI,IAAI9E,IAAmBC,SAASqE,EAAGpE,IAAsB,IAAIF,IAAmBC,SAASsE,EAAGrE,KACtG4E,EAAK,MAIJA,GAGT/D,GAAAlQ,UAAAkU,oBAAA,SAAoBhN,OACdyM,EAAiB,GAMrB,OALAzT,KAAK0P,aAAa3H,QAAO,SAAEoH,GACrBA,EAAOmE,YACTG,IAAWA,EAAO1O,OAAS,MAAQ,KAAO,IAAIkK,IAAmBC,SAASlI,EAAKmI,MAG5EsE,GAGTzD,GAAAlQ,UAAAmU,aAAA,SAAarM,EAAesM,GAC1B,OAAOA,EAAKrB,UAAYC,GAAQjD,aAGlCG,GAAAlQ,UAAAqU,MAAA,SAAMvM,EAAesM,GACnB,OAAOA,EAAKrB,UAAYC,GAAQ/C,KAGlCC,GAAAlQ,UAAAsU,cAAA,SAAcxM,EAAesM,GAC3B,OAAOA,EAAKrB,UAAYC,GAAQhD,cAGlCE,GAAAlQ,UAAA0S,uBAAA,WACE,OAAOxS,KAAKwR,iBAAiB6C,IAAG,SAAEjF,GAAiB,MAAA,UAAYA,KAGjEY,GAAAlQ,UAAAuQ,cAAA,SAAclB,EAAsBrN,GAClC,OAAIqN,EAAO+D,YAAcoB,GAAU7F,IAAc3M,EAAKwO,IAClDnB,EAAO+D,YAAcoB,GAAU3F,MAAgB7M,EAAKoD,MACpDiK,EAAO+D,YAAcoB,GAAU5F,QAAkB,EAAK5M,EAAKwO,IAAMxO,EAAKoD,MACnE5B,WAGT0M,GAAAlQ,UAAAoP,SAAA,SAASlI,EAAQmI,GACf,OAAO,IAAIF,IAAmBC,SAASlI,EAAKmI,IAG9Ca,GAAAlQ,UAAAyU,gBAAA,SAAgBvN,EAAQmI,GACtB,OAAInP,KAAKuJ,aACA,IAAI0F,IAAmBC,SAASlI,EAAKmI,GAErC,MAIXa,GAAAlQ,UAAA0U,WAAA,SAAWC,GACTzU,KAAK0U,WAAaD,EAClBzU,KAAKsM,OAAO5L,KAAK,CAAE+T,KAAIA,EAAE3D,qBAAsB9Q,KAAK0P,gBAGtDM,GAAAlQ,UAAA8S,UAAA,SAAUe,EAAiBgB,EAAiBxF,GACtCwE,IAAQrQ,WAAqB,OAARqQ,IAGpBxE,IAAW7L,WAAwB,OAAX6L,GAAuBA,GAA0B,eAAhBA,EAAOC,MACnEpP,KAAKqI,eAAiBsL,EAAQ,KAC9B3T,KAAKgO,OAAOtN,KAAKV,KAAKqI,gBACtBrI,KAAKuI,aAAa7H,KAAK,CAAET,MAAOD,KAAKqI,eAAgBuM,MAAOD,EAASE,EAAWtG,KAAOsG,EAAWrG,aACvFW,GAA0B,eAAhBA,EAAOC,OACxBpP,KAAKqI,iBAAmBsL,EAAI7R,OAC9B9B,KAAKqI,eAAiBsL,EAAQ,KAC9B3T,KAAKgO,OAAOtN,KAAKV,KAAKqI,gBACtBrI,KAAKuI,aAAa7H,KAAK,CAAET,MAAOD,KAAKqI,eAAgBuM,MAAOD,EAASE,EAAWtG,KAAOsG,EAAWrG,aAEpGxO,KAAKoJ,YAAY1I,KAAKV,KAAKqI,mBAI/B2H,GAAAlQ,UAAAgV,SAAA,SAASjR,OAEHkR,EADE/M,EAA0BnE,EAAY,OAGxC7D,KAAKgV,UAAYhN,EAAQiN,YAC3BF,GAAY,EACZ/U,KAAKgV,QAAUhN,EAAQiN,UACvBjV,KAAKkV,QAAUlN,EAAQmN,YAGrBnV,KAAKkV,UAAYlN,EAAQmN,aAC3BJ,GAAY,EACZ/U,KAAKgV,QAAUhN,EAAQiN,UACvBjV,KAAKkV,QAAUlN,EAAQmN,YAGpBnN,EAAQoN,aAAepN,EAAQiN,UAAY,KAASF,GACvD/U,KAAKqR,cAKDrB,GAAAlQ,UAAAuR,WAAR,WACOrR,KAAKoR,4BAA4BzB,YAAe3P,KAAKoR,4BAA4BxB,SACpF5P,KAAKoR,4BAA4BxB,QAAS,EAC1C5P,KAAKyI,SAAS/H,KAAK,CACjBuG,KAAMjH,KAAKoR,4BAA4B3I,WACvC4M,KAAMrV,KAAKoR,4BAA4B3B,QAAQzP,KAAK0P,aAAc1P,KAAK0U,gBAKrE1E,GAAAlQ,UAAAmQ,YAAR,SAAoBnO,GACb9B,KAAKiS,UACRjS,KAAKiS,QAAU,IAAI3L,OAErBtG,KAAKiS,QAAUjS,KAAKiS,QAAQrH,OAAO9I,GACnC9B,KAAKiF,WAAajF,KAAKiS,QACvBjS,KAAKoR,4BAA4BzB,WAA6B,IAAhB7N,EAAKiD,OACnD/E,KAAKoR,4BAA4BxB,QAAS,GAG5CI,GAAAlQ,UAAAwV,aAAA,WACEtV,KAAKkJ,WAAWxI,KAAKV,KAAkB,gBAGzCgQ,GAAAlQ,UAAAmJ,aAAA,SAAajB,EAAqBmH,GAChCnP,KAAK4S,UAAU5K,GAAS,EAAMmH,GAE9BnP,KAAKuV,cAAgB,CAAEpG,OAAMA,EAAEwE,IAAK3L,GACpChI,KAAKkJ,WAAWxI,KAAKV,KAAKuV,gBAG5BvF,GAAAlQ,UAAA0V,eAAA,SAAe7B,EAAiBxE,GAC9B,SAAInP,KAAKiI,iBACmB,MAAtBjI,KAAKuV,eACHvV,KAAKuV,cAAcpG,OAAOC,OAASD,EAAOC,MAC3CpP,KAAKuV,cAAiB,IAAgBzT,OAAS6R,EAAI7R,OAQ5DkO,GAAAlQ,UAAA2V,eAAA,SAAe9B,EAAQxE,GAAvB,IAAAjM,EAAAlD,KACQ0V,EAA6B,IAAIpP,MACvC,GAAItG,KAAK2V,iBAAkB,KACnBC,EAA6B5V,KAAK2V,iBAAiBlF,KAAI,SAAEC,GAC7D,OAAOA,EAAEmF,WAAa3S,EAAKgM,SAASyE,EAAKxE,KAEvCyG,GACFF,EAAYlL,KAAKoL,EAAME,WAM3B,OAHI3G,EAAO4G,aACTL,EAAYlL,KAAK2E,EAAO4G,aAEnBL,GAGT1F,GAAAlQ,UAAAkW,cAAA,SAAcrC,GAAd,IAAAzQ,EAAAlD,KACQiW,EAA4B,IAAI3P,MAItC,GAHIqN,IAAQ3T,KAAKqI,gBAAmBrI,KAAKiI,iBACvCgO,EAAWzL,KAAK,IAEdxK,KAAKkW,0BAA2B,KAC5BN,EAA4B5V,KAAKkW,0BAA0BzF,KAAI,SAAEC,GACrE,OAAOA,EAAE5O,OAASoB,EAAKgM,SAASyE,EAAKjD,EAAEvB,UAErCyG,GACFK,EAAWzL,KAAKoL,EAAMO,UAG1B,OAAOF,GAGTjG,GAAAlQ,UAAA+I,OAAA,SAAOhF,GACL,GAAI7D,KAAKoW,WAAuC,GAA1BpW,KAAKqW,kBAAwB,KAC3CC,EAAmBtW,KAAKuW,YAAY1S,EAAM2S,OAC1CC,EAAsBzW,KAAK0W,eAAe5U,KAC1CmQ,EAAejS,KAAKiS,QAC1B0E,EAAAA,gBAAgBF,EAAOzW,KAAKqW,kBAAmBC,GAC/CK,EAAAA,gBAAgB1E,EAASjS,KAAKqW,kBAAmBC,GACjDtW,KAAK8I,KAAKpI,KAAK,CAAET,MAAOwW,EAAMH,GAAc,KAAOxR,MAAOwR,IAC1DtW,KAAKiS,QAAUA,EACfjS,KAAK8B,KAAO,IAAI+R,EAAAA,mBAAmB4C,GACnC5S,EAAM+S,oBAIV5G,GAAAlQ,UAAA+W,aAAA,SAAahT,GAAb,IAAAX,EAAAlD,KACE,IAAKA,KAAKiI,gBAAiB,KACrB6O,EAAuB9W,KAAK8B,KAAKA,KAAKiV,UAAS,SAAEpD,GAAoB,OAAAA,EAAI7R,OAASoB,EAAKmF,iBACvF2O,GAAwB,GACV,cAAdnT,EAAMsI,MACRnM,KAAKiX,cACLjX,KAAK8B,KAAKA,KAAKiG,QAAO,SAAE4L,EAAiB/L,IACjB,KAAlBoP,GAAgCF,EAARlP,GAAwB+L,EAAId,UAAYC,GAAQ/C,MAC1EiH,EAAepP,MAIH,YAAd/D,EAAMsI,MACRnM,KAAKiX,cACLH,EAAe9W,KAAK8B,KAAKA,KAAKiD,OAAS+R,EAAe,EACtD9W,KAAK8B,KAAKA,KAAKoV,UAAUnP,QAAO,SAAE4L,EAAiB/L,IAC3B,KAAlBoP,GAAgCF,EAARlP,GAAwB+L,EAAId,UAAYC,GAAQ/C,MAC1EiH,EAAepP,KAGnB5H,KAAK8B,KAAKA,KAAKoV,WACO,KAAlBF,IACFA,EAAehX,KAAK8B,KAAKA,KAAKiD,OAASiS,EAAe,KAGpC,KAAlBA,GACFhX,KAAK4S,UAAU5S,KAAK8B,KAAKA,KAAKkV,IAAe,GAEb,GAA9BG,KAAKC,IAAIpX,KAAKiX,aAChBjX,KAAKiX,YAAc,EAEnBpT,EAAMwT,mBAQZrH,GAAAlQ,UAAAiJ,SAAA,WACE/I,KAAKgJ,OAAOtI,QAIdsP,GAAAlQ,UAAAyS,kBAAA,WAQE,OAPoBvS,KAAK0P,aAAa2E,IAAG,SAAElF,EAAsBvH,GAC/D,OAAIuH,EAAO6C,SAAW7C,EAAO2C,WAAaxO,UACjC,WAAasE,EAEb,OAER0P,OAAM,SAAExV,GAAiB,OAAQ,MAARA,KAI9BkO,GAAAlQ,UAAAuS,oBAAA,WACE,OAAOrS,KAAK0P,aAAa4H,OAAM,SAAEnI,GAC/B,OAAAA,EAAO6C,SAAW7C,EAAO/L,QAAUE,YACnC+Q,IAAG,SAAE/B,GAAsB,OAAAA,EAAIlD,QAGnCY,GAAAlQ,UAAAyX,QAAA,SAAQ1T,GACN,GAAI7D,KAAKoW,WAAuC,GAA1BpW,KAAKqW,kBAAwB,KAC3CC,EAAmBtW,KAAKuW,YAAY1S,EAAM2S,OAChD,GAAIF,IAAatW,KAAKwX,iBAAkB,CACtCxX,KAAKwX,iBAAmBlB,MAElBG,EAAK/L,EAAqB1K,KAAK0W,eAAe5U,MACpD6U,EAAAA,gBAAgBF,EAAOzW,KAAKqW,kBAAmBC,GAC/CtW,KAAK8B,KAAO,IAAI+R,EAAAA,mBAAmB4C,GAGrC,OADA5S,EAAMwT,kBACC,IAIXrH,GAAAlQ,UAAA2X,UAAA,SAAU5T,GACR7D,KAAKqW,kBAAoBrW,KAAKuW,YAAY1S,EAAM2S,OAChDxW,KAAKwX,iBAAmBxX,KAAKqW,kBAC7BrW,KAAK0W,eAAiB1W,KAAK8B,MAGrBkO,GAAAlQ,UAAAyW,YAAR,SAAoBC,GAGlB,QAFIkB,EAAoB,EACpBC,EAAyB3X,KAAK4X,eAAevX,cAC3B,OAAdsX,GAAsC,IAAdD,GAC9BA,EAAYC,EAAUD,UACtBC,EAAYA,EAAUE,cAIxB,QAFIvB,GAAoB,EAClBwB,EAAuB9X,KAAK+X,gBAAgB1X,cAAc2X,SAAS,GAAGA,SACnEhO,EAAY,EAAGA,EAAI8N,EAAK/S,OAAQiF,IAEnCwM,EAAQkB,EADcI,EAAK9N,GACH0N,UAAY1X,KAAK4X,eAAevX,cAAc4U,YACxEqB,EAAWtM,GAIf,OADIsM,EAAW,IAAKA,EAAW,GACxBA,GAGTpL,OAAAC,eAAI6E,GAAAlQ,UAAA,aAAU,KAAd,WACE,OAAOmY,wDA1iBVpX,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAA,m6QAlBO4F,uCA6CN1F,EAAAA,UAASJ,KAAA,CAACoX,EAAAA,2BACVhX,EAAAA,UAASJ,KAAA,CAACqX,EAAAA,mCACVjX,EAAAA,UAASJ,KAAA,CAACqX,EAAAA,SAAU,CAAEC,KAAMC,EAAAA,qCAC5BnX,EAAAA,UAASJ,KAAA,CAAC,gCAEVK,EAAAA,sBACAA,EAAAA,uBACAA,EAAAA,uBAKAA,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,0BACAF,EAAAA,+BACAA,EAAAA,qBACAA,EAAAA,gCACAA,EAAAA,yCACAA,EAAAA,6BACAA,EAAAA,oBACAE,EAAAA,0BACAF,EAAAA,4BACAA,EAAAA,sBACAE,EAAAA,4BACAA,EAAAA,8BACAF,EAAAA,2BACAA,EAAAA,yBASAA,EAAAA,yBAKAA,EAAAA,wBA8CAA,EAAAA,mCAWAA,EAAAA,0BAoDAA,EAAAA,gCAWAA,EAAAA,SA8WH+O,IAneE,SAAAA,GAAoBvI,GAAAzH,KAAAyH,aAAAA,EA/DpBzH,KAAAwR,iBAA6B,GAC7BxR,KAAAkS,0BAAsC,GACtClS,KAAAmS,6BAAyC,GACzCnS,KAAAoS,2BAAuC,GAIvCpS,KAAAiC,KAAwBkP,GAAgBnC,MAEhChP,KAAAiX,YAAsB,EAC9BjX,KAAAuR,aAAuB,EACfvR,KAAAqW,mBAA6B,EAC7BrW,KAAAwX,kBAA4B,EAC5BxX,KAAA0W,eAAyC,KACzC1W,KAAAyS,YAAwB,GACxBzS,KAAAkV,QAAkB,EAClBlV,KAAAgV,QAAkB,EAOhBhV,KAAA4I,KAAkC,IAAIlH,EAAAA,aACtC1B,KAAA6G,MAAmC,IAAInF,EAAAA,aACvC1B,KAAAsM,OAAoC,IAAI5K,EAAAA,aAKxC1B,KAAAgO,OAA0B,IAAItM,EAAAA,aAC9B1B,KAAAkJ,WAAoC,IAAIxH,EAAAA,aACxC1B,KAAAuI,aAA8C,IAAI7G,EAAAA,aAClD1B,KAAAyI,SAAgD,IAAI/G,EAAAA,aACrD1B,KAAAsY,WAAqB,EACrBtY,KAAAiI,iBAA2B,EAK1BjI,KAAA8I,KAAqC,IAAIpH,EAAAA,aAC1C1B,KAAAoW,WAAqB,EACrBpW,KAAA6H,aAA6B,CAAEC,YAAY,EAAO2M,KAAM,IACvDzU,KAAAgJ,OAA6B,IAAItH,EAAAA,aACjC1B,KAAAoJ,YAA+B,IAAI1H,EAAAA,aACpC1B,KAAA0R,eAAyB,EACzB1R,KAAAuJ,aAAuB,EAChCvJ,KAAAmT,YAAsB,EACtBnT,KAAAoT,YAAsB,EAObpT,KAAAwJ,UAAoB,IAKpBxJ,KAAAyJ,UAAoB,QC3GzB8O,GAAyBC,MAM7BnK,OAAS,QACToK,WAAa,cACbC,OAAS,cAsDTC,GAAA7Y,UAAAC,SAAA,WAQE,GAPAwY,GAAOK,OAAO5Y,KAAK4Y,QACnB5Y,KAAK6Y,gBAAkB,IAAIxX,EAAAA,YAAY,GAAIrB,KAAK8Y,gBAAgBjN,WAChE7L,KAAK+Y,cAK8B,KAA/B/Y,KAAK8Y,gBAAgB7Y,OAA+C,OAA/BD,KAAK8Y,gBAAgB7Y,MAAgB,KACtE+Y,EAAuBT,GAAOvY,KAAK8Y,gBAAgB7Y,MAAOD,KAAKiZ,YAAYC,OAAOlZ,KAAKiZ,YACxE,iBAAjBD,IACFhZ,KAAK6Y,gBAAgB1Y,SAAS6Y,GAC9BhZ,KAAK8Y,gBAAgB3Y,SAASH,KAAK8Y,gBAAgB7Y,UAMzDiL,OAAAC,eAAIwN,GAAA7Y,UAAA,mBAAgB,KAApB,WACE,OAAOqZ,oCAGTR,GAAA7Y,UAAAsZ,eAAA,WAAA,IAAAlW,EAAAlD,KACMA,KAAKqZ,iBAAmBrZ,KAAKsZ,WAC/BtZ,KAAKsZ,UAAW,EAChBtZ,KAAKuZ,QAAUC,WAAU,WACvBtW,EAAKuW,eAAevV,QACnB,OAIPyU,GAAA7Y,UAAA4Z,MAAA,SAAM7V,GACc,MAAdA,EAAMsI,KAAenM,KAAKqZ,iBAC5BrZ,KAAK2Z,SACL3Z,KAAKsZ,UAAW,EAChBtZ,KAAKyZ,eAAevV,SAIxByU,GAAA7Y,UAAA6Z,OAAA,WACEC,aAAa5Z,KAAKuZ,SAClBvZ,KAAKsZ,UAAW,GAMlBX,GAAA7Y,UAAA+Z,aAAA,WAEE,OAAI7Z,KAAK8Z,eAAiB9Z,KAAK+Z,iBAAiBtB,WACvC,cACEzY,KAAK8Z,aAAiB9Z,KAAK+Z,iBAAiBrB,OAC9C,UAMHC,GAAA7Y,UAAAiZ,YAAR,WAAA,IAAA7V,EAAAlD,KACMA,KAAK8Z,eAAiB9Z,KAAK+Z,iBAAiBrB,OAC9C1Y,KAAK6Y,gBAAgBvN,aAAa1H,UAAS,SAAEoW,GACzC9W,EAAK+W,eAAgB,MACfC,EAAmB3B,GAAOyB,EAAM9W,EAAK+V,YAAY,GAAMiB,UACvDzG,EAAiB8E,GAAOyB,EAAM9W,EAAK+V,YAAYC,OAAOhW,EAAK+V,aAC3DxF,GAAsB,iBAAXA,GAA8ByG,EAIzCzG,IACCvQ,EAAKiX,iBAMRX,WAAU,WACRtW,EAAKiX,kBAAmB,GACvB,OAPHjX,EAAKiX,kBAAmB,EACxBjX,EAAK2V,gBAAgB1Y,SAASoY,GAAO9E,EAAQvQ,EAAK+V,YAAYC,OAAOhW,EAAK+V,aAC1E/V,EAAK4V,gBAAgB3Y,SAASoY,GAAO9E,EAAQvQ,EAAK+V,YAAYmB,UAC9DlX,EAAKiX,kBAAmB,IAR1BjX,EAAK+W,eAAgB,IAkB3Bja,KAAK6Y,gBAAgBvN,aAClB+O,KACCC,EAAAA,IAAG,SAAEN,GACCA,EAAKjV,OAAS7B,EAAK+V,WAAWlU,OAChC7B,EAAK+W,eAAgB,EAErB/W,EAAK+W,eAAgB,IAGzB3C,EAAAA,OAAM,SAAE0C,GAAiB,OAAAA,EAAKjV,SAAW7B,EAAK+V,WAAWlU,UAE1DnB,UAAS,SAAEoW,GACV9W,EAAK+W,eAAgB,MACfC,EAAmB3B,GAAOyB,EAAM9W,EAAK+V,YAAY,GAAMiB,UACvDzG,EAAiB8E,GAAOyB,EAAM9W,EAAK+V,YAAYC,OAAO,cAE5D,IAAMzF,GAAsB,iBAAXA,GAA8ByG,GAK/C,GAAMzG,EACJ,GAAKvQ,EAAKiX,iBAqBRX,WAAU,WACRtW,EAAKiX,kBAAmB,GACvB,UAvBuB,CAC1BjX,EAAKiX,kBAAmB,MAClBI,EAAsB9G,EAAOpE,MAAM,KAEnCmL,EAAeC,WAAWF,EAAU,IACpCG,EAAgBD,WAAWF,EAAU,IACrCI,EAAcF,WAAWF,EAAU,IAEzCrX,EAAK8W,KAAKY,YAAYJ,GACtBtX,EAAK8W,KAAKa,QAAQF,GAClBzX,EAAK8W,KAAKc,SAASJ,EAAQ,GAGvBxX,EAAK4W,eAAiBX,GAAiBV,aACzCvV,EAAK8W,KAAOzB,GAAOrV,EAAK8W,MAAMe,MAAM,SAASX,UAG/ClX,EAAK2V,gBAAgB1Y,SAASoY,GAAOrV,EAAK8W,KAAM,cAAcd,OAAOhW,EAAK+V,aAC1E/V,EAAK4V,gBAAgB3Y,SAAS+C,EAAK8W,MACnC9W,EAAKiX,kBAAmB,QAxB1BjX,EAAK+W,eAAgB,IAoC7Bja,KAAK8Y,gBAAgBxN,aAClB1H,UAAS,SAAEoW,OACJgB,EAAwBzC,GAAOyB,EAAM9W,EAAK+V,YAAYC,OAAOhW,EAAK+V,YACrC,KAA/B/V,EAAK4V,gBAAgB7Y,OAAkC,iBAAlB+a,GACvC9X,EAAK2V,gBAAgB1Y,SAAS6a,MAStCrC,GAAA7Y,UAAAmb,qBAAA,SAAqBC,EAAiCC,GAEpD,GAAInb,KAAK8Z,eAAiBX,GAAiBV,WAAY,CACrD0C,EAAWpY,YACLiX,EAAazB,GAAO2C,GAAiBH,MAAM,SAASX,SAE1Dpa,KAAK6Y,gBAAgB1Y,SAASoY,GAAOyB,EAAM,cAAcd,OAAOlZ,KAAKiZ,aACrEjZ,KAAK8Y,gBAAgB3Y,SAAS6Z,KAOlCrB,GAAA7Y,UAAAsb,WAAA,SAAWnZ,EAAc4B,GACvB7D,KAAK6Y,gBAAgB1Y,SAASoY,GAAO1U,EAAM5D,MAAO,cAAciZ,OAAOlZ,KAAKiZ,aAC5EjZ,KAAK8Y,gBAAgB3Y,SAAS0D,EAAM5D,OACpCD,KAAKkH,OAAOxG,KAAKmD,EAAM5D,OACvBD,KAAKsZ,UAAW,GAGlBX,GAAA7Y,UAAAub,gBAAA,WACE,OAAOrb,KAAKsb,aAAetb,KAAKiZ,iCA7NnCpY,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,SAAA,4lCAKCE,EAAAA,UAASJ,KAAA,CAAC,8BACVG,EAAAA,+BACAA,EAAAA,0BAQAA,EAAAA,sBACAA,EAAAA,4BACAA,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,sBACAE,EAAAA,6BAQAF,EAAAA,SAkMH0X,IApLE,SAAAA,KApCS3Y,KAAAiO,WAA0C,QAC1CjO,KAAA8Y,gBAA+B,IAAIzX,EAAAA,YAAY,IAChDrB,KAAAga,KAAa,IAAIuB,KAOhBvb,KAAAiZ,WAAqB,aACrBjZ,KAAA4Y,OAAiB,KACjB5Y,KAAAsb,aAAuB,wCACvBtb,KAAAoB,YAAsBpB,KAAKiZ,WAC3BjZ,KAAAqZ,gBAA0B,EACzBrZ,KAAAkH,OAA6B,IAAIxF,EAAAA,aAC3C1B,KAAAsZ,UAAoB,EAOXtZ,KAAA8Z,aAAiCX,GAAiB9K,OAOnDrO,KAAAma,kBAA4B,EAKpCna,KAAAia,eAAyB,EC1D3B,IAAAuB,IA0CIA,GAAA1b,UAAA2b,mBAAA,SAAmBC,GACf1b,KAAK2b,iBAAiBvW,KAAKsW,IAI/BF,GAAA1b,UAAA8b,iBAAA,SAAiB9Z,GACb9B,KAAK6b,eAAezW,KAAKtD,IAG7B0Z,GAAA1b,UAAAgc,eAAA,SAAeC,GACX/b,KAAKgc,mBAAmB5W,KAAK2W,IAGjCP,GAAA1b,UAAAmc,iBAAA,SAAiBC,GACblc,KAAKmc,qBAAqB/W,KAAK8W,IAGnCV,GAAA1b,UAAAsc,YAAA,WACIpc,KAAKqc,gBAAgBjX,QAIzBoW,GAAA1b,UAAAwc,0BAAA,WACItc,KAAKuc,8BAA8BnX,QAIvCoW,GAAA1b,UAAA0c,cAAA,SAAcC,GACdzc,KAAK0c,kBAAkBtX,KAAKqX,IAI5BjB,GAAA1b,UAAA6c,gBAAA,SAAgBF,GACZzc,KAAK4c,oBAAoBxX,KAAKqX,yBAtErCja,EAAAA,WAAU1B,KAAA,CAAC,CACR2B,WAAY,4JAwEZ,SAAA+Y,KAnEQxb,KAAA2b,iBAAqD,IAAIkB,EAAAA,gBAAiC,GAElG7c,KAAA8c,aAA4C9c,KAAK2b,iBAAiBnV,eAG1DxG,KAAA6b,eAAwC,IAAIgB,EAAAA,gBAAsBvZ,WAG1EtD,KAAA+c,qBAAyC/c,KAAK6b,eAAerV,eAGrDxG,KAAAgc,mBAA+C,IAAIa,EAAAA,gBAAyB,MACpF7c,KAAAgd,WAAkChd,KAAKgc,mBAAmBxV,eAGjDxG,KAAAmc,qBAAiD,IAAIU,EAAAA,gBAAyB,MACtF7c,KAAAid,aAAoCjd,KAAKmc,qBAAqB3V,eAEvDxG,KAAAqc,gBAAiC,IAAIhW,EAAAA,QAC7CrG,KAAAkd,sBAA0Cld,KAAKqc,gBAAgB7V,eAEvDxG,KAAAuc,8BAA+C,IAAIlW,EAAAA,QAC3DrG,KAAAmd,oCAAwDnd,KAAKuc,8BAA8B/V,eAEnFxG,KAAA0c,kBAAmC,IAAIrW,EAAAA,QAC/CrG,KAAAod,wBAA4Cpd,KAAK0c,kBAAkBlW,eAE3DxG,KAAA4c,oBAAqC,IAAIvW,EAAAA,QACjDrG,KAAAqd,0BAA8Crd,KAAK4c,oBAAoBpW,eCvC3E,QAWI8W,GAAAxd,UAAA2I,SAAA,WACE,OAAOzI,KAAKiH,KAAOjH,KAAKiH,KAAO,GAEnCqW,IATE,SAAAA,KACEtd,KAAKiH,KAAO,EACZjH,KAAK2P,YAAa,EAClB3P,KAAK4P,QAAS,UC0FJ2N,GAAAC,eAAd,SAA6Bf,OACvBhJ,EAAmB,CAACgJ,EAAKrN,MACzBxE,EAAiB,GAMrB,GAJI6R,EAAKgB,QACPhK,EAAOjJ,KAAKxK,KAAKwd,eAAef,EAAKgB,SAGjB,IAAlBhK,EAAO1O,OACT,OAAO0X,EAAKrN,KAGdqE,EAASA,EAAOyD,UAEhB,IAAK,IAAIlN,EAAY,EAAGA,EAAIyJ,EAAO1O,OAAQiF,IAEzCY,EAASA,EADe6I,EAAOzJ,IACFA,IAAMyJ,EAAO1O,OAAS,EAAI,GAAK,KAG9D,OAAO6F,GAGT2S,GAAAzd,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KAEEA,KAAK0d,kBAAkBX,qBAAqBnZ,UAAS,SAAE+Z,GAC/CA,GAASA,EAAI3F,UACjB9U,EAAK0a,aAAeD,EAAIE,GACxB3a,EAAK+M,YAAY0N,EAAI3F,YAErB9U,EAAK+B,WAAWnD,KAAO,GACvBoB,EAAK4a,YAAYC,UAAY,MAKjC/d,KAAK0d,kBAAkBZ,aAAalZ,UAAS,SAAE+Z,GACvCza,EAAKpB,MAAUoB,EAAKpB,KAAKkW,UAC7B9U,EAAK8a,WAAW9a,EAAKpB,KAAM6b,KAI/B3d,KAAK0d,kBAAkBR,sBAAsBtZ,UAAS,SAAE+Z,GACtDza,EAAKkZ,gBAGPpc,KAAK0d,kBAAkBP,oCAAoCvZ,UAAS,SAAE+Z,GACpEza,EAAKoZ,+BAITiB,GAAAzd,UAAAuM,gBAAA,WAAA,IAAAnJ,EAAAlD,KACEA,KAAK0d,kBAAkBV,WAAWpZ,UAAS,SAAE+Z,GAChC,MAAPA,GACEA,GACFza,EAAK+a,KAAKH,YAAYI,cAK5Ble,KAAK0d,kBAAkBT,aAAarZ,UAAS,SAAE+Z,GACjC,OAARA,GACEA,GACFza,EAAK+a,KAAKH,YAAYK,gBAK5Bne,KAAK0d,kBAAkBN,wBAAwBxZ,UAAS,SAAE+Z,GACpDA,IAAQra,WACVJ,EAAK4a,YAAY/B,OAAO4B,KAI5B3d,KAAK0d,kBAAkBL,0BAA0BzZ,UAAS,SAAE+Z,GACtDA,IAAQra,WACVJ,EAAK4a,YAAY5B,SAASyB,MAMhCJ,GAAAzd,UAAAse,WAAA,SAAW3B,GAAX,IAAAvZ,EAAAlD,KACEA,KAAKqe,eAAgB,EACrB7E,WAAU,WACJtW,EAAKmb,gBACPnb,EAAK8a,WAAWvB,EAAMA,EAAKoB,IAGrBpB,IACJvZ,EAAK4Z,aAAapc,KAAK+b,EAAKoB,IAC5B3a,EAAKob,YAAc7B,KAGtB,MAGLc,GAAAzd,UAAAgV,SAAA,SAASjR,OACDmE,EAA0BnE,EAAY,OAExCmE,EAAQuW,aAAevW,EAAQiN,WAAajN,EAAQoN,cACtDpV,KAAKqR,cAITkM,GAAAzd,UAAA0e,OAAA,SAAO/B,GACLzc,KAAKye,cAAc/d,KAAK+b,IAS1Bc,GAAAzd,UAAA4e,MAAA,SAAMjC,GACJzc,KAAK2e,aAAaje,KAAK+b,IAuBzBc,GAAAzd,UAAA8e,SAAA,SAASnC,GACPzc,KAAK6e,gBAAgBne,KAAK+b,IAY5Bc,GAAAzd,UAAAgf,SAAA,SAASrC,EAAYxc,GACnBwc,EAAKrN,KAAOnP,EACG,MAAXwc,EAAKoB,IAA4B,KAAdpB,EAAKrN,MAC1B2P,EAAAA,OAAStC,EAAKgB,OAAOzF,SAAUyE,GAC/Bzc,KAAKoc,eACIK,EAAKoB,IAAiB,MAAXpB,EAAKoB,IAAmC,KAArBpB,EAAKrN,KAAK4P,QACjDhf,KAAKif,OAAOve,KAAK+b,GACjBA,EAAKyC,YAAa,EAClBlf,KAAKge,WAAWvB,EAAMA,EAAKoB,KACP,MAAXpB,EAAKoB,IAAmC,KAArBpB,EAAKrN,KAAK4P,SACtChf,KAAKmf,MAAMze,KAAK+b,GAChBA,EAAKyC,YAAa,GAEpBlf,KAAKof,YAAa,EAClBpf,KAAKoc,eAGPmB,GAAAzd,UAAAa,SAAA,SAAS8b,EAAYxc,GACnBD,KAAKof,YAAa,EAEH,MAAX3C,EAAKoB,KACPkB,EAAAA,OAAStC,EAAKgB,OAAOzF,SAAUyE,GAC/Bzc,KAAKoc,eAGPK,EAAKyC,YAAa,GAGpB3B,GAAAzd,UAAAuf,WAAA,SAAW5C,GACTzc,KAAKqe,eAAgB,EACrBre,KAAKsf,WAAW5e,KAAK+b,EAAKoB,KAI5BN,GAAAzd,UAAAyf,UADA,SACU1b,GACR,OAAQA,EAAMsI,KACZ,IAAK,SACHnM,KAAKwf,eAAe9e,KAAOV,KAAKse,aAAete,KAAKse,YAAYT,GAAK7d,KAAKse,YAAYT,GAAK,MAC3F,MACF,IAAK,SACH7d,KAAKyf,eAAe/e,KAAOV,KAAKse,aAAete,KAAKse,YAAYT,GAAK7d,KAAKse,YAAYT,GAAK,MAC3F,MACF,IAAK,YACH7d,KAAK0f,mBACL,MACF,IAAK,UACH1f,KAAK2f,mBASHpC,GAAAzd,UAAA6f,eAAR,WACE,GAAM3f,KAAK8B,KAET,GAAwB,MAApB9B,KAAKse,YACPte,KAAKge,WAAWhe,KAAK8B,KAAM9B,KAAK8B,KAAKkW,SAAS,GAAG6F,IACjD7d,KAAKse,YAActe,KAAK8B,KAAKkW,SAAS,GAChChY,KAAKse,YAAYtG,UAA+C,EAAnChY,KAAKse,YAAYtG,SAASjT,QAC3D/E,KAAK0d,kBAAkBlB,cAAcxc,KAAKse,kBAG5C,GAAMte,KAAKse,YAAYb,QAAiC,MAAvBzd,KAAKse,YAAYT,GAAY,KAEtDjW,EAAgB5H,KAAKse,YAAYb,OAAOzF,SAAS9K,QAAQlN,KAAKse,aAEpE,GAAkC,MAA9Bte,KAAKse,YAAYb,OAAOI,IAAwB,IAAVjW,EACxC,OAAO,EAGHA,IAAUtE,WAAuB,IAAVsE,EACzB5H,KAAKse,YAActe,KAAKse,YAAYb,OAOpCzd,KAAKse,YAActe,KAAKse,YAAYb,OAAOzF,SAASpQ,EAAQ,GAN5D5H,KAAKge,WAAWhe,KAAK8B,KAAM9B,KAAKse,YAAYT,IACtC7d,KAAKse,YAAYtG,UAA+C,EAAnChY,KAAKse,YAAYtG,SAASjT,QAC3D/E,KAAK0d,kBAAkBlB,cAAcxc,KAAKse,eAgBhDf,GAAAzd,UAAA4f,iBAAR,WACE,GAAM1f,KAAK8B,KACT,GAAwB,MAApB9B,KAAKse,YACPte,KAAKge,WAAWhe,KAAK8B,KAAM9B,KAAK8B,KAAKkW,SAAS,GAAG6F,IACjD7d,KAAKse,YAActe,KAAK8B,KAAKkW,SAAS,GAChChY,KAAKse,YAAYtG,UAA+C,EAAnChY,KAAKse,YAAYtG,SAASjT,QAC3D/E,KAAK0d,kBAAkBlB,cAAcxc,KAAKse,kBAG5C,GAAMte,KAAKse,YAAa,KAEhB1W,EACF5H,KAAKse,aAAiBte,KAAKse,YAAYb,OAASzd,KAAKse,YAAYb,OAAOzF,SAAS9K,QAAQlN,KAAKse,aAAe,KAGjH,GAAMte,KAAKse,YAAYtG,UAA+C,EAAnChY,KAAKse,YAAYtG,SAASjT,OAC3D/E,KAAKse,YAActe,KAAKse,YAAYtG,SAAS,GAC7ChY,KAAKge,WAAWhe,KAAK8B,KAAM9B,KAAKse,YAAYT,IACtC7d,KAAKse,YAAYtG,UAA+C,EAAnChY,KAAKse,YAAYtG,SAASjT,QAC3D/E,KAAK0d,kBAAkBlB,cAAcxc,KAAKse,kBAEvC,GACL1W,IAAUtE,WACVsE,IAAU5H,KAAKse,YAAYb,OAAOzF,SAASjT,OAAS,GAClB,MAAlC/E,KAAKse,YAAYb,OAAOA,QACmB,MAA3Czd,KAAKse,YAAYb,OAAOA,OAAOzF,UACkB,EAAjDhY,KAAKse,YAAYb,OAAOA,OAAOzF,SAASjT,OACxC,KACM6a,EAAwB5f,KAAKse,YAAYb,OAAOA,OAAOzF,SAAS9K,QAAQlN,KAAKse,YAAYb,QAC/Fzd,KAAKse,YACHte,KAAKse,YAAYb,OAAOA,OAAOzF,SAAS4H,EAAgB,KAAOtc,UAC3DtD,KAAKse,YACLte,KAAKse,YAAYb,OAAOA,OAAOzF,SAAS4H,EAAgB,GAE9D5f,KAAKge,WAAWhe,KAAK8B,KAAM9B,KAAKse,YAAYT,IACtC7d,KAAKse,YAAYtG,UAA+C,EAAnChY,KAAKse,YAAYtG,SAASjT,QAC3D/E,KAAK0d,kBAAkBlB,cAAcxc,KAAKse,kBAI5Cte,KAAKse,YAActe,KAAKse,YAAYb,OAAOzF,SAASpQ,EAAQ,GAC5D5H,KAAKge,WAAWhe,KAAK8B,KAAM9B,KAAKse,YAAYT,IACtC7d,KAAKse,YAAYtG,UAA+C,EAAnChY,KAAKse,YAAYtG,SAASjT,QAC3D/E,KAAK0d,kBAAkBlB,cAAcxc,KAAKse,eAWtDf,GAAAzd,UAAA+f,SAAA,SAASC,EAAWrD,GAClB,QAASA,EAAKzE,UAAmC,EAAvByE,EAAKzE,SAASjT,QAMlCwY,GAAAzd,UAAAsc,YAAR,WACEpc,KAAK8B,KAAO,SACNie,EAAyB/f,KAAKiF,WAAWnD,KAC/C9B,KAAKiF,WAAWnD,KAAO,KACvB9B,KAAKiF,WAAWnD,KAAOie,EACvB/f,KAAK8d,YAAYC,UAAYgC,GAMvBxC,GAAAzd,UAAAwc,0BAAR,eACQyD,EAAyB/f,KAAKiF,WAAWnD,KAC/C9B,KAAKiF,WAAWnD,KAAO,KACvB9B,KAAKiF,WAAWnD,KAAOie,EACvB/f,KAAK8d,YAAYC,UAAYgC,GAGvBxC,GAAAzd,UAAAuR,WAAR,WACOrR,KAAKggB,kBAAkBrQ,YAAe3P,KAAKggB,kBAAkBpQ,SAChE5P,KAAKggB,kBAAkBpQ,QAAS,EAChC5P,KAAKigB,cAAcvf,KAAK,CACtBuG,KAAMjH,KAAKggB,kBAAkBvX,eAK3B8U,GAAAzd,UAAAmQ,YAAR,SAAoBnO,GAApB,IAAAoB,EAAAlD,KACOA,KAAK8B,OACR9B,KAAK8B,KAAO,CAAE+b,GAAI,KAAMzO,KAAM,OAAQ8Q,YAAY,IAE/ClgB,KAAK8B,KAAKkW,WACbhY,KAAK8B,KAAKkW,SAAW,IAAI1R,MACzBtG,KAAKggB,kBAAoB,IAAI1C,IAE/Btd,KAAK8B,KAAKkW,SAAWhY,KAAK8B,KAAKkW,SAASpN,OAAO9I,GAC/C9B,KAAK8B,KAAKkW,SAASjQ,QAAO,SAAE0U,GAC1BvZ,EAAKid,WAAW1D,EAAMvZ,EAAKpB,QAG7B9B,KAAK8B,KAAKkW,SAAWhY,KAAKogB,oBAAoBpgB,KAAK8B,KAAKkW,UAExDhY,KAAKiF,WAAWnD,KAAO9B,KAAK8B,KAAKkW,SACjChY,KAAK8d,YAAYC,UAAY/d,KAAK8B,KAAKkW,SACvChY,KAAKggB,kBAAkBrQ,WAA6B,IAAhB7N,EAAKiD,OACzC/E,KAAKggB,kBAAkBpQ,QAAS,GAM1B2N,GAAAzd,UAAAqgB,WAAR,SAAmB1D,EAAYgB,GAA/B,IAAAva,EAAAlD,KACEyc,EAAKgB,OAASA,EACVhB,EAAKzE,UAAmC,EAAvByE,EAAKzE,SAASjT,QACjC0X,EAAKzE,SAASjQ,QAAO,SAAEmM,GACrBhR,EAAKid,WAAWjM,EAAMuI,MAQpBc,GAAAzd,UAAAke,WAAR,SAAmBvB,EAAYoB,GAC7B,GAAY,MAARpB,EACF,OAAO,KAGT,GADAzc,KAAKqgB,aAAa5D,GACZzc,KAAK4d,aAAc,KACjBd,EAAqB9c,KAAKsgB,YAAYtgB,KAAK4d,cAC7B,MAAhBd,IACFA,EAAaoD,YAAa,EAC1BlgB,KAAK4d,aAAe,MAGxB,GAAInB,EAAKoB,KAAOva,WAAamZ,EAAKoB,KAAOA,EAIvC,OAHApB,EAAKyD,YAAa,EAClBlgB,KAAKugB,iBAAiB9D,GACtBzc,KAAK4d,aAAenB,EAAKoB,GAClBpB,EACF,GAAqB,MAAjBA,EAAKzE,SAQhB,OAAO,SAPDhO,OAAC,EACDyJ,EAAe,KACnB,IAAKzJ,EAAI,EAAa,MAAVyJ,GAAkBzJ,EAAIyS,EAAKzE,SAASjT,OAAQiF,IACtDyJ,EAASzT,KAAKge,WAAWvB,EAAKzE,SAAShO,GAAI6T,GAE7C,OAAOpK,GAKH8J,GAAAzd,UAAAygB,iBAAR,SAAyB9D,GACjBA,GAAUA,EAAKgB,SACnBzd,KAAK0d,kBAAkBlB,cAAcC,EAAKgB,QAC1Czd,KAAKugB,iBAAiB9D,EAAKgB,UAOvBF,GAAAzd,UAAAugB,aAAR,SAAqB5D,WACnB,GAAMA,GAAQA,EAAKyD,aAAe5c,YAChCmZ,EAAKyD,YAAa,EACZzD,EAAKzE,cACT,IAA2B,IAAAwI,EAAAnT,EAAAoP,EAAKzE,UAAQyI,EAAAD,EAAApb,QAAAqb,EAAAhgB,KAAAggB,EAAAD,EAAApb,OAAE,CAArC,IAAMsb,EAAYD,EAAAxgB,MACrBD,KAAKqgB,aAAaK,0GAM1BnD,GAAAzd,UAAA6gB,aAAA,SAAalE,OACLmE,EAAsB,GAO5B,OANInE,EAAKyD,YACPU,EAAUpW,KAAK,cAEbiS,EAAKmE,WACPA,EAAUpW,KAAKiS,EAAKmE,WAEfA,GAGTrD,GAAAzd,UAAA+gB,WAAA,SAAWpE,EAAYqE,GACrB9gB,KAAK+gB,mBAAmBtE,GAAMqE,SAAWA,GAG3CvD,GAAAzd,UAAAkhB,eAAA,SAAend,EAAiC4Y,GAC9CA,EAAKwE,gBAAkBpd,EAAMqd,OAAO5Y,SAChCmU,EAAKwE,gBACPjhB,KAAKmhB,kBAAkBzgB,KAAK+b,EAAKoB,IAEjC7d,KAAKohB,oBAAoB1gB,KAAK+b,EAAKoB,KAIvCN,GAAAzd,UAAAihB,mBAAA,SACEtE,GAUA,OALIzc,KAAKqhB,gBAAgBC,IAAI7E,EAAKoB,IAChC7d,KAAKuhB,sBAAsB9E,EAAMzc,KAAKqhB,gBAAgBG,IAAI/E,EAAKoB,IAAIiD,UAEnE9gB,KAAKuhB,sBAAsB9E,GAAM,GAE5Bzc,KAAKqhB,gBAAgBG,IAAI/E,EAAKoB,KAG/BN,GAAAzd,UAAAyhB,sBAAR,SAA8B9E,EAAYqE,OAClCrK,EAAuC,IAAInQ,MACjDmW,EAAKgF,QAAQ1Z,QAAO,SAAE2Z,GAChBA,EAAOT,iBACTxK,EAAMjM,KAAKkX,EAAO7D,UAGhB7W,EAGF,CAAEoE,YAAa,IAAI/J,EAAAA,YAAYoV,GAAQqK,SAAQA,GACnD9gB,KAAKqhB,gBAAgBM,IAAIlF,EAAKoB,GAAI7W,IAQpCuW,GAAAzd,UAAAwgB,YAAA,SAAYzC,GAEV,QADM+D,EAAKlX,EAAe1K,KAAKiF,WAAWnD,MACpB,EAAf8f,EAAM7c,QAAY,KACjB8c,EAAaD,EAAME,QACzB,GAAID,EAAKhE,KAAOA,EACd,OAAOgE,EAEDA,EAAK7J,UACT4J,EAAMpX,KAAIuX,MAAVH,EAAKlX,EAASmX,EAAK7J,WAIzB,OAAO,MAGTuF,GAAAzd,UAAAsgB,oBAAA,SAAoB3D,GAApB,IAAAvZ,EAAAlD,KACE,GAAMyc,GAAsB,EAAdA,EAAK1X,OACjB,IAOE,OANA0X,EAAOuF,EAAAA,QAAUvF,EAAI,SAAGwF,GAAY,OAAAA,EAAEC,YAAY,CAAC,SAC9Cna,QAAO,SAAEC,GACNA,EAAQgQ,UAAuB,MAAXhQ,IACxBA,EAAQgQ,SAAW9U,EAAKkd,oBAAoBpY,EAAQgQ,aAGjDyE,EACP,MAAOhS,GACP0X,QAAQC,IAAI3X,0BAvkBnB5J,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,WACVC,SAAA,++MAbOwa,UACA6G,EAAAA,cAL0EhK,EAAAA,6CAyChFnX,EAAAA,UAASJ,KAAA,CAAC,sBAiBVG,EAAAA,uBAKAE,EAAAA,uBAKAA,EAAAA,sBAMAA,EAAAA,+BACAA,EAAAA,8BACAA,EAAAA,6BACAA,EAAAA,2BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,kCACAA,EAAAA,oCACAA,EAAAA,6BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,0BAqMAmhB,EAAAA,aAAYxhB,KAAA,CAAC,iBAAkB,CAAC,cAkUnCyc,IAlkBE,SAAAA,GAAoBG,EAA8C6E,EAAwBC,GAExF,GAFkBxiB,KAAA0d,kBAAAA,EAA8C1d,KAAAuiB,OAAAA,EAAwBviB,KAAAwiB,WAAAA,EAgBlFxiB,KAAAqhB,gBAMJ,IAAIoB,IAeEziB,KAAA0iB,QAAyC,IAAIhhB,EAAAA,aAK7C1B,KAAAif,OAA6B,IAAIvd,EAAAA,aAMjC1B,KAAAmf,MAA4B,IAAIzd,EAAAA,aAChC1B,KAAA2iB,eAAwC,IAAIjhB,EAAAA,aAC5C1B,KAAAigB,cAAiD,IAAIve,EAAAA,aACrD1B,KAAA8c,aAA8C,IAAIpb,EAAAA,aAClD1B,KAAAsf,WAA4C,IAAI5d,EAAAA,aAChD1B,KAAAwf,eAAuD,IAAI9d,EAAAA,aAC3D1B,KAAAyf,eAAuD,IAAI/d,EAAAA,aAC3D1B,KAAAmhB,kBAA0D,IAAIzf,EAAAA,aAC9D1B,KAAAohB,oBAA4D,IAAI1f,EAAAA,aAChE1B,KAAA2e,aAAmC,IAAIjd,EAAAA,aACvC1B,KAAAye,cAAoC,IAAI/c,EAAAA,aACxC1B,KAAA6e,gBAAsC,IAAInd,EAAAA,aAEpD1B,KAAA8d,YAAuC,IAAI8E,EAAAA,kBAAiB,SAAQnG,GAA4C,OAAAA,EAAKzE,WACrHhY,KAAAiF,WAA4C,IAAI4d,EAAAA,wBAEhD7iB,KAAAqe,eAAyB,EACzBre,KAAAse,YAAoB,KA/DZte,KAAK8B,KAAM,KACTA,EAAa9B,KAAK8B,KACxB9B,KAAK8B,KAAO,KACZ9B,KAAKiQ,YAAYnO,EAAKkW,eAEtBhY,KAAKiF,WAAWnD,KAAO,GACvB9B,KAAK8d,YAAYC,UAAY,GC9BnC,IAAA+E,IAUEA,GAAAhjB,UAAAijB,cAAA,SAActB,GACZzhB,KAAK+G,iBAAiB3B,KAAKqc,yBAX9Bjf,EAAAA,oDAcDsgB,IANE,SAAAA,KALQ9iB,KAAA+G,iBACR,IAAI8V,EAAAA,gBAAoD,IAEjD7c,KAAAyS,YAA8DzS,KAAK+G,iBAAiBP,eCC7F,IAAAwc,IAuBEA,GAAAljB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KAEEA,KAAKijB,mBAAmBzc,eACvB6T,KACC6I,EAAAA,aAAa,KACbC,EAAAA,aAAa,MAEdvf,UAAS,WACRV,EAAKuF,SAAS/H,SAGZV,KAAKgF,UACPhF,KAAKojB,0BAA0B3Q,YAAY7O,UAAS,SAAE9B,GACpD0X,WAAU,WACRtW,EAAKue,QAAU3f,EACfoB,EAAKmgB,gBAAkBC,EAAAA,GAAkCpgB,EAAKue,aAKpEzhB,KAAKqjB,gBAAkBrjB,KAAKujB,UAAUjY,aAAa+O,KACjDmJ,EAAAA,UAAU,IACVnP,EAAAA,IAAG,SAAE4N,GAAc,OAAA/e,EAAKugB,YAAYxB,KACpC5N,EAAAA,IAAG,SAAEpU,GAAkB,OAAAiD,EAAKwgB,QAAQzjB,OAKxC+iB,GAAAljB,UAAA6jB,UAAA,SAAUjC,GACR,OAAOA,EAASA,EAAOkC,YAActgB,WAGvC0f,GAAAljB,UAAAqI,WAAA,WACE,OAAOnI,KAAKojB,2BAKNJ,GAAAljB,UAAA2jB,YAAR,SAAoBxjB,GAElB,OADAA,EAAQA,EAAM4jB,QAAQ,yBAA0B,KAI1Cb,GAAAljB,UAAA4jB,QAAR,SAAgBzjB,GACd,IAAI,EAAU,CACZ,GAAKD,KAAKgF,SAQR,OAAOhF,KAAKyhB,YAPNqC,EAAwB7jB,EAAM8jB,cAAc1U,MAAM,KACxD,OAAOrP,KAAKyhB,QAAQnK,OAAM,SAAEoK,OACtB3N,GAAc,EAElB,OADA+P,EAAY/b,QAAO,SAAE0M,GAAiB,OAAAV,EAAKA,GAAwD,GAAlD2N,EAAOkC,YAAYG,cAAc7W,QAAQuH,KACnFV,IACNtC,OAAO,EAAG,KAOZuR,GAAAljB,UAAAkkB,WAAP,SAAkBngB,GAChB7D,KAAKikB,cAAgBpgB,EAAM6d,OAAOzhB,MAClCD,KAAKkkB,qBAAqBxjB,KAAKV,KAAKikB,cAAchkB,QAGpD+iB,GAAAljB,UAAAqkB,YAAA,WACEnkB,KAAKijB,mBAAmB7d,6BAvF3BvE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,mBACVC,SAAA,yeAEAqI,UAAW,CAACyZ,8DAXLA,0CAeN7hB,EAAAA,uBACAA,EAAAA,oCAGAE,EAAAA,yBACAA,EAAAA,yBACAF,EAAAA,SA2EH+hB,IArEE,SAAAA,GAAoBI,GAAApjB,KAAAojB,0BAAAA,EAZXpjB,KAAAujB,UAAyB,IAAIliB,EAAAA,YAC7BrB,KAAAyhB,QAA8C,IAAInb,MAGjDtG,KAAAkkB,qBAAwC,IAAIxiB,EAAAA,aAC5C1B,KAAAyI,SAA+B,IAAI/G,EAAAA,aACpC1B,KAAAgF,UAAoB,EAC7BhF,KAAAokB,WAAqB,EAGrBpkB,KAAAijB,mBAAoC,IAAI5c,EAAAA,QC7B1C,IAAAge,IAiDUA,GAAAvkB,UAAAwkB,0BAAR,WACQtkB,KAAKukB,cACPvkB,KAAKukB,aAAaC,OAClBxkB,KAAKukB,aAAaC,MAAMnkB,eAC5BL,KAAKukB,aAAaC,MAAMnkB,cACrBokB,oBAAoB,SAAUzkB,KAAK8U,WAIxCuP,GAAAvkB,UAAA4kB,YAAA,WACE1kB,KAAK2kB,QAAQvf,OACbpF,KAAK2kB,QAAQC,WAEb5kB,KAAKskB,6BAIPD,GAAAvkB,UAAAgV,SAAA,SAASjR,OAEDghB,EAAchhB,EAAY,OAAYihB,aAAgBjhB,EAAY,OAAaoR,UACjF4P,EAAK7kB,KAAK+kB,gBAEP/kB,KAAKglB,mBAAqB1hB,UAC7BtD,KAAKilB,cAAc7f,KAAK,CAAEmf,aAAcvkB,KAAKukB,aAAcW,YAAarhB,IAEtB,IAAxB7D,KAAKglB,iBAA0BnhB,EAAY,OAAauR,aAAe,IACxEvR,EAAY,OAAaoR,UAAapR,EAAY,OAAashB,cAItFnlB,KAAKilB,cAAc7f,KAAK,CAAEmf,aAAcvkB,KAAKukB,aAAcW,YAAarhB,KAM9E7D,KAAK+kB,cAAgBF,GAAM,EAAI,EAAIA,wBAzEtCO,EAAAA,UAAStkB,KAAA,CAAC,CACTC,SAAU,gFAZHskB,EAAAA,8DAmBNpkB,EAAAA,6BACAE,EAAAA,UAmEHkjB,IA/DE,SAAAA,GAAmBE,GAAnB,IAAArhB,EAAAlD,KAAmBA,KAAAukB,aAAAA,EALVvkB,KAAAglB,iBAA2B,GAC1BhlB,KAAAilB,cAAwD,IAAIvjB,EAAAA,aACtE1B,KAAA2kB,QAAyB,IAAIte,EAAAA,QAC7BrG,KAAA+kB,cAAyB,EAGvB/kB,KAAKukB,aAAae,OAAOjL,KACvBC,EAAAA,IAAG,WAIDd,WAAU,WAERtW,EAAKohB,4BACCphB,EAAKqhB,cACPrhB,EAAKqhB,aAAaC,OAClBthB,EAAKqhB,aAAaC,MAAMnkB,eACxB6C,EAAKqhB,aAAaC,MAAMnkB,cACrBklB,iBAAiB,SAAUriB,EAAK4R,SAAS0Q,KAAKtiB,IAAO,OAIhEuiB,EAAAA,UAAUzlB,KAAK2kB,UAAU/gB,YAE3B5D,KAAKukB,aAAamB,OAAOrL,KACvBC,EAAAA,IAAG,WAAO,OAAApX,EAAKohB,8BACfmB,EAAAA,UAAUzlB,KAAK2kB,UAAU/gB,YC9C/B,IAAA+hB,IA+B+BA,GAAA7lB,UAAA8lB,UAA3B,eACQC,EAAyB7lB,KAAK8lB,QAAQzlB,cAAc0lB,UAEpDF,GAAoB7lB,KAAKkC,UACxB2jB,EAAeG,gBAAkBhmB,KAAKkC,QAAQ+jB,WAAWD,gBAAkBhmB,KAAKkmB,iBAAiBlmB,KAAK8lB,QAAQzlB,iBACjHL,KAAKmmB,QAAQjkB,QAAUlC,KAAKkC,UAIhClC,KAAKmmB,QAAQ1c,UAAazJ,KAAKyJ,UAC/BzJ,KAAKmmB,QAAQ3c,UAAYxJ,KAAKwJ,WAIxBmc,GAAA7lB,UAAAomB,iBAAR,SAAyB5b,GACvB,OAAQA,EAAE8b,YAAc9b,EAAE+b,kCA3C/BjB,EAAAA,UAAStkB,KAAA,CAAC,CACPC,SAAU,eACVsI,UAAW,CAACid,EAAAA,0DAJPA,EAAAA,kBADgCjO,EAAAA,gDAcpCpX,EAAAA,MAAKH,KAAA,CAAC,iCAKNG,EAAAA,yBAKAA,EAAAA,yBAOAqhB,EAAAA,aAAYxhB,KAAA,CAAC,gBAiBlB6kB,IArBI,SAAAA,GAAYQ,EAA6BL,GAAA9lB,KAAA8lB,QAAAA,EARhC9lB,KAAAwJ,UAAoB,IAKpBxJ,KAAAyJ,UAAoB,IAI3BzJ,KAAKmmB,QAAUA,EC5BrB,IAAAI,IAcEA,GAAAzmB,UAAA0mB,YAAA,WAEExmB,KAAKymB,SAAWzmB,KAAK0mB,KAEjB1mB,KAAK2mB,mBACP3mB,KAAK4mB,QAAU,WACf5mB,KAAK6mB,WAAa,WAIdN,GAAAzmB,UAAA6mB,eAAR,WACE,OAAOG,EAAAA,kBAAkB9mB,KAAK+mB,cAAgB/mB,KAAK0mB,KAAKM,SAASC,SAASC,gCAtB7E9B,EAAAA,UAAStkB,KAAA,CAAC,CACTC,SAAU,iFAQGa,EAAAA,OAAMd,KAAA,CAACqmB,EAAAA,oDALnBC,EAAAA,YAAWtmB,KAAA,CAAC,gCACZsmB,EAAAA,YAAWtmB,KAAA,CAAC,iCACZsmB,EAAAA,YAAWtmB,KAAA,CAAC,2BACZG,EAAAA,SAiBHslB,IAfE,SAAAA,GAAyCQ,GAAA/mB,KAAA+mB,WAAAA,EALhB/mB,KAAA4mB,QAAkB,GACf5mB,KAAA6mB,WAAqB,GACvB7mB,KAAAymB,SAAmB,GCT/C,IAAAY,IAMIA,GAAAvnB,UAAAwnB,UAAA,SAAUrnB,OAAe,IAAAa,EAAA,GAAAymB,EAAA,EAAAA,EAAA5c,UAAA5F,OAAAwiB,IAAAzmB,EAAAymB,EAAA,GAAA5c,UAAA4c,GACrB,MAAO,KAAOtnB,wBALrBunB,EAAAA,KAAI1mB,KAAA,CAAC,CACFsO,KAAM,mBAMViY,IAPA,SAAAA,UCWAI,IAyCEA,GAAA3nB,UAAAC,SAAA,aAGA0nB,GAAA3nB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BA7ClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oCACVC,SAAA,yWAdOgC,EAAAA,gDA2BJpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAgCZwkB,IAlCE,SAAAA,GACS3kB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKoD,MAAQtB,EAAKsB,MACdpD,KAAKoD,QAAUE,YACjBtD,KAAKoD,MAtBmB,gDAwB1BpD,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QAzBqB,6JA2B5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,YAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,eAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBCpClC+mB,IAwCEA,GAAA5nB,UAAAC,SAAA,aAGA2nB,GAAA5nB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BA5ClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,6BACVC,SAAA,6WAdOgC,EAAAA,gDA0BJpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAgCZykB,IAlCE,SAAAA,GACS5kB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKoD,MAAQtB,EAAKsB,MACdpD,KAAKoD,QAAUE,YACjBtD,KAAKoD,MArBmB,8CAuB1BpD,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QAxBqB,iKA0B5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,YAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,eAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBC1ClCgnB,IAuCEA,GAAA7nB,UAAAC,SAAA,aAGA4nB,GAAA7nB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BA3ClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,+BACVC,SAAA,yWAPOgC,EAAAA,oBAkBiC2kB,GAA8BC,WAAA,CAAA,CAAA3lB,KAAnEL,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAgCZ0kB,IAlCE,SAAAA,GACS7kB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKoD,MAAQtB,EAAKsB,MACdpD,KAAKoD,QAAUE,YACjBtD,KAAKoD,MApBmB,kDAsB1BpD,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QAvBqB,+JAyB5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,YAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,eAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBC5BlCknB,IA8BEA,GAAA/nB,UAAAC,SAAA,aAGA8nB,GAAA/nB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BAlClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,6CACVC,SAAA,qPAbOgC,EAAAA,gDAuBJpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAwBZ4kB,IA1BE,SAAAA,GACS/kB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QAlBqB,qEAoB5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,WAEjBP,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBC1BlCmnB,IAyBIA,GAAAhoB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACIwZ,WAAU,WACNtW,EAAKJ,UAAUC,SAChB,MAGP+kB,GAAAhoB,UAAAa,SAAA,WACIX,KAAK8C,UAAUC,8BAhCtBlC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,yCACVC,SAAA,oHAZKgC,EAAAA,gDAqBApB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAuBhB6kB,IAzBI,SAAAA,GACWhlB,EACyBhB,GAFpC,IAAAoB,EAAAlD,KACWA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACjBtD,KAAKmD,QAjBe,yCAmBxBL,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GACd,WAAfA,EAAMC,MACNZ,EAAKJ,UAAUC,MAAMG,EAAKvC,sBC1BxConB,OAAA,EACAC,OAAA,EACAC,OAAA,wEAGF,IAAAC,IAwBEA,GAAApoB,UAAAC,SAAA,aAGAmoB,GAAApoB,UAAAuM,gBAAA,WACErM,KAAKmkB,eAGC+D,GAAApoB,UAAAqkB,YAAR,WAAA,IAAAjhB,EAAAlD,KACMA,KAAKmoB,cACPnoB,KAAKooB,SAASC,QAAQroB,KAAKiH,OAAQjH,KAAKsoB,UAAU1kB,UAAS,SAAEkU,GAC3DA,EAAK/P,QAAO,SAAEmM,GAAe,OAAAhR,EAAK4U,KAAKtN,KAAK0J,KAC5ChR,EAAKilB,aAA6B,EAAdrQ,EAAK/S,UAK/BmG,OAAAC,eAAI+c,GAAApoB,UAAA,sBAAmB,KAAvB,WACE,OAAOyoB,oCAGTL,GAAApoB,UAAA6L,QAAA,WACM3L,KAAKwoB,UACPxoB,KAAKyoB,MAAQF,GAAoBP,SAIrCE,GAAApoB,UAAA4oB,WAAA,SAAW/U,GACT3T,KAAK2oB,aAAehV,EACpB3T,KAAK4oB,cAAcloB,KAAKiT,GACxB3T,KAAKyoB,MAAQF,GAAoBR,QAGnCG,GAAApoB,UAAA+oB,eAAA,WACE7oB,KAAKyoB,MAAQF,GAAoBN,QAGnCC,GAAApoB,UAAAgpB,OAAA,SAAOjlB,GAAP,IAAAX,EAAAlD,KAC4B,EAAtB6D,EAAMmb,OAAOja,OACf/E,KAAK+oB,SAASD,OAAOjlB,GAAOD,UAAS,SAClC9B,GACCoB,EAAK4U,KAAKtN,KAAK1I,GACfoB,EAAKulB,MAAQF,GAAoBP,SAIrChoB,KAAKyoB,MAAQF,GAAoBP,QAIrCE,GAAApoB,UAAAgV,SAAA,SAASjR,OACDmE,EAA0BnE,EAAY,OACxCmE,EAAQoN,aAAepN,EAAQiN,UAAY,KAC7CjV,KAAKmkB,oCA5EVtjB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uBACVC,SAAA,srDAKCC,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,6BACAE,EAAAA,wBACAF,EAAAA,SAmEHinB,IA1DE,SAAAA,KAZSloB,KAAAoB,YAAsB,kBAErBpB,KAAA4oB,cAAoC,IAAIlnB,EAAAA,aACzC1B,KAAAwoB,SAAmB,EAEpBxoB,KAAAiH,KAAe,EACfjH,KAAAsoB,SAAmB,GACnBtoB,KAAAmoB,cAAwB,EAChCnoB,KAAAyoB,MAA6BF,GAAoBR,OAEjD/nB,KAAA8X,KAAe,OClBjBkR,IAmCEA,GAAAlpB,UAAAC,SAAA,aAGAipB,GAAAlpB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BAvClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,6CACVC,SAAA,0VAZuBgC,EAAAA,gDAuBpBpB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBA4BZ+lB,IA9BE,SAAAA,GACSlmB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKoD,MAAQtB,EAAKsB,MACdpD,KAAKoD,QAAUE,YACjBtD,KAAKoD,MAnBmB,4CAqB1BpD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,eAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,WAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,sBCrChCsoB,SAAA,EACAC,OAAA,qDA+BF,IAAAC,IAyBEA,GAAArpB,UAAAC,SAAA,aAGAopB,GAAArpB,UAAAuM,gBAAA,aAGAnB,OAAAC,eACIge,GAAArpB,UAAA,OAAI,KADR,SACSspB,GACPppB,KAAKqpB,SAAWD,EAChBppB,KAAKspB,yCAGPpe,OAAAC,eACIge,GAAArpB,UAAA,2BAAwB,KAD5B,SAC6BypB,GAC3BvpB,KAAKwpB,QAAUD,EACfvpB,KAAKspB,yCAGCH,GAAArpB,UAAAwpB,MAAR,WAAA,IAAApmB,EAAAlD,KACMA,KAAKwpB,SACPxpB,KAAKwpB,QAAQhI,IAAI,EAAGxhB,KAAKsoB,UAAU1kB,UAAS,SAAE6lB,GAAe,OAAAvmB,EAAKwmB,SAASD,MAIvEN,GAAArpB,UAAA4pB,SAAR,SAAiBD,GAAjB,IAAAvmB,EAAAlD,KACEA,KAAK2pB,WAAa,IAAIlH,IACtBziB,KAAK4pB,eAAiB,GACtB5pB,KAAK6pB,QAAU,GACfJ,EAAQzpB,KAAK8pB,UAAUL,GACvBzpB,KAAK2pB,WAAa,IAAIlH,IACtBgH,EAAM1hB,QAAO,SAAEmM,OACPuI,EAAsBvZ,EAAK6mB,WAAW7V,GAC5ChR,EAAK2mB,QAAQrf,KAAKiS,KAEpBzc,KAAKgqB,uBAAuB,MAC5BhqB,KAAKiqB,cAAcvpB,QAGbyoB,GAAArpB,UAAAgqB,UAAR,SAAkBL,GAAlB,IAAAvmB,EAAAlD,KACQkqB,EAAyB,IAAIzH,IAC7B0H,EAAa,GACnBV,EAAM1hB,QAAO,SAAEmM,OACPkW,EAAmBlW,EAAKhR,EAAKsmB,QAAQa,oBACtCD,GAGEF,EAAK5I,IAAI8I,IACZF,EAAKvI,IAAIyI,EAAU,IAErBF,EAAK1I,IAAI4I,GAAU5f,KAAK0J,IALxBiW,EAAMG,QAAQpW,KAUlB,QAFMqW,EAAgB,IAAIjkB,MAASmjB,EAAM1kB,QACrC6C,EAAgB,EACE,EAAfuiB,EAAMplB,QAAY,KACjBylB,EAAUL,EAAMM,MACtBF,EAAS3iB,KAAW4iB,MACdxS,EAAgBkS,EAAK1I,IAAIgJ,EAAKxqB,KAAKwpB,QAAQkB,eACjD,GAAI1S,EACF,IAAK,IAAIhO,EAAYgO,EAASjT,OAAS,EAAQ,GAALiF,EAAQA,IAChDmgB,EAAM3f,KAAKwN,EAAShO,IAI1B,OAAOugB,GAGDpB,GAAArpB,UAAAiqB,WAAR,SAAmB7V,GACjB,GAAIlU,KAAK2pB,WAAWrI,IAAIpN,EAAKlU,KAAKwpB,QAAQkB,eACxC,MAAMvlB,MAAM,0BAERwlB,EAAmC3qB,KAAK4qB,uBAAuB1W,EAAKlU,KAAKwpB,QAAQa,qBACjFQ,EAAiC,CACrCC,OAAQ5W,EACR6W,cAAc,EACdC,MAAOL,EAAoBA,EAAkBK,MAAQ,EAAI,EACzDC,SAAUjrB,KAAKqpB,WAAa6B,GAAsBhC,OAClDlX,SAAS,EACTmZ,SAAUnrB,KAAK2pB,WAAWyB,KAAO,GAMnC,OAJAprB,KAAK2pB,WAAWhI,IAAIzN,EAAKlU,KAAKwpB,QAAQkB,cAAeG,GACjDF,IACFA,EAAkBI,cAAe,GAE5BF,GAGF1B,GAAArpB,UAAA8qB,uBAAP,SAA8B/M,GAC5B,OAAO7d,KAAK2pB,WAAWnI,IAAI3D,IAGtBsL,GAAArpB,UAAAurB,mBAAP,SAA0BnX,GACxB,OAAOlU,KAAK2pB,WAAWnI,IAAItN,EAAKlU,KAAKwpB,QAAQkB,gBAG/CvB,GAAArpB,UAAAwrB,cAAA,SAAcpX,GACZ,MAAO,iBAAmBlU,KAAK4qB,uBAAuB1W,EAAKlU,KAAKwpB,QAAQkB,eAAeM,OAGjF7B,GAAArpB,UAAAkqB,uBAAR,SAA+BuB,GAA/B,IAAAroB,EAAAlD,KACQ4pB,EAAsB,GAC5B5pB,KAAK4pB,eAAe7hB,QAAO,SAAEmM,GACvBhR,EAAKmoB,mBAAmBnX,KACtBqX,GAAYroB,EAAKmoB,mBAAmBE,GAAUJ,UAAYjoB,EAAKmoB,mBAAmBnX,GAAMiX,SAC1FvB,EAAepf,KAAK0J,GAEpBhR,EAAK0nB,uBAAuB1W,EAAKhR,EAAKsmB,QAAQkB,eAAe1Y,SAAU,KAI7EhS,KAAKwrB,aAAe5B,EAAe7kB,OAAS/E,KAAKyrB,YACjDzrB,KAAK6pB,QAAQ9hB,QAAO,SAAEmM,GACpB,GAAI0V,EAAe7kB,OAAS7B,EAAKsoB,gBAC7BD,GAAYroB,EAAKmoB,mBAAmBE,GAAUJ,SAAWjX,EAAKiX,UAAW,KACrEf,EAAmBlW,EAAK4W,OAAO5nB,EAAKsmB,QAAQa,oBAClD,GAAKD,EAGE,KACCO,EAAmCznB,EAAK0nB,uBAAuBR,GACjEO,EAAkB3Y,SAAW2Y,EAAkBM,WACjDrB,EAAepf,KAAK0J,EAAK4W,QACzB5W,EAAKlC,SAAU,QANjB4X,EAAepf,KAAK0J,EAAK4W,QACzB5W,EAAKlC,SAAU,KAUrBhS,KAAK4pB,eAAiBA,GAGxBT,GAAArpB,UAAA4rB,aAAA,SAAaxX,GACXlU,KAAK4qB,uBAAuB1W,EAAKlU,KAAKwpB,QAAQkB,eAAeO,UAAW,EACxEjrB,KAAKgqB,uBAAuB9V,IAG9BiV,GAAArpB,UAAA6rB,WAAA,SAAWzX,GACTlU,KAAK4qB,uBAAuB1W,EAAKlU,KAAKwpB,QAAQkB,eAAeO,UAAW,EACxEjrB,KAAKgqB,uBAAuB9V,IAG9BiV,GAAArpB,UAAA8rB,aAAA,WACmC,EAA7B5rB,KAAK4pB,eAAe7kB,QACtB/E,KAAKgqB,uBAAuBhqB,KAAK4pB,eAAe5pB,KAAK4pB,eAAe7kB,OAAS,KAIjFmG,OAAAC,eAAIge,GAAArpB,UAAA,cAAW,KAAf,WACE,OAAOE,KAAK4pB,gDAGdT,GAAArpB,UAAA+rB,WAAA,SAAW3X,GACTlU,KAAK8rB,WAAW5X,EAAKlU,KAAKwpB,QAAQkB,gBAGpCvB,GAAArpB,UAAAgsB,WAAA,SAAWjO,GAAX,IAAA3a,EAAAlD,KACE,GAAGA,KAAK4qB,uBAAuB/M,GAAK,KAC5BkO,EAAmB/rB,KAAK4qB,uBAAuB/M,GAAIiN,OAAO9qB,KAAKwpB,QAAQa,oBACvE1I,EAAmB,IAAIqK,IAC7BrK,EAAIsK,IAAIpO,GAKR,QAJMqO,EAAqBlsB,KAAK6pB,QAAQ9S,UAAS,SAC9CoV,GAA8B,OAAAA,EAAWrB,OAAO5nB,EAAKsmB,QAAQkB,gBAAkB7M,IAE9EuO,EAAoBpsB,KAAK6pB,QAAQ9kB,OAC5BiF,EAAYkiB,EAAa,EAAGliB,EAAIhK,KAAK6pB,QAAQ9kB,OAAQiF,IAAK,KAC3DmiB,EAAgBnsB,KAAK6pB,QAAQ7f,GAAG8gB,OACtC,IAAInJ,EAAIL,IAAI6K,EAAWnsB,KAAKwpB,QAAQa,qBAE7B,CACL+B,EAAYpiB,EACZ,MAHA2X,EAAIsK,IAAIE,EAAWnsB,KAAKwpB,QAAQkB,mBAM9B2B,EAAgCrsB,KAAK6pB,QAAQpY,OAAOya,EAAYE,EAAYF,GAC9EI,GAA8B,EAClCD,EAAatkB,QAAO,SAAEwkB,GAA+B,OAAArpB,EAAKymB,WAAW6C,UAAOD,EAAYzB,OAAO5nB,EAAKsmB,QAAQkB,iBAC5G1qB,KAAK6pB,QAAQ9hB,QAAO,SAAE0kB,EAA2B7kB,GAC/C6kB,EAAWtB,SAAWvjB,EAAQ,EAC3B6kB,EAAW3B,OAAO5nB,EAAKsmB,QAAQa,sBAAwB0B,IACxDO,GAAqB,KAGtBP,IACD/rB,KAAK4qB,uBAAuBmB,GAAUhB,aAAeuB,GAEvDtsB,KAAKgqB,uBAAoC,EAAbkC,EAAiBlsB,KAAK6pB,QAAQqC,EAAa,GAAGpB,OAAS,QAIvF3B,GAAArpB,UAAA4sB,QAAA,SAAQxY,GAAR,IAAAhR,EAAAlD,KACQ2sB,EAAsB3sB,KAAK6pB,QAAQ9S,UAAS,SAAE0F,GAAwB,OAAAA,EAAKqO,OAAO5nB,EAAKsmB,QAAQkB,gBAAkBxW,EAAKhR,EAAKsmB,QAAQa,sBACzI,KAAmB,GAAfsC,GAMF,MAAMxnB,MAAM,uBALZnF,KAAK6pB,QAAQrf,KAAKxK,KAAK+pB,WAAW7V,IAClClU,KAAK6pB,QAAQ8C,GAAa5B,cAAe,EACzC/qB,KAAK4sB,SACL5sB,KAAK2rB,WAAW3rB,KAAK6pB,QAAQ8C,GAAa7B,SAM9C3B,GAAArpB,UAAA+sB,WAAA,SAAW3Y,GAAX,IAAAhR,EAAAlD,KACE,GAAIA,KAAKqrB,mBAAmBnX,GAAO,CACjClU,KAAKqrB,mBAAmBnX,GAAM4W,OAAS5W,EACvClU,KAAK4sB,aACCD,EAAsB3sB,KAAK6pB,QAAQ9S,UAAS,SAC/C0F,GAAwB,OAAAA,EAAKqO,OAAO5nB,EAAKsmB,QAAQkB,gBAAkBxW,EAAKhR,EAAKsmB,QAAQa,sBACrE,GAAfsC,EACF3sB,KAAK2rB,WAAW3rB,KAAK6pB,QAAQ8C,GAAa7B,QAE1C9qB,KAAKgqB,uBAAuB,QAK1Bb,GAAArpB,UAAA8sB,OAAR,WAAA,IAAA1pB,EAAAlD,KACQypB,EAAazpB,KAAK6pB,QAAQxV,IAAG,SAAEoI,GAAwB,OAAAA,EAAKqO,SAClErB,EAAM7gB,KAAI,SAAE2K,EAAMC,GAAS,OAAAtQ,EAAKsmB,QAAQ9V,QAAQH,EAAGC,KAC7BxT,KAAK8pB,UAAUL,GAC5B1hB,QAAO,SAAE+iB,EAAWljB,GAAkB,OAAA1E,EAAKmoB,mBAAmBP,GAAQK,SAAWvjB,EAAQ,IAClG5H,KAAK6pB,QAAQjhB,KAAI,SAAEkkB,EAAsBC,GAAyB,OAAAD,EAAM3B,SAAW4B,EAAM5B,iCApP5FtqB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,SAAA,0nCAcCG,EAAAA,8BAGA6rB,EAAAA,aAAYlsB,KAAA,CAAC,+BAYbG,EAAAA,wCAMAA,EAAAA,SAiNHkoB,IAhOE,SAAAA,KAfQnpB,KAAAsoB,SAAmB,IACnBtoB,KAAAwrB,aAAuB,EACvBxrB,KAAAyrB,YAAsB,IACtBzrB,KAAAqpB,SAAkC6B,GAAsBhC,OACxDlpB,KAAA4pB,eAA2B,GAG3B5pB,KAAA6pB,QAAgC,GAGxC7pB,KAAAiqB,cAAoC,IAAIvoB,EAAAA,iBChD1CurB,IAoCEA,GAAAntB,UAAAC,SAAA,aAGAktB,GAAAntB,UAAAa,SAAA,WACEX,KAAK8C,UAAUC,8BAxClBlC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uCACVC,SAAA,yWANOgC,EAAAA,oBAkBiCiqB,GAAqCrF,WAAA,CAAA,CAAA3lB,KAA1EL,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBA4BZgqB,IA9BE,SAAAA,GACSnqB,EACyBhB,GAFlC,IAAAoB,EAAAlD,KACSA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACnBtD,KAAKmD,QApBqB,qDAsB5BnD,KAAKqD,QAAUvB,EAAKuB,QAChBrD,KAAKqD,UAAYC,YACnBtD,KAAKqD,QAAU,YAEjBrD,KAAKuD,YAAczB,EAAKyB,YACpBvD,KAAKuD,cAAgBD,YACvBtD,KAAKuD,YAAc,eAErBT,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GAChB,WAAfA,EAAMC,MACRZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBCzBlCusB,IAyBIA,GAAAptB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACIwZ,WAAU,WACNtW,EAAKJ,UAAUC,SAChB,MAGPmqB,GAAAptB,UAAAa,SAAA,WACIX,KAAK8C,UAAUC,8BAhCtBlC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,yDACVC,SAAA,oHAZKgC,EAAAA,gDAqBApB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAuBhBiqB,IAzBI,SAAAA,GACWpqB,EACyBhB,GAFpC,IAAAoB,EAAAlD,KACWA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACjBtD,KAAKmD,QAjBe,qEAmBxBL,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GACd,WAAfA,EAAMC,MACNZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBCpB1CwsB,IAyBIA,GAAArtB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACIwZ,WAAU,WACNtW,EAAKJ,UAAUC,SAChB,MAGPoqB,GAAArtB,UAAAa,SAAA,WACIX,KAAK8C,UAAUC,8BAhCtBlC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,+CACVC,SAAA,oHAZKgC,EAAAA,gDAqBApB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAuBhBkqB,IAzBI,SAAAA,GACWrqB,EACyBhB,GAFpC,IAAAoB,EAAAlD,KACWA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACjBtD,KAAKmD,QAjBe,4DAmBxBL,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GACd,WAAfA,EAAMC,MACNZ,EAAKJ,UAAUC,MAAMG,EAAKvC,kBCpB1CysB,IAyBIA,GAAAttB,UAAAC,SAAA,WAAA,IAAAmD,EAAAlD,KACIwZ,WAAU,WACNtW,EAAKJ,UAAUC,SAChB,MAGPqqB,GAAAttB,UAAAa,SAAA,WACIX,KAAK8C,UAAUC,8BAhCtBlC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,4CACVC,SAAA,oHAZKgC,EAAAA,gDAqBApB,EAAAA,OAAMd,KAAA,CAACmC,EAAAA,sBAuBhBmqB,IAzBI,SAAAA,GACWtqB,EACyBhB,GAFpC,IAAAoB,EAAAlD,KACWA,KAAA8C,UAAAA,EACyB9C,KAAA8B,KAAAA,EAEhC9B,KAAKmD,QAAUrB,EAAKqB,QAChBnD,KAAKmD,UAAYG,YACjBtD,KAAKmD,QAjBe,uEAmBxBL,EAAUY,cAAe,EACzBZ,EAAUa,gBAAgBC,UAAS,SAAEC,GACd,WAAfA,EAAMC,MACNZ,EAAKJ,UAAUC,MAAMG,EAAKvC,cC/B1C,IAAA0sB,yBAoECC,EAAAA,SAAQxsB,KAAA,CAAC,CACRysB,aAAc,CACZ1tB,EACA8B,EACAkB,EACA0E,EACA0D,EACA+E,GACAuN,GACA5E,GACAqK,GACAqB,GACAsB,GACAY,GACAc,GACAI,GACAC,GACAC,GACAE,GACAC,GACAI,GACAc,GACAG,GACA8D,GACAC,GACAC,GACAC,IAEFI,QAAS,CACPC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,oBAEAC,EAAAA,sBACAC,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,aACAC,EAAAA,iBACAb,EAAAA,gBACAc,EAAAA,iBACAL,EAAAA,cACAD,EAAAA,cACAO,EAAAA,kBACAJ,EAAAA,cACAK,EAAAA,cACAX,EAAAA,eACAC,EAAAA,gBACAW,EAAAA,eACAC,EAAAA,yBACAC,EAAAA,eACAC,EAAAA,mBACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,oBACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,eACAC,EAAAA,eAEFC,QAAS,CACP9vB,EACA8B,EACAkB,EACA0E,EACA0D,EACA+E,GACAuN,GACA5E,GACAqK,GACAqB,GACAsB,GACAY,GACAc,GACAwG,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,aACAC,EAAAA,iBACAb,EAAAA,gBACAc,EAAAA,iBACAL,EAAAA,cACAD,EAAAA,cACAO,EAAAA,kBACAJ,EAAAA,cACAK,EAAAA,cACAX,EAAAA,eACAC,EAAAA,gBACAW,EAAAA,eACAC,EAAAA,yBACAC,EAAAA,eACAC,EAAAA,mBACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,oBACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,eACAC,EAAAA,cACAjI,GACAC,GACAC,GACAE,GACAC,GACAI,GACAc,GACAG,GACA8D,GACAC,GACAC,GACAC,IAEF/jB,UAAW,CAACzC,EAAoB4U,QAEH6R,IAxI/B,SAAAA,MCpEA,IAAAuC,IAcEA,GAAA9vB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OALqEvD,KAAKiE,OAAOC,KAAKujB,GAAqC,CACzHtjB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAAurB,GAAmB3rB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAA4rB,IAcEA,GAAA/vB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OAL8DvD,KAAKiE,OAAOC,KAAKwjB,GAA8B,CAC3GvjB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAAwrB,GAAmB5rB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAA6rB,IAcEA,GAAAhwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OALgEvD,KAAKiE,OAAOC,KAAKyjB,GAAgC,CAC/GxjB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAAyrB,GAAmB7rB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAA8rB,IAcEA,GAAAjwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OAL6EvD,KAAKiE,OAAOC,KAAK2jB,GAA6C,CACzI1jB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA0rB,GAAmB9rB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAA+rB,IAcEA,GAAAlwB,UAAAkE,WAAA,SAAWZ,EAAgBD,GAMzB,OALyEnD,KAAKiE,OAAOC,KAAK4jB,GAAyC,CACjI3jB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,KAGPiB,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA2rB,GAAmB/rB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAgsB,IAYEA,GAAAnwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OAL8EvD,KAAKiE,OAAOC,KAAK8kB,GAA8C,CAC3I7kB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDALL4B,EAAAA,8IASP,SAAA4rB,GAAmBhsB,GAAAjE,KAAAiE,OAAAA,ECVrB,IAAAisB,IAcEA,GAAApwB,UAAAkE,WAAA,SAAWZ,EAAgBD,EAAkBE,EAAkBE,GAM7D,OALuEvD,KAAKiE,OAAOC,KAAK+oB,GAAuC,CAC7H9oB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,EAAEE,QAAOA,EAAEE,YAAWA,KAG7Ba,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA6rB,GAAmBjsB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAksB,IAcEA,GAAArwB,UAAAkE,WAAA,SAAWZ,EAAgBD,GAMzB,OALwFnD,KAAKiE,OAAOC,KAAKgpB,GAAwD,CAC/J/oB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,KAGPiB,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA8rB,GAAmBlsB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAmsB,IAcEA,GAAAtwB,UAAAkE,WAAA,SAAWZ,EAAgBD,GAMzB,OAL+EnD,KAAKiE,OAAOC,KAAKipB,GAA+C,CAC7IhpB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,KAGPiB,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAA+rB,GAAmBnsB,GAAAjE,KAAAiE,OAAAA,ECZrB,IAAAosB,IAcEA,GAAAvwB,UAAAkE,WAAA,SAAWZ,EAAgBD,GAMzB,OAL4EnD,KAAKiE,OAAOC,KAAKkpB,GAA4C,CACvIjpB,MAAO,QACPrC,KAAM,CAAEsB,MAAKA,EAAED,QAAOA,KAGPiB,oCAbpB5B,EAAAA,WAAU1B,KAAA,CAAC,CACV2B,WAAY,qDAPL4B,EAAAA,8IAWP,SAAAgsB,GAAmBpsB,GAAAjE,KAAAiE,OAAAA,4FCXjBqsB,KAAO,OACP3tB,MAAQ,QACR4tB,KAAO","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() inputFormControl: FormControl = new FormControl('', Validators.required);\r\n  @Input() requiredMessage: string = 'El campo es requerido';\r\n  @Input() value: string = '';\r\n  @Input() isFocused: boolean = false;\r\n  @ViewChild('inputText') nameField: ElementRef;\r\n\r\n  @Output() done: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() cancel: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.value !== '') {\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n    this.nameField.nativeElement.focus();\r\n  }\r\n\r\n\r\n  onDone(): void {\r\n    if (this.inputFormControl.valid) {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\n\r\n// @dynamic\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: {type: ToastType, message: string, subMessages?: string[]}) { }\r\n\r\n  ngOnInit(): void {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds: number = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type: ToastType, message: string, subMessages?: string[]): void {\r\n    subMessages = subMessages ? subMessages : [];\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message, type, subMessages},\r\n      duration: this.durationInSeconds * 1000\r\n    });\r\n  }\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = 'ERROR',\r\n    CONFIRMATION = 'CONFIRMATION'\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\ninterface AlertHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  type: AlertHelisaType;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: string;\r\n  hasCancel: boolean;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertHelisaProperties\r\n  ) {\r\n    this.content = data.content;\r\n    this.title = data.title;\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'aceptar';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'cancelar';\r\n    }\r\n    this.hasCancel = data.type === AlertHelisaType.CONFIRMATION;\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type: AlertHelisaType, title: string, content: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertHelisaComponent> = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, type, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport {ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency} from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable<T> {\r\n  columns: Array<ColumnConfig>;\r\n  isRemote: boolean;\r\n  dataSource?: Array<T>;\r\n  count?: number;\r\n  order?: number;\r\n  showTitle?: boolean;\r\n  indexRowSelect?: number;\r\n  isDragged?: boolean;\r\n  addRowButton?: AddRowButton;\r\n  configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\r\n  isCellSelection?: boolean;\r\n  addBookButton?: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class DependencyTableHelisaService<T> {\r\n\r\n\r\n  tables: Subject<ConfigTable<T>[]> = new Subject();\r\n  infoTables: Array<ConfigTable<T>> = new Array();\r\n\r\n  private emitVisibilityButton$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitVisibilityButton: Observable<EventDependency<boolean>> = this.emitVisibilityButton$.asObservable();\r\n\r\n  private emitVisibilityAllButtons$: Subject<boolean> = new Subject<boolean>();\r\n  emitVisibilityAllButtons: Observable<boolean> = this.emitVisibilityAllButtons$.asObservable();\r\n\r\n  private emitIsCellSelection$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\r\n  emitIsCellSelection: Observable<EventDependency<boolean>> = this.emitIsCellSelection$.asObservable();\r\n\r\n  private emitChangeColumns$: Subject<EventDependency<ColumnConfig[]>> = new Subject<EventDependency<ColumnConfig[]>>();\r\n  emitChangeColumns: Observable<EventDependency<ColumnConfig[]>> = this.emitChangeColumns$.asObservable();\r\n\r\n  emitTotal: Subject<EventDependency<TotalTableHelisa>> = new Subject<EventDependency<TotalTableHelisa>>();\r\n  emitNextPage: Subject<EventDependency<T[]>> = new Subject<EventDependency<T[]>>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable<T>[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable<T>, withRemoveDependency: boolean = false): void {\r\n    if (withRemoveDependency) {\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if (configTable.isRemote) {\r\n      configTable.dataSource = null;\r\n      if (configTable.count === null) {\r\n        throw new Error('hace falta el count');\r\n      }\r\n    } else {\r\n      if (configTable.dataSource === null) {\r\n        throw new Error('hace falta el dataSource');\r\n      }\r\n      configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  setTotal(event: EventDependency<TotalTableHelisa>): void {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  addPage(event: EventDependency<T[]>): void {\r\n    this.emitNextPage.next(event);\r\n  }\r\n\r\n  selectIndexRow(config: ConfigTable<T>): void {\r\n    if (this.infoTables[config.order]) {\r\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\r\n      this.tables.next(this.infoTables);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Muestra o esconde el boton una tabla en especifico\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeVisibilityButton(event: EventDependency<boolean>): void {\r\n    this.emitVisibilityButton$.next(event);\r\n  }\r\n\r\n\r\n  /**\r\n   * Esconde los botones de todas las tablas\r\n   * @param show indicar si se muestran o no todos los botones de las tablas\r\n   */\r\n  changeVisibilityAllButtons(show: boolean): void {\r\n    this.emitVisibilityAllButtons$.next(show);\r\n  }\r\n\r\n  /**\r\n   * Para habilitar el manejo de selecciÃ³n de celda\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeisCellSelection(event: EventDependency<boolean>): void {\r\n    this.emitIsCellSelection$.next(event);\r\n  }\r\n\r\n   /**\r\n    * Para habilitar el cambio de columnas\r\n    * @param event para indicar el index de la tabla y en \"data\" columnas\r\n    */\r\n  changeColumnsByTable( event: EventDependency<ColumnConfig[]>): void {\r\n    this.emitChangeColumns$.next(event);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\nimport {TotalTableHelisa} from './table-helisa.interface';\r\nimport {TableHelisaComponent} from './table-helisa.component';\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: {} | TableHelisaComponent<T>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource: Subject<TableHelisaServiceInfo<TotalTableHelisa>> = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage: Subject<TableHelisaServiceInfo<T[]>> = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn: Observable<TableHelisaServiceInfo<TotalTableHelisa>> = this.emitChangeSource.asObservable();\r\n  nextPageReturn: Observable<TableHelisaServiceInfo<T[]>> = this.emitNextPage.asObservable();\r\n\r\n  private emitVisibleButton$: Subject<boolean> = new Subject<boolean>();\r\n  /**\r\n   * Observable para saber si se debe mostrar o esconder el boton de add row\r\n   */\r\n  emitVisibleButton: Observable<boolean> = this.emitVisibleButton$.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<TotalTableHelisa>): void {\r\n    this.emitChangeSource.next({obj: total, table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>): void {\r\n    this.emitNextPage.next({obj: page, table});\r\n  }\r\n\r\n  /**\r\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\r\n   * @param change indicar si se muestra o no el boton de add row de la tabla\r\n   */\r\n  changeVisibilityButton(change: boolean): void {\r\n    this.emitVisibleButton$.next(change);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input } from '@angular/core';\r\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\r\nimport { ColumnConfig, RequestTableHelisa, SelectObject, TotalTableHelisa } from '../table-helisa/table-helisa.interface';\r\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\r\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency<T> {\r\n  index: number;\r\n  data: T;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [DependencyTableHelisaService]\r\n})\r\nexport class DependencyTableHelisaComponent<T> implements OnInit {\r\n\r\n  tables: Array<ConfigTable<T>> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<T>>;\r\n  @Input() showToolTip: boolean = true;\r\n\r\n  /**\r\n   * deprecated, use selectObject\r\n   */\r\n  @Output() selected: EventEmitter<EventDependency<T>> = new EventEmitter<EventDependency<T>>();\r\n  @Output() selectObject: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}  | T>>();\r\n  @Output() nextPage: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() total: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() sort: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() drop: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\r\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() selectCell: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  @Output() bookClicked: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\r\n  selectedObject: EventDependency<{}> = null;\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService<T>, private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      (event: EventDependency<T[]>) => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n\r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      (event: EventDependency<TotalTableHelisa>) => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder el boton de una tabla\r\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\r\n      (data: EventDependency<boolean>) => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (!!table) {\r\n            table.addRowButton.showButton = data.data;\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder los botones de todas las tablas\r\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\r\n      (data: boolean) => {\r\n        if (data !== undefined && data != null) {\r\n          this.tables.forEach((element: ConfigTable<T>) => {\r\n            if (!!element.addRowButton) {\r\n              element.addRowButton.showButton = data;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    // Observable para manejo de selecciÃ³n de celdas\r\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\r\n      (data: EventDependency<boolean>) => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.isCellSelection = data.data;\r\n          }\r\n        }\r\n      });\r\n\r\n    // Observable para manejo de columnas\r\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\r\n      (data: EventDependency<ColumnConfig[]>) => {\r\n        if (!!data && data.index !== undefined) {\r\n          const table: ConfigTable<T> = this.tables[data.index];\r\n          if (table) {\r\n            table.columns = data.data;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService(): DependencyTableHelisaService<T> {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables(): void {\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe((tables: ConfigTable<T>[]) => {\r\n        this.tables = tables;\r\n      }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: SelectObject<T>): void {\r\n    this.selectedObject = { index, data: event };\r\n    this.selected.emit({ index, data: event.value });\r\n    this.selectObject.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa<T>): void {\r\n    this.nextPage.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: EventDependency<T>): void {\r\n    this.total.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: EventDependency<T>): void {\r\n    this.sort.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onDrop(index: number, event: EventDependency<T>): void {\r\n    this.drop.emit({ index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe aÃ±adir una nueva fila\r\n   * @param index indica el indice de la tabla de la cual se dispara el evento\r\n   */\r\n  onAddRow(index: number): void {\r\n    this.addRow.emit(index);\r\n  }\r\n\r\n  selectedCell(index: number, event: EventDependency<T>): void {\r\n    if (this.tables[index].isCellSelection) {\r\n      this.selectCell.emit({ index, data: event });\r\n    }\r\n  }\r\n\r\n  onBookClicked(index: number, event: EventDependency<T>): void {\r\n    this.bookClicked.emit({ index, data: event });\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nexport enum InputHelisaType {\r\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit, AfterViewInit {\r\n\r\n  private readonly DECIMAL_SEPARATOR: string = '.';\r\n  private readonly THOUSAND_SEPARATOR: string = ',';\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n\r\n  /** Activar o desactivar el autocompletado\r\n   * (Caracteristica de los navegadores para campos comunes como\r\n   * Direccion , Usuario, Password ... etc)\r\n   */\r\n  @Input() autocompleteMode: boolean = false;\r\n\r\n  // Mostrar o no el icono de buscar\r\n  @Input() isSearch: boolean = false;\r\n  // @Input() inputFormControl: FormControl = new FormControl('');\r\n  @Input() isFocused: boolean = false;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Input() disabled: boolean = false;\r\n  @Input() type: InputHelisaType = InputHelisaType.DEFAULT;\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  // tslint:disable-next-line:no-any\r\n  @Output() blur: EventEmitter<any> = new EventEmitter();\r\n\r\n  formControlMask: FormControl = new FormControl('');\r\n  private realValue: string = '';\r\n  private inputFormReal: FormControl = new FormControl('');\r\n\r\n  @ViewChild('inputText') nameInput: ElementRef;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  @Input()\r\n  set inputFormControl(formControl: FormControl) {\r\n    this.inputFormReal = formControl;\r\n    this.inputFormReal.valueChanges.subscribe((data: string) => {\r\n      this.statusChange(this.inputFormReal.status);\r\n      if (this.getMaskedValue(data) !== this.formControlMask.value) {\r\n        this.change(data);\r\n        if (this.isFocused) {\r\n          this.onFocus(null);\r\n        }\r\n      }\r\n    });\r\n    this.formControlMask.setValidators(this.inputFormReal.validator);\r\n    this.change(this.inputFormReal.value);\r\n    // disable control\r\n    if (formControl.disabled) {\r\n      this.formControlMask.disable({ onlySelf: true });\r\n    }\r\n    this.inputFormReal.statusChanges.subscribe(\r\n      (data: string) => {\r\n        this.statusChange(data);\r\n        if (this.isFocused) {\r\n          this.onFocus(null);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  private statusChange(data: string): void {\r\n    if (data === 'INVALID') {\r\n      this.formControlMask.setErrors({ key: 'Error de validaciÃ³n.' });\r\n    } else {\r\n      this.formControlMask.setErrors(null);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.isFocused) {\r\n      this.nameInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // this.isParentDisabled();\r\n  }\r\n\r\n  /*isParentDisabled(): void {\r\n    setTimeout(() => {\r\n      if (this.nameInput.nativeElement.closest('.hw-disabled-mode')) {\r\n        this.disabled = true;\r\n      } else {\r\n        this.disabled = false;\r\n      }\r\n    });\r\n  }*/\r\n\r\n  search(): void {\r\n    this.setValue.emit(this.realValue);\r\n  }\r\n\r\n  change(event: string): void {\r\n    if (event != null) {\r\n      event = event + '';\r\n    }\r\n    let position: number = this.nameInput.nativeElement.selectionStart;\r\n    const length: number = event ? event.length : 0;\r\n    this.realValue = this.getRealValue(event);\r\n    if (this.getMaskedValue(this.realValue) !== this.formControlMask.value) {\r\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue));\r\n      position += this.nameInput.nativeElement.value.length - length;\r\n      this.nameInput.nativeElement.selectionStart = position;\r\n      this.nameInput.nativeElement.selectionEnd = position;\r\n    }\r\n    this.inputFormReal.setValue(this.realValue);\r\n  }\r\n\r\n  private getMaskedValue(str: string): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    if (this.type === InputHelisaType.DEFAULT) {\r\n      return str;\r\n    }\r\n    let maskedStr: string = '';\r\n    if (this.type === InputHelisaType.IDENTITY) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.NUMERIC) {\r\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.DOUBLE) {\r\n      if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {\r\n        for (let i: number = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {\r\n          maskedStr += str[i];\r\n        }\r\n      }\r\n      for (let i: number = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1,\r\n        j: number = 0; i >= 0; i--, j++) {\r\n\r\n        if (j > 0 && j % 3 === 0) {\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        }\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    return maskedStr;\r\n  }\r\n\r\n  private getRealValue(str: string): string {\r\n    if (str == null) {\r\n      return str;\r\n    }\r\n    str = str + '';\r\n    let realStr: string = '';\r\n    if (this.type === InputHelisaType.DEFAULT) {\r\n      return str;\r\n    }\r\n    if (this.type === InputHelisaType.IDENTITY) {\r\n      for (const strItem of str) {\r\n        if (strItem.match('[a-zA-Z0-9]')) {\r\n          realStr += strItem;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.NUMERIC) {\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]')) {\r\n          realStr += strItem;\r\n        }\r\n      }\r\n    }\r\n    if (this.type === InputHelisaType.DOUBLE) {\r\n      let haveDot: boolean = false;\r\n\r\n      for (const strItem of str) {\r\n        if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {\r\n          realStr += strItem;\r\n        }\r\n        haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);\r\n      }\r\n    }\r\n    return realStr;\r\n  }\r\n\r\n  onFocus($event: FocusEvent): void {\r\n    if ((this.type === InputHelisaType.NUMERIC || this.type === InputHelisaType.DOUBLE) &&\r\n      Number(this.getRealValue(this.nameInput.nativeElement.value)) === 0) {\r\n      this.nameInput.nativeElement.select();\r\n    }\r\n  }\r\n}\r\n","import {SortDirection} from '@angular/material';\r\nimport { RowData } from './table-helisa.component';\r\n\r\nexport enum ColumnType {\r\n  NORMAL, URL\r\n}\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title?: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n  subtitle?: string;\r\n  colspanTitle?: number;\r\n  colspanSubtitle?: number;\r\n  columnStyle?: string;\r\n  columnType?: ColumnType;\r\n}\r\n\r\nexport interface AddRowButton {\r\n  text: string;\r\n  showButton: boolean;\r\n}\r\n\r\nexport enum EventScope {\r\n  USER, CODE_CALL\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa<T> {\r\n  page: number;\r\n  body: {} | T;\r\n}\r\n\r\nexport interface DropElement<T> {\r\n value: T;\r\n order: number;\r\n}\r\n\r\nexport interface SelectObject<T> {\r\n  value: T;\r\n  scope: EventScope;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n\r\nexport interface Cell<T> {\r\n  column: ColumnConfig;\r\n  row: RowData<T> | T;\r\n }\r\n\r\nexport interface ConfigCellStyles<T> {\r\n   cellData: T;\r\n   classCell: string;\r\n }\r\n\r\nexport interface ConfigRowStyles<T> {\r\n  column: ColumnConfig;\r\n  data: {} | T;\r\n  classRow: string;\r\n}\r\n\r\n// @dynamic\r\nexport class ColumnConfigUtil<T> {\r\n\r\n  getValue(obj: T, column: ColumnConfig): T | number | string {\r\n    return column.name.split('.').reduce((o: T, field: string) => o && o[field], obj);\r\n  }\r\n}\r\n\r\n","import {ColumnConfig} from './table-helisa.interface';\r\nimport {Observable} from 'rxjs';\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): {} {\r\n    return {};\r\n  }\r\n\r\n  nextPage(): number {\r\n    return this.page++;\r\n  }\r\n}\r\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef } from '@angular/core';\r\nimport { MatSort, MatTable, MatTableDataSource } from '@angular/material';\r\nimport { Sort } from '@angular/material/typings/sort';\r\n\r\nimport {\r\n  AddRowButton,\r\n  Cell,\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  ConfigCellStyles,\r\n  ConfigRowStyles,\r\n  DropElement,\r\n  EventColumn,\r\n  EventScope,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  SelectObject,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType,\r\n  ColumnType,\r\n  TotalTableHelisa\r\n} from './table-helisa.interface';\r\nimport { TableHelisaService, TableHelisaServiceInfo } from './table-helisa.service';\r\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { of } from 'rxjs';\r\n\r\nexport interface RowData<T> {\r\n  data: {} | T;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData<T>>;\r\n  displayedColumns: string[] = [];\r\n  displayedColumnsWithTitle: string[] = [];\r\n  displayedColumnsWithSubtitle: string[] = [];\r\n  displayedColumnsWithFooter: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n  indexRowSelect: number;\r\n  private scrollCount: number = 0;\r\n  hasSubtitle: boolean = false;\r\n  private indexRowStartDrag: number = -1;\r\n  private lastIndexRowDrag: number = -1;\r\n  private dataBeforeDrag: { data: RowData<T>[] } = null;\r\n  private dataSource$: Array<T> = [];\r\n  private scrollX: number = 0;\r\n  private scrollY: number = 0;\r\n\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n  @ViewChild(MatTable) matTable: MatTable<T>;\r\n  @ViewChild(MatTable, { read: ElementRef }) matTableElement: ElementRef;\r\n  @ViewChild('containerTable') containerTable: ElementRef;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n\r\n  /**\r\n   * Deprecado, cambiar por electObject\r\n   */\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() selectCell: EventEmitter<Cell<T>> = new EventEmitter<Cell<T>>();\r\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa<T>> = new EventEmitter<RequestTableHelisa<T>>();\r\n  @Input() showTitle: boolean = true;\r\n  @Input() isCellSelection: boolean = false;\r\n  @Input() count: number;\r\n  @Input() configCellStyles: Array<ConfigCellStyles<T>>;\r\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\r\n  @Input() selectedCells: Cell<T>;\r\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\r\n  @Input() isDragged: boolean = false;\r\n  @Input() addRowButton: AddRowButton = { showButton: false, text: '' };\r\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\r\n  @Input() addBookButton: boolean = false;\r\n  @Input() showToolTip: boolean = true;\r\n  showFooter: boolean = false;\r\n  showSearch: boolean = false;\r\n\r\n\r\n\r\n  /**\r\n   * Tiempo antes de ocultarla el mensaje del tooltip\r\n   */\r\n  @Input() hideDelay: number = 600;\r\n\r\n  /**\r\n   * Tiempo antes de mostra el mensaje del tooltip\r\n   */\r\n  @Input() showDelay: number = 500;\r\n\r\n\r\n  constructor(private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.tableService.nextPageReturn.subscribe(\r\n      (data: TableHelisaServiceInfo<T[]>) => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe((info: TableHelisaServiceInfo<TotalTableHelisa>) => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column: ColumnConfig, idx: number) => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort) => {\r\n        const column: ColumnConfig = this.columnConfig.find((c: ColumnConfig) => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\r\n      }\r\n    );\r\n\r\n    this.tableService.emitVisibleButton.subscribe(\r\n      (data: boolean) => {\r\n        if (data !== undefined && data != null) {\r\n          this.addRowButton.showButton = data;\r\n        }\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.isCellSelection) {\r\n      this.matTable.renderRows();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.goNextPage();\r\n    } else {\r\n      this.tableHelisaConnectComponent.page++;\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.hasSubtitle = false;\r\n    this.columnConfig = columnConfiguration;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n\r\n    if (columnConfiguration) {\r\n      if (this.addBookButton) {\r\n        const columnCount: number = columnConfiguration.length;\r\n        let countSubtitle: number = 0;\r\n        let showBookButton: boolean = false;\r\n        columnConfiguration.forEach((column: ColumnConfig) => {\r\n          if (!!column.subtitle) {\r\n            countSubtitle = countSubtitle + 1;\r\n          }\r\n          if ((!showBookButton) && (column.name === 'bookButton')) {\r\n            showBookButton = true;\r\n          }\r\n        });\r\n        const subtitleTemp: boolean = columnCount === countSubtitle;\r\n        if (!showBookButton) {\r\n          columnConfiguration.push({\r\n            name: 'bookButton',\r\n            title: '',\r\n            subtitle: subtitleTemp ? '' : undefined ,\r\n            visible: true\r\n          });\r\n        }\r\n      }\r\n\r\n      columnConfiguration.forEach((column: ColumnConfig) => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n        if (!this.hasSubtitle) {\r\n          this.hasSubtitle = column.subtitle !== undefined;\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\r\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\r\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\r\n    this.getColumnsWithTitle().forEach((col: string) => this.displayedColumnsWithTitle.push(col));\r\n    this.getHeaderSubtitle().forEach((col: string) => this.displayedColumnsWithSubtitle.push(col));\r\n    this.footerDisplayedColumns().forEach((col: string) => this.displayedColumnsWithFooter.push(col));\r\n  }\r\n\r\n\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<T>) {\r\n    this.dataSource$ = dataSource;\r\n    this.rawData = dataSource;\r\n    if (this.rawData) { this.prepareDataSource(); }\r\n  }\r\n\r\n  get dataSource(): Array<T> {\r\n    return this.dataSource$;\r\n  }\r\n\r\n  @Input()\r\n  set selectedIndexRow(idRowSelected: number) {\r\n    this.indexRowSelect = idRowSelected;\r\n    if (this.rawData && this.rawData.length) {\r\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private prepareDataSource(): void {\r\n    const changeData: Array<RowData<T>> = Array<RowData<T>>();\r\n    let haveGroup: boolean = false;\r\n    let groupFooter: Array<TotalGroup>;\r\n    this.columnConfig.forEach((column: ColumnConfig) => {\r\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n        this.totalData = new Array<number>(this.columnConfig.length);\r\n        this.showFooter = true;\r\n        this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\r\n      }\r\n      this.showSearch = this.showSearch || column.searchable;\r\n      haveGroup = haveGroup || column.groupable;\r\n    });\r\n    if (haveGroup) {\r\n      this.rawData = this.rawData.sort((a: T, b: T) => {\r\n        let result: number = 0;\r\n        this.columnConfig.forEach((column: ColumnConfig) => {\r\n          if (result === 0) {\r\n            result = this.compare(a, b);\r\n          }\r\n        });\r\n        return result;\r\n      });\r\n    }\r\n    this.rawData.forEach((row: T) => {\r\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data as T, row) !== 0)) {\r\n        if (groupFooter) {\r\n          changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\r\n        }\r\n        changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\r\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n      }\r\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\r\n      changeData.push({ data: row, rowType: RowType.ROW });\r\n    });\r\n    this.data = new MatTableDataSource<RowData<T>>(changeData);\r\n    if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\r\n      if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: T): void {\r\n    this.columnConfig.forEach((column: ColumnConfig, index: number) => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = { sum: (new ColumnConfigUtil().getValue(row, column) as number), count: 1 };\r\n        } else {\r\n          rowTotal[index].sum += (new ColumnConfigUtil().getValue(row, column) as number);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: T, b: T): number {\r\n    let ws: number = 0;\r\n    this.columnConfig.forEach((column: ColumnConfig) => {\r\n      if (ws === 0 && column.groupable) {\r\n        if ((new ColumnConfigUtil().getValue(a, column) as number) < (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = -1;\r\n        } else if ((new ColumnConfigUtil().getValue(a, column) as number) > (new ColumnConfigUtil().getValue(b, column) as number)) {\r\n          ws = 1;\r\n        }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: T): string {\r\n    let result: string = '';\r\n    this.columnConfig.forEach((column: ColumnConfig) => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + (new ColumnConfigUtil().getValue(obj, column));\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index: number, item: RowData<T>): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map((name: string) => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: T, column: ColumnConfig): T {\r\n    return new ColumnConfigUtil().getValue(obj, column) as T;\r\n  }\r\n\r\n  getValueTooltip(obj: T, column: ColumnConfig): string {\r\n    if (this.showToolTip) {\r\n      return new ColumnConfigUtil().getValue(obj, column) as string;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  searchText(text: string): void {\r\n    this.lastSearch = text;\r\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\r\n  }\r\n\r\n  selectRow(row: RowData<T>, isUser: boolean, column?: ColumnConfig): void {\r\n    if (row === undefined || row === null) {\r\n      return;\r\n    }\r\n    if ((column === undefined || column === null) || (!!column && column.name !== 'bookButton')) {\r\n      this.selectedObject = row.data as T;\r\n      this.select.emit(this.selectedObject);\r\n      this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n    } else if (!!column && column.name === 'bookButton') {\r\n      if (this.selectedObject !== row.data) {\r\n        this.selectedObject = row.data as T;\r\n        this.select.emit(this.selectedObject);\r\n        this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n      }\r\n      this.bookClicked.emit(this.selectedObject);\r\n    }\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n    let isScrollY: boolean;\r\n\r\n    if (this.scrollY !== element.scrollTop) {\r\n      isScrollY = true;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if (this.scrollX !== element.scrollLeft) {\r\n      isScrollY = false;\r\n      this.scrollY = element.scrollTop;\r\n      this.scrollX = element.scrollLeft;\r\n    }\r\n\r\n    if ((element.scrollHeight - element.scrollTop < 1000) && isScrollY) {\r\n      this.goNextPage();\r\n    }\r\n\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]): void {\r\n    if (!this.rawData) {\r\n      this.rawData = new Array<T>();\r\n    }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n    this.tableHelisaConnectComponent.isUsed = false;\r\n  }\r\n\r\n  dblClickCell(): void {\r\n    this.selectCell.emit(this.selectedCells as Cell<T>);\r\n  }\r\n\r\n  selectedCell(element: RowData<T>, column: ColumnConfig): void {\r\n    this.selectRow(element, true, column);\r\n\r\n    this.selectedCells = { column, row: element };\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean {\r\n    if (this.isCellSelection) {\r\n      if (this.selectedCells != null) {\r\n        if (this.selectedCells.column.name === column.name &&\r\n          (this.selectedCells.row as RowData<T>).data === row.data) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getClassToCell(row: T, column: ColumnConfig): string[] {\r\n    const classToCell: Array<string> = new Array<string>();\r\n    if (this.configCellStyles) {\r\n      const found: ConfigCellStyles<T> = this.configCellStyles.find((c: ConfigCellStyles<T>) => {\r\n        return c.cellData === this.getValue(row, column);\r\n      });\r\n      if (found) {\r\n        classToCell.push(found.classCell);\r\n      }\r\n    }\r\n    if (column.columnStyle) {\r\n      classToCell.push(column.columnStyle);\r\n    }\r\n    return classToCell;\r\n  }\r\n\r\n  getClassToRow(row: T): string[] {\r\n    const classToRow: Array<string> = new Array<string>();\r\n    if (row === this.selectedObject && !this.isCellSelection) {\r\n      classToRow.push('');\r\n    }\r\n    if (this.configRowStylesFromColumn) {\r\n      const found: ConfigRowStyles<T> = this.configRowStylesFromColumn.find((c: ConfigRowStyles<T>) => {\r\n        return c.data === this.getValue(row, c.column);\r\n      });\r\n      if (found) {\r\n        classToRow.push(found.classRow);\r\n      }\r\n    }\r\n    return classToRow;\r\n  }\r\n\r\n  onDrop(event: MouseEvent): void {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      const array: RowData<T>[] = this.dataBeforeDrag.data;\r\n      const rawData: T[] = this.rawData;\r\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\r\n      this.drop.emit({ value: array[rowIndex].data as T, order: rowIndex });\r\n      this.rawData = rawData;\r\n      this.data = new MatTableDataSource(array);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  tableKeydown(event: KeyboardEvent): void {\r\n    if (!this.isCellSelection) {\r\n      let currentIndex: number = this.data.data.findIndex((row: RowData<T>) => row.data === this.selectedObject);\r\n      let newSelection: number = -10;\r\n      if (event.key === 'ArrowDown') {\r\n        this.scrollCount++;\r\n        this.data.data.forEach((row: RowData<T>, index: number) => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n      }\r\n      if (event.key === 'ArrowUp') {\r\n        this.scrollCount--;\r\n        currentIndex = this.data.data.length - currentIndex - 1;\r\n        this.data.data.reverse().forEach((row: RowData<T>, index: number) => {\r\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\r\n            newSelection = index;\r\n          }\r\n        });\r\n        this.data.data.reverse();\r\n        if (newSelection !== -10) {\r\n          newSelection = this.data.data.length - newSelection - 1;\r\n        }\r\n      }\r\n      if (newSelection !== -10) {\r\n        this.selectRow(this.data.data[newSelection], true);\r\n      }\r\n      if (Math.abs(this.scrollCount) >= 2) {\r\n        this.scrollCount = 0;\r\n      } else {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emite el evento cuando se da click al boton AddRow\r\n   */\r\n  onAddRow(): void {\r\n    this.addRow.emit();\r\n  }\r\n\r\n\r\n  getHeaderSubtitle(): string[] {\r\n    const x: string[] = this.columnConfig.map((column: ColumnConfig, index: number) => {\r\n      if (column.visible && column.subtitle !== undefined) {\r\n        return 'subtitle' + index;\r\n      } else {\r\n        return null;\r\n      }\r\n    }).filter((data: string) => data != null);\r\n    return x;\r\n  }\r\n\r\n  getColumnsWithTitle(): string[] {\r\n    return this.columnConfig.filter((column: ColumnConfig) =>\r\n      column.visible && column.title !== undefined\r\n    ).map((col: ColumnConfig) => col.name);\r\n  }\r\n\r\n  dragger(event: MouseEvent): boolean {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex: number = this.getRowIndex(event.pageY);\r\n      if (rowIndex !== this.lastIndexRowDrag) {\r\n        this.lastIndexRowDrag = rowIndex;\r\n        // This can have a memory problem with big data\r\n        const array: RowData<T>[] = [...this.dataBeforeDrag.data];\r\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n        this.data = new MatTableDataSource(array);\r\n      }\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  startDrag(event: MouseEvent): void {\r\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\r\n    this.lastIndexRowDrag = this.indexRowStartDrag;\r\n    this.dataBeforeDrag = this.data;\r\n  }\r\n\r\n  private getRowIndex(pageY: number): number {\r\n    let offsetTop: number = 0;\r\n    let container: HTMLElement = this.containerTable.nativeElement;\r\n    while ((container !== null) && (offsetTop === 0)) {\r\n      offsetTop = container.offsetTop;\r\n      container = container.parentElement;\r\n    }\r\n    let rowIndex: number = -1;\r\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\r\n    for (let i: number = 0; i < rows.length; i++) {\r\n      const row: HTMLElement = (rows[i] as HTMLElement);\r\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop) {\r\n        rowIndex = i;\r\n      }\r\n    }\r\n    if (rowIndex < 0) { rowIndex = 0; }\r\n    return rowIndex;\r\n  }\r\n\r\n  get columnType(): typeof ColumnType {\r\n    return ColumnType;\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input, Output, EventEmitter, ViewChild} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport * as moment_ from 'moment';\r\nconst moment: typeof moment_ = moment_;\r\n\r\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material';\r\nimport { filter, tap } from 'rxjs/operators';\r\n\r\nexport enum TypeCalendarEnum {\r\n  NORMAL = 'norma',\r\n  MONTH_YEAR = 'mounth-year',\r\n  STRICT = 'strict'\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css'],\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n\r\n  @ViewChild('picker') datePickerShow: MatDatepicker<Date>;\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n  private date: Date = new Date();\r\n\r\n  /**\r\n   * Formato de fecha.\r\n   * Los formatos validos son aquellos que maneja la libreria momentjs y este: 'DD [de] MMMM [de] YYYY'\r\n   * https://momentjs.com/docs/#/parsing/string-format/\r\n   */\r\n  @Input() dateFormat: string = 'DD/MM/YYYY';\r\n  @Input() locale: string = 'es';\r\n  @Input() errorMessage: string = 'La fecha no concuerda con el formato ';\r\n  @Input() placeholder: string = this.dateFormat;\r\n  @Input() showDatePicker: boolean = false;\r\n  @Output() change: EventEmitter<Date> = new EventEmitter<Date>();\r\n  isClosed: boolean = false;\r\n  // tslint:disable-next-line:no-any\r\n  timeout: any;\r\n  /**\r\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\r\n   * serÃ¡ tomado en cuenta\r\n   */\r\n  @Input() typeCalendar: TypeCalendarEnum = TypeCalendarEnum.NORMAL;\r\n\r\n  dateToVisualize: FormControl;\r\n\r\n  /**\r\n   * Para evitar nuevos eventos miestras se realiza el parseo\r\n   */\r\n  private isFromInputEvent: boolean = false;\r\n\r\n  /**\r\n   * Verificar si el formato es valido\r\n   */\r\n  invalidFormat: boolean = false;\r\n\r\n  constructor() { }\r\n\r\n  /*\r\n  * TypeCalendarEnum.MONTH_YEAR = 'MM/YYYY'\r\n  * TypeCalendarEnum.STRICT = 'DD [de] MMMM [de] YYYY'\r\n  * */\r\n  ngOnInit(): void {\r\n    moment.locale(this.locale);\r\n    this.dateToVisualize = new FormControl('', this.dateFormControl.validator);\r\n    this.formHandler();\r\n\r\n    /**\r\n     * establecer valor por defecto de la fecha\r\n     */\r\n    if (this.dateFormControl.value !== '' && this.dateFormControl.value !== null) {\r\n      const incomingDate: string = moment(this.dateFormControl.value, this.dateFormat).format(this.dateFormat);\r\n      if (incomingDate !== 'Invalid date') {\r\n        this.dateToVisualize.setValue(incomingDate);\r\n        this.dateFormControl.setValue(this.dateFormControl.value);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  get typeCalendarEnum(): typeof TypeCalendarEnum {\r\n    return TypeCalendarEnum;\r\n  }\r\n\r\n  openDatePicker(): void {\r\n    if (this.showDatePicker && !this.isClosed) {\r\n      this.isClosed = true;\r\n      this.timeout = setTimeout(() => {\r\n        this.datePickerShow.open();\r\n      }, 2000);\r\n    }\r\n  }\r\n\r\n  onKey(event: KeyboardEvent): void {\r\n    if (event.key === ' ' && this.showDatePicker) {\r\n      this.onBlur();\r\n      this.isClosed = true;\r\n      this.datePickerShow.open();\r\n    }\r\n  }\r\n\r\n  onBlur(): void {\r\n    clearTimeout(this.timeout);\r\n    this.isClosed = false;\r\n  }\r\n\r\n  /**\r\n   * Determina como se debe inicializar la visualizacion del calendar\r\n   */\r\n  getStartView(): string {\r\n    // multi-year\r\n    if (this.typeCalendar === this.typeCalendarEnum.MONTH_YEAR) {\r\n      return 'multi-year';\r\n    } else if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\r\n      return 'month';\r\n    } else {\r\n      return 'month';\r\n    }\r\n  }\r\n\r\n  private formHandler(): void {\r\n    if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\r\n      this.dateToVisualize.valueChanges.subscribe((date: string) => {\r\n          this.invalidFormat = false;\r\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\r\n          const result: string = moment(date, this.dateFormat).format(this.dateFormat);\r\n          if (!!result && (result === 'Invalid date' || !isValid)) {\r\n            this.invalidFormat = true;\r\n            return;\r\n          }\r\n          if (!!result) {\r\n            if (!this.isFromInputEvent) {\r\n              this.isFromInputEvent = true;\r\n              this.dateToVisualize.setValue(moment(result, this.dateFormat).format(this.dateFormat));\r\n              this.dateFormControl.setValue(moment(result, this.dateFormat).toDate());\r\n              this.isFromInputEvent = false;\r\n            } else {\r\n              setTimeout(() => {\r\n                this.isFromInputEvent = false;\r\n              }, 1500);\r\n            }\r\n\r\n          }\r\n        });\r\n    } else {\r\n      this.dateToVisualize.valueChanges\r\n        .pipe(\r\n          tap((date: string) => {\r\n            if (date.length > this.dateFormat.length) {\r\n              this.invalidFormat = true;\r\n            } else {\r\n              this.invalidFormat = false;\r\n            }\r\n          }),\r\n          filter((date: string) => date.length === this.dateFormat.length)\r\n        )\r\n        .subscribe((date: string) => {\r\n          this.invalidFormat = false;\r\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\r\n          const result: string = moment(date, this.dateFormat).format('YYYY-MM-DD');\r\n\r\n          if (!!result && (result === 'Invalid date' || !isValid)) {\r\n            this.invalidFormat = true;\r\n            return;\r\n          }\r\n\r\n          if (!!result) {\r\n            if (!this.isFromInputEvent) {\r\n              this.isFromInputEvent = true;\r\n              const subString: string[] = result.split('-');\r\n\r\n              const year: number = parseFloat(subString[0]);\r\n              const month: number = parseFloat(subString[1]);\r\n              const day: number = parseFloat(subString[2]);\r\n\r\n              this.date.setFullYear(year);\r\n              this.date.setDate(day);\r\n              this.date.setMonth(month - 1); // -1 por que los meses se toman como los indices en un array\r\n\r\n              /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\r\n              if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n                this.date = moment(this.date).endOf('month').toDate();\r\n              }\r\n\r\n              this.dateToVisualize.setValue(moment(this.date, 'YYYY-MM-DD').format(this.dateFormat));\r\n              this.dateFormControl.setValue(this.date);\r\n              this.isFromInputEvent = false;\r\n            } else {\r\n              setTimeout(() => {\r\n                this.isFromInputEvent = false;\r\n              }, 1500);\r\n            }\r\n\r\n          }\r\n        });\r\n    }\r\n\r\n\r\n    this.dateFormControl.valueChanges\r\n      .subscribe((date: string) => {\r\n        const incommingDate: string = moment(date, this.dateFormat).format(this.dateFormat);\r\n        if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\r\n          this.dateToVisualize.setValue(incommingDate);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Evento que se dispara luego seleccionar un mes\r\n   */\r\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void {\r\n\r\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\r\n      datepicker.close();\r\n      const date: Date = moment(chosenMonthDate).endOf('month').toDate();\r\n\r\n      this.dateToVisualize.setValue(moment(date, 'YYYY-MM-DD').format(this.dateFormat));\r\n      this.dateFormControl.setValue(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evento desde el control touch del calendar\r\n   */\r\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>): void {\r\n    this.dateToVisualize.setValue(moment(event.value, 'YYYY-MM-DD').format(this.dateFormat));\r\n    this.dateFormControl.setValue(event.value);\r\n    this.change.emit(event.value);\r\n    this.isClosed = true;\r\n  }\r\n\r\n  getErrorMessage(): string {\r\n    return this.errorMessage + this.dateFormat;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Subscriber, Observable } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected: BehaviorSubject<number | string> = new BehaviorSubject<number | string>(1);\r\n    // Observable string streams\r\n    nodeSelected: Observable<string | number> = this.emitNodeSelected.asObservable();\r\n\r\n    // Observable string sources\r\n    private emitDataSource: BehaviorSubject<Node> = new BehaviorSubject<Node>(undefined);\r\n\r\n    // Observable string streams\r\n    dataSourceObservable: Observable<Node> = this.emitDataSource.asObservable();\r\n\r\n    // Expand node observable\r\n    private emitExpandAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n    nodeExpand: Observable<boolean> = this.emitExpandAllNodes.asObservable();\r\n\r\n     // Collapse node observable\r\n     private emitCollapseAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\r\n     nodeCollapse: Observable<boolean> = this.emitCollapseAllNodes.asObservable();\r\n\r\n    private emitRefreshTree: Subject<void> = new Subject<void>();\r\n    refreshTreeObservable: Observable<void> = this.emitRefreshTree.asObservable();\r\n\r\n    private emitRefreshTreeWithPagination: Subject<void> = new Subject<void>();\r\n    refreshTreeWithPaginationObservable: Observable<void> = this.emitRefreshTreeWithPagination.asObservable();\r\n\r\n    private emitExpandOneNode: Subject<Node> = new Subject<Node>();\r\n    expandOneNodeObservable: Observable<Node> = this.emitExpandOneNode.asObservable();\r\n\r\n    private emitCollapseOneNode: Subject<Node> = new Subject<Node>();\r\n    collapseOneNodeObservable: Observable<Node> = this.emitCollapseOneNode.asObservable();\r\n\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number | string): void {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n    // Service message commands\r\n    changeDataSource(data: Node): void {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n    expandAllNodes(expand: boolean): void {\r\n        this.emitExpandAllNodes.next(expand);\r\n    }\r\n\r\n    collapseAllNodes(collapse: boolean): void {\r\n        this.emitCollapseAllNodes.next(collapse);\r\n    }\r\n\r\n    refreshTree(): void {\r\n        this.emitRefreshTree.next();\r\n    }\r\n\r\n\r\n    refreshTreeWithPagination(): void {\r\n        this.emitRefreshTreeWithPagination.next();\r\n    }\r\n\r\n\r\n    expandOneNode(node: Node): void {\r\n    this.emitExpandOneNode.next(node);\r\n    }\r\n\r\n\r\n    collapseOneNode(node: Node): void {\r\n        this.emitCollapseOneNode.next(node);\r\n    }\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n}\r\n","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n\r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }\r\n\r\n    nextPage(): number {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }\r\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, HostListener } from '@angular/core';\r\nimport { NestedTreeControl, TreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource, MatTree, MatOptionSelectionChange } from '@angular/material';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass']\r\n  // host: { '(document:keyup)': 'onKeyDown($event)' }\r\n})\r\nexport class TreeHelisaComponent implements OnInit, AfterViewInit {\r\n  isDisabled: boolean;\r\n  selectedNode: number | string | null;\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService: TreeHelisaService, private router: Router, private elementRef: ElementRef) {\r\n    // cargar datos pasados por el @Input\r\n    if (!!this.data) {\r\n      const data: Node = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = [];\r\n      this.treeControl.dataNodes = [];\r\n    }\r\n  }\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit: FormControl;\r\n  @ViewChild('tree') tree: MatTree<{}>;\r\n  private selectedOptions: Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  > = new Map<\r\n    string | number,\r\n    {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    }\r\n  >();\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data: Node;\r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed: EventEmitter<string | number> = new EventEmitter<number | string>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue aÃ±adido\r\n   */\r\n  @Output() added: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() collapseParent: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled: EventEmitter<RequestTreeHelisa> = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() dobleClick: EventEmitter<number | string> = new EventEmitter<number | string>();\r\n  @Output() keypressDelete: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() keypressInsert: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() checkedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() uncheckedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\r\n  @Output() clickAddNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickEditNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n  @Output() clickDeleteNode: EventEmitter<Node> = new EventEmitter<Node>();\r\n\r\n  treeControl: NestedTreeControl<Node> = new NestedTreeControl<Node>((node: Node): Node[] | Observable<Node[]> => node.children);\r\n  dataSource: MatTreeNestedDataSource<Node> = new MatTreeNestedDataSource<Node>();\r\n\r\n  isSingleClick: boolean = true;\r\n  currentNode: Node = null;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node: Node): string {\r\n    let result: string[] = [node.name];\r\n    let concat: string = '';\r\n\r\n    if (node.parent) {\r\n      result.push(this.getDescription(node.parent));\r\n    }\r\n\r\n    if (result.length === 1) {\r\n      return node.name;\r\n    }\r\n\r\n    result = result.reverse();\r\n\r\n    for (let i: number = 0; i < result.length; i++) {\r\n      const element: string = result[i];\r\n      concat = concat + element + (i === result.length - 1 ? '' : ',');\r\n    }\r\n\r\n    return concat;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable.subscribe((res: Node) => {\r\n      if (!!res && !!res.children) {\r\n        this.selectedNode = res.id;\r\n        this.receivePage(res.children);\r\n      } else {\r\n        this.dataSource.data = [];\r\n        this.treeControl.dataNodes = [];\r\n      }\r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected.subscribe((res: string | number) => {\r\n      if (!!this.data && !!this.data.children) {\r\n        this.selectNode(this.data, res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeObservable.subscribe((res: void) => {\r\n      this.refreshTree();\r\n    });\r\n\r\n    this.treeHelisaService.refreshTreeWithPaginationObservable.subscribe((res: void) => {\r\n      this.refreshTreeWithPagination();\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.treeHelisaService.nodeExpand.subscribe((res: boolean) => {\r\n      if (res != null) {\r\n        if (res) {\r\n          this.tree.treeControl.expandAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.nodeCollapse.subscribe((res: boolean) => {\r\n      if (res !== null) {\r\n        if (res) {\r\n          this.tree.treeControl.collapseAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.expandOneNodeObservable.subscribe((res: Node) => {\r\n      if (res !== undefined) {\r\n        this.treeControl.expand(res);\r\n      }\r\n    });\r\n\r\n    this.treeHelisaService.collapseOneNodeObservable.subscribe((res: Node) => {\r\n      if (res !== undefined) {\r\n        this.treeControl.collapse(res);\r\n      }\r\n    });\r\n  }\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node: Node): void {\r\n    this.isSingleClick = true;\r\n    setTimeout(() => {\r\n      if (this.isSingleClick) {\r\n        this.selectNode(node, node.id);\r\n\r\n        // if(!!node && !node.children){\r\n        if (!!node) {\r\n          this.nodeSelected.emit(node.id);\r\n          this.currentNode = node;\r\n        }\r\n      }\r\n    }, 350);\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n\r\n    if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node: Node): void {\r\n    this.clickEditNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se edita el nodo ahora solo se emite el evento 'clickEditNode'\r\n     * retornando el nodo al cual le hicieron click en la opciÃ³n delete\r\n     */\r\n    // node.isEditable = true;\r\n    // this.isDisabled = true;\r\n  }\r\n\r\n  onAdd(node: Node): void {\r\n    this.clickAddNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se crea y se agrega el nodo ahora solo se emite el evento 'clickAddNode'\r\n     * retornando el nodo al cual le hicieron click en la opciÃ³n add\r\n     */\r\n    //   // si no tiene hijos instanciar el array\r\n    //   if (!node.children) {\r\n    //     node.children = [];\r\n    //   }\r\n    //   node.children.push({\r\n    //     id: Math.random(),\r\n    //     name: '',\r\n    //     isSelected: false,\r\n    //     parent: node,\r\n    //     isEditable: true\r\n    //   });\r\n    //   if (node.children) {\r\n    //     this.isDisabled = true;\r\n    //     this.treeHelisaService.expandOneNode(node);\r\n    //   }\r\n    //   this.refreshTree();\r\n  }\r\n\r\n  onDelete(node: Node): void {\r\n    this.clickDeleteNode.emit(node);\r\n    /** @Deprecated\r\n     *  Ya no se elimina el nodo ahora solo se emite el evento 'clickDeleteNode'\r\n     * retornando el nodo al cual le hicieron click en la opciÃ³n delete\r\n     */\r\n    // // Remueve el nodo utilizando la libreria de lodash\r\n    // _.remove(node.parent.children, node);\r\n\r\n    // this.refreshTree();\r\n    // this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node: Node, value: string): void {\r\n    node.name = value;\r\n    if (node.id == null && node.name === '') {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    } else if (node.id && node.id != null && node.name.trim() !== '') {\r\n      this.edited.emit(node);\r\n      node.isEditable = false;\r\n      this.selectNode(node, node.id);\r\n    } else if (node.id == null && node.name.trim() !== '') {\r\n      this.added.emit(node);\r\n      node.isEditable = false;\r\n    }\r\n    this.isDisabled = false;\r\n    this.refreshTree();\r\n  }\r\n\r\n  onCancel(node: Node, value: string): void {\r\n    this.isDisabled = false;\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if (node.id == null) {\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();\r\n    }\r\n\r\n    node.isEditable = false;\r\n  }\r\n\r\n  onDblClick(node: Node): void {\r\n    this.isSingleClick = false;\r\n    this.dobleClick.emit(node.id);\r\n  }\r\n\r\n  @HostListener('document:keyup', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    switch (event.key) {\r\n      case 'Delete':\r\n        this.keypressDelete.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'Insert':\r\n        this.keypressInsert.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\r\n        break;\r\n      case 'ArrowDown':\r\n        this.moveDownIntoTree();\r\n        break;\r\n      case 'ArrowUp':\r\n        this.moveUpIntoTree();\r\n        break;\r\n    }\r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  private moveUpIntoTree(): number {\r\n    if (!!this.data) {\r\n      // si aun no hay ningun node seleccionado selecciona el primero\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode.parent && this.currentNode.id != null) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number = this.currentNode.parent.children.indexOf(this.currentNode);\r\n\r\n          if (this.currentNode.parent.id == null && index === 0) {\r\n            return 0;\r\n          } else {\r\n            // si tiene nodos al mismo nivel salta al nodo anterior\r\n            if (index !== undefined && index === 0) {\r\n              this.currentNode = this.currentNode.parent;\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } else {\r\n              // si no tiene nodos al mismo nivel salta al nodo padre\r\n              this.currentNode = this.currentNode.parent.children[index - 1];\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveDownIntoTree(): void {\r\n    if (!!this.data) {\r\n      if (this.currentNode == null) {\r\n        this.selectNode(this.data, this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      } else {\r\n        if (!!this.currentNode) {\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          const index: number =\r\n            !!this.currentNode && !!this.currentNode.parent ? this.currentNode.parent.children.indexOf(this.currentNode) : null;\r\n\r\n          // si tiene childrens pasa al primer children\r\n          if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n            this.currentNode = this.currentNode.children[0];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else if (\r\n            index !== undefined &&\r\n            index === this.currentNode.parent.children.length - 1 &&\r\n            this.currentNode.parent.parent != null &&\r\n            this.currentNode.parent.parent.children != null &&\r\n            this.currentNode.parent.parent.children.length > 0\r\n          ) {\r\n            const indexOfParent: number = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent);\r\n            this.currentNode =\r\n              this.currentNode.parent.parent.children[indexOfParent + 1] === undefined\r\n                ? this.currentNode\r\n                : this.currentNode.parent.parent.children[indexOfParent + 1];\r\n\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          } else {\r\n            // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\r\n            this.currentNode = this.currentNode.parent.children[index + 1];\r\n            this.selectNode(this.data, this.currentNode.id);\r\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild(t: number, node: Node): boolean {\r\n    return !!node.children && node.children.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\r\n   */\r\n  private refreshTree(): void {\r\n    this.data = null;\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())\r\n   */\r\n  private refreshTreeWithPagination(): void {\r\n    const datasourceData: Node[] = this.dataSource.data;\r\n    this.dataSource.data = null;\r\n    this.dataSource.data = datasourceData;\r\n    this.treeControl.dataNodes = datasourceData;\r\n  }\r\n\r\n  private goNextPage(): void {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]): void {\r\n    if (!this.data) {\r\n      this.data = { id: null, name: 'root', isSelected: false };\r\n    }\r\n    if (!this.data.children) {\r\n      this.data.children = new Array<Node>();\r\n      this.treeHelisaConnect = new TreeHelisaConnect<Node>();\r\n    }\r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach((node: Node) => {\r\n      this.fillParent(node, this.data);\r\n    });\r\n\r\n    this.data.children = this.reorderByOrderIndex(this.data.children);\r\n\r\n    this.dataSource.data = this.data.children;\r\n    this.treeControl.dataNodes = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   */\r\n  private fillParent(node: Node, parent: Node): void {\r\n    node.parent = parent;\r\n    if (node.children && node.children.length > 0) {\r\n      node.children.forEach((item: Node) => {\r\n        this.fillParent(item, node);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   */\r\n  private selectNode(node: Node, id: number | string): Node {\r\n    if (node == null) {\r\n      return null;\r\n    }\r\n    this.upSelectNode(node);\r\n    if (!!this.selectedNode) {\r\n      const nodeSelected: Node = this.getNodeById(this.selectedNode);\r\n      if (nodeSelected != null) {\r\n        nodeSelected.isSelected = false;\r\n        this.selectedNode = null;\r\n      }\r\n    }\r\n    if (node.id !== undefined && node.id === id) {\r\n      node.isSelected = true;\r\n      this.expandAllParents(node);\r\n      this.selectedNode = node.id;\r\n      return node;\r\n    } else if (node.children != null) {\r\n      let i: number;\r\n      let result: Node = null;\r\n      for (i = 0; result == null && i < node.children.length; i++) {\r\n        result = this.selectNode(node.children[i], id);\r\n      }\r\n      return result;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private expandAllParents(node: Node): void {\r\n    if (!!node && !!node.parent) {\r\n      this.treeHelisaService.expandOneNode(node.parent);\r\n      this.expandAllParents(node.parent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   */\r\n  private upSelectNode(node: Node): void {\r\n    if (!!node && node.isSelected !== undefined) {\r\n      node.isSelected = false;\r\n      if (!!node.children) {\r\n        for (const childrenNode of node.children) {\r\n          this.upSelectNode(childrenNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getClassNode(node: Node): string[] {\r\n    const classNode: string[] = [];\r\n    if (node.isSelected) {\r\n      classNode.push('isSelected');\r\n    }\r\n    if (node.classNode) {\r\n      classNode.push(node.classNode);\r\n    }\r\n    return classNode;\r\n  }\r\n\r\n  onEditMode(node: Node, editMode: boolean): void {\r\n    this.getSelectedOptions(node).editMode = editMode;\r\n  }\r\n\r\n  onSelectOption(event: MatOptionSelectionChange, node: Node): void {\r\n    node.isCheckedOption = event.source.selected;\r\n    if (node.isCheckedOption) {\r\n      this.checkedOptionNode.emit(node.id);\r\n    } else {\r\n      this.uncheckedOptionNode.emit(node.id);\r\n    }\r\n  }\r\n\r\n  getSelectedOptions(\r\n    node: Node\r\n  ): {\r\n    formControl: FormControl;\r\n    editMode: boolean;\r\n  } {\r\n    if (this.selectedOptions.has(node.id)) {\r\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\r\n    } else {\r\n      this.reloadSelectedOptions(node, false);\r\n    }\r\n    return this.selectedOptions.get(node.id);\r\n  }\r\n\r\n  private reloadSelectedOptions(node: Node, editMode: boolean): void {\r\n    const array: Array<string | number | null> = new Array<string | number | null>();\r\n    node.options.forEach((option: Node) => {\r\n      if (option.isCheckedOption) {\r\n        array.push(option.id);\r\n      }\r\n    });\r\n    const obj: {\r\n      formControl: FormControl;\r\n      editMode: boolean;\r\n    } = { formControl: new FormControl(array), editMode };\r\n    this.selectedOptions.set(node.id, obj);\r\n  }\r\n\r\n  /**\r\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\r\n   * @param id  number | string\r\n   * @returns Node o null si no hay un nodo con ese id\r\n   */\r\n  getNodeById(id: number | string): Node {\r\n    const queue: Node[] = [...this.dataSource.data];\r\n    while (queue.length > 0) {\r\n      const curr: Node = queue.shift();\r\n      if (curr.id === id) {\r\n        return curr;\r\n      } else {\r\n        if (!!curr.children) {\r\n          queue.push(...curr.children);\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  reorderByOrderIndex(node: Node[]): Node[] {\r\n    if (!!node && node.length > 0) {\r\n      try {\r\n        node = _.orderBy(node, (x: Node) => x.orderIndex, ['asc']);\r\n        node.forEach((element: Node) => {\r\n          if (!!element.children && element != null) {\r\n            element.children = this.reorderByOrderIndex(element.children);\r\n          }\r\n        });\r\n        return node;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\r\n\r\n@Injectable()\r\nexport class AutocompleteHelisaService<T> {\r\n\r\n  private emitChangeSource: BehaviorSubject<Array<OptionAutocompleteHelisa<T>>> =\r\n  new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\r\n\r\n  public dataSource$: Observable<Array<OptionAutocompleteHelisa<T>>> = this.emitChangeSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>): void {\r\n    this.emitChangeSource.next(options);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { map, startWith, throttleTime, debounceTime } from 'rxjs/operators';\r\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\r\n\r\nexport interface OptionAutocompleteHelisa<T> {\r\n  value: T;\r\n  displayText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-autocomplete',\r\n  templateUrl: './autocomplete-helisa.component.html',\r\n  styleUrls: ['./autocomplete-helisa.component.css'],\r\n  providers: [AutocompleteHelisaService]\r\n})\r\nexport class AutocompleteHelisaComponent<T> implements OnInit {\r\n\r\n  @Input() myControl: FormControl = new FormControl();\r\n  @Input() options: Array<OptionAutocompleteHelisa<T>> = new Array<OptionAutocompleteHelisa<T>>();\r\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\r\n  selectedValue: OptionAutocompleteHelisa<T>;\r\n  @Output() selectedValueEmmiter: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\r\n  @Input() isRemote: boolean = false;\r\n  isLoading: boolean = false;\r\n\r\n\r\n  onScrollObservable: Subject<void> = new Subject<void>();\r\n\r\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.onScrollObservable.asObservable()\r\n    .pipe(\r\n      debounceTime(500),\r\n      throttleTime(500)\r\n    )\r\n    .subscribe(() => {\r\n      this.nextPage.emit();\r\n    });\r\n\r\n    if (this.isRemote) {\r\n      this.autocompleteHelisaService.dataSource$.subscribe((data: OptionAutocompleteHelisa<T>[]) => {\r\n        setTimeout(() => {\r\n          this.options = data;\r\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\r\n        });\r\n      });\r\n    }\r\n\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map((x: string) => this._checkRegex(x)),\r\n      map((value: string) => this._filter(value))\r\n    );\r\n\r\n  }\r\n\r\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {\r\n    return option ? option.displayText : undefined;\r\n  }\r\n\r\n  getService(): AutocompleteHelisaService<T> {\r\n    return this.autocompleteHelisaService;\r\n  }\r\n\r\n\r\n  /** Elimina caracteres extraÃ±os */\r\n  private _checkRegex(value: string): string {\r\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '');\r\n    return value;\r\n  }\r\n\r\n  private _filter(value: string): OptionAutocompleteHelisa<T>[] {\r\n    if (!(value)) {\r\n      if (!this.isRemote) {\r\n        const filterValue: string[] = value.toLowerCase().split(' ');\r\n        return this.options.filter((option: OptionAutocompleteHelisa<T>) => {\r\n          let ws: boolean = true;\r\n          filterValue.forEach((text: string) => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\r\n          return ws;\r\n        }).splice(0, 5);\r\n      } else {\r\n        return this.options;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onSelected(event: {option: {value: OptionAutocompleteHelisa<T>}}): void {\r\n    this.selectedValue = event.option.value;\r\n    this.selectedValueEmmiter.emit(this.selectedValue.value);\r\n  }\r\n\r\n  getNextPage(): void {\r\n    this.onScrollObservable.next();\r\n  }\r\n}\r\n","import { Directive, EventEmitter, Input, Output, OnDestroy} from '@angular/core';\r\nimport { MatAutocomplete} from '@angular/material';\r\nimport { takeUntil, tap} from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\nexport interface IAutoCompleteScrollEvent {\r\n  autoComplete: MatAutocomplete;\r\n  scrollEvent: Event;\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'mat-autocomplete[optionsScroll]'\r\n})\r\nexport class OptionsScrollDirective implements OnDestroy  {\r\n\r\n  /**\r\n   * This value would different depends of styles\r\n   */\r\n  @Input() thresholdPercent: number = .9;\r\n  @Output() optionsScroll: EventEmitter<IAutoCompleteScrollEvent> = new EventEmitter<IAutoCompleteScrollEvent>();\r\n  destroy: Subject<void> = new Subject<void>();\r\n  lastScrollTop: number  = 0;\r\n\r\n  constructor(public autoComplete: MatAutocomplete) {\r\n    this.autoComplete.opened.pipe(\r\n      tap(() => {\r\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\r\n        // Note: The panel will be available on next tick\r\n        // Note: The panel wil NOT open if there are no options to display\r\n        setTimeout(() => {\r\n          // Note: remove listner just for safety, in case the close event is skipped.\r\n          this.removeScrollEventListener();\r\n          if (!!this.autoComplete &&\r\n            !!this.autoComplete.panel &&\r\n            !!this.autoComplete.panel.nativeElement) {\r\n              this.autoComplete.panel.nativeElement\r\n                .addEventListener('scroll', this.onScroll.bind(this), false);\r\n            }\r\n        });\r\n      }),\r\n      takeUntil(this.destroy)).subscribe();\r\n\r\n    this.autoComplete.closed.pipe(\r\n      tap(() => this.removeScrollEventListener()),\r\n      takeUntil(this.destroy)).subscribe();\r\n  }\r\n\r\n  private removeScrollEventListener(): void {\r\n    if (!!this.autoComplete &&\r\n      !!this.autoComplete.panel &&\r\n      !!this.autoComplete.panel.nativeElement) {\r\n    this.autoComplete.panel.nativeElement\r\n      .removeEventListener('scroll', this.onScroll);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy.next();\r\n    this.destroy.complete();\r\n\r\n    this.removeScrollEventListener();\r\n  }\r\n\r\n\r\n  onScroll(event: Event): void {\r\n    // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\r\n    const st: number = (event.target as Window).pageYOffset || (event.target as Element).scrollTop;\r\n    if (st > this.lastScrollTop) {\r\n       // downscroll code\r\n       if (this.thresholdPercent === undefined) {\r\n        this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n      } else {\r\n        const threshold: number = this.thresholdPercent * 100 * (event.target as Element).scrollHeight / 100;\r\n        const current: number = (event.target as Element).scrollTop + (event.target as Element).clientHeight;\r\n        // console.log(`scroll ${current}, threshold: ${threshold}`)\r\n        if (current > threshold) {\r\n          // console.log('load next page');\r\n          this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n        }\r\n      }\r\n    } else {\r\n       // upscroll code\r\n    }\r\n    this.lastScrollTop = st <= 0 ? 0 : st;\r\n  }\r\n\r\n}\r\n","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\r\nimport { MatTooltip } from '@angular/material';\r\n\r\n@Directive({\r\n    selector: '[helTooltip]',\r\n    providers: [MatTooltip]\r\n})\r\nexport class HelTooltipDirective {\r\n\r\n    tooltip: MatTooltip;\r\n\r\n    /**\r\n     * Mensaje a mostrar\r\n     */\r\n    @Input('helTooltip') message: string;\r\n\r\n    /**\r\n     * Tiempo antes de ocultarla el mensaje\r\n     */\r\n    @Input() hideDelay: number = 600;\r\n\r\n    /**\r\n     * Tiempo antes de mostra el mensaje\r\n     */\r\n    @Input() showDelay: number = 500;\r\n\r\n\r\n    constructor(tooltip: MatTooltip, private elemRef: ElementRef) {\r\n      this.tooltip = tooltip;\r\n    }\r\n\r\n    @HostListener('mouseover') mouseover(): void {\r\n      const currentContent: string = this.elemRef.nativeElement.innerText;\r\n\r\n      if (!!currentContent && !!this.message) {\r\n        if ((currentContent.toUpperCase() !== this.message.toString().toUpperCase()) || this.isEllipsisActive(this.elemRef.nativeElement)) {\r\n          this.tooltip.message = this.message;\r\n        }\r\n      }\r\n\r\n      this.tooltip.showDelay =  this.showDelay;\r\n      this.tooltip.hideDelay = this.hideDelay;\r\n    }\r\n\r\n\r\n    private isEllipsisActive(e: {offsetWidth: number , scrollWidth: number}): boolean {\r\n      return (e.offsetWidth < e.scrollWidth);\r\n    }\r\n}\r\n","import { Directive, HostBinding, PLATFORM_ID, Inject, Input, OnChanges } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: 'a[href]',\r\n})\r\nexport class ExternalLinkDirective implements OnChanges {\r\n  @HostBinding('attr.rel') relAttr: string = '';\r\n  @HostBinding('attr.target') targetAttr: string = '';\r\n  @HostBinding('attr.href') hrefAttr: string = '';\r\n  @Input() href: string;\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\r\n\r\n  ngOnChanges(): void {\r\n\r\n    this.hrefAttr = this.href;\r\n\r\n    if (this.isLinkExternal()) {\r\n      this.relAttr = 'noopener';\r\n      this.targetAttr = '_blank';\r\n    }\r\n  }\r\n\r\n  private isLinkExternal(): boolean {\r\n    return isPlatformBrowser(this.platformId) && !this.href.includes(location.hostname);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'externalLink'\r\n})\r\nexport class ExternalLinkPipe implements PipeTransform {\r\n    transform(value: string, ...args: string[]): string {\r\n        return '//' + value;\r\n    }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\ninterface AlertUncompletedDataHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst DEFAULT_TITLE: string = 'No ha suministrado la informaciÃ³n necesaria.';\r\nconst DEFAULT_CONTENT: string = 'Si insite en grabar asÃ­, este concepto no serÃ¡ utilizable hasta su conclusiÃ³n satisfactoria, que deberÃ¡ completar posteriormente modificando en concepto.';\r\n\r\n@Component({\r\n  selector: 'hel-alert-uncompleted-data-helisa',\r\n  templateUrl: './alert-uncompleted-data-helisa.component.html',\r\n  styleUrls: ['./alert-uncompleted-data-helisa.component.sass']\r\n})\r\nexport class AlertUncompletedDataHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertUncompletedDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertUncompletedDataHelisaProperties\r\n  ) {\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = DEFAULT_TITLE;\r\n    }\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Lo asumo';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Me retracto';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\ninterface AlertLostDataHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst DEFAULT_TITLE: string = 'Â¿EstÃ¡ seguro de querer perder lo ya hecho?';\r\nconst DEFAULT_CONTENT: string = 'Si no estÃ¡ seguro, puede continuar o \"aplicar\" y posteriormente cuando tenga clara las respuestas, usando la opciÃ³n de modificar podrÃ¡ completar el concepto.';\r\n\r\n@Component({\r\n  selector: 'hel-alert-lost-data-helisa',\r\n  templateUrl: './alert-lost-data-helisa.component.html',\r\n  styleUrls: ['./alert-lost-data-helisa.component.sass']\r\n})\r\nexport class AlertLostDataHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertLostDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertLostDataHelisaProperties\r\n  ) {\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = DEFAULT_TITLE;\r\n    }\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Lo asumo';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Me retracto';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\nconst DEFAULT_TITLE: string = 'Â¿EstÃ¡ seguro que debe anular esta informaciÃ³n?';\r\nconst DEFAULT_CONTENT: string = 'Al anular este concepto, quedarÃ¡ la huella de todo lo que se hizo apoyados en su informaciÃ³n. No es una eliminaciÃ³n tÃ¡cita, es suprimir su uso en adelante.';\r\n\r\n@Component({\r\n  selector: 'hel-alert-delete-data-helisa',\r\n  templateUrl: './alert-delete-data-helisa.component.html',\r\n  styleUrls: ['./alert-delete-data-helisa.component.sass']\r\n})\r\nexport class AlertDeleteDataHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertDeleteDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertDeleteDataHelisaComponent\r\n  ) {\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = DEFAULT_TITLE;\r\n    }\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Lo asumo';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Me retracto';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import {Component, OnInit, Inject, Input} from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\ninterface AlertUncompletedSelectedDataHelisaProperties {\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Elemento sin informaciÃ³n requerida. ModifÃ­quelo para completarlo.';\r\n\r\n@Component({\r\n  selector: 'hel-alert-uncompleted-selected-data-helisa',\r\n  templateUrl: './alert-uncompleted-selected-data-helisa.component.html',\r\n  styleUrls: ['./alert-uncompleted-selected-data-helisa.component.sass']\r\n})\r\nexport class AlertUncompletedSelectedDataHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  okLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertUncompletedSelectedDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertUncompletedSelectedDataHelisaProperties\r\n  ) {\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Aceptar';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\ninterface AlertInformationNotValidProperties {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Rectifique. Hay informaciÃ³n no vÃ¡lida';\r\n\r\n@Component({\r\n    selector: 'hel-alert-information-not-valid-helisa',\r\n    templateUrl: './alert-information-not-valid-helisa.component.html',\r\n    styleUrls: ['./alert-information-not-valid-helisa.component.sass']\r\n})\r\nexport class AlertInformationNotValidHelisaComponent implements OnInit {\r\n\r\n    content: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AlertInformationNotValidHelisaComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: AlertInformationNotValidProperties\r\n    ) {\r\n        this.content = data.content;\r\n        if (this.content === undefined) {\r\n            this.content = DEFAULT_CONTENT;\r\n        }\r\n        dialogRef.disableClose = true;\r\n        dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n            if (event.code === 'Escape') {\r\n                this.dialogRef.close(this.onCancel());\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        setTimeout(() => {\r\n            this.dialogRef.close();\r\n        }, 3000);\r\n    }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {ComboBoxListable} from './interface/combo-box-listable';\r\nimport {ComboBoxEditable} from './interface/combo-box-editable';\r\n\r\nexport enum ComboBoxHelisaState {\r\n  CLOSED,\r\n  SELECT,\r\n  INSERT\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-combo-box-helisa',\r\n  templateUrl: './combo-box-helisa.component.html',\r\n  styleUrls: ['./combo-box-helisa.component.css']\r\n})\r\nexport class ComboBoxHelisaComponent<TYPE> implements OnInit, AfterViewInit {\r\n\r\n  @Input() editable: ComboBoxEditable<TYPE>;\r\n  @Input() listable: ComboBoxListable<TYPE>;\r\n  @Input() placeholder: string = 'Sin seleccionar';\r\n  @Input() selectedItem: TYPE;\r\n  @Output() selectEmitter: EventEmitter<TYPE> = new EventEmitter<TYPE>();\r\n  @Input() enabled: boolean = true;\r\n\r\n  private page: number = 0;\r\n  private pageSize: number = 50;\r\n  private haveNextPage: boolean = true;\r\n  state: ComboBoxHelisaState = ComboBoxHelisaState.CLOSED;\r\n\r\n  rows: TYPE[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.getNextPage();\r\n  }\r\n\r\n  private getNextPage(): void {\r\n    if (this.haveNextPage) {\r\n      this.listable.getData(this.page++, this.pageSize).subscribe((rows: TYPE[]) => {\r\n        rows.forEach((item: TYPE) => this.rows.push(item));\r\n        this.haveNextPage = rows.length > 0;\r\n      });\r\n    }\r\n  }\r\n\r\n  get comboBoxHelisaState(): typeof ComboBoxHelisaState {\r\n    return ComboBoxHelisaState;\r\n  }\r\n\r\n  onFocus(): void {\r\n    if (this.enabled) {\r\n      this.state = ComboBoxHelisaState.SELECT;\r\n    }\r\n  }\r\n\r\n  selectItem(row: TYPE): void {\r\n    this.selectedItem = row;\r\n    this.selectEmitter.emit(row);\r\n    this.state = ComboBoxHelisaState.CLOSED;\r\n  }\r\n\r\n  changeToInsert(): void {\r\n    this.state = ComboBoxHelisaState.INSERT;\r\n  }\r\n\r\n  insert(event: string): void {\r\n    if (event.trim().length > 0) {\r\n      this.editable.insert(event).subscribe(\r\n        (data: TYPE) => {\r\n          this.rows.push(data);\r\n          this.state = ComboBoxHelisaState.SELECT;\r\n        }\r\n      );\r\n    } else {\r\n      this.state = ComboBoxHelisaState.SELECT;\r\n    }\r\n  }\r\n\r\n  onScroll(event: Event): void {\r\n    const element: HTMLDivElement = event.target as HTMLDivElement;\r\n    if (element.scrollHeight - element.scrollTop < 1000) {\r\n      this.getNextPage();\r\n    }\r\n  }\r\n}\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\n\r\ninterface AlertAuthorizationTransactionHelisaProperties {\r\n  title: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nconst DEFAULT_TITLE: string = '!Esta transacciÃ³n requiere autorizaciÃ³n!';\r\n\r\n@Component({\r\n  selector: 'hel-alert-authorization-transaction-helisa',\r\n  templateUrl: './alert-authorization-transaction-helisa.component.html',\r\n  styleUrls: ['./alert-authorization-transaction-helisa.component.sass']\r\n})\r\nexport class AlertAuthorizationTransactionHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertAuthorizationTransactionHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertAuthorizationTransactionHelisaProperties\r\n  ) {\r\n    this.title = data.title;\r\n    if (this.title === undefined) {\r\n      this.title = DEFAULT_TITLE;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Solicitarla';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Negarla';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void  {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import {AfterViewInit, Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\nexport enum PagingTreeInitialMode {\r\n  COLLAPSE,\r\n  EXPAND\r\n}\r\n\r\nexport interface PagingTreeHelisaListable<T> {\r\n  get(lastChildOrder: number, size: number): Observable<T[]>;\r\n\r\n  getIdField(): string;\r\n\r\n  getIdParentField(): string;\r\n\r\n  compare(a: T, b: T): number;\r\n}\r\n\r\ninterface HelisaNode<T> {\r\n  object: T;\r\n  level: number;\r\n  haveChildren: boolean;\r\n  expanded: boolean;\r\n  visible: boolean;\r\n  preorder: number;\r\n}\r\n\r\nexport interface HelisaNodeData<T> {\r\n  readonly object: T;\r\n  readonly level: number;\r\n  readonly haveChildren: boolean;\r\n  readonly expanded: boolean;\r\n  readonly visible: boolean;\r\n  readonly preorder: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-paging-tree',\r\n  templateUrl: './paging-tree-helisa.component.html',\r\n  styleUrls: ['./paging-tree-helisa.component.css']\r\n})\r\nexport class PagingTreeHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private pageSize: number = 200000;\r\n  private visibleLimit: number = 0;\r\n  private visibleSize: number = 100;\r\n  private treeMode: PagingTreeInitialMode = PagingTreeInitialMode.EXPAND;\r\n  private visibleObjects: Array<T> = [];\r\n  private service: PagingTreeHelisaListable<T>;\r\n  private searchNode: Map<string, HelisaNode<T>>;\r\n  private allNode: Array<HelisaNode<T>> = [];\r\n\r\n  @Output()\r\n  afterLoadData: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @ContentChild('nodeComponent')\r\n  nodeComponent: TemplateRef<{ data: T, node: HelisaNodeData<T> }>;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n  }\r\n\r\n  @Input()\r\n  set mode(paramMode: PagingTreeInitialMode) {\r\n    this.treeMode = paramMode;\r\n    this.reset();\r\n  }\r\n\r\n  @Input()\r\n  set pagingTreeHelisaListable(paramService: PagingTreeHelisaListable<T>) {\r\n    this.service = paramService;\r\n    this.reset();\r\n  }\r\n\r\n  private reset(): void {\r\n    if (this.service) {\r\n      this.service.get(0, this.pageSize).subscribe((items: T[]) => this.loadData(items));\r\n    }\r\n  }\r\n\r\n  private loadData(items: T[]): void {\r\n    this.searchNode = new Map<string, HelisaNode<T>>();\r\n    this.visibleObjects = [];\r\n    this.allNode = [];\r\n    items = this.sortItems(items);\r\n    this.searchNode = new Map<string, HelisaNode<T>>();\r\n    items.forEach((item: T) => {\r\n      const node: HelisaNode<T> = this.createNode(item);\r\n      this.allNode.push(node);\r\n    });\r\n    this.loadNextVisibleObjects(null);\r\n    this.afterLoadData.emit();\r\n  }\r\n\r\n  private sortItems(items: T[]): T[] {\r\n    const lAdy: Map<string, T[]> = new Map<string, T[]>();\r\n    const stack: T[] = [];\r\n    items.forEach((item: T) => {\r\n      const idParent: string = item[this.service.getIdParentField()];\r\n      if (!idParent) {\r\n        stack.unshift(item);\r\n      } else {\r\n        if (!lAdy.has(idParent)) {\r\n          lAdy.set(idParent, []);\r\n        }\r\n        lAdy.get(idParent).push(item);\r\n      }\r\n    });\r\n    const response: T[] = new Array<T>(items.length);\r\n    let index: number = 0;\r\n    while (stack.length > 0) {\r\n      const last: T = stack.pop();\r\n      response[index++] = last;\r\n      const children: T[] = lAdy.get(last[this.service.getIdField()]);\r\n      if (children) {\r\n        for (let i: number = children.length - 1; i >= 0; i--) {\r\n          stack.push(children[i]);\r\n        }\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n\r\n  private createNode(item: T): HelisaNode<T> {\r\n    if (this.searchNode.has(item[this.service.getIdField()])) {\r\n      throw Error('Ya existe el nodo.');\r\n    }\r\n    const parentInformation: HelisaNode<T> = this.getNodeInformationById(item[this.service.getIdParentField()]);\r\n    const nodeInformation: HelisaNode<T> = {\r\n      object: item,\r\n      haveChildren: false,\r\n      level: parentInformation ? parentInformation.level + 1 : 0,\r\n      expanded: this.treeMode === PagingTreeInitialMode.EXPAND,\r\n      visible: false,\r\n      preorder: this.searchNode.size + 1,\r\n    };\r\n    this.searchNode.set(item[this.service.getIdField()], nodeInformation);\r\n    if (parentInformation) {\r\n      parentInformation.haveChildren = true;\r\n    }\r\n    return nodeInformation;\r\n  }\r\n\r\n  public getNodeInformationById(id: string): HelisaNode<T> {\r\n    return this.searchNode.get(id);\r\n  }\r\n\r\n  public getNodeInformation(item: T): HelisaNode<T> {\r\n    return this.searchNode.get(item[this.service.getIdField()]);\r\n  }\r\n\r\n  getLevelClass(item: T): string {\r\n    return 'padding-level-' + this.getNodeInformationById(item[this.service.getIdField()]).level;\r\n  }\r\n\r\n  private loadNextVisibleObjects(nodeFrom: T): void {\r\n    const visibleObjects: T[] = [];\r\n    this.visibleObjects.forEach((item: T) => {\r\n      if (this.getNodeInformation(item)) {\r\n        if (nodeFrom && this.getNodeInformation(nodeFrom).preorder >= this.getNodeInformation(item).preorder) {\r\n          visibleObjects.push(item);\r\n        } else {\r\n          this.getNodeInformationById(item[this.service.getIdField()]).visible = false;\r\n        }\r\n      }\r\n    });\r\n    this.visibleLimit = visibleObjects.length + this.visibleSize;\r\n    this.allNode.forEach((item: HelisaNode<T>) => {\r\n      if (visibleObjects.length < this.visibleLimit &&\r\n        (!nodeFrom || this.getNodeInformation(nodeFrom).preorder < item.preorder)) {\r\n        const idParent: string = item.object[this.service.getIdParentField()];\r\n        if (!idParent) {\r\n          visibleObjects.push(item.object);\r\n          item.visible = true;\r\n        } else {\r\n          const parentInformation: HelisaNode<T> = this.getNodeInformationById(idParent);\r\n          if (parentInformation.visible && parentInformation.expanded) {\r\n            visibleObjects.push(item.object);\r\n            item.visible = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    this.visibleObjects = visibleObjects;\r\n  }\r\n\r\n  collapseNode(item: T): void {\r\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = false;\r\n    this.loadNextVisibleObjects(item);\r\n  }\r\n\r\n  expandNode(item: T): void {\r\n    this.getNodeInformationById(item[this.service.getIdField()]).expanded = true;\r\n    this.loadNextVisibleObjects(item);\r\n  }\r\n\r\n  showNextPage(): void {\r\n    if (this.visibleObjects.length > 0) {\r\n      this.loadNextVisibleObjects(this.visibleObjects[this.visibleObjects.length - 1]);\r\n    }\r\n  }\r\n\r\n  get visibleData(): ReadonlyArray<T> {\r\n    return this.visibleObjects;\r\n  }\r\n\r\n  removeItem(item: T): void {\r\n    this.removeById(item[this.service.getIdField()]);\r\n  }\r\n\r\n  removeById(id: string): void {\r\n    if(this.getNodeInformationById(id)) {\r\n      const idParent: string = this.getNodeInformationById(id).object[this.service.getIdParentField()];\r\n      const set: Set<string> = new Set<string>();\r\n      set.add(id);\r\n      const beginIndex: number = this.allNode.findIndex(\r\n        (itemSearch: HelisaNode<T>) => itemSearch.object[this.service.getIdField()] === id\r\n      );\r\n      let lastIndex: number = this.allNode.length;\r\n      for (let i: number = beginIndex + 1; i < this.allNode.length; i++) {\r\n        const itemSearch: T = this.allNode[i].object;\r\n        if (set.has(itemSearch[this.service.getIdParentField()])) {\r\n          set.add(itemSearch[this.service.getIdField()]);\r\n        } else {\r\n          lastIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      const deletedItems: HelisaNode<T>[] = this.allNode.splice(beginIndex, lastIndex - beginIndex);\r\n      let parentHaveChildren: boolean = false;\r\n      deletedItems.forEach((deletedItem: HelisaNode<T>) => this.searchNode.delete(deletedItem.object[this.service.getIdField()]));\r\n      this.allNode.forEach((searchItem: HelisaNode<T>, index: number) => {\r\n        searchItem.preorder = index + 1\r\n        if(searchItem.object[this.service.getIdParentField()] === idParent) {\r\n          parentHaveChildren = true;\r\n        }\r\n      });\r\n      if(idParent) {\r\n        this.getNodeInformationById(idParent).haveChildren = parentHaveChildren;\r\n      }\r\n      this.loadNextVisibleObjects(beginIndex > 0 ? this.allNode[beginIndex - 1].object : null);\r\n    }\r\n  }\r\n\r\n  addItem(item: T): void {\r\n    const indexParent: number = this.allNode.findIndex((node: HelisaNode<T>) => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\r\n    if (indexParent >= 0) {\r\n      this.allNode.push(this.createNode(item));\r\n      this.allNode[indexParent].haveChildren = true;\r\n      this.reSort();\r\n      this.expandNode(this.allNode[indexParent].object);\r\n    } else {\r\n      throw Error('No existe el padre.');\r\n    }\r\n  }\r\n\r\n  updateItem(item: T): void {\r\n    if (this.getNodeInformation(item)) {\r\n      this.getNodeInformation(item).object = item;\r\n      this.reSort();\r\n      const indexParent: number = this.allNode.findIndex(\r\n        (node: HelisaNode<T>) => node.object[this.service.getIdField()] === item[this.service.getIdParentField()]);\r\n      if (indexParent >= 0) {\r\n        this.expandNode(this.allNode[indexParent].object);\r\n      } else {\r\n        this.loadNextVisibleObjects(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  private reSort(): void {\r\n    const items: T[] = this.allNode.map((node: HelisaNode<T>) => node.object);\r\n    items.sort((a: T, b: T) => this.service.compare(a, b));\r\n    const preorder: T[] = this.sortItems(items);\r\n    preorder.forEach((object: T, index: number) => this.getNodeInformation(object).preorder = index + 1);\r\n    this.allNode.sort((nodeA: HelisaNode<T>, nodeB: HelisaNode<T>) => nodeA.preorder - nodeB.preorder);\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\nconst DEFAULT_CONTENT: string = 'Â¿Esta seguro que desea eliminar esta informaciÃ³n?';\r\n\r\n@Component({\r\n  selector: 'hel-alert-confirm-delete-data-helisa',\r\n  templateUrl: './alert-confirm-delete-data-helisa.component.html',\r\n  styleUrls: ['./alert-confirm-delete-data-helisa.component.sass']\r\n})\r\nexport class AlertConfirmDeleteDataHelisaComponent implements OnInit {\r\n\r\n  title: string;\r\n  content: string;\r\n  okLabel: string;\r\n  cancelLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertConfirmDeleteDataHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: AlertConfirmDeleteDataHelisaComponent\r\n  ) {\r\n    this.content = data.content;\r\n    if (this.content === undefined) {\r\n      this.content = DEFAULT_CONTENT;\r\n    }\r\n    this.okLabel = data.okLabel;\r\n    if (this.okLabel === undefined) {\r\n      this.okLabel = 'Lo asumo';\r\n    }\r\n    this.cancelLabel = data.cancelLabel;\r\n    if (this.cancelLabel === undefined) {\r\n      this.cancelLabel = 'Me retracto';\r\n    }\r\n    dialogRef.disableClose = true;\r\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      if (event.code === 'Escape') {\r\n        this.dialogRef.close(this.onCancel());\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\ninterface AlertDefineResidentialPhysicalStructureProperties {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Primero defina la estructura fÃ­sica residencial en configuraciÃ³n.';\r\n\r\n@Component({\r\n    selector: 'hel-alert-define-residential-physical-structure-helisa',\r\n    templateUrl: './alert-define-residential-physical-structure-helisa.component.html',\r\n    styleUrls: ['./alert-define-residential-physical-structure-helisa.component.sass']\r\n})\r\nexport class AlertDefineResidentialPhysicalStructureHelisaComponent implements OnInit {\r\n\r\n    content: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AlertDefineResidentialPhysicalStructureHelisaComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: AlertDefineResidentialPhysicalStructureProperties\r\n    ) {\r\n        this.content = data.content;\r\n        if (this.content === undefined) {\r\n            this.content = DEFAULT_CONTENT;\r\n        }\r\n        dialogRef.disableClose = true;\r\n        dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n            if (event.code === 'Escape') {\r\n                this.dialogRef.close(this.onCancel());\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        setTimeout(() => {\r\n            this.dialogRef.close();\r\n        }, 3000);\r\n    }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\ninterface AlertDefineCommercialStructureProperties {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Primero defina la estructura comercial en configuraciÃ³n.';\r\n\r\n@Component({\r\n    selector: 'hel-alert-define-commercial-structure-helisa',\r\n    templateUrl: './alert-define-commercial-structure-helisa.component.html',\r\n    styleUrls: ['./alert-define-commercial-structure-helisa.component.sass']\r\n})\r\nexport class AlertDefineCommercialStructureHelisaComponent implements OnInit {\r\n\r\n    content: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AlertDefineCommercialStructureHelisaComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: AlertDefineCommercialStructureProperties\r\n    ) {\r\n        this.content = data.content;\r\n        if (this.content === undefined) {\r\n            this.content = DEFAULT_CONTENT;\r\n        }\r\n        dialogRef.disableClose = true;\r\n        dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n            if (event.code === 'Escape') {\r\n                this.dialogRef.close(this.onCancel());\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        setTimeout(() => {\r\n            this.dialogRef.close();\r\n        }, 3000);\r\n    }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\ninterface AlertDefineParkingStructureProperties {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nconst DEFAULT_CONTENT: string = 'Primero defina la estructura zona de parqueaderos en configuraciÃ³n.';\r\n\r\n@Component({\r\n    selector: 'hel-alert-define-parking-structure-helisa',\r\n    templateUrl: './alert-define-parking-structure-helisa.component.html',\r\n    styleUrls: ['./alert-define-parking-structure-helisa.component.sass']\r\n})\r\nexport class AlertDefineParkingStructureHelisaComponent implements OnInit {\r\n\r\n    content: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AlertDefineParkingStructureHelisaComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: AlertDefineParkingStructureProperties\r\n    ) {\r\n        this.content = data.content;\r\n        if (this.content === undefined) {\r\n            this.content = DEFAULT_CONTENT;\r\n        }\r\n        dialogRef.disableClose = true;\r\n        dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n            if (event.code === 'Escape') {\r\n                this.dialogRef.close(this.onCancel());\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        setTimeout(() => {\r\n            this.dialogRef.close();\r\n        }, 3000);\r\n    }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {LayoutModule} from '@angular/cdk/layout';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCheckboxModule,\r\n  MatGridListModule,\r\n  MatInputModule,\r\n  MatMenuModule,\r\n  MatNativeDateModule,\r\n  MatOptionModule,\r\n  MatPaginatorModule,\r\n  MatRadioModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule\r\n} from '@angular/material';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport { TableHelisaService } from './components/table-helisa/table-helisa.service';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport { TreeHelisaService } from './components/tree-helisa/tree-helisa.service';\r\nimport { ExternalLinkDirective } from './directives/external-link.directive';\r\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\r\nimport { HelTooltipDirective } from './directives/tooltip.directive';\r\nimport { ExternalLinkPipe } from './pipes/external-link.pipe';\r\nimport { AlertUncompletedDataHelisaComponent } from './components/alert-uncompleted-data-helisa/alert-uncompleted-data-helisa.component';\r\nimport { AlertLostDataHelisaComponent } from './components/alert-lost-data-helisa/alert-lost-data-helisa.component';\r\nimport { AlertDeleteDataHelisaComponent } from './components/alert-delete-data-helisa/alert-delete-data-helisa.component';\r\nimport {\r\n  AlertUncompletedSelectedDataHelisaComponent\r\n} from './components/alert-uncompleted-selected-data-helisa/alert-uncompleted-selected-data-helisa.component';\r\nimport {\r\n  AlertInformationNotValidHelisaComponent\r\n } from './components/alert-information-not-valid-helisa/alert-information-not-valid-helisa.component';\r\nimport { ComboBoxHelisaComponent } from './components/combo-box-helisa/combo-box-helisa.component';\r\nimport {AlertAuthorizationTransactionHelisaComponent} from './components/alert-authorization-transaction-helisa/alert-authorization-transaction-helisa.component';\r\nimport { PagingTreeHelisaComponent } from './components/paging-tree-helisa/paging-tree-helisa.component';\r\nimport { AlertConfirmDeleteDataHelisaComponent } from './components/alert-confirm-delete-data-helisa/alert-confirm-delete-data-helisa.component';\r\nimport { AlertDefineResidentialPhysicalStructureHelisaComponent } from './components/alert-define-residential-physical-structure-helisa/alert-define-residential-physical-structure-helisa.component';\r\nimport { AlertDefineCommercialStructureHelisaComponent } from './components/alert-define-commercial-structure-helisa/alert-define-commercial-structure-helisa.component';\r\nimport { AlertDefineParkingStructureHelisaComponent } from './components/alert-define-parking-structure-helisa/alert-define-parking-structure-helisa.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe,\r\n    AlertUncompletedDataHelisaComponent,\r\n    AlertLostDataHelisaComponent,\r\n    AlertDeleteDataHelisaComponent,\r\n    AlertUncompletedSelectedDataHelisaComponent,\r\n    AlertInformationNotValidHelisaComponent,\r\n    ComboBoxHelisaComponent,\r\n    AlertAuthorizationTransactionHelisaComponent,\r\n    PagingTreeHelisaComponent,\r\n    AlertConfirmDeleteDataHelisaComponent,\r\n    AlertDefineResidentialPhysicalStructureHelisaComponent,\r\n    AlertDefineCommercialStructureHelisaComponent,\r\n    AlertDefineParkingStructureHelisaComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent,\r\n    ToastHelisaComponent,\r\n    AlertHelisaComponent,\r\n    DependencyTableHelisaComponent,\r\n    InputHelisaComponent,\r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n    ExternalLinkDirective,\r\n    ExternalLinkPipe,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule,\r\n    AlertUncompletedDataHelisaComponent,\r\n    AlertLostDataHelisaComponent,\r\n    AlertDeleteDataHelisaComponent,\r\n    AlertUncompletedSelectedDataHelisaComponent,\r\n    AlertInformationNotValidHelisaComponent,\r\n    ComboBoxHelisaComponent,\r\n    AlertAuthorizationTransactionHelisaComponent,\r\n    PagingTreeHelisaComponent,\r\n    AlertConfirmDeleteDataHelisaComponent,\r\n    AlertDefineResidentialPhysicalStructureHelisaComponent,\r\n    AlertDefineCommercialStructureHelisaComponent,\r\n    AlertDefineParkingStructureHelisaComponent\r\n  ],\r\n  providers: [TableHelisaService, TreeHelisaService]\r\n})\r\nexport class HelisaLibModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertUncompletedDataHelisaComponent } from './alert-uncompleted-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertUncompletedDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertUncompletedDataHelisaComponent> = this.dialog.open(AlertUncompletedDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertLostDataHelisaComponent } from './alert-lost-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertLostDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertLostDataHelisaComponent> = this.dialog.open(AlertLostDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertDeleteDataHelisaComponent } from './alert-delete-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertDeleteDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertDeleteDataHelisaComponent> = this.dialog.open(AlertDeleteDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport {AlertUncompletedSelectedDataHelisaComponent} from './alert-uncompleted-selected-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertUncompletedSelectedDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertUncompletedSelectedDataHelisaComponent> = this.dialog.open(AlertUncompletedSelectedDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertInformationNotValidHelisaComponent } from './alert-information-not-valid-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertInformationNotValidHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertInformationNotValidHelisaComponent> = this.dialog.open(AlertInformationNotValidHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport {AlertAuthorizationTransactionHelisaComponent} from './alert-authorization-transaction-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertAuthorizationTransactionHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertAuthorizationTransactionHelisaComponent> = this.dialog.open(AlertAuthorizationTransactionHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertConfirmDeleteDataHelisaComponent } from './alert-confirm-delete-data-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertConfirmDeleteDataHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertConfirmDeleteDataHelisaComponent> = this.dialog.open(AlertConfirmDeleteDataHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content, okLabel, cancelLabel }\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertDefineResidentialPhysicalStructureHelisaComponent } from './alert-define-residential-physical-structure-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertDefineResidentialPhysicalStructureHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertDefineResidentialPhysicalStructureHelisaComponent> = this.dialog.open(AlertDefineResidentialPhysicalStructureHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertDefineCommercialStructureHelisaComponent } from './alert-define-commercial-structure-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertDefineCommercialStructureHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertDefineCommercialStructureHelisaComponent> = this.dialog.open(AlertDefineCommercialStructureHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertDefineParkingStructureHelisaComponent } from './alert-define-parking-structure-helisa.component';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertDefineParkingStructureHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(title?: string, content?: string): Observable<boolean> {\r\n    const dialogRef: MatDialogRef<AlertDefineParkingStructureHelisaComponent> = this.dialog.open(AlertDefineParkingStructureHelisaComponent, {\r\n      width: '250px',\r\n      data: { title, content}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","export enum ToastType {\r\n    DONE = 'done',\r\n    ERROR = 'error',\r\n    INFO = 'info'\r\n}\r\n"]}