{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","node_modules/tslib/tslib.es6.js","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","ng://helisa-lib/lib/directives/options-scroll.directive.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","Output","placeholder","FormControl","Validators","required","requiredMessage","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","subMessages","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","content","title","hasCancel","AlertHelisaType","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","next","setTotal","event","emitTotal","addPage","emitNextPage","selectIndexRow","config","indexRowSelect","changeVisibilityButton","emitVisibilityButton$","changeVisibilityAllButtons","show","emitVisibilityAllButtons$","changeisCellSelection","emitIsCellSelection$","changeColumnsByTable","emitChangeColumns$","Subject","Array","emitVisibilityButton","asObservable","emitVisibilityAllButtons","emitIsCellSelection","emitChangeColumns","TableHelisaService","total","table","emitChangeSource","obj","page","change","emitVisibleButton$","totalReturn","nextPageReturn","emitVisibleButton","DependencyTableHelisaComponent","_this","dependencyTableHelisaService","subscribe","tableService","viewTables","toArray","index","undefined","addRowButton","showButton","forEach","element","isCellSelection","columns","getService","onSelectedDependency","selectedObject","selected","selectObject","onNextPage","nextPage","onTotal","onSort","sort","onDrop","drop","onAddRow","addRow","selectedCell","selectCell","providers","ViewChildren","InputHelisaComponent","isFocused","nameInput","nativeElement","focus","search","ViewChild","isSearch","disabled","USER","CODE_CALL","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","o","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","ngAfterViewInit","matTable","renderRows","Object","defineProperty","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","columnConfiguration","displayedColumns","splice","visible","push","rawData","prepareDataSource","idRowSelected","selectRow","rowType","RowType","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","addTotalGroup","MatTableDataSource","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","footerDisplayedColumns","map","TotalType","searchText","text","lastSearch","isUser","select","scope","EventScope","onScroll","target","scrollHeight","scrollTop","body","concat","dblClickCell","selectedCells","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","getClassToRow","classToRow","configRowStylesFromColumn","classRow","array","moveItemInArray","previousIndex","currentIndex","clonedeep","tableKeydown","currentIndex_1","findIndex","newSelection_1","key","scrollCount","reverse","Math","abs","preventDefault","MatSort","MatTable","isSetSelectedRow","showTitle","isDragged","DateHelisaComponent","dateFormControl","__read","n","m","Symbol","iterator","r","e","i","call","ar","error","__spread","arguments","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","expandAllNodes","expand","emitExpandAllNodes","collapseAllNodes","collapse","emitCollapseAllNodes","refreshTree","emitRefreshTree","refreshTreeWithPagination","emitRefreshTreeWithPagination","expandOneNode","node","emitExpandOneNode","collapseOneNode","emitCollapseOneNode","BehaviorSubject","nodeSelected","dataSourceObservable","nodeExpand","nodeCollapse","refreshTreeObservable","refreshTreeWithPaginationObservable","expandOneNodeObservable","collapseOneNodeObservable","TreeHelisaConnect","TreeHelisaComponent","treeHelisaService","res","children","treeControl","dataNodes","selectNode","tree","expandAll","collapseAll","onRedirect","isSingleClick","setTimeout","id","currentNode","offsetHeight","onEdit","isEditable","onAdd","isSelected","parent","onDelete","_.remove","removed","onEdited","trim","edited","added","onDblClick","dobleClick","onKeyDown","keypressDelete","keypressInsert","moveDownIntoTree","moveUpIntoTree","indexOf","indexOfParent","getDescription","_data","treeHelisaConnect","rangeScrolled","fillParent","upSelectNode","expandAllParents","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","checkedOptionNode","uncheckedOptionNode","selectedOptions","has","reloadSelectedOptions","get","options","option","formControl","set","getNodeById","queue","curr","shift","apply","host","(document:keyup)","Router","ElementRef","router","elementRef","Map","showOptionsNode","collapseParent","NestedTreeControl","MatTreeNestedDataSource","hasChild","_","AutocompleteHelisaService","setDataSource","dataSource$","AutocompleteHelisaComponent","autocompleteHelisaService","filteredOptions","of","myControl","valueChanges","pipe","startWith","_filter","displayFn","displayText","filterValue_1","toLowerCase","filter","onSelected","selectedValue","onSelectedValue","getNextPage","isLoading","OptionsScrollDirective","removeScrollEventListener","autoComplete","panel","removeEventListener","ngOnDestroy","_onDestroy","complete","thresholdPercent","scroll","scrollEvent","clientHeight","Directive","MatAutocomplete","opened","tap","addEventListener","bind","takeUntil","closed","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","DONE","INFO"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string =\"\";  \r\n  @Input() inputFormControl:FormControl = new FormControl('',Validators.required);\r\n  @Input() requiredMessage:string = \"El campo es requerido\";\r\n  @Input() value:string = \"\";\r\n\r\n  @Output() done = new EventEmitter<string>();\r\n  @Output() cancel = new EventEmitter<any>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if(this.value != \"\"){\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n  }\r\n\r\n\r\n  onDone(){\r\n    if(this.inputFormControl.valid)\r\n    {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(){\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type:ToastType, message:String, subMessages?:String[]){\r\n    subMessages = subMessages ? subMessages : [];\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message: message, type: type, subMessages:subMessages},\r\n      duration: this.durationInSeconds * 1000\r\n    });\r\n  }\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = \"ERROR\",\r\n    CONFIRMATION = \"CONFIRMATION\"\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: String;\r\n  hasCancel: boolean;\r\n\r\n  constructor(public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data) {\r\n      this.content = data.content;\r\n      this.title = data.title;\r\n      this.hasCancel = data.type == AlertHelisaType.CONFIRMATION;\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onCancel(){\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type:AlertHelisaType, title:String, content:String): Observable<any> {\r\n    const dialogRef = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: {title: title, content: content, type:type}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport {ColumnConfig, RequestTableHelisa, AddRowButton, ConfigRowStyles} from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency} from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable {\r\n  columns: Array<ColumnConfig>,\r\n  isRemote: boolean,\r\n  dataSource?: Array<any>,\r\n  count?: number,\r\n  order?: number,\r\n  showTitle?: boolean,\r\n  indexRowSelect?: number,\r\n  isDragged?: boolean,\r\n  addRowButton?: AddRowButton,\r\n  configRowStylesFromColumn?: Array<ConfigRowStyles>,\r\n  isCellSelection?: boolean\r\n}\r\n\r\n@Injectable()\r\nexport class DependencyTableHelisaService {\r\n\r\n\r\n  tables: Subject<ConfigTable[]> = new Subject();\r\n  infoTables: Array<ConfigTable> = new Array();\r\n  \r\n  private emitVisibilityButton$ = new Subject<EventDependency>();\r\n  emitVisibilityButton = this.emitVisibilityButton$.asObservable();\r\n  \r\n  private emitVisibilityAllButtons$ = new Subject<boolean>();\r\n  emitVisibilityAllButtons = this.emitVisibilityAllButtons$.asObservable();\r\n\r\n  private emitIsCellSelection$ = new Subject<EventDependency>();\r\n  emitIsCellSelection = this.emitIsCellSelection$.asObservable();\r\n\r\n  private emitChangeColumns$ = new Subject<EventDependency>();\r\n  emitChangeColumns = this.emitChangeColumns$.asObservable();\r\n\r\n  emitTotal = new Subject<EventDependency>();\r\n  emitNextPage = new Subject<EventDependency>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable, withRemoveDependency: boolean = false) {\r\n    if (withRemoveDependency) {\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if (configTable.isRemote) {\r\n      configTable.dataSource = null;\r\n      if (configTable.count === null)\r\n        throw \"hace falta el count\";\r\n    } else {\r\n      if (configTable.dataSource === null)\r\n        throw \"hace falta el dataSource\";\r\n      configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina \r\n   */\r\n  setTotal(event: EventDependency) {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  addPage(event: EventDependency) {\r\n    this.emitNextPage.next(event);\r\n  }\r\n\r\n  selectIndexRow(config: ConfigTable) {\r\n    if (this.infoTables[config.order]) {\r\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\r\n      this.tables.next(this.infoTables); }\r\n  }\r\n\r\n\r\n  /**\r\n   * Muestra o esconde el boton una tabla en especifico\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeVisibilityButton(event:EventDependency){\r\n    this.emitVisibilityButton$.next(event);\r\n  }\r\n\r\n\r\n  /**\r\n   * Esconde los botones de todas las tablas\r\n   * @param show indicar si se muestran o no todos los botones de las tablas\r\n   */\r\n  changeVisibilityAllButtons(show:boolean){\r\n    this.emitVisibilityAllButtons$.next(show);\r\n  }\r\n\r\n  /**\r\n   * Para habilitar el manejo de selecciÃ³n de celda\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false \r\n   */\r\n  changeisCellSelection(event:EventDependency) {\r\n    this.emitIsCellSelection$.next(event);\r\n  }\r\n\r\n   /**\r\n   * Para habilitar el cambio de columnas\r\n   * @param event para indicar el index de la tabla y en \"data\" columnas \r\n   */\r\n  changeColumnsByTable(event:EventDependency) {\r\n    this.emitChangeColumns$.next(event);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\r\nimport {TotalTableHelisa} from \"./table-helisa.interface\";\r\nimport {TableHelisaComponent} from \"./table-helisa.component\";\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: TableHelisaComponent<any>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn = this.emitChangeSource.asObservable();\r\n  nextPageReturn = this.emitNextPage.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<T>) {\r\n    this.emitChangeSource.next({obj: total, table: table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>) {\r\n    this.emitNextPage.next({obj: page, table: table});\r\n  }\r\n\r\n\r\n  private emitVisibleButton$ = new Subject<boolean>();\r\n  /**\r\n   * Observable para saber si se debe mostrar o esconder el boton de add row\r\n   */\r\n  emitVisibleButton = this.emitVisibleButton$.asObservable();\r\n\r\n  /**\r\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\r\n   * @param change indicar si se muestra o no el boton de add row de la tabla\r\n   */\r\n  changeVisibilityButton(change:boolean){\r\n    this.emitVisibleButton$.next(change);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input } from '@angular/core';\r\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\r\nimport {ColumnConfig, RequestTableHelisa, SelectObject} from '../table-helisa/table-helisa.interface';\r\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\r\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency {\r\n  index: number,\r\n  data: any\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [DependencyTableHelisaService]\r\n})\r\nexport class DependencyTableHelisaComponent implements OnInit {\r\n\r\n  tables: Array<ConfigTable> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<any>>;\r\n\r\n  /**\r\n   * deprecated, use selectObject\r\n   */\r\n  @Output() selected: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() selectObject: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() nextPage: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() total: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() sort: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() drop: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() selectCell = new EventEmitter<EventDependency>();\r\n  selectedObject: EventDependency = null;\r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService, private tableService: TableHelisaService<any>) { }\r\n\r\n  ngOnInit() {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      event => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n\r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      event => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder el boton de una tabla\r\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\r\n      data=>{        \r\n        if(!!data && data.index != undefined){\r\n            let table = this.tables[data.index];\r\n            if(!!table){\r\n              table.addRowButton.showButton = data.data;\r\n            }\r\n        }\r\n      }\r\n    )\r\n\r\n    //Observable para mostrar o esconder los botones de todas las tablas\r\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\r\n      data=>{\r\n        if(data != undefined && data != null){\r\n          this.tables.forEach(element => {\r\n            if(!!element.addRowButton){\r\n              element.addRowButton.showButton = data;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    )\r\n\r\n    //Observable para manejo de selecciÃ³n de celdas\r\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\r\n      data => {\r\n        if (!!data && data.index != undefined) {\r\n          let table = this.tables[data.index];\r\n          if (table) {\r\n            table.isCellSelection = data.data;\r\n          }\r\n        }\r\n      });\r\n\r\n    //Observable para manejo de columnas\r\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\r\n      data => {\r\n        if (!!data && data.index != undefined) {\r\n          let table = this.tables[data.index];\r\n          if (table) {\r\n            table.columns = data.data;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService(): DependencyTableHelisaService {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables() {\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe(tables => {\r\n        this.tables = tables;\r\n      }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: SelectObject<any>) {\r\n    this.selectedObject = { index: index, data: event };\r\n    this.selected.emit({ index: index, data: event.value });\r\n    this.selectObject.emit({index: index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa) {\r\n    this.nextPage.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: any) {\r\n    this.total.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: any) {\r\n    this.sort.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onDrop(index: number, event: any) {\r\n    this.drop.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe aÃ±adir una nueva fila\r\n   * @param index indica el indice de la tabla de la cual se dispara el evento\r\n   */\r\n  onAddRow(index:number){\r\n    this.addRow.emit(index);\r\n  }\r\n\r\n  selectedCell(index: number, event: any) {\r\n    if (this.tables[index].isCellSelection) {\r\n      this.selectCell.emit({ index: index, data: event });\r\n    }\r\n  }\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef} from '@angular/core';\r\nimport {FormControl} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit {\r\n\r\n  @Input() placeholder = '';\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n  @Input() isSearch = false;\r\n  @Input() inputFormControl: FormControl = new FormControl('');\r\n  @Input() isFocused = false;\r\n  @Input() disabled = false;\r\n\r\n  @ViewChild('inputText') nameInput: ElementRef;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if (this.isFocused) {\r\n      this.nameInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  search() {\r\n    this.setValue.emit(this.inputFormControl.value);\r\n  }\r\n\r\n}\r\n","import {SortDirection} from \"@angular/material\";\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n}\r\n\r\nexport interface AddRowButton{  \r\n  text: string;\r\n  showButton:boolean;\r\n}\r\n\r\nexport enum EventScope {\r\n  USER, CODE_CALL\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa {\r\n  page: number;\r\n  body: any;\r\n}\r\n\r\nexport interface DropElement<T>{\r\n value: T;\r\n order: number;\r\n}\r\n\r\nexport interface SelectObject<T> {\r\n  value: T;\r\n  scope: EventScope;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n\r\nexport interface Cell {\r\n  column: ColumnConfig;\r\n  row: any;\r\n }\r\n\r\n export interface ConfigCellStyles{\r\n   cellData: any;\r\n   classCell: string \r\n }\r\n\r\n export interface ConfigRowStyles{\r\n  column: ColumnConfig;\r\n  data: any,\r\n  classRow: string \r\n}\r\n\r\n//@dynamic\r\nexport abstract class ColumnConfigUtil {\r\n  static getValue(obj: any, column: ColumnConfig): any {\r\n    return column.name.split('.').reduce((o, field) => o && o[field], obj);\r\n  }\r\n}\r\n\r\n","import {ColumnConfig} from \"./table-helisa.interface\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): any {\r\n    return {};\r\n  }\r\n\r\n  nextPage() {\r\n    return this.page++;\r\n  }\r\n}\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {MatSort, MatTable, MatTableDataSource} from '@angular/material';\r\nimport {Sort} from '@angular/material/typings/sort';\r\nimport clonedeep from 'lodash.clonedeep';\r\nimport {\r\n  AddRowButton,\r\n  Cell,\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  ConfigCellStyles,\r\n  ConfigRowStyles,\r\n  DropElement,\r\n  EventColumn,\r\n  EventScope,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  SelectObject,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType\r\n} from './table-helisa.interface';\r\nimport {TableHelisaService} from './table-helisa.service';\r\nimport {TableHelisaConnectComponent} from './table-helisa-connect.component';\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\ninterface RowData {\r\n  data: any;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData>;\r\n  displayedColumns: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n  isSetSelectedRow = false;\r\n  indexRowSelect: number;\r\n  private scrollCount: number = 0;\r\n\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n  @ViewChild(MatTable) matTable: MatTable<any>;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n\r\n  /**\r\n   * Deprecado, cambiar por electObject\r\n   */\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() selectCell = new EventEmitter<Cell>();\r\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa> = new EventEmitter<RequestTableHelisa>();\r\n  @Input() showTitle = true;\r\n  @Input() isCellSelection = false;\r\n  @Input() count: number;\r\n  @Input() configCellStyles: Array<ConfigCellStyles>;\r\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles>;\r\n  @Input() selectedCells: Cell;\r\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\r\n  @Input() isDragged = false;\r\n  @Input() addRowButton:AddRowButton = {showButton:false, text:\"\"};\r\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\r\n  showFooter = false;\r\n  showSearch = false;\r\n\r\n  constructor(private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit() {\r\n    this.tableService.nextPageReturn.subscribe(\r\n      data => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe(info => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column, idx) => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort) => {\r\n        const column: ColumnConfig = this.columnConfig.find(c => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\r\n      }\r\n    );\r\n\r\n    this.tableService.emitVisibleButton.subscribe(\r\n      data =>{\r\n        if(data != undefined && data != null)\r\n        {\r\n          this.addRowButton.showButton = data;\r\n        }\r\n        \r\n      }\r\n    )\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.isCellSelection) {\r\n      this.matTable.renderRows();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n      this.goNextPage();\r\n    } else { this.tableHelisaConnectComponent = undefined; }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.columnConfig = columnConfiguration;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n    if (columnConfiguration) {\r\n      columnConfiguration.forEach(column => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<any>) {\r\n    this.rawData = dataSource;\r\n    if (this.rawData) { this.prepareDataSource(); }\r\n  }\r\n\r\n  @Input()\r\n  set selectedIndexRow(idRowSelected: number) {\r\n    this.indexRowSelect = idRowSelected;\r\n    if (this.rawData && this.rawData.length) {\r\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private prepareDataSource() {\r\n    const changeData = Array<RowData>();\r\n    let haveGroup = false;\r\n    let groupFooter: Array<TotalGroup>;\r\n    this.columnConfig.forEach(column => {\r\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n        this.totalData = new Array<number>(this.columnConfig.length);\r\n        this.showFooter = true;\r\n        this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\r\n      }\r\n      this.showSearch = this.showSearch || column.searchable;\r\n      haveGroup = haveGroup || column.groupable;\r\n    });\r\n    if (haveGroup) {\r\n      this.rawData = this.rawData.sort((a, b) => {\r\n        let result = 0;\r\n        this.columnConfig.forEach(column => {\r\n          if (result === 0) {\r\n            result = this.compare(a, b);\r\n          }\r\n        });\r\n        return result;\r\n      });\r\n    }\r\n    this.rawData.forEach(row => {\r\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data, row) !== 0)) {\r\n        if (groupFooter) {\r\n          changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\r\n        }\r\n        changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\r\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n      }\r\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\r\n      changeData.push({ data: row, rowType: RowType.ROW });\r\n    });\r\n    this.data = new MatTableDataSource<RowData>(changeData);\r\n    if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\r\n      if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0)\r\n        this.indexRowSelect = 0;\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: any) {\r\n    this.columnConfig.forEach((column, index) => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = { sum: ColumnConfigUtil.getValue(row, column), count: 1 };\r\n        } else {\r\n          rowTotal[index].sum += ColumnConfigUtil.getValue(row, column);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: any, b: any): number {\r\n    let ws = 0;\r\n    this.columnConfig.forEach(column => {\r\n      if (ws === 0 && column.groupable) {\r\n        if (ColumnConfigUtil.getValue(a, column) < ColumnConfigUtil.getValue(b, column)) { ws = -1; } else if (ColumnConfigUtil.getValue(a, column) > ColumnConfigUtil.getValue(b, column)) { ws = 1; }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: any): string {\r\n    let result = '';\r\n    this.columnConfig.forEach(column => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + ColumnConfigUtil.getValue(obj, column);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index, item): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map(name => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: any, column: ColumnConfig) {\r\n    return ColumnConfigUtil.getValue(obj, column);\r\n  }\r\n\r\n  searchText(text) {\r\n    this.lastSearch = text;\r\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\r\n  }\r\n\r\n  selectRow(row, isUser) {\r\n    this.selectedObject = row.data;\r\n    this.select.emit(this.selectedObject);\r\n    this.selectObject.emit({value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL});\r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n    if (element.scrollHeight - element.scrollTop < 1000) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  private goNextPage() {\r\n    if (this.type === TableHelisaType.REMOTE && !this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]) {\r\n    if (!this.rawData) { this.rawData = new Array<T>(); }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n      this.tableHelisaConnectComponent.isUsed = false;\r\n    }\r\n  }\r\n\r\n  dblClickCell() {\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  selectedCell(element, column: ColumnConfig) {\r\n    this.selectedCells = { column: column, row: element };\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  isSelectedCell(row, column: ColumnConfig): boolean {\r\n    if (this.isCellSelection) {\r\n       if (this.selectedCells != null) {\r\n            if (this.selectedCells.column.name === column.name &&\r\n                this.selectedCells.row.data === row.data ) {\r\n                return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getClassToCell(row, column: ColumnConfig) {\r\n    let classToCell = '';\r\n    if (this.configCellStyles) {\r\n      let found = this.configCellStyles.find(c => {\r\n        return c.cellData === this.getValue(row, column);\r\n      });\r\n      if (found) {\r\n        classToCell = found.classCell;\r\n      }\r\n    }\r\n    return classToCell;\r\n  }\r\n\r\n  getClassToRow(row) {\r\n    let classToRow = '';\r\n    if (this.configRowStylesFromColumn) {\r\n      let found = this.configRowStylesFromColumn.find(c => {\r\n        return c.data === this.getValue(row, c.column);\r\n      });\r\n      if (found) {\r\n        classToRow = found.classRow;\r\n      }\r\n    }\r\n    return classToRow;\r\n  }\r\n\r\n  onDrop(event: CdkDragDrop<any>) {\r\n    let array: RowData[] = this.data.data;\r\n    moveItemInArray(array, event.previousIndex, event.currentIndex);\r\n    this.drop.emit({value: array[event.currentIndex].data, order: event.currentIndex});\r\n    this.data.data = clonedeep(array);\r\n  }\r\n\r\n  tableKeydown(event: KeyboardEvent) {\r\n    if (!this.isCellSelection) {\r\n      let currentIndex = this.data.data.findIndex(row => row.data === this.selectedObject);\r\n      let newSelection = -10;\r\n      if (event.key === 'ArrowDown') {\r\n        this.scrollCount++;\r\n        this.data.data.forEach((row, index) => {\r\n          if (newSelection == -10 && index > currentIndex && row.rowType == RowType.ROW)\r\n            newSelection = index;\r\n        });\r\n      }\r\n      if (event.key === 'ArrowUp') {\r\n        this.scrollCount--;\r\n        currentIndex = this.data.data.length - currentIndex - 1;\r\n        this.data.data.reverse().forEach((row, index) => {\r\n          if (newSelection == -10 && index > currentIndex && row.rowType == RowType.ROW)\r\n            newSelection = index;\r\n        });\r\n        this.data.data.reverse();\r\n        if (newSelection != -10) {\r\n          newSelection = this.data.data.length - newSelection - 1;\r\n        }\r\n      }\r\n      if (newSelection != -10) {\r\n        this.selectedObject = this.data.data[newSelection].data;\r\n      }\r\n      if(Math.abs(this.scrollCount)>=2)\r\n        this.scrollCount = 0;\r\n      else\r\n        event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emite el evento cuando se da click al boton AddRow\r\n   */\r\n  onAddRow(){\r\n    this.addRow.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css']\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n\r\n  @Input() placeholder = \"\";\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Subscriber } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected = new BehaviorSubject<number | string>(1);\r\n    // Observable string streams\r\n    nodeSelected = this.emitNodeSelected.asObservable();\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number | string) {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n\r\n\r\n    // Observable string sources\r\n    private emitDataSource = new BehaviorSubject<Node>(undefined);    \r\n    // Observable string streams\r\n    dataSourceObservable = this.emitDataSource.asObservable();\r\n    // Service message commands\r\n    changeDataSource(data:Node) {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n\r\n      \r\n    // Expand node observable\r\n      private emitExpandAllNodes = new BehaviorSubject<boolean>(null);          \r\n      nodeExpand = this.emitExpandAllNodes.asObservable();      \r\n      expandAllNodes(expand:boolean) {\r\n          this.emitExpandAllNodes.next(expand);\r\n      }\r\n\r\n\r\n      // Collapse node observable\r\n      private emitCollapseAllNodes = new BehaviorSubject<boolean>(null);          \r\n      nodeCollapse = this.emitCollapseAllNodes.asObservable();      \r\n      collapseAllNodes(collapse:boolean) {\r\n          this.emitCollapseAllNodes.next(collapse);\r\n      }\r\n\r\n\r\n      private emitRefreshTree = new Subject<void>();\r\n      refreshTreeObservable = this.emitRefreshTree.asObservable();\r\n      refreshTree(){\r\n          this.emitRefreshTree.next();\r\n      }\r\n\r\n      private emitRefreshTreeWithPagination = new Subject<void>();\r\n      refreshTreeWithPaginationObservable = this.emitRefreshTreeWithPagination.asObservable();\r\n      refreshTreeWithPagination(){\r\n          this.emitRefreshTreeWithPagination.next();\r\n      }\r\n\r\n\r\n\r\n      private emitExpandOneNode = new Subject<Node>();\r\n      expandOneNodeObservable = this.emitExpandOneNode.asObservable();\r\n      expandOneNode(node:Node){\r\n        this.emitExpandOneNode.next(node);\r\n      }\r\n\r\n      private emitCollapseOneNode = new Subject<Node>();\r\n      collapseOneNodeObservable = this.emitCollapseOneNode.asObservable();\r\n      collapseOneNode(node:Node){\r\n        this.emitCollapseOneNode.next(node);\r\n      }\r\n\r\n    constructor(){\r\n        \r\n    }\r\n  \r\n}\r\n","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n  \r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }          \r\n  \r\n    nextPage() {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef } from '@angular/core';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource, MatTree } from '@angular/material';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;  \r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass'],\r\n  host:{\r\n    '(document:keyup)': 'onKeyDown($event)'\r\n  }\r\n})\r\nexport class TreeHelisaComponent implements OnInit,AfterViewInit {\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit:FormControl;\r\n  @ViewChild('tree') tree:MatTree<any>;\r\n  private selectedOptions = new Map<any, any>();\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data:Node;\r\n\r\n  \r\n  /**\r\n   * Establece si se mostraran las opciones de \r\n   * Creacion, ediciÃ³n y eliminacion del nodo\r\n   */\r\n  @Input() showOptionsNode:boolean = true; \r\n  \r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed = new EventEmitter<number | string>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue aÃ±adido\r\n   */\r\n  @Output() added = new EventEmitter<Node>();\r\n  @Output() collapseParent = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected = new EventEmitter<number | string>();\r\n  @Output() dobleClick = new EventEmitter<number | string>();\r\n  @Output() keypressDelete = new EventEmitter<number | string | null>();\r\n  @Output() keypressInsert = new EventEmitter<number | string | null>();\r\n  @Output() checkedOptionNode = new EventEmitter<number | string | null>();\r\n  @Output() uncheckedOptionNode = new EventEmitter<number | string | null>();\r\n  \r\n  treeControl = new NestedTreeControl<Node>(node => node.children);\r\n  dataSource = new MatTreeNestedDataSource<Node>();\r\n\r\n\r\n  isSingleClick: Boolean = true;  \r\n  currentNode: Node = null;\r\n\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService:TreeHelisaService,\r\n    private router:Router,\r\n    private elementRef:ElementRef) {    \r\n    //cargar datos pasados por el @Input\r\n    if (!!this.data) {      \r\n      let data = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = [];     \r\n      this.treeControl.dataNodes = []; \r\n    }\r\n    \r\n  }\r\n\r\n  \r\n\r\n  ngOnInit() {     \r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable    \r\n    .subscribe((res) => {            \r\n      if(!!res && !!res.children){              \r\n        this.receivePage(res.children)\r\n      }else{\r\n        this.dataSource.data = [];\r\n        this.treeControl.dataNodes = [];\r\n      }    \r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected\r\n      .subscribe((res)=>{\r\n        if(!!this.data && !!this.data.children)\r\n        this.selectNode(this.data,res);\r\n      })\r\n\r\n    \r\n      this.treeHelisaService.refreshTreeObservable\r\n      .subscribe(res=>{\r\n        this.refreshTree();\r\n      })\r\n      \r\n      this.treeHelisaService.refreshTreeWithPaginationObservable\r\n      .subscribe(res=>{\r\n        this.refreshTreeWithPagination();\r\n      })    \r\n  }\r\n\r\n  ngAfterViewInit() {     \r\n    this.treeHelisaService.nodeExpand.subscribe(res=>{\r\n      if(res != null){\r\n        if(res){\r\n          this.tree.treeControl.expandAll();\r\n        }\r\n      }\r\n    })\r\n\r\n    this.treeHelisaService.nodeCollapse.subscribe(res=>{\r\n      if(res != null){\r\n        if(res){\r\n          this.tree.treeControl.collapseAll();\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n    this.treeHelisaService.expandOneNodeObservable\r\n      .subscribe(res => {        \r\n        if (res != undefined) {          \r\n          this.treeControl.expand(res);          \r\n        }\r\n      })\r\n\r\n      this.treeHelisaService.collapseOneNodeObservable\r\n      .subscribe(res => {        \r\n        if (res != undefined) {\r\n          this.treeControl.collapse(res);\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node:Node){\r\n\r\n    this.isSingleClick = true;\r\n        setTimeout(()=>{\r\n            if(this.isSingleClick){\r\n              \r\n              this.selectNode(this.data,node.id);    \r\n\r\n              // if(!!node && !node.children){\r\n              if(!!node){\r\n                this.nodeSelected.emit(node.id);\r\n                this.currentNode = node;\r\n              }\r\n            }\r\n         },350)   \r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n\r\n    if ((element.offsetHeight + element.scrollTop) >= element.scrollHeight) {      \r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node:Node){  \r\n    node.isEditable = true;\r\n  }\r\n\r\n  onAdd(node:Node){\r\n    // si no tiene hijos instanciar el array\r\n    if(!node.children){\r\n      node.children = [];\r\n    }\r\n    node.children.push(\r\n      {\r\n        id: null,\r\n        name: \"\",       \r\n        isSelected: false,\r\n        parent : node,\r\n        isEditable : true\r\n      }\r\n    );     \r\n    this.refreshTree();\r\n  }\r\n\r\n  onDelete(node:Node){ \r\n    // Remueve el nodo utilizando la libreria de lodash   \r\n    _.remove(node.parent.children, node);\r\n    \r\n    this.refreshTree();\r\n    this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node:Node,value:any){\r\n    \r\n      node.name = value;\r\n\r\n      if(node.id == null && node.name == \"\"){              \r\n        _.remove(node.parent.children, node);\r\n        this.refreshTree();\r\n      }\r\n      else if(node.id && node.id != null && node.name.trim() !== \"\"){\r\n        this.edited.emit(node);\r\n        node.isEditable = false;\r\n      }else if(!!node.id && node.id == null && node.name.trim() !== \"\"){\r\n        this.added.emit(node);\r\n        node.isEditable = false;\r\n      }         \r\n  }\r\n\r\n  onCancel(node:Node,value:string){\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if(node.id == null){\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();  \r\n    }\r\n\r\n    node.isEditable = false; \r\n  }\r\n\r\n  onDblClick(node:Node){\r\n    this.isSingleClick = false;\r\n    this.dobleClick.emit(node.id);\r\n  }\r\n\r\n  onKeyDown(event:KeyboardEvent){      \r\n    switch (event.key) {\r\n      case 'Delete':\r\n        this.keypressDelete.emit((!!this.currentNode && this.currentNode.id)?this.currentNode.id:null)\r\n        break;\r\n      case 'Insert':\r\n        this.keypressInsert.emit((!!this.currentNode && this.currentNode.id)?this.currentNode.id:null)\r\n        break;\r\n      case 'ArrowDown':        \r\n        this.moveDownIntoTree();\r\n        break;\r\n      case 'ArrowUp':          \r\n          this.moveUpIntoTree();\r\n        break;     \r\n    }\r\n    \r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  private moveUpIntoTree(){\r\n    if(!!this.data){\r\n      // si aun no hay ningun node seleccionado selecciona el primero\r\n      if(this.currentNode == null){\r\n        this.selectNode(this.data,this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      }else{\r\n        if(!!this.currentNode.parent && this.currentNode.id != null){\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          let index = this.currentNode.parent.children.indexOf(this.currentNode);\r\n          \r\n          if(this.currentNode.parent.id == null && index == 0){ \r\n            return 0;\r\n          }else{// si tiene nodos al mismo nivel salta al nodo anterior\r\n            if (index != undefined && index == 0) {\r\n              this.currentNode = this.currentNode.parent;\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } else { // si no tiene nodos al mismo nivel salta al nodo padre\r\n              this.currentNode = this.currentNode.parent.children[index - 1];\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } \r\n          }         \r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveDownIntoTree(){      \r\n    if(!!this.data){\r\n      if(this.currentNode == null){\r\n        this.selectNode(this.data,this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      }else{\r\n        if(!!this.currentNode){\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          let index = (!!this.currentNode && !!this.currentNode.parent)?this.currentNode.parent.children.indexOf(this.currentNode): null;\r\n          \r\n          // si tiene childrens pasa al primer children\r\n          if(!!this.currentNode.children  &&\r\n            this.currentNode.children.length > 0){\r\n\r\n            this.currentNode = this.currentNode.children[0];\r\n            this.selectNode(this.data,this.currentNode.id);\r\n            if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n          // Si es el ultimo nodo del array pasa al nodo hermano del padre (tio) hacia abajo\r\n          else if(index != undefined &&  \r\n            index == this.currentNode.parent.children.length - 1 &&\r\n            this.currentNode.parent.parent != null &&\r\n            this.currentNode.parent.parent.children != null &&\r\n            this.currentNode.parent.parent.children.length > 0){\r\n\r\n            let indexOfParent = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent); \r\n            this.currentNode = (this.currentNode.parent.parent.children[indexOfParent + 1] == undefined)? this.currentNode : this.currentNode.parent.parent.children[indexOfParent + 1];\r\n\r\n            this.selectNode(this.data,this.currentNode.id);\r\n            if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }else{ // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\r\n            this.currentNode = this.currentNode.parent.children[index + 1];\r\n            this.selectNode(this.data,this.currentNode.id);\r\n            if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild = (_: number, node: Node) => !!node.children && node.children.length > 0;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node:Node):string{\r\n      let result:string[]=[node.name];        \r\n      let concat:string=\"\";\r\n\r\n      if(node.parent){          \r\n        result.push(this.getDescription(node.parent))\r\n      }                \r\n\r\n\r\n      if(result.length == 1)\r\n          return node.name;\r\n\r\n      result = result.reverse();\r\n\r\n      for (let i = 0; i < result.length; i++) {            \r\n          let element = result[i];\r\n          concat = concat + element + ((i == result.length-1)?\"\":\",\");                \r\n      }\r\n              \r\n      return concat;\r\n  }\r\n\r\n\r\n  /**\r\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\r\n   */\r\n  private refreshTree(){\r\n    this.data = null;\r\n    let _data = this.dataSource.data; \r\n    this.dataSource.data = null;\r\n    this.dataSource.data = _data;\r\n    this.treeControl.dataNodes = _data;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())    \r\n   */\r\n  private refreshTreeWithPagination(){    \r\n    let _data = this.dataSource.data; \r\n    this.dataSource.data = null;\r\n    this.dataSource.data = _data;\r\n    this.treeControl.dataNodes = _data;\r\n  }\r\n\r\n\r\n\r\n\r\n  private goNextPage() {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()              \r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]) {    \r\n    if(!this.data){ this.data = {id:null,name:\"root\",isSelected:false}}\r\n    if (!this.data.children) { this.data.children = new Array<Node>(); this.treeHelisaConnect = new TreeHelisaConnect<Node>(); }    \r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach(node=>{\r\n      this.fillParent(node,this.data);\r\n    })\r\n\r\n    this.dataSource.data = this.data.children;    \r\n    this.treeControl.dataNodes = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   * @param node \r\n   * @param parent \r\n   */\r\n  private fillParent(node:Node,parent:Node){\r\n\r\n    node.parent = parent;\r\n    if(node.children && node.children.length > 0){\r\n      node.children.forEach(item=>{\r\n        this.fillParent(item,node);   \r\n      })      \r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   * @param node \r\n   * @param id \r\n   */\r\n  private selectNode(node:Node,id:number|string){ \r\n      \r\n      this.upSelectNode(node)\r\n   \r\n      if(node == undefined || node.id == undefined){\r\n        return null;\r\n      }\r\n      if(node.id == id){\r\n        node.isSelected = true\r\n        this.expandAllParents(node);\r\n        return node;\r\n      }else if (node.children != null){\r\n           var i;\r\n           var result = null;\r\n           for(i=0; result == null && i < node.children.length; i++){\r\n                result = this.selectNode(node.children[i], id);                \r\n           }\r\n           return result;\r\n      }\r\n      return null; \r\n  }\r\n\r\n  private expandAllParents(node:Node){\r\n    if(!!node && !!node.parent){\r\n      this.treeHelisaService.expandOneNode(node.parent);\r\n      this.expandAllParents(node.parent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   * @param node \r\n   */\r\n  private upSelectNode(node: Node) {\r\n    if (!!node && node.isSelected != undefined) {\r\n      node.isSelected = false;\r\n      if (!!node.children)\r\n        for (var i = 0; i < node.children.length; i++) {\r\n          this.upSelectNode(node.children[i]);\r\n        }\r\n    }\r\n  }\r\n\r\n  getClassNode(node: Node): string[]{\r\n    let classNode = [];\r\n    if(node.isSelected) {\r\n      classNode.push(\"isSelected\");\r\n    }\r\n    if(node.classNode){\r\n      classNode.push(node.classNode);\r\n    }\r\n    return classNode;\r\n  }\r\n\r\n  onEditMode(node, editMode) {\r\n    this.getSelectedOptions(node).editMode = editMode;\r\n  }\r\n\r\n  onSelectOption(event, node) {\r\n    node.isCheckedOption = event.source.selected;\r\n    if (node.isCheckedOption)\r\n      this.checkedOptionNode.emit(node.id);\r\n    else\r\n      this.uncheckedOptionNode.emit(node.id);\r\n  }\r\n\r\n  getSelectedOptions(node: Node): any {\r\n    if (this.selectedOptions.has(node.id))\r\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\r\n    else\r\n      this.reloadSelectedOptions(node, false);\r\n    return this.selectedOptions.get(node.id);\r\n  }\r\n\r\n  private reloadSelectedOptions(node: Node, editMode: boolean) {\r\n    const array = new Array();\r\n    node.options.forEach(option => {\r\n      if (option.isCheckedOption)\r\n        array.push(option.id);\r\n    });\r\n    const obj = {formControl: new FormControl(array), editMode: editMode};\r\n    this.selectedOptions.set(node.id, obj);\r\n  }\r\n\r\n  getNodeById(id: number | string) : Node{\r\n    let queue: Node[] = [...this.dataSource.data];\r\n    while(queue.length > 0){\r\n      let curr = queue.shift();\r\n      if(curr.id === id){\r\n        return curr;\r\n      } else {\r\n        if(!!curr.children)\r\n          queue.push(...curr.children)\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\r\n\r\n@Injectable()\r\nexport class AutocompleteHelisaService<T> {\r\n\r\n  private emitChangeSource = new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\r\n  public dataSource$ = this.emitChangeSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>) {\r\n    this.emitChangeSource.next(options);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\r\n\r\nexport interface OptionAutocompleteHelisa<T> {\r\n  value: T;\r\n  displayText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-autocomplete',\r\n  templateUrl: './autocomplete-helisa.component.html',\r\n  styleUrls: ['./autocomplete-helisa.component.css'],\r\n  providers: [AutocompleteHelisaService]\r\n})\r\nexport class AutocompleteHelisaComponent<T> implements OnInit {\r\n\r\n  @Input() myControl = new FormControl();\r\n  @Input() options = new Array<OptionAutocompleteHelisa<T>>();\r\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\r\n  selectedValue: OptionAutocompleteHelisa<T>;\r\n  @Output() onSelectedValue: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\r\n  @Input() isRemote = false;\r\n  isLoading = false;\r\n\r\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.isRemote) {\r\n      this.autocompleteHelisaService.dataSource$.subscribe(data => {\r\n        setTimeout(() => {\r\n          this.options = data;\r\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);  \r\n        });        \r\n      });\r\n    }\r\n\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this._filter(value))\r\n    );\r\n\r\n  }\r\n\r\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {    \r\n    return option ? option.displayText : undefined;\r\n  }\r\n\r\n  getService(): AutocompleteHelisaService<T> {\r\n    return this.autocompleteHelisaService;\r\n  }\r\n\r\n  private _filter(value): OptionAutocompleteHelisa<T>[] {    \r\n    if (!(value instanceof Object)) {      \r\n      if (!this.isRemote) {\r\n        const filterValue = value.toLowerCase().split(' ');\r\n        return this.options.filter(option => {\r\n          let ws = true;\r\n          filterValue.forEach(text => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\r\n          return ws;\r\n        }).splice(0, 5);\r\n      } else {        \r\n        return this.options;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onSelected(event) {    \r\n    this.selectedValue = event.option.value;\r\n    this.onSelectedValue.emit(this.selectedValue.value);\r\n  }\r\n\r\n  getNextPage(){    \r\n    this.nextPage.emit();\r\n  }\r\n}\r\n","import {AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {MatSelect, SELECT_ITEM_HEIGHT_EM, MatAutocomplete} from '@angular/material';\r\nimport {auditTime, takeUntil, tap} from 'rxjs/operators';\r\nimport {fromEvent, Subject, Subscription} from 'rxjs';\r\n\r\n\r\nexport interface IAutoCompleteScrollEvent {\r\n  autoComplete: MatAutocomplete;\r\n  scrollEvent: Event;\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'mat-autocomplete[optionsScroll]'\r\n})\r\nexport class OptionsScrollDirective  {\r\n\r\n  @Input() thresholdPercent = .8;\r\n  @Output('optionsScroll') scroll = new EventEmitter<IAutoCompleteScrollEvent>();\r\n  _onDestroy = new Subject();\r\n\r\n  constructor(public autoComplete: MatAutocomplete) {\r\n    this.autoComplete.opened.pipe(\r\n      tap(() => {\r\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\r\n        // Note: The panel will be available on next tick\r\n        // Note: The panel wil NOT open if there are no options to display\r\n        setTimeout(() => {\r\n          // Note: remove listner just for safety, in case the close event is skipped.\r\n          this.removeScrollEventListener();\r\n          if(!!this.autoComplete &&\r\n            !!this.autoComplete.panel &&\r\n            !!this.autoComplete.panel.nativeElement){\r\n              this.autoComplete.panel.nativeElement\r\n                .addEventListener('scroll', this.onScroll.bind(this))\r\n            }\r\n        });\r\n      }),\r\n      takeUntil(this._onDestroy)).subscribe();\r\n\r\n    this.autoComplete.closed.pipe(\r\n      tap(() => this.removeScrollEventListener()),\r\n      takeUntil(this._onDestroy)).subscribe();\r\n  }\r\n\r\n  private removeScrollEventListener() {\r\n    if(!!this.autoComplete &&\r\n      !!this.autoComplete.panel &&\r\n      !!this.autoComplete.panel.nativeElement){\r\n    this.autoComplete.panel.nativeElement\r\n      .removeEventListener('scroll', this.onScroll);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    this.removeScrollEventListener();\r\n  }\r\n\r\n  onScroll(event: any) {\r\n\r\n    if (this.thresholdPercent === undefined) {\r\n      this.scroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n    } else {\r\n      const threshold = this.thresholdPercent * 100 * event.target.scrollHeight / 100;\r\n      const current = event.target.scrollTop + event.target.clientHeight;\r\n\r\n      //console.log(`scroll ${current}, threshold: ${threshold}`)\r\n      if (current > threshold) {\r\n        //console.log('load next page');\r\n        this.scroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n      }\r\n    }\r\n  }\r\n  \r\n}","import { NgModule } from '@angular/core';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\n\r\n\r\nimport {MatAutocompleteModule} from '@angular/material';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatSidenavModule, MatGridListModule,  MatMenuModule, MatRadioModule, MatButtonModule, MatCheckboxModule, MatInputModule, MatOptionModule, MatSnackBarModule, MatTableModule, MatPaginatorModule, MatSortModule } from '@angular/material';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from \"@angular/material\";\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport {TableHelisaService} from \"./components/table-helisa/table-helisa.service\";\r\nimport {\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  EventColumn, TotalType\r\n} from \"./components/table-helisa/table-helisa.interface\";\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport {TreeHelisaService} from \"./components/tree-helisa/tree-helisa.service\";\r\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\r\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ \r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  providers: [\r\n    TableHelisaService,\r\n    TreeHelisaService\r\n  ]\r\n})\r\nexport class HelisaLibModule { }\r\n","export enum ToastType {\r\n    DONE = \"done\",\r\n    ERROR = \"error\",\r\n    INFO = \"info\"\r\n}\r\n"]}