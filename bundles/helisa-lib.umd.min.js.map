{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","node_modules/tslib/tslib.es6.js","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","ng://helisa-lib/lib/directives/options-scroll.directive.ts","ng://helisa-lib/lib/directives/tooltip.directive.ts","ng://helisa-lib/lib/directives/external-link.directive.ts","ng://helisa-lib/lib/pipes/external-link.pipe.ts","ng://helisa-lib/lib/components/alert-uncompleted-data-helisa/alert-uncompleted-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-lost-data-helisa/alert-lost-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-delete-data-helisa/alert-delete-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-uncompleted-selected-data-helisa/alert-uncompleted-selected-data-helisa.component.ts","ng://helisa-lib/lib/components/alert-information-not-valid-helisa/alert-information-not-valid-helisa.component.ts","ng://helisa-lib/lib/components/combo-box-helisa/combo-box-helisa.component.ts","ng://helisa-lib/lib/components/alert-authorization-transaction-helisa/alert-authorization-transaction-helisa.component.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/alert-uncompleted-data-helisa/alert-uncompleted-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-lost-data-helisa/alert-lost-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-delete-data-helisa/alert-delete-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-uncompleted-selected-data-helisa/alert-uncompleted-selected-data-helisa.service.ts","ng://helisa-lib/lib/components/alert-information-not-valid-helisa/alert-information-not-valid-helisa.service.ts","ng://helisa-lib/lib/components/alert-authorization-transaction-helisa/alert-authorization-transaction-helisa.service.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","nameField","nativeElement","focus","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","ViewChild","Output","placeholder","FormControl","Validators","required","requiredMessage","isFocused","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","subMessages","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","_this","content","title","okLabel","undefined","cancelLabel","hasCancel","AlertHelisaType","disableClose","keydownEvents","subscribe","event","code","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","Error","next","setTotal","emitTotal","addPage","emitNextPage","selectIndexRow","config","indexRowSelect","changeVisibilityButton","emitVisibilityButton$","changeVisibilityAllButtons","show","emitVisibilityAllButtons$","changeisCellSelection","emitIsCellSelection$","changeColumnsByTable","emitChangeColumns$","Subject","Array","emitVisibilityButton","asObservable","emitVisibilityAllButtons","emitIsCellSelection","emitChangeColumns","TableHelisaService","total","table","emitChangeSource","obj","page","change","emitVisibleButton$","totalReturn","nextPageReturn","emitVisibleButton","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","viewTables","toArray","index","addRowButton","showButton","forEach","element","isCellSelection","columns","getService","onSelectedDependency","selectedObject","selected","selectObject","onNextPage","nextPage","onTotal","onSort","sort","onDrop","drop","onAddRow","addRow","selectedCell","selectCell","onBookClicked","bookClicked","providers","ViewChildren","showToolTip","hideDelay","showDelay","__values","o","s","Symbol","iterator","m","i","call","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","DEFAULT","IDENTITY","NUMERIC","DOUBLE","InputHelisaComponent","Object","defineProperty","formControl","inputFormReal","valueChanges","statusChange","status","getMaskedValue","formControlMask","onFocus","setValidators","validator","disabled","disable","onlySelf","statusChanges","setErrors","key","nameInput","ngAfterViewInit","search","realValue","position","selectionStart","getRealValue","selectionEnd","str","InputHelisaType","maskedStr","j","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","indexOf","realStr","str_1","tslib_1.__values","str_1_1","strItem","match","str_2","str_2_1","haveDot","str_3","str_3_1","$event","Number","select","floatLabel","autocompleteMode","isSearch","blur","NORMAL","URL","USER","CODE_CALL","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","matTable","renderRows","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","columnConfiguration","hasSubtitle","displayedColumns","splice","addBookButton","columnCount","countSubtitle_1","showBookButton_1","subtitle","subtitleTemp","visible","rawData","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","dataSource$","prepareDataSource","idRowSelected","selectRow","rowType","RowType","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","addTotalGroup","MatTableDataSource","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","map","TotalType","getValueTooltip","searchText","text","lastSearch","isUser","scope","EventScope","onScroll","isScrollY","scrollY","scrollTop","scrollX","scrollLeft","scrollHeight","body","dblClickCell","selectedCells","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToRow","classToRow","configRowStylesFromColumn","classRow","isDragged","indexRowStartDrag","rowIndex","getRowIndex","pageY","array","dataBeforeDrag","moveItemInArray","stopPropagation","tableKeydown","currentIndex_1","findIndex","newSelection_1","scrollCount","reverse","Math","abs","preventDefault","filter","dragger","lastIndexRowDrag","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","ColumnType","MatSort","MatTable","read","ElementRef","showTitle","moment","moment_","MONTH_YEAR","STRICT","DateHelisaComponent","locale","dateToVisualize","dateFormControl","formHandler","incomingDate","dateFormat","format","TypeCalendarEnum","getStartView","typeCalendar","typeCalendarEnum","date","invalidFormat","isValid","isFromInputEvent","setTimeout","toDate","pipe","tap","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","incommingDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","errorMessage","Date","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","expandAllNodes","expand","emitExpandAllNodes","collapseAllNodes","collapse","emitCollapseAllNodes","refreshTree","emitRefreshTree","refreshTreeWithPagination","emitRefreshTreeWithPagination","expandOneNode","node","emitExpandOneNode","collapseOneNode","emitCollapseOneNode","BehaviorSubject","nodeSelected","dataSourceObservable","nodeExpand","nodeCollapse","refreshTreeObservable","refreshTreeWithPaginationObservable","expandOneNodeObservable","collapseOneNodeObservable","TreeHelisaConnect","TreeHelisaComponent","getDescription","parent","treeHelisaService","res","selectedNode","id","treeControl","dataNodes","selectNode","tree","expandAll","collapseAll","onRedirect","isSingleClick","currentNode","offsetHeight","onEdit","clickEditNode","onAdd","clickAddNode","onDelete","clickDeleteNode","onEdited","_.remove","trim","edited","isEditable","added","isDisabled","onDblClick","dobleClick","onKeyDown","keypressDelete","keypressInsert","moveDownIntoTree","moveUpIntoTree","indexOfParent","hasChild","t","datasourceData","treeHelisaConnect","rangeScrolled","isSelected","fillParent","reorderByOrderIndex","upSelectNode","getNodeById","expandAllParents","_b","_c","childrenNode","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","checkedOptionNode","uncheckedOptionNode","selectedOptions","has","reloadSelectedOptions","get","options","option","set","queue","curr","shift","apply","_.orderBy","x","orderIndex","console","log","Router","HostListener","router","elementRef","Map","removed","collapseParent","NestedTreeControl","MatTreeNestedDataSource","AutocompleteHelisaService","setDataSource","AutocompleteHelisaComponent","onScrollObservable","debounceTime","throttleTime","autocompleteHelisaService","filteredOptions","of","myControl","startWith","_checkRegex","_filter","displayFn","displayText","replace","filterValue_1","toLowerCase","onSelected","selectedValue","selectedValueEmmiter","getNextPage","isLoading","OptionsScrollDirective","removeScrollEventListener","autoComplete","panel","removeEventListener","ngOnDestroy","destroy","complete","st","pageYOffset","lastScrollTop","thresholdPercent","optionsScroll","scrollEvent","clientHeight","Directive","MatAutocomplete","opened","addEventListener","bind","takeUntil","closed","HelTooltipDirective","mouseover","currentContent","elemRef","innerText","toUpperCase","toString","isEllipsisActive","tooltip","offsetWidth","scrollWidth","MatTooltip","ExternalLinkDirective","ngOnChanges","hrefAttr","href","isLinkExternal","relAttr","targetAttr","isPlatformBrowser","platformId","includes","location","hostname","PLATFORM_ID","HostBinding","ExternalLinkPipe","transform","_i","Pipe","AlertUncompletedDataHelisaComponent","AlertLostDataHelisaComponent","AlertDeleteDataHelisaComponent","decorators","AlertUncompletedSelectedDataHelisaComponent","AlertInformationNotValidHelisaComponent","CLOSED","SELECT","INSERT","ComboBoxHelisaComponent","haveNextPage","listable","getData","pageSize","ComboBoxHelisaState","enabled","state","selectItem","selectedItem","selectEmitter","changeToInsert","insert","editable","AlertAuthorizationTransactionHelisaComponent","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","AlertUncompletedDataHelisaService","AlertLostDataHelisaService","AlertDeleteDataHelisaService","AlertUncompletedSelectedDataHelisaService","AlertInformationNotValidHelisaService","AlertAuthorizationTransactionHelisaService","DONE","INFO"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'hel-input-with-button',\n  templateUrl: './input-with-button.component.html',\n  styleUrls: ['./input-with-button.component.sass']\n})\nexport class InputWithButtonComponent implements OnInit {\n\n  @Input() placeholder: string = '';\n  @Input() inputFormControl: FormControl = new FormControl('', Validators.required);\n  @Input() requiredMessage: string = 'El campo es requerido';\n  @Input() value: string = '';\n  @Input() isFocused: boolean = false;\n  @ViewChild('inputText') nameField: ElementRef;\n\n  @Output() done: EventEmitter<string> = new EventEmitter<string>();\n  @Output() cancel: EventEmitter<void> = new EventEmitter<void>();\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n    if (this.value !== '') {\n      this.inputFormControl.setValue(this.value);\n    }\n    this.nameField.nativeElement.focus();\n  }\n\n\n  onDone(): void {\n    if (this.inputFormControl.valid) {\n      this.done.emit(this.inputFormControl.value);\n    }\n  }\n\n  onCancel(): void {\n    this.cancel.emit();\n  }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\nimport { ToastType } from './toast-type.enum';\n\n// @dynamic\n@Component({\n  selector: 'hel-toast',\n  templateUrl: './toast-helisa.component.html',\n  styleUrls: ['./toast-helisa.component.sass']\n})\nexport class ToastHelisaComponent implements OnInit {\n\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: {type: ToastType, message: string, subMessages?: string[]}) { }\n\n  ngOnInit(): void {}\n\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\nimport { ToastType } from './toast-type.enum';\nimport { ToastHelisaComponent } from './toast-helisa.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastHelisaService {\n\n  durationInSeconds: number = 5;\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  showToast(type: ToastType, message: string, subMessages?: string[]): void {\n    subMessages = subMessages ? subMessages : [];\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\n      data: {message, type, subMessages},\n      duration: this.durationInSeconds * 1000\n    });\n  }\n}\n","export enum AlertHelisaType {\n    ERROR = 'ERROR',\n    CONFIRMATION = 'CONFIRMATION'\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { AlertHelisaType } from './alert-helisa-type.enum';\n\ninterface AlertHelisaProperties {\n  title: string;\n  content: string;\n  type: AlertHelisaType;\n  okLabel: string;\n  cancelLabel: string;\n}\n\n@Component({\n  selector: 'hel-alert',\n  templateUrl: './alert-helisa.component.html',\n  styleUrls: ['./alert-helisa.component.sass']\n})\nexport class AlertHelisaComponent implements OnInit {\n\n  content: string;\n  title: string;\n  hasCancel: boolean;\n  okLabel: string;\n  cancelLabel: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertHelisaProperties\n  ) {\n    this.content = data.content;\n    this.title = data.title;\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = 'aceptar';\n    }\n    this.cancelLabel = data.cancelLabel;\n    if (this.cancelLabel === undefined) {\n      this.cancelLabel = 'cancelar';\n    }\n    this.hasCancel = data.type === AlertHelisaType.CONFIRMATION;\n    dialogRef.disableClose = true;\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      if (event.code === 'Escape') {\n        this.dialogRef.close(this.onCancel());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable } from 'rxjs';\nimport { AlertHelisaType } from './alert-helisa-type.enum';\nimport { AlertHelisaComponent } from './alert-helisa.component';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(type: AlertHelisaType, title: string, content: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertHelisaComponent> = this.dialog.open(AlertHelisaComponent, {\n      width: '250px',\n      data: { title, content, type, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport {ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa} from '../table-helisa/table-helisa.interface';\nimport { EventDependency} from './dependency-table-helisa.component';\n\nexport interface ConfigTable<T> {\n  columns: Array<ColumnConfig>;\n  isRemote: boolean;\n  dataSource?: Array<T>;\n  count?: number;\n  order?: number;\n  showTitle?: boolean;\n  indexRowSelect?: number;\n  isDragged?: boolean;\n  addRowButton?: AddRowButton;\n  configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\n  isCellSelection?: boolean;\n  addBookButton?: boolean;\n}\n\n@Injectable()\nexport class DependencyTableHelisaService<T> {\n\n\n  tables: Subject<ConfigTable<T>[]> = new Subject();\n  infoTables: Array<ConfigTable<T>> = new Array();\n\n  private emitVisibilityButton$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\n  emitVisibilityButton: Observable<EventDependency<boolean>> = this.emitVisibilityButton$.asObservable();\n\n  private emitVisibilityAllButtons$: Subject<boolean> = new Subject<boolean>();\n  emitVisibilityAllButtons: Observable<boolean> = this.emitVisibilityAllButtons$.asObservable();\n\n  private emitIsCellSelection$: Subject<EventDependency<boolean>> = new Subject<EventDependency<boolean>>();\n  emitIsCellSelection: Observable<EventDependency<boolean>> = this.emitIsCellSelection$.asObservable();\n\n  private emitChangeColumns$: Subject<EventDependency<ColumnConfig[]>> = new Subject<EventDependency<ColumnConfig[]>>();\n  emitChangeColumns: Observable<EventDependency<ColumnConfig[]>> = this.emitChangeColumns$.asObservable();\n\n  emitTotal: Subject<EventDependency<TotalTableHelisa>> = new Subject<EventDependency<TotalTableHelisa>>();\n  emitNextPage: Subject<EventDependency<T[]>> = new Subject<EventDependency<T[]>>();\n\n  constructor() { }\n\n  /**\n   * retorna un Observable<ConfigTable[]>\n   */\n  getTables(): Observable<ConfigTable<T>[]> {\n    return this.tables;\n  }\n\n  /**\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\n   */\n  updateDependency(configTable: ConfigTable<T>, withRemoveDependency: boolean = false): void {\n    if (withRemoveDependency) {\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\n    }\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\n      configTable.order = this.infoTables.length;\n    }\n    this.infoTables[configTable.order] = configTable;\n    if (configTable.isRemote) {\n      configTable.dataSource = null;\n      if (configTable.count === null) {\n        throw new Error('hace falta el count');\n      }\n    } else {\n      if (configTable.dataSource === null) {\n        throw new Error('hace falta el dataSource');\n      }\n      configTable.count = configTable.dataSource.length;\n    }\n    this.tables.next(this.infoTables);\n  }\n\n  /**\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\n   */\n  setTotal(event: EventDependency<TotalTableHelisa>): void {\n    this.emitTotal.next(event);\n  }\n\n  /**\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\n   */\n  addPage(event: EventDependency<T[]>): void {\n    this.emitNextPage.next(event);\n  }\n\n  selectIndexRow(config: ConfigTable<T>): void {\n    if (this.infoTables[config.order]) {\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\n      this.tables.next(this.infoTables);\n    }\n  }\n\n\n  /**\n   * Muestra o esconde el boton una tabla en especifico\n   * @param event para indicar el index de la tabla y en \"data\" true o false\n   */\n  changeVisibilityButton(event: EventDependency<boolean>): void {\n    this.emitVisibilityButton$.next(event);\n  }\n\n\n  /**\n   * Esconde los botones de todas las tablas\n   * @param show indicar si se muestran o no todos los botones de las tablas\n   */\n  changeVisibilityAllButtons(show: boolean): void {\n    this.emitVisibilityAllButtons$.next(show);\n  }\n\n  /**\n   * Para habilitar el manejo de selecciÃ³n de celda\n   * @param event para indicar el index de la tabla y en \"data\" true o false\n   */\n  changeisCellSelection(event: EventDependency<boolean>): void {\n    this.emitIsCellSelection$.next(event);\n  }\n\n   /**\n    * Para habilitar el cambio de columnas\n    * @param event para indicar el index de la tabla y en \"data\" columnas\n    */\n  changeColumnsByTable( event: EventDependency<ColumnConfig[]>): void {\n    this.emitChangeColumns$.next(event);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {TotalTableHelisa} from './table-helisa.interface';\nimport {TableHelisaComponent} from './table-helisa.component';\n\nexport interface TableHelisaServiceInfo<T> {\n  obj: T;\n  table?: {} | TableHelisaComponent<T>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableHelisaService<T> {\n\n  private emitChangeSource: Subject<TableHelisaServiceInfo<TotalTableHelisa>> = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\n  private emitNextPage: Subject<TableHelisaServiceInfo<T[]>> = new Subject<TableHelisaServiceInfo<T[]>>();\n\n  totalReturn: Observable<TableHelisaServiceInfo<TotalTableHelisa>> = this.emitChangeSource.asObservable();\n  nextPageReturn: Observable<TableHelisaServiceInfo<T[]>> = this.emitNextPage.asObservable();\n\n  private emitVisibleButton$: Subject<boolean> = new Subject<boolean>();\n  /**\n   * Observable para saber si se debe mostrar o esconder el boton de add row\n   */\n  emitVisibleButton: Observable<boolean> = this.emitVisibleButton$.asObservable();\n\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<TotalTableHelisa>): void {\n    this.emitChangeSource.next({obj: total, table});\n  }\n\n  addPage(page: T[], table?: TableHelisaComponent<T>): void {\n    this.emitNextPage.next({obj: page, table});\n  }\n\n  /**\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\n   * @param change indicar si se muestra o no el boton de add row de la tabla\n   */\n  changeVisibilityButton(change: boolean): void {\n    this.emitVisibleButton$.next(change);\n  }\n\n}\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input } from '@angular/core';\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\nimport { ColumnConfig, RequestTableHelisa, SelectObject, TotalTableHelisa } from '../table-helisa/table-helisa.interface';\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\n\nexport interface EventDependency<T> {\n  index: number;\n  data: T;\n}\n\n\n\n@Component({\n  selector: 'hel-dependency-table',\n  templateUrl: './dependency-table-helisa.component.html',\n  styleUrls: ['./dependency-table-helisa.component.sass'],\n  providers: [DependencyTableHelisaService]\n})\nexport class DependencyTableHelisaComponent<T> implements OnInit {\n\n  tables: Array<ConfigTable<T>> = [];\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<T>>;\n  @Input() showToolTip: boolean = true;\n\n  /**\n   * deprecated, use selectObject\n   */\n  @Output() selected: EventEmitter<EventDependency<T>> = new EventEmitter<EventDependency<T>>();\n  @Output() selectObject: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}  | T>>();\n  @Output() nextPage: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() total: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() sort: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() drop: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{}>>();\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\n  @Output() selectCell: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  @Output() bookClicked: EventEmitter<EventDependency<{} | T>> = new EventEmitter<EventDependency<{} | T>>();\n  selectedObject: EventDependency<{}> = null;\n\n\n  /**\n   * Tiempo antes de ocultarla el mensaje del tooltip\n   */\n  @Input() hideDelay: number = 600;\n\n  /**\n   * Tiempo antes de mostra el mensaje del tooltip\n   */\n  @Input() showDelay: number = 500;\n\n\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService<T>, private tableService: TableHelisaService<T>) { }\n\n  ngOnInit(): void {\n    this.getTables();\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\n      (event: EventDependency<T[]>) => {\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\n      }\n    );\n\n    this.dependencyTableHelisaService.emitTotal.subscribe(\n      (event: EventDependency<TotalTableHelisa>) => {\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\n      }\n    );\n\n    // Observable para mostrar o esconder el boton de una tabla\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\n      (data: EventDependency<boolean>) => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (!!table) {\n            table.addRowButton.showButton = data.data;\n          }\n        }\n      }\n    );\n\n    // Observable para mostrar o esconder los botones de todas las tablas\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\n      (data: boolean) => {\n        if (data !== undefined && data != null) {\n          this.tables.forEach((element: ConfigTable<T>) => {\n            if (!!element.addRowButton) {\n              element.addRowButton.showButton = data;\n            }\n          });\n        }\n      }\n    );\n\n    // Observable para manejo de selecciÃ³n de celdas\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\n      (data: EventDependency<boolean>) => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (table) {\n            table.isCellSelection = data.data;\n          }\n        }\n      });\n\n    // Observable para manejo de columnas\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\n      (data: EventDependency<ColumnConfig[]>) => {\n        if (!!data && data.index !== undefined) {\n          const table: ConfigTable<T> = this.tables[data.index];\n          if (table) {\n            table.columns = data.data;\n          }\n        }\n      });\n  }\n\n  /**\n   * retorna el servicio que gestiona el componente.\n   */\n  getService(): DependencyTableHelisaService<T> {\n    return this.dependencyTableHelisaService;\n  }\n\n  /**\n   * Obtiene un observable con las tablas dependientes desde el servicio.\n   */\n  getTables(): void {\n    this.dependencyTableHelisaService.getTables()\n      .subscribe((tables: ConfigTable<T>[]) => {\n        this.tables = tables;\n      }\n      );\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla seleccionada\n   * @param data retorna la fila que fue seleccionada\n   */\n  onSelectedDependency(index: number, event: SelectObject<T>): void {\n    this.selectedObject = { index, data: event };\n    this.selected.emit({ index, data: event.value });\n    this.selectObject.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onNextPage(index: number, event: RequestTableHelisa<T>): void {\n    this.nextPage.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onTotal(index: number, event: EventDependency<T>): void {\n    this.total.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onSort(index: number, event: EventDependency<T>): void {\n    this.sort.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n   * @param index indica el indice de la tabla que genera el evento\n   * @param event evento generado desde la tabla\n   */\n  onDrop(index: number, event: EventDependency<T>): void {\n    this.drop.emit({ index, data: event });\n  }\n\n  /**\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe aÃ±adir una nueva fila\n   * @param index indica el indice de la tabla de la cual se dispara el evento\n   */\n  onAddRow(index: number): void {\n    this.addRow.emit(index);\n  }\n\n  selectedCell(index: number, event: EventDependency<T>): void {\n    if (this.tables[index].isCellSelection) {\n      this.selectCell.emit({ index, data: event });\n    }\n  }\n\n  onBookClicked(index: number, event: EventDependency<T>): void {\n    this.bookClicked.emit({ index, data: event });\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nexport enum InputHelisaType {\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE\n}\n\n@Component({\n  selector: 'hel-input',\n  templateUrl: './input-helisa.component.html',\n  styleUrls: ['./input-helisa.component.sass']\n})\nexport class InputHelisaComponent implements OnInit, AfterViewInit {\n\n  private readonly DECIMAL_SEPARATOR: string = '.';\n  private readonly THOUSAND_SEPARATOR: string = ',';\n\n  @Input() placeholder: string = '';\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\n\n  /** Activar o desactivar el autocompletado\n   * (Caracteristica de los navegadores para campos comunes como\n   * Direccion , Usuario, Password ... etc)\n   */\n  @Input() autocompleteMode: boolean = false;\n\n  // Mostrar o no el icono de buscar\n  @Input() isSearch: boolean = false;\n  // @Input() inputFormControl: FormControl = new FormControl('');\n  @Input() isFocused: boolean = false;\n\n  /**\n   * Deprecated\n   */\n  @Input() disabled: boolean = false;\n  @Input() type: InputHelisaType = InputHelisaType.DEFAULT;\n\n  /**\n   * Deprecated\n   */\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\n\n  @Output() blur: EventEmitter<any> = new EventEmitter();\n\n  formControlMask: FormControl = new FormControl('');\n  private realValue: string = '';\n  private inputFormReal: FormControl = new FormControl('');\n\n  @ViewChild('inputText') nameInput: ElementRef;\n\n  constructor() {\n  }\n\n  @Input()\n  set inputFormControl(formControl: FormControl) {\n    this.inputFormReal = formControl;\n    this.inputFormReal.valueChanges.subscribe((data: string) => {\n      this.statusChange(this.inputFormReal.status);\n      if (this.getMaskedValue(data) !== this.formControlMask.value) {\n        this.change(data);\n        if (this.isFocused) {\n          this.onFocus(null);\n        }\n      }\n    });\n    this.formControlMask.setValidators(this.inputFormReal.validator);\n    this.change(this.inputFormReal.value);\n    // disable control\n    if (formControl.disabled) {\n      this.formControlMask.disable({ onlySelf: true });\n    }\n    this.inputFormReal.statusChanges.subscribe(\n      (data: string) => {\n        this.statusChange(data);\n        if (this.isFocused) {\n          this.onFocus(null);\n        }\n      }\n    );\n  }\n\n\n  private statusChange(data: string): void {\n    if (data === 'INVALID') {\n      this.formControlMask.setErrors({ key: 'Error de validaciÃ³n.' });\n    } else {\n      this.formControlMask.setErrors(null);\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.isFocused) {\n      this.nameInput.nativeElement.focus();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // this.isParentDisabled();\n  }\n\n  /*isParentDisabled(): void {\n    setTimeout(() => {\n      if (this.nameInput.nativeElement.closest('.hw-disabled-mode')) {\n        this.disabled = true;\n      } else {\n        this.disabled = false;\n      }\n    });\n  }*/\n\n  search(): void {\n    this.setValue.emit(this.realValue);\n  }\n\n  change(event: string): void {\n    if (event != null) {\n      event = event + '';\n    }\n    let position: number = this.nameInput.nativeElement.selectionStart;\n    const length: number = event ? event.length : 0;\n    this.realValue = this.getRealValue(event);\n    if (this.getMaskedValue(this.realValue) !== this.formControlMask.value) {\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue));\n      position += this.nameInput.nativeElement.value.length - length;\n      this.nameInput.nativeElement.selectionStart = position;\n      this.nameInput.nativeElement.selectionEnd = position;\n    }\n    this.inputFormReal.setValue(this.realValue);\n  }\n\n  private getMaskedValue(str: string): string {\n    if (str == null) {\n      return str;\n    }\n    str = str + '';\n    if (this.type === InputHelisaType.DEFAULT) {\n      return str;\n    }\n    let maskedStr: string = '';\n    if (this.type === InputHelisaType.IDENTITY) {\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n    }\n    if (this.type === InputHelisaType.NUMERIC) {\n      for (let i: number = str.length - 1, j: number = 0; i >= 0; i--, j++) {\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n    }\n    if (this.type === InputHelisaType.DOUBLE) {\n      if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {\n        for (let i: number = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {\n          maskedStr += str[i];\n        }\n      }\n      for (let i: number = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1,\n        j: number = 0; i >= 0; i--, j++) {\n\n        if (j > 0 && j % 3 === 0) {\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\n        }\n        maskedStr = str[i] + maskedStr;\n      }\n    }\n    return maskedStr;\n  }\n\n  private getRealValue(str: string): string {\n    if (str == null) {\n      return str;\n    }\n    str = str + '';\n    let realStr: string = '';\n    if (this.type === InputHelisaType.DEFAULT) {\n      return str;\n    }\n    if (this.type === InputHelisaType.IDENTITY) {\n      for (const strItem of str) {\n        if (strItem.match('[a-zA-Z0-9]')) {\n          realStr += strItem;\n        }\n      }\n    }\n    if (this.type === InputHelisaType.NUMERIC) {\n      for (const strItem of str) {\n        if (strItem.match('[0-9]')) {\n          realStr += strItem;\n        }\n      }\n    }\n    if (this.type === InputHelisaType.DOUBLE) {\n      let haveDot: boolean = false;\n\n      for (const strItem of str) {\n        if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {\n          realStr += strItem;\n        }\n        haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);\n      }\n    }\n    return realStr;\n  }\n\n  onFocus($event: FocusEvent): void {\n    if ((this.type === InputHelisaType.NUMERIC || this.type === InputHelisaType.DOUBLE) &&\n      Number(this.getRealValue(this.nameInput.nativeElement.value)) === 0) {\n      this.nameInput.nativeElement.select();\n    }\n  }\n}\n","import {SortDirection} from '@angular/material';\nimport { RowData } from './table-helisa.component';\n\nexport enum ColumnType {\n  NORMAL, URL\n}\n\nexport interface ColumnConfig {\n  name: string;\n  title?: string;\n  visible?: boolean;\n  sortable?: boolean;\n  groupable?: boolean;\n  totalType?: TotalType;\n  searchable?: boolean;\n  sortDirection?: SortDirection;\n  subtitle?: string;\n  colspanTitle?: number;\n  colspanSubtitle?: number;\n  columnStyle?: string;\n  columnType?: ColumnType;\n}\n\nexport interface AddRowButton {\n  text: string;\n  showButton: boolean;\n}\n\nexport enum EventScope {\n  USER, CODE_CALL\n}\n\nexport enum TotalType {\n  SUM, AVERAGE, COUNT\n}\n\nexport enum ChangeColumnConfigurationType {\n  SORT, UNKNOWN, TOTAL\n}\n\nexport interface EventColumn {\n  column: ColumnConfig;\n  columnConfigurations: Array<ColumnConfig>;\n  type: ChangeColumnConfigurationType;\n}\n\nexport interface TotalTableHelisa {\n  column: ColumnConfig;\n  value: number;\n}\n\nexport interface TotalGroup {\n  sum: number;\n  count: number;\n}\n\nexport interface EventSearch {\n  text: string;\n  columnConfigurations: Array<ColumnConfig>;\n}\n\nexport interface RequestTableHelisa<T> {\n  page: number;\n  body: {} | T;\n}\n\nexport interface DropElement<T> {\n value: T;\n order: number;\n}\n\nexport interface SelectObject<T> {\n  value: T;\n  scope: EventScope;\n}\n\nexport enum TableHelisaType {\n  REMOTE, LOCAL\n}\n\n\nexport interface Cell<T> {\n  column: ColumnConfig;\n  row: RowData<T> | T;\n }\n\nexport interface ConfigCellStyles<T> {\n   cellData: T;\n   classCell: string;\n }\n\nexport interface ConfigRowStyles<T> {\n  column: ColumnConfig;\n  data: {} | T;\n  classRow: string;\n}\n\n// @dynamic\nexport class ColumnConfigUtil<T> {\n\n  getValue(obj: T, column: ColumnConfig): T | number | string {\n    return column.name.split('.').reduce((o: T, field: string) => o && o[field], obj);\n  }\n}\n\n","import {ColumnConfig} from './table-helisa.interface';\nimport {Observable} from 'rxjs';\n\n\nexport class TableHelisaConnectComponent<T> {\n  page: number;\n  isLastPage: boolean;\n  isUsed: boolean;\n\n  constructor() {\n    this.page = 0;\n    this.isLastPage = false;\n    this.isUsed = false;\n  }\n\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): {} {\n    return {};\n  }\n\n  nextPage(): number {\n    return this.page++;\n  }\n}\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef } from '@angular/core';\nimport { MatSort, MatTable, MatTableDataSource } from '@angular/material';\nimport { Sort } from '@angular/material/typings/sort';\n\nimport {\n  AddRowButton,\n  Cell,\n  ChangeColumnConfigurationType,\n  ColumnConfig,\n  ColumnConfigUtil,\n  ConfigCellStyles,\n  ConfigRowStyles,\n  DropElement,\n  EventColumn,\n  EventScope,\n  EventSearch,\n  RequestTableHelisa,\n  SelectObject,\n  TableHelisaType,\n  TotalGroup,\n  TotalType,\n  ColumnType,\n  TotalTableHelisa\n} from './table-helisa.interface';\nimport { TableHelisaService, TableHelisaServiceInfo } from './table-helisa.service';\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { of } from 'rxjs';\n\nexport interface RowData<T> {\n  data: {} | T;\n  rowType: RowType;\n}\n\nenum RowType {\n  GROUP_TITLE, GROUP_FOOTER, ROW\n}\n\n\n\n@Component({\n  selector: 'hel-table',\n  templateUrl: './table-helisa.component.html',\n  styleUrls: ['./table-helisa.component.sass']\n})\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\n\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\n  totalData: Array<number>;\n  rawData: Array<T>;\n  data: MatTableDataSource<RowData<T>>;\n  displayedColumns: string[] = [];\n  displayedColumnsWithTitle: string[] = [];\n  displayedColumnsWithSubtitle: string[] = [];\n  displayedColumnsWithFooter: string[] = [];\n  columnConfig: Array<ColumnConfig>;\n  selectedObject: T;\n  lastSearch: string;\n  type: TableHelisaType = TableHelisaType.LOCAL;\n  indexRowSelect: number;\n  private scrollCount: number = 0;\n  hasSubtitle: boolean = false;\n  private indexRowStartDrag: number = -1;\n  private lastIndexRowDrag: number = -1;\n  private dataBeforeDrag: { data: RowData<T>[] } = null;\n  private dataSource$: Array<T> = [];\n  private scrollX: number = 0;\n  private scrollY: number = 0;\n\n  @ViewChild(MatSort) matSort: MatSort;\n  @ViewChild(MatTable) matTable: MatTable<T>;\n  @ViewChild(MatTable, { read: ElementRef }) matTableElement: ElementRef;\n  @ViewChild('containerTable') containerTable: ElementRef;\n\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\n\n  /**\n   * Deprecado, cambiar por electObject\n   */\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\n  @Output() selectCell: EventEmitter<Cell<T>> = new EventEmitter<Cell<T>>();\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\n  @Output() nextPage: EventEmitter<RequestTableHelisa<T>> = new EventEmitter<RequestTableHelisa<T>>();\n  @Input() showTitle: boolean = true;\n  @Input() isCellSelection: boolean = false;\n  @Input() count: number;\n  @Input() configCellStyles: Array<ConfigCellStyles<T>>;\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\n  @Input() selectedCells: Cell<T>;\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\n  @Input() isDragged: boolean = false;\n  @Input() addRowButton: AddRowButton = { showButton: false, text: '' };\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\n  @Input() addBookButton: boolean = false;\n  @Input() showToolTip: boolean = true;\n  showFooter: boolean = false;\n  showSearch: boolean = false;\n\n\n\n  /**\n   * Tiempo antes de ocultarla el mensaje del tooltip\n   */\n  @Input() hideDelay: number = 600;\n\n  /**\n   * Tiempo antes de mostra el mensaje del tooltip\n   */\n  @Input() showDelay: number = 500;\n\n\n  constructor(private tableService: TableHelisaService<T>) { }\n\n  ngOnInit(): void {\n    this.tableService.nextPageReturn.subscribe(\n      (data: TableHelisaServiceInfo<T[]>) => {\n        if (!data.table || data.table === this) {\n          this.receivePage(data.obj);\n        }\n      }\n    );\n    this.tableService.totalReturn.subscribe((info: TableHelisaServiceInfo<TotalTableHelisa>) => {\n      if (info) {\n        this.columnConfig.forEach((column: ColumnConfig, idx: number) => {\n          if (column === info.obj.column) {\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\n          }\n        });\n      }\n    });\n    this.matSort.sortChange.subscribe(\n      (event: Sort) => {\n        const column: ColumnConfig = this.columnConfig.find((c: ColumnConfig) => c.name === event.active);\n        column.sortDirection = event.direction;\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\n      }\n    );\n\n    this.tableService.emitVisibleButton.subscribe(\n      (data: boolean) => {\n        if (data !== undefined && data != null) {\n          this.addRowButton.showButton = data;\n        }\n\n      }\n    );\n  }\n\n  ngAfterViewInit(): void {\n    if (this.isCellSelection) {\n      this.matTable.renderRows();\n    }\n  }\n\n  @Input()\n  set isRemote(w: boolean) {\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\n    if (this.type === TableHelisaType.REMOTE) {\n      this.goNextPage();\n    } else {\n      this.tableHelisaConnectComponent.page++;\n    }\n  }\n\n  @Input()\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\n    this.hasSubtitle = false;\n    this.columnConfig = columnConfiguration;\n    this.displayedColumns.splice(0, this.displayedColumns.length);\n\n    if (columnConfiguration) {\n      if (this.addBookButton) {\n        const columnCount: number = columnConfiguration.length;\n        let countSubtitle: number = 0;\n        let showBookButton: boolean = false;\n        columnConfiguration.forEach((column: ColumnConfig) => {\n          if (!!column.subtitle) {\n            countSubtitle = countSubtitle + 1;\n          }\n          if ((!showBookButton) && (column.name === 'bookButton')) {\n            showBookButton = true;\n          }\n        });\n        const subtitleTemp: boolean = columnCount === countSubtitle;\n        if (!showBookButton) {\n          columnConfiguration.push({\n            name: 'bookButton',\n            title: '',\n            subtitle: subtitleTemp ? '' : undefined ,\n            visible: true\n          });\n        }\n      }\n\n      columnConfiguration.forEach((column: ColumnConfig) => {\n        if (column.visible) {\n          this.displayedColumns.push(column.name);\n        }\n        if (!this.hasSubtitle) {\n          this.hasSubtitle = column.subtitle !== undefined;\n        }\n      });\n      if (this.rawData) {\n        this.dataSource = this.rawData;\n      }\n    }\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\n    this.getColumnsWithTitle().forEach((col: string) => this.displayedColumnsWithTitle.push(col));\n    this.getHeaderSubtitle().forEach((col: string) => this.displayedColumnsWithSubtitle.push(col));\n    this.footerDisplayedColumns().forEach((col: string) => this.displayedColumnsWithFooter.push(col));\n  }\n\n\n\n  @Input()\n  set dataSource(dataSource: Array<T>) {\n    this.dataSource$ = dataSource;\n    this.rawData = dataSource;\n    if (this.rawData) { this.prepareDataSource(); }\n  }\n\n  get dataSource(): Array<T> {\n    return this.dataSource$;\n  }\n\n  @Input()\n  set selectedIndexRow(idRowSelected: number) {\n    this.indexRowSelect = idRowSelected;\n    if (this.rawData && this.rawData.length) {\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\n        this.indexRowSelect = 0;\n      }\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\n    }\n  }\n\n  private prepareDataSource(): void {\n    const changeData: Array<RowData<T>> = Array<RowData<T>>();\n    let haveGroup: boolean = false;\n    let groupFooter: Array<TotalGroup>;\n    this.columnConfig.forEach((column: ColumnConfig) => {\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\n        this.totalData = new Array<number>(this.columnConfig.length);\n        this.showFooter = true;\n        this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\n      }\n      this.showSearch = this.showSearch || column.searchable;\n      haveGroup = haveGroup || column.groupable;\n    });\n    if (haveGroup) {\n      this.rawData = this.rawData.sort((a: T, b: T) => {\n        let result: number = 0;\n        this.columnConfig.forEach((column: ColumnConfig) => {\n          if (result === 0) {\n            result = this.compare(a, b);\n          }\n        });\n        return result;\n      });\n    }\n    this.rawData.forEach((row: T) => {\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data as T, row) !== 0)) {\n        if (groupFooter) {\n          changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\n        }\n        changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\n      }\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\n      changeData.push({ data: row, rowType: RowType.ROW });\n    });\n    this.data = new MatTableDataSource<RowData<T>>(changeData);\n    if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\n      if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0) {\n        this.indexRowSelect = 0;\n      }\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\n    }\n  }\n\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: T): void {\n    this.columnConfig.forEach((column: ColumnConfig, index: number) => {\n      if (column.totalType !== undefined) {\n        if (rowTotal[index] === undefined) {\n          rowTotal[index] = { sum: (new ColumnConfigUtil().getValue(row, column) as number), count: 1 };\n        } else {\n          rowTotal[index].sum += (new ColumnConfigUtil().getValue(row, column) as number);\n          rowTotal[index].count++;\n        }\n      }\n    });\n  }\n\n  private compare(a: T, b: T): number {\n    let ws: number = 0;\n    this.columnConfig.forEach((column: ColumnConfig) => {\n      if (ws === 0 && column.groupable) {\n        if ((new ColumnConfigUtil().getValue(a, column) as number) < (new ColumnConfigUtil().getValue(b, column) as number)) {\n          ws = -1;\n        } else if ((new ColumnConfigUtil().getValue(a, column) as number) > (new ColumnConfigUtil().getValue(b, column) as number)) {\n          ws = 1;\n        }\n      }\n    });\n    return ws;\n  }\n\n  getGroupDescription(obj: T): string {\n    let result: string = '';\n    this.columnConfig.forEach((column: ColumnConfig) => {\n      if (column.groupable) {\n        result += (result.length ? ' - ' : '') + (new ColumnConfigUtil().getValue(obj, column));\n      }\n    });\n    return result;\n  }\n\n  isGroupTitle(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.GROUP_TITLE;\n  }\n\n  isRow(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.ROW;\n  }\n\n  isGroupFooter(index: number, item: RowData<T>): boolean {\n    return item.rowType === RowType.GROUP_FOOTER;\n  }\n\n  footerDisplayedColumns(): Array<string> {\n    return this.displayedColumns.map((name: string) => 'footer-' + name);\n  }\n\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\n    if (column.totalType === TotalType.SUM) { return data.sum; }\n    if (column.totalType === TotalType.COUNT) { return data.count; }\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\n    return undefined;\n  }\n\n  getValue(obj: T, column: ColumnConfig): T {\n    return new ColumnConfigUtil().getValue(obj, column) as T;\n  }\n\n  getValueTooltip(obj: T, column: ColumnConfig): string {\n    if (this.showToolTip) {\n      return new ColumnConfigUtil().getValue(obj, column) as string;\n    } else {\n      return null;\n    }\n  }\n\n  searchText(text: string): void {\n    this.lastSearch = text;\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\n  }\n\n  selectRow(row: RowData<T>, isUser: boolean, column?: ColumnConfig): void {\n    if (row === undefined || row === null) {\n      return;\n    }\n    if ((column === undefined || column === null) || (!!column && column.name !== 'bookButton')) {\n      this.selectedObject = row.data as T;\n      this.select.emit(this.selectedObject);\n      this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\n    } else if (!!column && column.name === 'bookButton') {\n      if (this.selectedObject !== row.data) {\n        this.selectedObject = row.data as T;\n        this.select.emit(this.selectedObject);\n        this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\n      }\n      this.bookClicked.emit(this.selectedObject);\n    }\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n    let isScrollY: boolean;\n\n    if (this.scrollY !== element.scrollTop) {\n      isScrollY = true;\n      this.scrollY = element.scrollTop;\n      this.scrollX = element.scrollLeft;\n    }\n\n    if (this.scrollX !== element.scrollLeft) {\n      isScrollY = false;\n      this.scrollY = element.scrollTop;\n      this.scrollX = element.scrollLeft;\n    }\n\n    if ((element.scrollHeight - element.scrollTop < 1000) && isScrollY) {\n      this.goNextPage();\n    }\n\n  }\n\n  private goNextPage(): void {\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\n      this.tableHelisaConnectComponent.isUsed = true;\n      this.nextPage.emit({\n        page: this.tableHelisaConnectComponent.nextPage(),\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\n      });\n    }\n  }\n\n  private receivePage(data: T[]): void {\n    if (!this.rawData) {\n      this.rawData = new Array<T>();\n    }\n    this.rawData = this.rawData.concat(data);\n    this.dataSource = this.rawData;\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\n    this.tableHelisaConnectComponent.isUsed = false;\n  }\n\n  dblClickCell(): void {\n    this.selectCell.emit(this.selectedCells as Cell<T>);\n  }\n\n  selectedCell(element: RowData<T>, column: ColumnConfig): void {\n    this.selectRow(element, true, column);\n\n    this.selectedCells = { column, row: element };\n    this.selectCell.emit(this.selectedCells);\n  }\n\n  isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean {\n    if (this.isCellSelection) {\n      if (this.selectedCells != null) {\n        if (this.selectedCells.column.name === column.name &&\n          (this.selectedCells.row as RowData<T>).data === row.data) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  getClassToCell(row: T, column: ColumnConfig): string[] {\n    const classToCell: Array<string> = new Array<string>();\n    if (this.configCellStyles) {\n      const found: ConfigCellStyles<T> = this.configCellStyles.find((c: ConfigCellStyles<T>) => {\n        return c.cellData === this.getValue(row, column);\n      });\n      if (found) {\n        classToCell.push(found.classCell);\n      }\n    }\n    if (column.columnStyle) {\n      classToCell.push(column.columnStyle);\n    }\n    return classToCell;\n  }\n\n  getClassToRow(row: T): string[] {\n    const classToRow: Array<string> = new Array<string>();\n    if (row === this.selectedObject && !this.isCellSelection) {\n      classToRow.push('');\n    }\n    if (this.configRowStylesFromColumn) {\n      const found: ConfigRowStyles<T> = this.configRowStylesFromColumn.find((c: ConfigRowStyles<T>) => {\n        return c.data === this.getValue(row, c.column);\n      });\n      if (found) {\n        classToRow.push(found.classRow);\n      }\n    }\n    return classToRow;\n  }\n\n  onDrop(event: MouseEvent): void {\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\n      const rowIndex: number = this.getRowIndex(event.pageY);\n      const array: RowData<T>[] = this.dataBeforeDrag.data;\n      const rawData: T[] = this.rawData;\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\n      this.drop.emit({ value: array[rowIndex].data as T, order: rowIndex });\n      this.rawData = rawData;\n      this.data = new MatTableDataSource(array);\n      event.stopPropagation();\n    }\n  }\n\n  tableKeydown(event: KeyboardEvent): void {\n    if (!this.isCellSelection) {\n      let currentIndex: number = this.data.data.findIndex((row: RowData<T>) => row.data === this.selectedObject);\n      let newSelection: number = -10;\n      if (event.key === 'ArrowDown') {\n        this.scrollCount++;\n        this.data.data.forEach((row: RowData<T>, index: number) => {\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\n            newSelection = index;\n          }\n        });\n      }\n      if (event.key === 'ArrowUp') {\n        this.scrollCount--;\n        currentIndex = this.data.data.length - currentIndex - 1;\n        this.data.data.reverse().forEach((row: RowData<T>, index: number) => {\n          if (newSelection === -10 && index > currentIndex && row.rowType === RowType.ROW) {\n            newSelection = index;\n          }\n        });\n        this.data.data.reverse();\n        if (newSelection !== -10) {\n          newSelection = this.data.data.length - newSelection - 1;\n        }\n      }\n      if (newSelection !== -10) {\n        this.selectRow(this.data.data[newSelection], true);\n      }\n      if (Math.abs(this.scrollCount) >= 2) {\n        this.scrollCount = 0;\n      } else {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Emite el evento cuando se da click al boton AddRow\n   */\n  onAddRow(): void {\n    this.addRow.emit();\n  }\n\n\n  getHeaderSubtitle(): string[] {\n    const x: string[] = this.columnConfig.map((column: ColumnConfig, index: number) => {\n      if (column.visible && column.subtitle !== undefined) {\n        return 'subtitle' + index;\n      } else {\n        return null;\n      }\n    }).filter((data: string) => data != null);\n    return x;\n  }\n\n  getColumnsWithTitle(): string[] {\n    return this.columnConfig.filter((column: ColumnConfig) =>\n      column.visible && column.title !== undefined\n    ).map((col: ColumnConfig) => col.name);\n  }\n\n  dragger(event: MouseEvent): boolean {\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\n      const rowIndex: number = this.getRowIndex(event.pageY);\n      if (rowIndex !== this.lastIndexRowDrag) {\n        this.lastIndexRowDrag = rowIndex;\n        // This can have a memory problem with big data\n        const array: RowData<T>[] = [...this.dataBeforeDrag.data];\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\n        this.data = new MatTableDataSource(array);\n      }\n      event.preventDefault();\n      return true;\n    }\n  }\n\n  startDrag(event: MouseEvent): void {\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\n    this.lastIndexRowDrag = this.indexRowStartDrag;\n    this.dataBeforeDrag = this.data;\n  }\n\n  private getRowIndex(pageY: number): number {\n    let offsetTop: number = 0;\n    let container: HTMLElement = this.containerTable.nativeElement;\n    while ((container !== null) && (offsetTop === 0)) {\n      offsetTop = container.offsetTop;\n      container = container.parentElement;\n    }\n    let rowIndex: number = -1;\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\n    for (let i: number = 0; i < rows.length; i++) {\n      const row: HTMLElement = (rows[i] as HTMLElement);\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop) {\n        rowIndex = i;\n      }\n    }\n    if (rowIndex < 0) { rowIndex = 0; }\n    return rowIndex;\n  }\n\n  get columnType(): typeof ColumnType {\n    return ColumnType;\n  }\n\n}\n","import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport * as moment_ from 'moment';\nconst moment: typeof moment_ = moment_;\n\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material';\nimport { filter, tap } from 'rxjs/operators';\n\n\nexport enum TypeCalendarEnum {\n  NORMAL = 'norma',\n  MONTH_YEAR = 'mounth-year',\n  STRICT = 'strict'\n}\n\n\n@Component({\n  selector: 'hel-date-helisa',\n  templateUrl: './date-helisa.component.html',\n  styleUrls: ['./date-helisa.component.css'],\n})\nexport class DateHelisaComponent implements OnInit {\n\n\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\n  @Input() dateFormControl: FormControl = new FormControl('');\n  private date: Date = new Date();\n\n  /**\n   * Formato de fecha.\n   * Los formatos validos son aquellos que maneja la libreria momentjs y este: 'DD [de] MMMM [de] YYYY'\n   * https://momentjs.com/docs/#/parsing/string-format/\n   */\n  @Input() dateFormat: string = 'DD/MM/YYYY';\n  @Input() locale: string = 'es';\n  @Input() errorMessage: string = 'La fecha no concuerda con el formato ';\n  @Input() placeholder: string = this.dateFormat;\n  @Output() change: EventEmitter<Date> = new EventEmitter<Date>();\n\n  /**\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\n   * serÃ¡ tomado en cuenta\n   */\n  @Input() typeCalendar: TypeCalendarEnum = TypeCalendarEnum.NORMAL;\n\n\n  dateToVisualize: FormControl;\n\n  /**\n   * Para evitar nuevos eventos miestras se realiza el parseo\n   */\n  private isFromInputEvent: boolean = false;\n\n  /**\n   * Verificar si el formato es valido\n   */\n  invalidFormat: boolean = false;\n\n  constructor() { }\n\n  /*\n  * TypeCalendarEnum.MONTH_YEAR = 'MM/YYYY'\n  * TypeCalendarEnum.STRICT = 'DD [de] MMMM [de] YYYY'\n  * */\n  ngOnInit(): void {\n    moment.locale(this.locale);\n    this.dateToVisualize = new FormControl('', this.dateFormControl.validator);\n    this.formHandler();\n\n    /**\n     * establecer valor por defecto de la fecha\n     */\n    if (this.dateFormControl.value !== '' && this.dateFormControl.value !== null) {\n      const incomingDate: string = moment(this.dateFormControl.value, this.dateFormat).format(this.dateFormat);\n      if (incomingDate !== 'Invalid date') {\n        this.dateToVisualize.setValue(incomingDate);\n        this.dateFormControl.setValue(this.dateFormControl.value);\n      }\n    }\n\n  }\n\n  get typeCalendarEnum(): typeof TypeCalendarEnum {\n    return TypeCalendarEnum;\n  }\n\n  /**\n   * Determina como se debe inicializar la visualizacion del calendar\n   */\n  getStartView(): string {\n    // multi-year\n    if (this.typeCalendar === this.typeCalendarEnum.MONTH_YEAR) {\n      return 'multi-year';\n    } else if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\n      return 'month';\n    } else {\n      return 'month';\n    }\n  }\n\n  private formHandler(): void {\n    if (this.typeCalendar === this.typeCalendarEnum.STRICT) {\n      this.dateToVisualize.valueChanges.subscribe((date: string) => {\n          this.invalidFormat = false;\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\n          const result: string = moment(date, this.dateFormat).format(this.dateFormat);\n          if (!!result && (result === 'Invalid date' || !isValid)) {\n            this.invalidFormat = true;\n            return;\n          }\n          if (!!result) {\n            if (!this.isFromInputEvent) {\n              this.isFromInputEvent = true;\n              this.dateToVisualize.setValue(moment(result, this.dateFormat).format(this.dateFormat));\n              this.dateFormControl.setValue(moment(result, this.dateFormat).toDate());\n              this.isFromInputEvent = false;\n            } else {\n              setTimeout(() => {\n                this.isFromInputEvent = false;\n              }, 1500);\n            }\n\n          }\n        });\n    } else {\n      this.dateToVisualize.valueChanges\n        .pipe(\n          tap((date: string) => {\n            if (date.length > this.dateFormat.length) {\n              this.invalidFormat = true;\n            } else {\n              this.invalidFormat = false;\n            }\n          }),\n          filter((date: string) => date.length === this.dateFormat.length)\n        )\n        .subscribe((date: string) => {\n          this.invalidFormat = false;\n          const isValid: boolean = moment(date, this.dateFormat, true).isValid();\n          const result: string = moment(date, this.dateFormat).format('YYYY-MM-DD');\n\n          if (!!result && (result === 'Invalid date' || !isValid)) {\n            this.invalidFormat = true;\n            return;\n          }\n\n          if (!!result) {\n            if (!this.isFromInputEvent) {\n              this.isFromInputEvent = true;\n              const subString: string[] = result.split('-');\n\n              const year: number = parseFloat(subString[0]);\n              const month: number = parseFloat(subString[1]);\n              const day: number = parseFloat(subString[2]);\n\n              this.date.setFullYear(year);\n              this.date.setDate(day);\n              this.date.setMonth(month - 1); // -1 por que los meses se toman como los indices en un array\n\n              /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\n              if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\n                this.date = moment(this.date).endOf('month').toDate();\n              }\n\n              this.dateToVisualize.setValue(moment(this.date, 'YYYY-MM-DD').format(this.dateFormat));\n              this.dateFormControl.setValue(this.date);\n              this.isFromInputEvent = false;\n            } else {\n              setTimeout(() => {\n                this.isFromInputEvent = false;\n              }, 1500);\n            }\n\n          }\n        });\n    }\n\n\n    this.dateFormControl.valueChanges\n      .subscribe((date: string) => {\n        const incommingDate: string = moment(date, this.dateFormat).format(this.dateFormat);\n        if (this.dateFormControl.value !== '' && incommingDate !== 'Invalid date') {\n          this.dateToVisualize.setValue(incommingDate);\n        }\n      });\n  }\n\n\n  /**\n   * Evento que se dispara luego seleccionar un mes\n   */\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void {\n\n    if (this.typeCalendar === TypeCalendarEnum.MONTH_YEAR) {\n      datepicker.close();\n      const date: Date = moment(chosenMonthDate).endOf('month').toDate();\n\n      this.dateToVisualize.setValue(moment(date, 'YYYY-MM-DD').format(this.dateFormat));\n      this.dateFormControl.setValue(date);\n    }\n  }\n\n  /**\n   * Evento desde el control touch del calendar\n   */\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>): void {\n    this.dateToVisualize.setValue(moment(event.value, 'YYYY-MM-DD').format(this.dateFormat));\n    this.dateFormControl.setValue(event.value);\n    this.change.emit(event.value);\n  }\n\n  getErrorMessage(): string {\n    return this.errorMessage + this.dateFormat;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, BehaviorSubject, Subscriber, Observable } from 'rxjs';\nimport { Node } from './node';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TreeHelisaService {\n\n    // Observable string sources\n    private emitNodeSelected: BehaviorSubject<number | string> = new BehaviorSubject<number | string>(1);\n    // Observable string streams\n    nodeSelected: Observable<string | number> = this.emitNodeSelected.asObservable();\n\n    // Observable string sources\n    private emitDataSource: BehaviorSubject<Node> = new BehaviorSubject<Node>(undefined);\n\n    // Observable string streams\n    dataSourceObservable: Observable<Node> = this.emitDataSource.asObservable();\n\n    // Expand node observable\n    private emitExpandAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n    nodeExpand: Observable<boolean> = this.emitExpandAllNodes.asObservable();\n\n     // Collapse node observable\n     private emitCollapseAllNodes: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(null);\n     nodeCollapse: Observable<boolean> = this.emitCollapseAllNodes.asObservable();\n\n    private emitRefreshTree: Subject<void> = new Subject<void>();\n    refreshTreeObservable: Observable<void> = this.emitRefreshTree.asObservable();\n\n    private emitRefreshTreeWithPagination: Subject<void> = new Subject<void>();\n    refreshTreeWithPaginationObservable: Observable<void> = this.emitRefreshTreeWithPagination.asObservable();\n\n    private emitExpandOneNode: Subject<Node> = new Subject<Node>();\n    expandOneNodeObservable: Observable<Node> = this.emitExpandOneNode.asObservable();\n\n    private emitCollapseOneNode: Subject<Node> = new Subject<Node>();\n    collapseOneNodeObservable: Observable<Node> = this.emitCollapseOneNode.asObservable();\n\n    // Service message commands\n    changeNodeSelected(idResidentialArea: number | string): void {\n        this.emitNodeSelected.next(idResidentialArea);\n    }\n\n    // Service message commands\n    changeDataSource(data: Node): void {\n        this.emitDataSource.next(data);\n    }\n\n    expandAllNodes(expand: boolean): void {\n        this.emitExpandAllNodes.next(expand);\n    }\n\n    collapseAllNodes(collapse: boolean): void {\n        this.emitCollapseAllNodes.next(collapse);\n    }\n\n    refreshTree(): void {\n        this.emitRefreshTree.next();\n    }\n\n\n    refreshTreeWithPagination(): void {\n        this.emitRefreshTreeWithPagination.next();\n    }\n\n\n    expandOneNode(node: Node): void {\n    this.emitExpandOneNode.next(node);\n    }\n\n\n    collapseOneNode(node: Node): void {\n        this.emitCollapseOneNode.next(node);\n    }\n\n    constructor() {\n\n    }\n\n}\n","export class TreeHelisaConnect<T> {\n    page: number;\n    isLastPage: boolean;\n    isUsed: boolean;\n\n    constructor() {\n      this.page = 0;\n      this.isLastPage = false;\n      this.isUsed = false;\n    }\n\n    nextPage(): number {\n      return this.page = this.page + 1;\n    }\n  }\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, HostListener } from '@angular/core';\nimport { NestedTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { MatTreeNestedDataSource, MatTree, MatOptionSelectionChange } from '@angular/material';\nimport { Node } from './node';\nimport { TreeHelisaService } from './tree-helisa.service';\nimport { Router } from '@angular/router';\nimport * as _ from 'lodash';\nimport { TreeHelisaConnect } from './tree-helisa-connect';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nexport interface RequestTreeHelisa {\n  page: number;\n}\n\n@Component({\n  selector: 'hel-tree',\n  templateUrl: './tree-helisa.component.html',\n  styleUrls: ['./tree-helisa.component.sass']\n  // host: { '(document:keyup)': 'onKeyDown($event)' }\n})\nexport class TreeHelisaComponent implements OnInit, AfterViewInit {\n  isDisabled: boolean;\n  selectedNode: number | string | null;\n  //#endregion ====== Variables ========\n\n  constructor(private treeHelisaService: TreeHelisaService, private router: Router, private elementRef: ElementRef) {\n    // cargar datos pasados por el @Input\n    if (!!this.data) {\n      const data: Node = this.data;\n      this.data = null;\n      this.receivePage(data.children);\n    } else {\n      this.dataSource.data = [];\n      this.treeControl.dataNodes = [];\n    }\n  }\n\n  //#region  ====== Variables =============\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\n  formEdit: FormControl;\n  @ViewChild('tree') tree: MatTree<{}>;\n  private selectedOptions: Map<\n    string | number,\n    {\n      formControl: FormControl;\n      editMode: boolean;\n    }\n  > = new Map<\n    string | number,\n    {\n      formControl: FormControl;\n      editMode: boolean;\n    }\n  >();\n  /**\n   * Datos del Arbol\n   */\n  @Input() data: Node;\n\n  /**\n   * Retorna el id del nodo removido\n   */\n  @Output() removed: EventEmitter<string | number> = new EventEmitter<number | string>();\n\n  /**\n   * Retorna un nodo editado\n   */\n  @Output() edited: EventEmitter<Node> = new EventEmitter<Node>();\n\n  /**\n   * Retorna un nodo sin id del nodo , pero si con el parent\n   * para conocer a cual fue aÃ±adido\n   */\n  @Output() added: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() collapseParent: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() rangeScrolled: EventEmitter<RequestTreeHelisa> = new EventEmitter<RequestTreeHelisa>();\n  @Output() nodeSelected: EventEmitter<number | string> = new EventEmitter<number | string>();\n  @Output() dobleClick: EventEmitter<number | string> = new EventEmitter<number | string>();\n  @Output() keypressDelete: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() keypressInsert: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() checkedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() uncheckedOptionNode: EventEmitter<number | string | null> = new EventEmitter<number | string | null>();\n  @Output() clickAddNode: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() clickEditNode: EventEmitter<Node> = new EventEmitter<Node>();\n  @Output() clickDeleteNode: EventEmitter<Node> = new EventEmitter<Node>();\n\n  treeControl: NestedTreeControl<Node> = new NestedTreeControl<Node>((node: Node): Node[] | Observable<Node[]> => node.children);\n  dataSource: MatTreeNestedDataSource<Node> = new MatTreeNestedDataSource<Node>();\n\n  isSingleClick: boolean = true;\n  currentNode: Node = null;\n\n  /**\n   * Obtiene la descripcion completa del nodo\n   * @example Nodo padre,nodo hijo,nodo nieto\n   * @param node Debe tener todos los parent llenos hacia arriba\n   */\n  public static getDescription(node: Node): string {\n    let result: string[] = [node.name];\n    let concat: string = '';\n\n    if (node.parent) {\n      result.push(this.getDescription(node.parent));\n    }\n\n    if (result.length === 1) {\n      return node.name;\n    }\n\n    result = result.reverse();\n\n    for (let i: number = 0; i < result.length; i++) {\n      const element: string = result[i];\n      concat = concat + element + (i === result.length - 1 ? '' : ',');\n    }\n\n    return concat;\n  }\n\n  ngOnInit(): void {\n    // si se cargan datos por medio del servicio\n    this.treeHelisaService.dataSourceObservable.subscribe((res: Node) => {\n      if (!!res && !!res.children) {\n        this.selectedNode = res.id;\n        this.receivePage(res.children);\n      } else {\n        this.dataSource.data = [];\n        this.treeControl.dataNodes = [];\n      }\n    });\n\n    // Observable, si cambia el nodo seleccionado por medio del servicio\n    this.treeHelisaService.nodeSelected.subscribe((res: string | number) => {\n      if (!!this.data && !!this.data.children) {\n        this.selectNode(this.data, res);\n      }\n    });\n\n    this.treeHelisaService.refreshTreeObservable.subscribe((res: void) => {\n      this.refreshTree();\n    });\n\n    this.treeHelisaService.refreshTreeWithPaginationObservable.subscribe((res: void) => {\n      this.refreshTreeWithPagination();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.treeHelisaService.nodeExpand.subscribe((res: boolean) => {\n      if (res != null) {\n        if (res) {\n          this.tree.treeControl.expandAll();\n        }\n      }\n    });\n\n    this.treeHelisaService.nodeCollapse.subscribe((res: boolean) => {\n      if (res !== null) {\n        if (res) {\n          this.tree.treeControl.collapseAll();\n        }\n      }\n    });\n\n    this.treeHelisaService.expandOneNodeObservable.subscribe((res: Node) => {\n      if (res !== undefined) {\n        this.treeControl.expand(res);\n      }\n    });\n\n    this.treeHelisaService.collapseOneNodeObservable.subscribe((res: Node) => {\n      if (res !== undefined) {\n        this.treeControl.collapse(res);\n      }\n    });\n  }\n\n  //#region  ====== Events ===========\n  onRedirect(node: Node): void {\n    this.isSingleClick = true;\n    setTimeout(() => {\n      if (this.isSingleClick) {\n        this.selectNode(node, node.id);\n\n        // if(!!node && !node.children){\n        if (!!node) {\n          this.nodeSelected.emit(node.id);\n          this.currentNode = node;\n        }\n      }\n    }, 350);\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n\n    if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\n      this.goNextPage();\n    }\n  }\n\n  onEdit(node: Node): void {\n    this.clickEditNode.emit(node);\n    /** @Deprecated\n     *  Ya no se edita el nodo ahora solo se emite el evento 'clickEditNode'\n     * retornando el nodo al cual le hicieron click en la opciÃ³n delete\n     */\n    // node.isEditable = true;\n    // this.isDisabled = true;\n  }\n\n  onAdd(node: Node): void {\n    this.clickAddNode.emit(node);\n    /** @Deprecated\n     *  Ya no se crea y se agrega el nodo ahora solo se emite el evento 'clickAddNode'\n     * retornando el nodo al cual le hicieron click en la opciÃ³n add\n     */\n    //   // si no tiene hijos instanciar el array\n    //   if (!node.children) {\n    //     node.children = [];\n    //   }\n    //   node.children.push({\n    //     id: Math.random(),\n    //     name: '',\n    //     isSelected: false,\n    //     parent: node,\n    //     isEditable: true\n    //   });\n    //   if (node.children) {\n    //     this.isDisabled = true;\n    //     this.treeHelisaService.expandOneNode(node);\n    //   }\n    //   this.refreshTree();\n  }\n\n  onDelete(node: Node): void {\n    this.clickDeleteNode.emit(node);\n    /** @Deprecated\n     *  Ya no se elimina el nodo ahora solo se emite el evento 'clickDeleteNode'\n     * retornando el nodo al cual le hicieron click en la opciÃ³n delete\n     */\n    // // Remueve el nodo utilizando la libreria de lodash\n    // _.remove(node.parent.children, node);\n\n    // this.refreshTree();\n    // this.removed.emit(node.id);\n  }\n\n  onEdited(node: Node, value: string): void {\n    node.name = value;\n    if (node.id == null && node.name === '') {\n      _.remove(node.parent.children, node);\n      this.refreshTree();\n    } else if (node.id && node.id != null && node.name.trim() !== '') {\n      this.edited.emit(node);\n      node.isEditable = false;\n      this.selectNode(node, node.id);\n    } else if (node.id == null && node.name.trim() !== '') {\n      this.added.emit(node);\n      node.isEditable = false;\n    }\n    this.isDisabled = false;\n    this.refreshTree();\n  }\n\n  onCancel(node: Node, value: string): void {\n    this.isDisabled = false;\n    // Si no tiene id por ser un nuevo item, lo elimina\n    if (node.id == null) {\n      _.remove(node.parent.children, node);\n      this.refreshTree();\n    }\n\n    node.isEditable = false;\n  }\n\n  onDblClick(node: Node): void {\n    this.isSingleClick = false;\n    this.dobleClick.emit(node.id);\n  }\n\n  @HostListener('document:keyup', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    switch (event.key) {\n      case 'Delete':\n        this.keypressDelete.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\n        break;\n      case 'Insert':\n        this.keypressInsert.emit(!!this.currentNode && this.currentNode.id ? this.currentNode.id : null);\n        break;\n      case 'ArrowDown':\n        this.moveDownIntoTree();\n        break;\n      case 'ArrowUp':\n        this.moveUpIntoTree();\n        break;\n    }\n  }\n\n  //#endregion ======= Events ========\n\n  //#region  ======== Metodos =============\n\n  private moveUpIntoTree(): number {\n    if (!!this.data) {\n      // si aun no hay ningun node seleccionado selecciona el primero\n      if (this.currentNode == null) {\n        this.selectNode(this.data, this.data.children[0].id);\n        this.currentNode = this.data.children[0];\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n          this.treeHelisaService.expandOneNode(this.currentNode);\n        }\n      } else {\n        if (!!this.currentNode.parent && this.currentNode.id != null) {\n          // obtiene el indice del nodo seleccionado actualmente\n          const index: number = this.currentNode.parent.children.indexOf(this.currentNode);\n\n          if (this.currentNode.parent.id == null && index === 0) {\n            return 0;\n          } else {\n            // si tiene nodos al mismo nivel salta al nodo anterior\n            if (index !== undefined && index === 0) {\n              this.currentNode = this.currentNode.parent;\n              this.selectNode(this.data, this.currentNode.id);\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n                this.treeHelisaService.expandOneNode(this.currentNode);\n              }\n            } else {\n              // si no tiene nodos al mismo nivel salta al nodo padre\n              this.currentNode = this.currentNode.parent.children[index - 1];\n              this.selectNode(this.data, this.currentNode.id);\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n                this.treeHelisaService.expandOneNode(this.currentNode);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private moveDownIntoTree(): void {\n    if (!!this.data) {\n      if (this.currentNode == null) {\n        this.selectNode(this.data, this.data.children[0].id);\n        this.currentNode = this.data.children[0];\n        if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n          this.treeHelisaService.expandOneNode(this.currentNode);\n        }\n      } else {\n        if (!!this.currentNode) {\n          // obtiene el indice del nodo seleccionado actualmente\n          const index: number =\n            !!this.currentNode && !!this.currentNode.parent ? this.currentNode.parent.children.indexOf(this.currentNode) : null;\n\n          // si tiene childrens pasa al primer children\n          if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n            this.currentNode = this.currentNode.children[0];\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          } else if (\n            index !== undefined &&\n            index === this.currentNode.parent.children.length - 1 &&\n            this.currentNode.parent.parent != null &&\n            this.currentNode.parent.parent.children != null &&\n            this.currentNode.parent.parent.children.length > 0\n          ) {\n            const indexOfParent: number = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent);\n            this.currentNode =\n              this.currentNode.parent.parent.children[indexOfParent + 1] === undefined\n                ? this.currentNode\n                : this.currentNode.parent.parent.children[indexOfParent + 1];\n\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          } else {\n            // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\n            this.currentNode = this.currentNode.parent.children[index + 1];\n            this.selectNode(this.data, this.currentNode.id);\n            if (!!this.currentNode.children && this.currentNode.children.length > 0) {\n              this.treeHelisaService.expandOneNode(this.currentNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Verifica si el nodo tiene hijos\n   */\n  hasChild(t: number, node: Node): boolean {\n    return !!node.children && node.children.length > 0;\n  }\n\n  /**\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\n   */\n  private refreshTree(): void {\n    this.data = null;\n    const datasourceData: Node[] = this.dataSource.data;\n    this.dataSource.data = null;\n    this.dataSource.data = datasourceData;\n    this.treeControl.dataNodes = datasourceData;\n  }\n\n  /**\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())\n   */\n  private refreshTreeWithPagination(): void {\n    const datasourceData: Node[] = this.dataSource.data;\n    this.dataSource.data = null;\n    this.dataSource.data = datasourceData;\n    this.treeControl.dataNodes = datasourceData;\n  }\n\n  private goNextPage(): void {\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\n      this.treeHelisaConnect.isUsed = true;\n      this.rangeScrolled.emit({\n        page: this.treeHelisaConnect.nextPage()\n      });\n    }\n  }\n\n  private receivePage(data: Node[]): void {\n    if (!this.data) {\n      this.data = { id: null, name: 'root', isSelected: false };\n    }\n    if (!this.data.children) {\n      this.data.children = new Array<Node>();\n      this.treeHelisaConnect = new TreeHelisaConnect<Node>();\n    }\n    this.data.children = this.data.children.concat(data);\n    this.data.children.forEach((node: Node) => {\n      this.fillParent(node, this.data);\n    });\n\n    this.data.children = this.reorderByOrderIndex(this.data.children);\n\n    this.dataSource.data = this.data.children;\n    this.treeControl.dataNodes = this.data.children;\n    this.treeHelisaConnect.isLastPage = data.length === 0;\n    this.treeHelisaConnect.isUsed = false;\n  }\n\n  /**\n   * Llenan el campo parent de todos los nodos hijos\n   */\n  private fillParent(node: Node, parent: Node): void {\n    node.parent = parent;\n    if (node.children && node.children.length > 0) {\n      node.children.forEach((item: Node) => {\n        this.fillParent(item, node);\n      });\n    }\n  }\n\n  /**\n   * coloca como true del isSelected del nodo que concuerde con el id\n   */\n  private selectNode(node: Node, id: number | string): Node {\n    if (node == null) {\n      return null;\n    }\n    this.upSelectNode(node);\n    if (!!this.selectedNode) {\n      const nodeSelected: Node = this.getNodeById(this.selectedNode);\n      if (nodeSelected != null) {\n        nodeSelected.isSelected = false;\n        this.selectedNode = null;\n      }\n    }\n    if (node.id !== undefined && node.id === id) {\n      node.isSelected = true;\n      this.expandAllParents(node);\n      this.selectedNode = node.id;\n      return node;\n    } else if (node.children != null) {\n      let i: number;\n      let result: Node = null;\n      for (i = 0; result == null && i < node.children.length; i++) {\n        result = this.selectNode(node.children[i], id);\n      }\n      return result;\n    }\n    return null;\n  }\n\n  private expandAllParents(node: Node): void {\n    if (!!node && !!node.parent) {\n      this.treeHelisaService.expandOneNode(node.parent);\n      this.expandAllParents(node.parent);\n    }\n  }\n\n  /**\n   * Elimina el isSelected de todos los nodos\n   */\n  private upSelectNode(node: Node): void {\n    if (!!node && node.isSelected !== undefined) {\n      node.isSelected = false;\n      if (!!node.children) {\n        for (const childrenNode of node.children) {\n          this.upSelectNode(childrenNode);\n        }\n      }\n    }\n  }\n\n  getClassNode(node: Node): string[] {\n    const classNode: string[] = [];\n    if (node.isSelected) {\n      classNode.push('isSelected');\n    }\n    if (node.classNode) {\n      classNode.push(node.classNode);\n    }\n    return classNode;\n  }\n\n  onEditMode(node: Node, editMode: boolean): void {\n    this.getSelectedOptions(node).editMode = editMode;\n  }\n\n  onSelectOption(event: MatOptionSelectionChange, node: Node): void {\n    node.isCheckedOption = event.source.selected;\n    if (node.isCheckedOption) {\n      this.checkedOptionNode.emit(node.id);\n    } else {\n      this.uncheckedOptionNode.emit(node.id);\n    }\n  }\n\n  getSelectedOptions(\n    node: Node\n  ): {\n    formControl: FormControl;\n    editMode: boolean;\n  } {\n    if (this.selectedOptions.has(node.id)) {\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\n    } else {\n      this.reloadSelectedOptions(node, false);\n    }\n    return this.selectedOptions.get(node.id);\n  }\n\n  private reloadSelectedOptions(node: Node, editMode: boolean): void {\n    const array: Array<string | number | null> = new Array<string | number | null>();\n    node.options.forEach((option: Node) => {\n      if (option.isCheckedOption) {\n        array.push(option.id);\n      }\n    });\n    const obj: {\n      formControl: FormControl;\n      editMode: boolean;\n    } = { formControl: new FormControl(array), editMode };\n    this.selectedOptions.set(node.id, obj);\n  }\n\n  /**\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\n   * @param id  number | string\n   * @returns Node o null si no hay un nodo con ese id\n   */\n  getNodeById(id: number | string): Node {\n    const queue: Node[] = [...this.dataSource.data];\n    while (queue.length > 0) {\n      const curr: Node = queue.shift();\n      if (curr.id === id) {\n        return curr;\n      } else {\n        if (!!curr.children) {\n          queue.push(...curr.children);\n        }\n      }\n    }\n    return null;\n  }\n\n  reorderByOrderIndex(node: Node[]): Node[] {\n    if (!!node && node.length > 0) {\n      try {\n        node = _.orderBy(node, (x: Node) => x.orderIndex, ['asc']);\n        node.forEach((element: Node) => {\n          if (!!element.children && element != null) {\n            element.children = this.reorderByOrderIndex(element.children);\n          }\n        });\n        return node;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  //#endregion ====== Metodos ============\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\n\n@Injectable()\nexport class AutocompleteHelisaService<T> {\n\n  private emitChangeSource: BehaviorSubject<Array<OptionAutocompleteHelisa<T>>> =\n  new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\n\n  public dataSource$: Observable<Array<OptionAutocompleteHelisa<T>>> = this.emitChangeSource.asObservable();\n\n  constructor() { }\n\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>): void {\n    this.emitChangeSource.next(options);\n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable, of, Subject } from 'rxjs';\nimport { map, startWith, throttleTime, debounceTime } from 'rxjs/operators';\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\n\nexport interface OptionAutocompleteHelisa<T> {\n  value: T;\n  displayText: string;\n}\n\n@Component({\n  selector: 'hel-autocomplete',\n  templateUrl: './autocomplete-helisa.component.html',\n  styleUrls: ['./autocomplete-helisa.component.css'],\n  providers: [AutocompleteHelisaService]\n})\nexport class AutocompleteHelisaComponent<T> implements OnInit {\n\n  @Input() myControl: FormControl = new FormControl();\n  @Input() options: Array<OptionAutocompleteHelisa<T>> = new Array<OptionAutocompleteHelisa<T>>();\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\n  selectedValue: OptionAutocompleteHelisa<T>;\n  @Output() selectedValueEmmiter: EventEmitter<T> = new EventEmitter<T>();\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\n  @Input() isRemote: boolean = false;\n  isLoading: boolean = false;\n\n\n  onScrollObservable: Subject<void> = new Subject<void>();\n\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\n  }\n\n  ngOnInit(): void {\n\n    this.onScrollObservable.asObservable()\n    .pipe(\n      debounceTime(500),\n      throttleTime(500)\n    )\n    .subscribe(() => {\n      this.nextPage.emit();\n    });\n\n    if (this.isRemote) {\n      this.autocompleteHelisaService.dataSource$.subscribe((data: OptionAutocompleteHelisa<T>[]) => {\n        setTimeout(() => {\n          this.options = data;\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);\n        });\n      });\n    }\n\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map((x: string) => this._checkRegex(x)),\n      map((value: string) => this._filter(value))\n    );\n\n  }\n\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {\n    return option ? option.displayText : undefined;\n  }\n\n  getService(): AutocompleteHelisaService<T> {\n    return this.autocompleteHelisaService;\n  }\n\n\n  /** Elimina caracteres extraÃ±os */\n  private _checkRegex(value: string): string {\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '');\n    return value;\n  }\n\n  private _filter(value: string): OptionAutocompleteHelisa<T>[] {\n    if (!(value)) {\n      if (!this.isRemote) {\n        const filterValue: string[] = value.toLowerCase().split(' ');\n        return this.options.filter((option: OptionAutocompleteHelisa<T>) => {\n          let ws: boolean = true;\n          filterValue.forEach((text: string) => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\n          return ws;\n        }).splice(0, 5);\n      } else {\n        return this.options;\n      }\n    }\n  }\n\n  public onSelected(event: {option: {value: OptionAutocompleteHelisa<T>}}): void {\n    this.selectedValue = event.option.value;\n    this.selectedValueEmmiter.emit(this.selectedValue.value);\n  }\n\n  getNextPage(): void {\n    this.onScrollObservable.next();\n  }\n}\n","import { Directive, EventEmitter, Input, Output, OnDestroy} from '@angular/core';\nimport { MatAutocomplete} from '@angular/material';\nimport { takeUntil, tap} from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n\nexport interface IAutoCompleteScrollEvent {\n  autoComplete: MatAutocomplete;\n  scrollEvent: Event;\n}\n\n\n@Directive({\n  selector: 'mat-autocomplete[optionsScroll]'\n})\nexport class OptionsScrollDirective implements OnDestroy  {\n\n  /**\n   * This value would different depends of styles\n   */\n  @Input() thresholdPercent: number = .9;\n  @Output() optionsScroll: EventEmitter<IAutoCompleteScrollEvent> = new EventEmitter<IAutoCompleteScrollEvent>();\n  destroy: Subject<void> = new Subject<void>();\n  lastScrollTop: number  = 0;\n\n  constructor(public autoComplete: MatAutocomplete) {\n    this.autoComplete.opened.pipe(\n      tap(() => {\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\n        // Note: The panel will be available on next tick\n        // Note: The panel wil NOT open if there are no options to display\n        setTimeout(() => {\n          // Note: remove listner just for safety, in case the close event is skipped.\n          this.removeScrollEventListener();\n          if (!!this.autoComplete &&\n            !!this.autoComplete.panel &&\n            !!this.autoComplete.panel.nativeElement) {\n              this.autoComplete.panel.nativeElement\n                .addEventListener('scroll', this.onScroll.bind(this), false);\n            }\n        });\n      }),\n      takeUntil(this.destroy)).subscribe();\n\n    this.autoComplete.closed.pipe(\n      tap(() => this.removeScrollEventListener()),\n      takeUntil(this.destroy)).subscribe();\n  }\n\n  private removeScrollEventListener(): void {\n    if (!!this.autoComplete &&\n      !!this.autoComplete.panel &&\n      !!this.autoComplete.panel.nativeElement) {\n    this.autoComplete.panel.nativeElement\n      .removeEventListener('scroll', this.onScroll);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.next();\n    this.destroy.complete();\n\n    this.removeScrollEventListener();\n  }\n\n\n  onScroll(event: Event): void {\n    // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\n    const st: number = (event.target as Window).pageYOffset || (event.target as Element).scrollTop;\n    if (st > this.lastScrollTop) {\n       // downscroll code\n       if (this.thresholdPercent === undefined) {\n        this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\n      } else {\n        const threshold: number = this.thresholdPercent * 100 * (event.target as Element).scrollHeight / 100;\n        const current: number = (event.target as Element).scrollTop + (event.target as Element).clientHeight;\n        // console.log(`scroll ${current}, threshold: ${threshold}`)\n        if (current > threshold) {\n          // console.log('load next page');\n          this.optionsScroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\n        }\n      }\n    } else {\n       // upscroll code\n    }\n    this.lastScrollTop = st <= 0 ? 0 : st;\n  }\n\n}\n","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\nimport { MatTooltip } from '@angular/material';\n\n@Directive({\n    selector: '[helTooltip]',\n    providers: [MatTooltip]\n})\nexport class HelTooltipDirective {\n\n    tooltip: MatTooltip;\n\n    /**\n     * Mensaje a mostrar\n     */\n    @Input('helTooltip') message: string;\n\n    /**\n     * Tiempo antes de ocultarla el mensaje\n     */\n    @Input() hideDelay: number = 600;\n\n    /**\n     * Tiempo antes de mostra el mensaje\n     */\n    @Input() showDelay: number = 500;\n\n\n    constructor(tooltip: MatTooltip, private elemRef: ElementRef) {\n      this.tooltip = tooltip;\n    }\n\n    @HostListener('mouseover') mouseover(): void {\n      const currentContent: string = this.elemRef.nativeElement.innerText;\n\n      if (!!currentContent && !!this.message) {\n        if ((currentContent.toUpperCase() !== this.message.toString().toUpperCase()) || this.isEllipsisActive(this.elemRef.nativeElement)) {\n          this.tooltip.message = this.message;\n        }\n      }\n\n      this.tooltip.showDelay =  this.showDelay;\n      this.tooltip.hideDelay = this.hideDelay;\n    }\n\n\n    private isEllipsisActive(e: {offsetWidth: number , scrollWidth: number}): boolean {\n      return (e.offsetWidth < e.scrollWidth);\n    }\n}\n","import { Directive, HostBinding, PLATFORM_ID, Inject, Input, OnChanges } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Directive({\n  selector: 'a[href]',\n})\nexport class ExternalLinkDirective implements OnChanges {\n  @HostBinding('attr.rel') relAttr: string = '';\n  @HostBinding('attr.target') targetAttr: string = '';\n  @HostBinding('attr.href') hrefAttr: string = '';\n  @Input() href: string;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n\n  ngOnChanges(): void {\n\n    this.hrefAttr = this.href;\n\n    if (this.isLinkExternal()) {\n      this.relAttr = 'noopener';\n      this.targetAttr = '_blank';\n    }\n  }\n\n  private isLinkExternal(): boolean {\n    return isPlatformBrowser(this.platformId) && !this.href.includes(location.hostname);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'externalLink'\n})\nexport class ExternalLinkPipe implements PipeTransform {\n    transform(value: string, ...args: string[]): string {\n        return '//' + value;\n    }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\ninterface AlertUncompletedDataHelisaProperties {\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\n}\n\nconst DEFAULT_TITLE: string = 'No ha suministrado la informaciÃ³n necesaria.';\nconst DEFAULT_CONTENT: string = 'Si insite en grabar asÃ­, este concepto no serÃ¡ utilizable hasta su conclusiÃ³n satisfactoria, que deberÃ¡ completar posteriormente modificando en concepto.';\n\n@Component({\n  selector: 'hel-alert-uncompleted-data-helisa',\n  templateUrl: './alert-uncompleted-data-helisa.component.html',\n  styleUrls: ['./alert-uncompleted-data-helisa.component.sass']\n})\nexport class AlertUncompletedDataHelisaComponent implements OnInit {\n\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\n\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertUncompletedDataHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertUncompletedDataHelisaProperties\n  ) { \n    this.title = data.title;\n    if (this.title === undefined) {\n      this.title = DEFAULT_TITLE;\n    }\n    this.content = data.content;\n    if (this.content === undefined) {\n      this.content = DEFAULT_CONTENT;\n    }\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = 'Lo asumo';\n    }\n    this.cancelLabel = data.cancelLabel;\n    if (this.cancelLabel === undefined) {\n      this.cancelLabel = 'Me retracto';\n    }\n    dialogRef.disableClose = true;\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      if (event.code === 'Escape') {\n        this.dialogRef.close(this.onCancel());\n      }\n    });    \n  }\n\n  ngOnInit() {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\ninterface AlertLostDataHelisaProperties {\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\n}\n\nconst DEFAULT_TITLE: string = 'Â¿EstÃ¡ seguro de querer perder lo ya hecho?';\nconst DEFAULT_CONTENT: string = 'Si no estÃ¡ seguro, puede continuar o \"aplicar\" y posteriormente cuando tenga clara las respuestas, usando la opciÃ³n de modificar podrÃ¡ completar el concepto.';\n\n@Component({\n  selector: 'hel-alert-lost-data-helisa',\n  templateUrl: './alert-lost-data-helisa.component.html',\n  styleUrls: ['./alert-lost-data-helisa.component.sass']\n})\nexport class AlertLostDataHelisaComponent implements OnInit {\n\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertLostDataHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertLostDataHelisaProperties\n  ) { \n    this.title = data.title;\n    if (this.title === undefined) {\n      this.title = DEFAULT_TITLE;\n    }\n    this.content = data.content;\n    if (this.content === undefined) {\n      this.content = DEFAULT_CONTENT;\n    }\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = 'Lo asumo';\n    }\n    this.cancelLabel = data.cancelLabel;\n    if (this.cancelLabel === undefined) {\n      this.cancelLabel = 'Me retracto';\n    }\n    dialogRef.disableClose = true;\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      if (event.code === 'Escape') {\n        this.dialogRef.close(this.onCancel());\n      }\n    });    \n  }\n\n  ngOnInit() {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\nconst DEFAULT_TITLE: string = 'Â¿EstÃ¡ seguro que debe anular esta informaciÃ³n?';\nconst DEFAULT_CONTENT: string = 'Al anular este concepto, quedarÃ¡ la huella de todo lo que se hizo apoyados en su informaciÃ³n. No es una eliminaciÃ³n tÃ¡cita, es suprimir su uso en adelante.';\n\n@Component({\n  selector: 'hel-alert-delete-data-helisa',\n  templateUrl: './alert-delete-data-helisa.component.html',\n  styleUrls: ['./alert-delete-data-helisa.component.sass']\n})\nexport class AlertDeleteDataHelisaComponent implements OnInit {\n\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\nz\n  constructor(\n    public dialogRef: MatDialogRef<AlertDeleteDataHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertDeleteDataHelisaComponent\n  ) { \n    this.title = data.title;\n    if (this.title === undefined) {\n      this.title = DEFAULT_TITLE;\n    }\n    this.content = data.content;\n    if (this.content === undefined) {\n      this.content = DEFAULT_CONTENT;\n    }\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = 'Lo asumo';\n    }\n    this.cancelLabel = data.cancelLabel;\n    if (this.cancelLabel === undefined) {\n      this.cancelLabel = 'Me retracto';\n    }\n    dialogRef.disableClose = true;\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      if (event.code === 'Escape') {\n        this.dialogRef.close(this.onCancel());\n      }\n    });    \n  }\n\n  ngOnInit() {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","import {Component, OnInit, Inject, Input} from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\ninterface AlertUncompletedSelectedDataHelisaProperties {\n  title: string;\n  content: string;\n  okLabel: string;\n  cancelLabel: string;\n}\n\nconst DEFAULT_CONTENT: string = 'Elemento sin informaciÃ³n requerida. ModifÃ­quelo para completarlo.';\n\n@Component({\n  selector: 'hel-alert-uncompleted-selected-data-helisa',\n  templateUrl: './alert-uncompleted-selected-data-helisa.component.html',\n  styleUrls: ['./alert-uncompleted-selected-data-helisa.component.sass']\n})\nexport class AlertUncompletedSelectedDataHelisaComponent implements OnInit {\n\n  content: string;\n  okLabel: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertUncompletedSelectedDataHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertUncompletedSelectedDataHelisaProperties\n  ) {\n    this.content = data.content;\n    if (this.content === undefined) {\n      this.content = DEFAULT_CONTENT;\n    }\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = 'Aceptar';\n    }\n    dialogRef.disableClose = true;\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      if (event.code === 'Escape') {\n        this.dialogRef.close(this.onCancel());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\n\ninterface AlertInformationNotValidProperties {\n    title: string;\n    content: string;\n}\n\nconst DEFAULT_CONTENT: string = 'Rectifique. Hay informaciÃ³n no vÃ¡lida';\n\n@Component({\n    selector: 'hel-alert-information-not-valid-helisa',\n    templateUrl: './alert-information-not-valid-helisa.component.html',\n    styleUrls: ['./alert-information-not-valid-helisa.component.sass']\n})\nexport class AlertInformationNotValidHelisaComponent implements OnInit {\n\n    content: string;\n\n    constructor(\n        public dialogRef: MatDialogRef<AlertInformationNotValidHelisaComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: AlertInformationNotValidProperties\n    ) {\n        this.content = data.content;\n        if (this.content === undefined) {\n            this.content = DEFAULT_CONTENT;\n        }\n        dialogRef.disableClose = true;\n        dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n            if (event.code === 'Escape') {\n                this.dialogRef.close(this.onCancel());\n            }\n        });\n    }\n\n    ngOnInit(): void {\n        setTimeout(() => {\n            this.dialogRef.close();\n        }, 3000);\n    }\n\n    onCancel(): void {\n        this.dialogRef.close();\n    }\n}\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {ComboBoxListable} from './interface/combo-box-listable';\nimport {ComboBoxEditable} from './interface/combo-box-editable';\n\nexport enum ComboBoxHelisaState {\n  CLOSED,\n  SELECT,\n  INSERT\n}\n\n@Component({\n  selector: 'lib-combo-box-helisa',\n  templateUrl: './combo-box-helisa.component.html',\n  styleUrls: ['./combo-box-helisa.component.css']\n})\nexport class ComboBoxHelisaComponent<TYPE> implements OnInit, AfterViewInit {\n\n  @Input() editable: ComboBoxEditable<TYPE>;\n  @Input() listable: ComboBoxListable<TYPE>;\n  @Input() placeholder: string = 'Sin seleccionar';\n  @Input() selectedItem: TYPE;\n  @Output() selectEmitter: EventEmitter<TYPE> = new EventEmitter<TYPE>();\n  @Input() enabled: boolean = true;\n\n  private page: number = 0;\n  private pageSize: number = 50;\n  private haveNextPage: boolean = true;\n  state: ComboBoxHelisaState = ComboBoxHelisaState.CLOSED;\n\n  rows: TYPE[] = [];\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    this.getNextPage();\n  }\n\n  private getNextPage(): void {\n    if (this.haveNextPage) {\n      this.listable.getData(this.page++, this.pageSize).subscribe((rows: TYPE[]) => {\n        rows.forEach((item: TYPE) => this.rows.push(item));\n        this.haveNextPage = rows.length > 0;\n      });\n    }\n  }\n\n  get comboBoxHelisaState(): typeof ComboBoxHelisaState {\n    return ComboBoxHelisaState;\n  }\n\n  onFocus(): void {\n    if (this.enabled) {\n      this.state = ComboBoxHelisaState.SELECT;\n    }\n  }\n\n  selectItem(row: TYPE): void {\n    this.selectedItem = row;\n    this.selectEmitter.emit(row);\n    this.state = ComboBoxHelisaState.CLOSED;\n  }\n\n  changeToInsert(): void {\n    this.state = ComboBoxHelisaState.INSERT;\n  }\n\n  insert(event: string): void {\n    if (event.trim().length > 0) {\n      this.editable.insert(event).subscribe(\n        (data: TYPE) => {\n          this.rows.push(data);\n          this.state = ComboBoxHelisaState.SELECT;\n        }\n      );\n    } else {\n      this.state = ComboBoxHelisaState.SELECT;\n    }\n  }\n\n  onScroll(event: Event): void {\n    const element: HTMLDivElement = event.target as HTMLDivElement;\n    if (element.scrollHeight - element.scrollTop < 1000) {\n      this.getNextPage();\n    }\n  }\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\n\ninterface AlertAuthorizationTransactionHelisaProperties {\n  title: string;\n  okLabel: string;\n  cancelLabel: string;\n}\n\nconst DEFAULT_TITLE: string = '!Esta transacciÃ³n requiere autorizaciÃ³n!';\n\n@Component({\n  selector: 'hel-alert-authorization-transaction-helisa',\n  templateUrl: './alert-authorization-transaction-helisa.component.html',\n  styleUrls: ['./alert-authorization-transaction-helisa.component.sass']\n})\nexport class AlertAuthorizationTransactionHelisaComponent implements OnInit {\n\n  title: string;\n  okLabel: string;\n  cancelLabel: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<AlertAuthorizationTransactionHelisaComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: AlertAuthorizationTransactionHelisaProperties\n  ) {\n    this.title = data.title;\n    if (this.title === undefined) {\n      this.title = DEFAULT_TITLE;\n    }\n    this.okLabel = data.okLabel;\n    if (this.okLabel === undefined) {\n      this.okLabel = 'Solicitarla';\n    }\n    this.cancelLabel = data.cancelLabel;\n    if (this.cancelLabel === undefined) {\n      this.cancelLabel = 'Negarla';\n    }\n    dialogRef.disableClose = true;\n    dialogRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      if (event.code === 'Escape') {\n        this.dialogRef.close(this.onCancel());\n      }\n    });\n  }\n\n  ngOnInit(): void  {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","import {DragDropModule} from '@angular/cdk/drag-drop';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {\n  MatAutocompleteModule,\n  MatButtonModule,\n  MatCheckboxModule,\n  MatGridListModule,\n  MatInputModule,\n  MatMenuModule,\n  MatNativeDateModule,\n  MatOptionModule,\n  MatPaginatorModule,\n  MatRadioModule,\n  MatSidenavModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatTableModule\n} from '@angular/material';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\nimport { TableHelisaService } from './components/table-helisa/table-helisa.service';\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\nimport { TreeHelisaService } from './components/tree-helisa/tree-helisa.service';\nimport { ExternalLinkDirective } from './directives/external-link.directive';\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\nimport { HelTooltipDirective } from './directives/tooltip.directive';\nimport { ExternalLinkPipe } from './pipes/external-link.pipe';\nimport { AlertUncompletedDataHelisaComponent } from './components/alert-uncompleted-data-helisa/alert-uncompleted-data-helisa.component';\nimport { AlertLostDataHelisaComponent } from './components/alert-lost-data-helisa/alert-lost-data-helisa.component';\nimport { AlertDeleteDataHelisaComponent } from './components/alert-delete-data-helisa/alert-delete-data-helisa.component';\nimport {\n  AlertUncompletedSelectedDataHelisaComponent\n} from './components/alert-uncompleted-selected-data-helisa/alert-uncompleted-selected-data-helisa.component';\nimport {\n  AlertInformationNotValidHelisaComponent\n } from './components/alert-information-not-valid-helisa/alert-information-not-valid-helisa.component';\nimport { ComboBoxHelisaComponent } from './components/combo-box-helisa/combo-box-helisa.component';\nimport {AlertAuthorizationTransactionHelisaComponent} from './components/alert-authorization-transaction-helisa/alert-authorization-transaction-helisa.component';\n\n@NgModule({\n  declarations: [\n    InputWithButtonComponent,\n    ToastHelisaComponent,\n    AlertHelisaComponent,\n    DependencyTableHelisaComponent,\n    InputHelisaComponent,\n    TableHelisaComponent,\n    TreeHelisaComponent,\n    DateHelisaComponent,\n    AutocompleteHelisaComponent,\n    OptionsScrollDirective,\n    HelTooltipDirective,\n    ExternalLinkDirective,\n    ExternalLinkPipe,\n    AlertUncompletedDataHelisaComponent,\n    AlertLostDataHelisaComponent,\n    AlertDeleteDataHelisaComponent,\n    AlertUncompletedSelectedDataHelisaComponent,\n    AlertInformationNotValidHelisaComponent,\n    ComboBoxHelisaComponent,\n    AlertAuthorizationTransactionHelisaComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatListModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatCardModule,\n    LayoutModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTabsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatStepperModule,\n    MatChipsModule,\n    DragDropModule,\n    MatTreeModule\n  ],\n  exports: [\n    InputWithButtonComponent,\n    ToastHelisaComponent,\n    AlertHelisaComponent,\n    DependencyTableHelisaComponent,\n    InputHelisaComponent,\n    TableHelisaComponent,\n    TreeHelisaComponent,\n    DateHelisaComponent,\n    AutocompleteHelisaComponent,\n    OptionsScrollDirective,\n    HelTooltipDirective,\n    ExternalLinkDirective,\n    ExternalLinkPipe,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatListModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatCardModule,\n    LayoutModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTabsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatStepperModule,\n    MatChipsModule,\n    DragDropModule,\n    MatTreeModule,\n    AlertUncompletedDataHelisaComponent,\n    AlertLostDataHelisaComponent,\n    AlertDeleteDataHelisaComponent,\n    AlertUncompletedSelectedDataHelisaComponent,\n    AlertInformationNotValidHelisaComponent,\n    ComboBoxHelisaComponent,\n    AlertAuthorizationTransactionHelisaComponent\n  ],\n  providers: [TableHelisaService, TreeHelisaService]\n})\nexport class HelisaLibModule { }\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable } from 'rxjs';\nimport { AlertUncompletedDataHelisaComponent } from './alert-uncompleted-data-helisa.component';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertUncompletedDataHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertUncompletedDataHelisaComponent> = this.dialog.open(AlertUncompletedDataHelisaComponent, {\n      width: '250px',\n      data: { title, content, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable } from 'rxjs';\nimport { AlertLostDataHelisaComponent } from './alert-lost-data-helisa.component';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertLostDataHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertLostDataHelisaComponent> = this.dialog.open(AlertLostDataHelisaComponent, {\n      width: '250px',\n      data: { title, content, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable } from 'rxjs';\nimport { AlertDeleteDataHelisaComponent } from './alert-delete-data-helisa.component';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertDeleteDataHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertDeleteDataHelisaComponent> = this.dialog.open(AlertDeleteDataHelisaComponent, {\n      width: '250px',\n      data: { title, content, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable } from 'rxjs';\nimport {AlertUncompletedSelectedDataHelisaComponent} from './alert-uncompleted-selected-data-helisa.component';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertUncompletedSelectedDataHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertUncompletedSelectedDataHelisaComponent> = this.dialog.open(AlertUncompletedSelectedDataHelisaComponent, {\n      width: '250px',\n      data: { title, content, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable } from 'rxjs';\nimport { AlertInformationNotValidHelisaComponent } from './alert-information-not-valid-helisa.component';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertInformationNotValidHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(title?: string, content?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertInformationNotValidHelisaComponent> = this.dialog.open(AlertInformationNotValidHelisaComponent, {\n      width: '250px',\n      data: { title, content}\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable } from 'rxjs';\nimport {AlertAuthorizationTransactionHelisaComponent} from './alert-authorization-transaction-helisa.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertAuthorizationTransactionHelisaService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(title?: string, content?: string, okLabel?: string, cancelLabel?: string): Observable<boolean> {\n    const dialogRef: MatDialogRef<AlertAuthorizationTransactionHelisaComponent> = this.dialog.open(AlertAuthorizationTransactionHelisaComponent, {\n      width: '250px',\n      data: { title, content, okLabel, cancelLabel }\n    });\n\n    return dialogRef.afterClosed();\n  }\n}\n","export enum ToastType {\n    DONE = 'done',\n    ERROR = 'error',\n    INFO = 'info'\n}\n"]}