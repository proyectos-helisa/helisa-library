{"version":3,"sources":["ng://helisa-lib/lib/components/input-with-button/input-with-button.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.component.ts","ng://helisa-lib/lib/components/toast-helisa/toast-helisa.service.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa-type.enum.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.component.ts","ng://helisa-lib/lib/components/alert-helisa/alert-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.service.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.service.ts","ng://helisa-lib/lib/components/dependency-table-helisa/dependency-table-helisa.component.ts","ng://helisa-lib/lib/components/input-helisa/input-helisa.component.ts","node_modules/tslib/tslib.es6.js","ng://helisa-lib/lib/components/table-helisa/table-helisa.interface.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa-connect.component.ts","ng://helisa-lib/lib/components/table-helisa/table-helisa.component.ts","ng://helisa-lib/lib/components/date-helisa/date-helisa.component.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.service.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa-connect.ts","ng://helisa-lib/lib/components/tree-helisa/tree-helisa.component.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.service.ts","ng://helisa-lib/lib/components/autocomplete-helisa/autocomplete-helisa.component.ts","ng://helisa-lib/lib/directives/options-scroll.directive.ts","ng://helisa-lib/lib/directives/tooltip.directive.ts","ng://helisa-lib/lib/helisa-lib.module.ts","ng://helisa-lib/lib/components/toast-helisa/toast-type.enum.ts"],"names":["InputWithButtonComponent","prototype","ngOnInit","this","value","inputFormControl","setValue","onDone","valid","done","emit","onCancel","cancel","Component","args","selector","template","Input","Output","placeholder","FormControl","Validators","required","requiredMessage","EventEmitter","ToastHelisaComponent","Inject","MAT_SNACK_BAR_DATA","data","ToastHelisaService","showToast","type","message","subMessages","snackBar","openFromComponent","duration","durationInSeconds","Injectable","providedIn","MatSnackBar","ERROR","CONFIRMATION","AlertHelisaComponent","dialogRef","close","MatDialogRef","MAT_DIALOG_DATA","_this","content","title","hasCancel","AlertHelisaType","disableClose","keydownEvents","subscribe","event","code","AlertHelisaService","openDialog","dialog","open","width","afterClosed","MatDialog","DependencyTableHelisaService","getTables","tables","updateDependency","configTable","withRemoveDependency","infoTables","slice","order","length","isRemote","dataSource","count","next","setTotal","emitTotal","addPage","emitNextPage","selectIndexRow","config","indexRowSelect","changeVisibilityButton","emitVisibilityButton$","changeVisibilityAllButtons","show","emitVisibilityAllButtons$","changeisCellSelection","emitIsCellSelection$","changeColumnsByTable","emitChangeColumns$","Subject","Array","emitVisibilityButton","asObservable","emitVisibilityAllButtons","emitIsCellSelection","emitChangeColumns","TableHelisaService","total","table","emitChangeSource","obj","page","change","emitVisibleButton$","totalReturn","nextPageReturn","emitVisibleButton","DependencyTableHelisaComponent","dependencyTableHelisaService","tableService","viewTables","toArray","index","undefined","addRowButton","showButton","forEach","element","isCellSelection","columns","getService","onSelectedDependency","selectedObject","selected","selectObject","onNextPage","nextPage","onTotal","onSort","sort","onDrop","drop","onAddRow","addRow","selectedCell","selectCell","onBookClicked","bookClicked","providers","ViewChildren","showToolTip","hideDelay","showDelay","DEFAULT","IDENTITY","NUMERIC","DOUBLE","InputHelisaComponent","Object","defineProperty","formControl","inputFormReal","valueChanges","getMaskedValue","formControlMask","statusChanges","setErrors","key","isFocused","nameInput","nativeElement","focus","search","realValue","position","selectionStart","getRealValue","selectionEnd","str","InputHelisaType","maskedStr","i","j","DECIMAL_SEPARATOR","THOUSAND_SEPARATOR","indexOf","realStr","match","haveDot","ViewChild","isSearch","disabled","__read","o","n","m","Symbol","iterator","r","e","call","ar","push","error","__spread","arguments","concat","USER","CODE_CALL","SUM","AVERAGE","COUNT","SORT","UNKNOWN","TOTAL","REMOTE","LOCAL","ColumnConfigUtil","getValue","column","name","split","reduce","field","TableHelisaConnectComponent","getBody","columnConfig","isLastPage","isUsed","GROUP_TITLE","GROUP_FOOTER","ROW","TableHelisaComponent","receivePage","info","idx","totalData","getGroupValue","sum","matSort","sortChange","find","c","active","sortDirection","direction","columnConfigurations","ChangeColumnConfigurationType","ngAfterViewInit","matTable","renderRows","w","TableHelisaType","tableHelisaConnectComponent","goNextPage","columnConfiguration","hasSubtitle","displayedColumns","splice","visible","subtitle","rawData","displayedColumnsWithTitle","displayedColumnsWithSubtitle","displayedColumnsWithFooter","getColumnsWithTitle","col","getHeaderSubtitle","footerDisplayedColumns","_dataSource","prepareDataSource","idRowSelected","selectRow","rowType","RowType","groupFooter","changeData","haveGroup","totalType","showFooter","showSearch","searchable","groupable","a","b","result","compare","row","addTotalGroup","MatTableDataSource","rowTotal","ws","getGroupDescription","isGroupTitle","item","isRow","isGroupFooter","map","TotalType","getValueTooltip","searchText","text","lastSearch","isUser","select","scope","EventScope","onScroll","target","scrollHeight","scrollTop","body","dblClickCell","selectedCells","isSelectedCell","getClassToCell","classToCell","configCellStyles","found","cellData","classCell","columnStyle","getClassToRow","classToRow","configRowStylesFromColumn","classRow","isDragged","indexRowStartDrag","rowIndex","getRowIndex","pageY","array","dataBeforeDrag","moveItemInArray","stopPropagation","tableKeydown","currentIndex_1","findIndex","newSelection_1","scrollCount","reverse","Math","abs","preventDefault","filter","dragger","lastIndexRowDrag","startDrag","offsetTop","container","containerTable","parentElement","rows","matTableElement","children","MatSort","MatTable","read","ElementRef","showTitle","addBookButton","moment","moment_","NORMAL","MONTH_YEAR","DateHelisaComponent","dateToVisualize","dateFormControl","validator","formHandler","typeCalendar","TypeCalendarEnum","dateFormat","incommingDate","format","getStartView","typeCalendarEnum","pipe","tap","date","invalidFormat","isValid","isFromInputEvent","setTimeout","subString","year","parseFloat","month","day","setFullYear","setDate","setMonth","endOf","toDate","monthSelectedHandler","chosenMonthDate","datepicker","dateChange","getErrorMessage","errorMessage","floatLabel","Date","TreeHelisaService","changeNodeSelected","idResidentialArea","emitNodeSelected","changeDataSource","emitDataSource","expandAllNodes","expand","emitExpandAllNodes","collapseAllNodes","collapse","emitCollapseAllNodes","refreshTree","emitRefreshTree","refreshTreeWithPagination","emitRefreshTreeWithPagination","expandOneNode","node","emitExpandOneNode","collapseOneNode","emitCollapseOneNode","BehaviorSubject","nodeSelected","dataSourceObservable","nodeExpand","nodeCollapse","refreshTreeObservable","refreshTreeWithPaginationObservable","expandOneNodeObservable","collapseOneNodeObservable","TreeHelisaConnect","TreeHelisaComponent","treeHelisaService","res","treeControl","dataNodes","selectNode","tree","expandAll","collapseAll","onRedirect","isSingleClick","id","currentNode","offsetHeight","onEdit","isEditable","onAdd","isSelected","parent","onDelete","_.remove","removed","onEdited","trim","edited","added","onDblClick","dobleClick","onKeyDown","keypressDelete","keypressInsert","moveDownIntoTree","moveUpIntoTree","indexOfParent","getDescription","_data","treeHelisaConnect","rangeScrolled","fillParent","reorderByOrderIndex","upSelectNode","expandAllParents","getClassNode","classNode","onEditMode","editMode","getSelectedOptions","onSelectOption","isCheckedOption","source","checkedOptionNode","uncheckedOptionNode","selectedOptions","has","reloadSelectedOptions","get","options","option","set","getNodeById","queue","curr","shift","apply","_.orderBy","x","orderIndex","console","log","host","(document:keyup)","Router","router","elementRef","Map","showOptionsNode","collapseParent","NestedTreeControl","MatTreeNestedDataSource","hasChild","_","AutocompleteHelisaService","setDataSource","dataSource$","AutocompleteHelisaComponent","onScrollObservable","debounceTime","throttleTime","autocompleteHelisaService","filteredOptions","of","myControl","startWith","_checkRegex","_filter","displayFn","displayText","replace","filterValue_1","toLowerCase","onSelected","selectedValue","onSelectedValue","getNextPage","isLoading","OptionsScrollDirective","removeScrollEventListener","autoComplete","panel","removeEventListener","ngOnDestroy","_onDestroy","complete","st","pageYOffset","lastScrollTop","thresholdPercent","scroll","scrollEvent","clientHeight","Directive","MatAutocomplete","opened","addEventListener","bind","takeUntil","closed","HelTooltipDirective","mouseover","currentContent","_elemRef","innerText","toUpperCase","toString","isEllipsisActive","tooltip","offsetWidth","scrollWidth","MatTooltip","HostListener","HelisaLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatToolbarModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatOptionModule","MatListModule","MatIconModule","MatSnackBarModule","MatCardModule","LayoutModule","MatTooltipModule","MatSidenavModule","MatGridListModule","MatMenuModule","MatRadioModule","MatProgressSpinnerModule","MatTableModule","MatPaginatorModule","MatSortModule","MatDialogModule","MatTabsModule","MatDatepickerModule","MatNativeDateModule","MatStepperModule","MatChipsModule","DragDropModule","MatTreeModule","exports","DONE","INFO"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'hel-input-with-button',\r\n  templateUrl: './input-with-button.component.html',\r\n  styleUrls: ['./input-with-button.component.sass']\r\n})\r\nexport class InputWithButtonComponent implements OnInit {\r\n\r\n  @Input() placeholder: string =\"\";  \r\n  @Input() inputFormControl:FormControl = new FormControl('',Validators.required);\r\n  @Input() requiredMessage:string = \"El campo es requerido\";\r\n  @Input() value:string = \"\";\r\n\r\n  @Output() done = new EventEmitter<string>();\r\n  @Output() cancel = new EventEmitter<any>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if(this.value != \"\"){\r\n      this.inputFormControl.setValue(this.value);\r\n    }\r\n  }\r\n\r\n\r\n  onDone(){\r\n    if(this.inputFormControl.valid)\r\n    {\r\n      this.done.emit(this.inputFormControl.value);\r\n    }\r\n  }\r\n\r\n  onCancel(){\r\n    this.cancel.emit();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'hel-toast',\r\n  templateUrl: './toast-helisa.component.html',\r\n  styleUrls: ['./toast-helisa.component.sass']\r\n})\r\nexport class ToastHelisaComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { ToastType } from './toast-type.enum';\r\nimport { ToastHelisaComponent } from './toast-helisa.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastHelisaService {\r\n\r\n  durationInSeconds = 5;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  showToast(type:ToastType, message:String, subMessages?:String[]){\r\n    subMessages = subMessages ? subMessages : [];\r\n    this.snackBar.openFromComponent(ToastHelisaComponent, {\r\n      data: {message: message, type: type, subMessages:subMessages},\r\n      duration: this.durationInSeconds * 1000\r\n    });\r\n  }\r\n}\r\n","export enum AlertHelisaType {\r\n    ERROR = \"ERROR\",\r\n    CONFIRMATION = \"CONFIRMATION\"\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Component({\r\n  selector: 'hel-alert',\r\n  templateUrl: './alert-helisa.component.html',\r\n  styleUrls: ['./alert-helisa.component.sass']\r\n})\r\nexport class AlertHelisaComponent implements OnInit {\r\n\r\n  content: string;\r\n  title: String;\r\n  hasCancel: boolean;\r\n\r\n  constructor(public dialogRef: MatDialogRef<AlertHelisaComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data) {\r\n      this.content = data.content;\r\n      this.title = data.title;\r\n      this.hasCancel = data.type == AlertHelisaType.CONFIRMATION;\r\n      dialogRef.disableClose = true;\r\n      dialogRef.keydownEvents().subscribe(event => {\r\n        if(event.code == 'Escape')\r\n          this.dialogRef.close(this.onCancel());\r\n      });\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onCancel(){\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { AlertHelisaComponent } from './alert-helisa.component';\r\nimport { AlertHelisaType } from './alert-helisa-type.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHelisaService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(type:AlertHelisaType, title:String, content:String): Observable<any> {\r\n    const dialogRef = this.dialog.open(AlertHelisaComponent, {\r\n      width: '250px',\r\n      data: {title: title, content: content, type:type}\r\n    });\r\n\r\n    return dialogRef.afterClosed();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport {ColumnConfig, RequestTableHelisa, AddRowButton, ConfigRowStyles} from '../table-helisa/table-helisa.interface';\r\nimport { EventDependency} from './dependency-table-helisa.component';\r\n\r\nexport interface ConfigTable {\r\n  columns: Array<ColumnConfig>,\r\n  isRemote: boolean,\r\n  dataSource?: Array<any>,\r\n  count?: number,\r\n  order?: number,\r\n  showTitle?: boolean,\r\n  indexRowSelect?: number,\r\n  isDragged?: boolean,\r\n  addRowButton?: AddRowButton,\r\n  configRowStylesFromColumn?: Array<ConfigRowStyles>,\r\n  isCellSelection?: boolean,\r\n  addBookButton?: boolean\r\n}\r\n\r\n@Injectable()\r\nexport class DependencyTableHelisaService {\r\n\r\n\r\n  tables: Subject<ConfigTable[]> = new Subject();\r\n  infoTables: Array<ConfigTable> = new Array();\r\n  \r\n  private emitVisibilityButton$ = new Subject<EventDependency>();\r\n  emitVisibilityButton = this.emitVisibilityButton$.asObservable();\r\n  \r\n  private emitVisibilityAllButtons$ = new Subject<boolean>();\r\n  emitVisibilityAllButtons = this.emitVisibilityAllButtons$.asObservable();\r\n\r\n  private emitIsCellSelection$ = new Subject<EventDependency>();\r\n  emitIsCellSelection = this.emitIsCellSelection$.asObservable();\r\n\r\n  private emitChangeColumns$ = new Subject<EventDependency>();\r\n  emitChangeColumns = this.emitChangeColumns$.asObservable();\r\n\r\n  emitTotal = new Subject<EventDependency>();\r\n  emitNextPage = new Subject<EventDependency>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * retorna un Observable<ConfigTable[]>\r\n   */\r\n  getTables(): Observable<ConfigTable[]> {\r\n    return this.tables;\r\n  }\r\n\r\n  /**\r\n   * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\r\n   * TambiÃ©n remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\r\n   * @param configTable Objeto que contiene la configuraciÃ³n para la tabla.\r\n   * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\r\n   */\r\n  updateDependency(configTable: ConfigTable, withRemoveDependency: boolean = false) {\r\n    if (withRemoveDependency) {\r\n      this.infoTables = this.infoTables.slice(0, !configTable.order ? 0 : configTable.order);\r\n    }\r\n    if (!configTable.order || configTable.order >= this.infoTables.length) {\r\n      configTable.order = this.infoTables.length;\r\n    }\r\n    this.infoTables[configTable.order] = configTable;\r\n    if (configTable.isRemote) {\r\n      configTable.dataSource = null;\r\n      if (configTable.count === null)\r\n        throw \"hace falta el count\";\r\n    } else {\r\n      if (configTable.dataSource === null)\r\n        throw \"hace falta el dataSource\";\r\n      configTable.count = configTable.dataSource.length;\r\n    }\r\n    this.tables.next(this.infoTables);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de total con la informaciÃ³n para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina \r\n   */\r\n  setTotal(event: EventDependency) {\r\n    this.emitTotal.next(event);\r\n  }\r\n\r\n  /**\r\n   * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\r\n   * @param event wrapper que contiene el indice de la tabla y la informaciÃ³n de la pagina\r\n   */\r\n  addPage(event: EventDependency) {\r\n    this.emitNextPage.next(event);\r\n  }\r\n\r\n  selectIndexRow(config: ConfigTable) {\r\n    if (this.infoTables[config.order]) {\r\n      this.infoTables[config.order].indexRowSelect = config.indexRowSelect;\r\n      this.tables.next(this.infoTables); }\r\n  }\r\n\r\n\r\n  /**\r\n   * Muestra o esconde el boton una tabla en especifico\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false\r\n   */\r\n  changeVisibilityButton(event:EventDependency){\r\n    this.emitVisibilityButton$.next(event);\r\n  }\r\n\r\n\r\n  /**\r\n   * Esconde los botones de todas las tablas\r\n   * @param show indicar si se muestran o no todos los botones de las tablas\r\n   */\r\n  changeVisibilityAllButtons(show:boolean){\r\n    this.emitVisibilityAllButtons$.next(show);\r\n  }\r\n\r\n  /**\r\n   * Para habilitar el manejo de selecciÃ³n de celda\r\n   * @param event para indicar el index de la tabla y en \"data\" true o false \r\n   */\r\n  changeisCellSelection(event:EventDependency) {\r\n    this.emitIsCellSelection$.next(event);\r\n  }\r\n\r\n   /**\r\n   * Para habilitar el cambio de columnas\r\n   * @param event para indicar el index de la tabla y en \"data\" columnas \r\n   */\r\n  changeColumnsByTable(event:EventDependency) {\r\n    this.emitChangeColumns$.next(event);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\r\nimport {TotalTableHelisa} from \"./table-helisa.interface\";\r\nimport {TableHelisaComponent} from \"./table-helisa.component\";\r\n\r\nexport interface TableHelisaServiceInfo<T> {\r\n  obj: T;\r\n  table?: TableHelisaComponent<any>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableHelisaService<T> {\r\n\r\n  private emitChangeSource = new Subject<TableHelisaServiceInfo<TotalTableHelisa>>();\r\n  private emitNextPage = new Subject<TableHelisaServiceInfo<T[]>>();\r\n\r\n  totalReturn = this.emitChangeSource.asObservable();\r\n  nextPageReturn = this.emitNextPage.asObservable();\r\n\r\n  setTotal(total: TotalTableHelisa, table?: TableHelisaComponent<T>) {\r\n    this.emitChangeSource.next({obj: total, table: table});\r\n  }\r\n\r\n  addPage(page: T[], table?: TableHelisaComponent<T>) {\r\n    this.emitNextPage.next({obj: page, table: table});\r\n  }\r\n\r\n\r\n  private emitVisibleButton$ = new Subject<boolean>();\r\n  /**\r\n   * Observable para saber si se debe mostrar o esconder el boton de add row\r\n   */\r\n  emitVisibleButton = this.emitVisibleButton$.asObservable();\r\n\r\n  /**\r\n   * para modificar el valor de si se muestra o no el boton de add row de la tabla\r\n   * @param change indicar si se muestra o no el boton de add row de la tabla\r\n   */\r\n  changeVisibilityButton(change:boolean){\r\n    this.emitVisibleButton$.next(change);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, EventEmitter, Output, QueryList, ViewChildren, Input } from '@angular/core';\r\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\r\nimport {ColumnConfig, RequestTableHelisa, SelectObject} from '../table-helisa/table-helisa.interface';\r\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\r\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\r\n\r\nexport interface EventDependency {\r\n  index: number,\r\n  data: any\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-dependency-table',\r\n  templateUrl: './dependency-table-helisa.component.html',\r\n  styleUrls: ['./dependency-table-helisa.component.sass'],\r\n  providers: [DependencyTableHelisaService]\r\n})\r\nexport class DependencyTableHelisaComponent implements OnInit {\r\n\r\n  tables: Array<ConfigTable> = [];\r\n  @ViewChildren('viewTables') viewTables: QueryList<TableHelisaComponent<any>>;\r\n  @Input() showToolTip:boolean = true;\r\n\r\n  /**\r\n   * deprecated, use selectObject\r\n   */\r\n  @Output() selected: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() selectObject: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() nextPage: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() total: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() sort: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() drop: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();\r\n  @Output() addRow: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() selectCell = new EventEmitter<EventDependency>();\r\n  @Output() bookClicked: EventEmitter<EventDependency> = new EventEmitter<EventDependency>();  \r\n  selectedObject: EventDependency = null;\r\n\r\n\r\n  /**\r\n     * Tiempo antes de ocultarla el mensaje del tooltip\r\n     */\r\n    @Input('hideDelay') hideDelay: number = 600;\r\n\r\n    /**\r\n     * Tiempo antes de mostra el mensaje del tooltip\r\n     */\r\n    @Input('showDelay') showDelay: number = 500;\r\n  \r\n\r\n  constructor(private dependencyTableHelisaService: DependencyTableHelisaService, private tableService: TableHelisaService<any>) { }\r\n\r\n  ngOnInit() {\r\n    this.getTables();\r\n    this.dependencyTableHelisaService.emitNextPage.subscribe(\r\n      event => {\r\n        this.tableService.addPage(event.data, this.viewTables.toArray()[event.index]);\r\n      }\r\n    );\r\n\r\n    this.dependencyTableHelisaService.emitTotal.subscribe(\r\n      event => {\r\n        this.tableService.setTotal(event.data, this.viewTables[event.index]);\r\n      }\r\n    );\r\n\r\n    // Observable para mostrar o esconder el boton de una tabla\r\n    this.dependencyTableHelisaService.emitVisibilityButton.subscribe(\r\n      data=>{        \r\n        if(!!data && data.index != undefined){\r\n            let table = this.tables[data.index];\r\n            if(!!table){\r\n              table.addRowButton.showButton = data.data;\r\n            }\r\n        }\r\n      }\r\n    )\r\n\r\n    //Observable para mostrar o esconder los botones de todas las tablas\r\n    this.dependencyTableHelisaService.emitVisibilityAllButtons.subscribe(\r\n      data=>{\r\n        if(data != undefined && data != null){\r\n          this.tables.forEach(element => {\r\n            if(!!element.addRowButton){\r\n              element.addRowButton.showButton = data;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    )\r\n\r\n    //Observable para manejo de selecciÃ³n de celdas\r\n    this.dependencyTableHelisaService.emitIsCellSelection.subscribe(\r\n      data => {\r\n        if (!!data && data.index != undefined) {\r\n          let table = this.tables[data.index];\r\n          if (table) {\r\n            table.isCellSelection = data.data;\r\n          }\r\n        }\r\n      });\r\n\r\n    //Observable para manejo de columnas\r\n    this.dependencyTableHelisaService.emitChangeColumns.subscribe(\r\n      data => {\r\n        if (!!data && data.index != undefined) {\r\n          let table = this.tables[data.index];\r\n          if (table) {\r\n            table.columns = data.data;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * retorna el servicio que gestiona el componente.\r\n   */\r\n  getService(): DependencyTableHelisaService {\r\n    return this.dependencyTableHelisaService;\r\n  }\r\n\r\n  /**\r\n   * Obtiene un observable con las tablas dependientes desde el servicio.\r\n   */\r\n  getTables() {\r\n    this.dependencyTableHelisaService.getTables()\r\n      .subscribe(tables => {\r\n        this.tables = tables;\r\n      }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla seleccionada\r\n   * @param data retorna la fila que fue seleccionada\r\n   */\r\n  onSelectedDependency(index: number, event: SelectObject<any>) {\r\n    this.selectedObject = { index: index, data: event };\r\n    this.selected.emit({ index: index, data: event.value });\r\n    this.selectObject.emit({index: index, data: event});\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onNextPage(index: number, event: RequestTableHelisa) {\r\n    this.nextPage.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onTotal(index: number, event: any) {\r\n    this.total.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onSort(index: number, event: any) {\r\n    this.sort.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\r\n   * @param index indica el indice de la tabla que genera el evento\r\n   * @param event evento generado desde la tabla\r\n   */\r\n  onDrop(index: number, event: any) {\r\n    this.drop.emit({ index: index, data: event });\r\n  }\r\n\r\n  /**\r\n   * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe aÃ±adir una nueva fila\r\n   * @param index indica el indice de la tabla de la cual se dispara el evento\r\n   */\r\n  onAddRow(index:number){\r\n    this.addRow.emit(index);\r\n  }\r\n\r\n  selectedCell(index: number, event: any) {\r\n    if (this.tables[index].isCellSelection) {\r\n      this.selectCell.emit({ index: index, data: event });\r\n    }\r\n  }\r\n\r\n  onBookClicked(index,event){\r\n    this.bookClicked.emit({index:index ,data:event});\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormControl } from \"@angular/forms\";\r\n\r\nexport enum InputHelisaType {\r\n  DEFAULT, IDENTITY, NUMERIC, DOUBLE\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-input',\r\n  templateUrl: './input-helisa.component.html',\r\n  styleUrls: ['./input-helisa.component.sass']\r\n})\r\nexport class InputHelisaComponent implements OnInit {\r\n\r\n  private readonly DECIMAL_SEPARATOR = '.';\r\n  private readonly THOUSAND_SEPARATOR = ',';\r\n\r\n  @Input() placeholder = '';\r\n  @Output() setValue: EventEmitter<string> = new EventEmitter<string>();\r\n  @Input() isSearch = false;\r\n  //@Input() inputFormControl: FormControl = new FormControl('');\r\n  @Input() isFocused = false;\r\n  @Input() disabled = false;\r\n  @Input() type: InputHelisaType = InputHelisaType.DEFAULT;\r\n\r\n\r\n  formControlMask: FormControl = new FormControl('');\r\n  private realValue = '';\r\n  private inputFormReal: FormControl = new FormControl('');\r\n\r\n  @ViewChild('inputText') nameInput: ElementRef;\r\n\r\n  constructor() { }\r\n\r\n  @Input()\r\n  set inputFormControl(formControl: FormControl) {\r\n    this.inputFormReal = formControl;\r\n    this.inputFormReal.valueChanges.subscribe(data => {\r\n      if (this.getMaskedValue(data) != this.formControlMask.value)\r\n        this.change(data);\r\n    });\r\n    this.change(this.inputFormReal.value);\r\n    this.inputFormReal.statusChanges.subscribe(\r\n      data => {\r\n        if (data == 'INVALID')\r\n          this.formControlMask.setErrors({ key: 'Error de validaciÃ³n.' });\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.isFocused) {\r\n      this.nameInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  search() {\r\n    this.setValue.emit(this.realValue);\r\n  }\r\n\r\n  change(event) {\r\n    if (event != null) event = event + '';\r\n    let position = this.nameInput.nativeElement.selectionStart;\r\n    const length = event ? event.length : 0;\r\n    this.realValue = this.getRealValue(event);\r\n    if (this.getMaskedValue(this.realValue) != this.formControlMask.value) {\r\n      this.formControlMask.setValue(this.getMaskedValue(this.realValue));\r\n      position += this.nameInput.nativeElement.value.length - length;\r\n      this.nameInput.nativeElement.selectionStart = position;\r\n      this.nameInput.nativeElement.selectionEnd = position;\r\n    }\r\n    this.inputFormReal.setValue(this.realValue);\r\n  }\r\n\r\n  private getMaskedValue(str) {\r\n    if (str == null)\r\n      return str;\r\n    str = str + '';\r\n    if (this.type == InputHelisaType.DEFAULT)\r\n      return str;\r\n    let maskedStr = '';\r\n    if (this.type == InputHelisaType.IDENTITY) {\r\n      for (let i = str.length - 1, j = 0; i >= 0; i-- , j++) {\r\n        if (j > 0 && j % 3 == 0)\r\n          maskedStr = this.DECIMAL_SEPARATOR + maskedStr;\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type == InputHelisaType.NUMERIC) {\r\n      for (let i = str.length - 1, j = 0; i >= 0; i-- , j++) {\r\n        if (j > 0 && j % 3 == 0)\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    if (this.type == InputHelisaType.DOUBLE) {\r\n      if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0)\r\n        for (let i = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++)\r\n          maskedStr += str[i];\r\n      for (let i = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1, j = 0; i >= 0; i-- , j++) {\r\n        if (j > 0 && j % 3 == 0)\r\n          maskedStr = this.THOUSAND_SEPARATOR + maskedStr;\r\n        maskedStr = str[i] + maskedStr;\r\n      }\r\n    }\r\n    return maskedStr;\r\n  }\r\n\r\n  private getRealValue(str) {\r\n    if (str == null)\r\n      return str;\r\n    str = str + '';\r\n    let realStr = '';\r\n    if (this.type == InputHelisaType.DEFAULT)\r\n      return str;\r\n    if (this.type == InputHelisaType.IDENTITY) {\r\n      for (let i = 0; i < str.length; i++)\r\n        if (str[i].match('[a-zA-Z0-9]'))\r\n          realStr += str[i];\r\n    }\r\n    if (this.type == InputHelisaType.NUMERIC) {\r\n      for (let i = 0; i < str.length; i++)\r\n        if (str[i].match('[0-9]'))\r\n          realStr += str[i];\r\n    }\r\n    if (this.type == InputHelisaType.DOUBLE) {\r\n      let haveDot = false;\r\n      for (let i = 0; i < str.length; i++) {\r\n        if (str[i].match('[0-9]') || ((str[i] == this.DECIMAL_SEPARATOR) && !haveDot))\r\n          realStr += str[i];\r\n        haveDot = haveDot || (str[i] == this.DECIMAL_SEPARATOR);\r\n      }\r\n    }\r\n    return realStr;\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {SortDirection} from \"@angular/material\";\r\n\r\nexport interface ColumnConfig {\r\n  name: string;\r\n  title?: string;\r\n  visible?: boolean;\r\n  sortable?: boolean;\r\n  groupable?: boolean;\r\n  totalType?: TotalType;\r\n  searchable?: boolean;\r\n  sortDirection?: SortDirection;\r\n  subtitle?: string;\r\n  colspanTitle?: number;\r\n  colspanSubtitle?: number;\r\n  columnStyle?: string;\r\n}\r\n\r\nexport interface AddRowButton{  \r\n  text: string;\r\n  showButton:boolean;\r\n}\r\n\r\nexport enum EventScope {\r\n  USER, CODE_CALL\r\n}\r\n\r\nexport enum TotalType {\r\n  SUM, AVERAGE, COUNT\r\n}\r\n\r\nexport enum ChangeColumnConfigurationType {\r\n  SORT, UNKNOWN, TOTAL\r\n}\r\n\r\nexport interface EventColumn {\r\n  column: ColumnConfig;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n  type: ChangeColumnConfigurationType;\r\n}\r\n\r\nexport interface TotalTableHelisa {\r\n  column: ColumnConfig;\r\n  value: number;\r\n}\r\n\r\nexport interface TotalGroup {\r\n  sum: number;\r\n  count: number;\r\n}\r\n\r\nexport interface EventSearch {\r\n  text: string;\r\n  columnConfigurations: Array<ColumnConfig>;\r\n}\r\n\r\nexport interface RequestTableHelisa {\r\n  page: number;\r\n  body: any;\r\n}\r\n\r\nexport interface DropElement<T>{\r\n value: T;\r\n order: number;\r\n}\r\n\r\nexport interface SelectObject<T> {\r\n  value: T;\r\n  scope: EventScope;\r\n}\r\n\r\nexport enum TableHelisaType {\r\n  REMOTE, LOCAL\r\n}\r\n\r\n\r\nexport interface Cell {\r\n  column: ColumnConfig;\r\n  row: any;\r\n }\r\n\r\n export interface ConfigCellStyles{\r\n   cellData: any;\r\n   classCell: string \r\n }\r\n\r\n export interface ConfigRowStyles{\r\n  column: ColumnConfig;\r\n  data: any,\r\n  classRow: string \r\n}\r\n\r\n//@dynamic\r\nexport abstract class ColumnConfigUtil {\r\n  static getValue(obj: any, column: ColumnConfig): any {\r\n    return column.name.split('.').reduce((o, field) => o && o[field], obj);\r\n  }\r\n}\r\n\r\n","import {ColumnConfig} from \"./table-helisa.interface\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n\r\nexport class TableHelisaConnectComponent<T> {\r\n  page: number;\r\n  isLastPage: boolean;\r\n  isUsed: boolean;\r\n\r\n  constructor() {\r\n    this.page = 0;\r\n    this.isLastPage = false;\r\n    this.isUsed = false;\r\n  }\r\n\r\n  public getBody(columnConfig: Array<ColumnConfig>, search: string): any {\r\n    return {};\r\n  }\r\n\r\n  nextPage() {\r\n    return this.page++;\r\n  }\r\n}\r\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild, ElementRef } from '@angular/core';\r\nimport { MatSort, MatTable, MatTableDataSource } from '@angular/material';\r\nimport { Sort } from '@angular/material/typings/sort';\r\n\r\nimport {\r\n  AddRowButton,\r\n  Cell,\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  ColumnConfigUtil,\r\n  ConfigCellStyles,\r\n  ConfigRowStyles,\r\n  DropElement,\r\n  EventColumn,\r\n  EventScope,\r\n  EventSearch,\r\n  RequestTableHelisa,\r\n  SelectObject,\r\n  TableHelisaType,\r\n  TotalGroup,\r\n  TotalType\r\n} from './table-helisa.interface';\r\nimport { TableHelisaService } from './table-helisa.service';\r\nimport { TableHelisaConnectComponent } from './table-helisa-connect.component';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport {of} from 'rxjs';\r\n\r\ninterface RowData {\r\n  data: any;\r\n  rowType: RowType;\r\n}\r\n\r\nenum RowType {\r\n  GROUP_TITLE, GROUP_FOOTER, ROW\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'hel-table',\r\n  templateUrl: './table-helisa.component.html',\r\n  styleUrls: ['./table-helisa.component.sass']\r\n})\r\nexport class TableHelisaComponent<T> implements OnInit, AfterViewInit {\r\n\r\n  private tableHelisaConnectComponent: TableHelisaConnectComponent<T>;\r\n  totalData: Array<number>;\r\n  rawData: Array<T>;\r\n  data: MatTableDataSource<RowData>;\r\n  displayedColumns: string[] = [];\r\n  displayedColumnsWithTitle: string[] = [];\r\n  displayedColumnsWithSubtitle: string[] = [];\r\n  displayedColumnsWithFooter: string[] = [];\r\n  columnConfig: Array<ColumnConfig>;\r\n  selectedObject: T;\r\n  lastSearch: string;\r\n  type: TableHelisaType = TableHelisaType.LOCAL;\r\n  indexRowSelect: number;\r\n  private scrollCount: number = 0;\r\n  hasSubtitle = false;\r\n  private indexRowStartDrag = -1;\r\n  private lastIndexRowDrag = -1;\r\n  private dataBeforeDrag = null;\r\n\r\n  @ViewChild(MatSort) matSort: MatSort;\r\n  @ViewChild(MatTable) matTable: MatTable<any>;\r\n  @ViewChild(MatTable,{read:ElementRef}) matTableElement: ElementRef;\r\n  @ViewChild(\"containerTable\") containerTable:ElementRef;\r\n\r\n  @Output() sort: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() total: EventEmitter<EventColumn> = new EventEmitter<EventColumn>();\r\n  @Output() search: EventEmitter<EventSearch> = new EventEmitter<EventSearch>();\r\n\r\n  /**\r\n   * Deprecado, cambiar por electObject\r\n   */\r\n  @Output() select: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() selectCell = new EventEmitter<Cell>();\r\n  @Output() selectObject: EventEmitter<SelectObject<T>> = new EventEmitter<SelectObject<T>>();\r\n  @Output() nextPage: EventEmitter<RequestTableHelisa> = new EventEmitter<RequestTableHelisa>();\r\n  @Input() showTitle = true;\r\n  @Input() isCellSelection = false;\r\n  @Input() count: number;\r\n  @Input() configCellStyles: Array<ConfigCellStyles>;\r\n  @Input() configRowStylesFromColumn: Array<ConfigRowStyles>;\r\n  @Input() selectedCells: Cell;\r\n  @Output() drop: EventEmitter<DropElement<T>> = new EventEmitter<DropElement<T>>();\r\n  @Input() isDragged = false;\r\n  @Input() addRowButton: AddRowButton = { showButton: false, text: \"\" };\r\n  @Output() addRow: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() bookClicked: EventEmitter<T> = new EventEmitter<T>();\r\n  @Input() addBookButton: boolean = false;\r\n  @Input() showToolTip: boolean = true;\r\n  showFooter = false;\r\n  showSearch = false;\r\n\r\n\r\n\r\n  /**\r\n     * Tiempo antes de ocultarla el mensaje del tooltip\r\n     */\r\n    @Input('hideDelay') hideDelay: number = 600;\r\n\r\n    /**\r\n     * Tiempo antes de mostra el mensaje del tooltip\r\n     */\r\n    @Input('showDelay') showDelay: number = 500;\r\n   \r\n\r\n  constructor(private tableService: TableHelisaService<T>) { }\r\n\r\n  ngOnInit() {\r\n    this.tableService.nextPageReturn.subscribe(\r\n      data => {\r\n        if (!data.table || data.table === this) {\r\n          this.receivePage(data.obj);\r\n        }\r\n      }\r\n    );\r\n    this.tableService.totalReturn.subscribe(info => {\r\n      if (info) {\r\n        this.columnConfig.forEach((column, idx) => {\r\n          if (column === info.obj.column) {\r\n            this.totalData[idx] = this.getGroupValue(column, { sum: info.obj.value, count: this.count });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    this.matSort.sortChange.subscribe(\r\n      (event: Sort) => {\r\n        const column: ColumnConfig = this.columnConfig.find(c => c.name === event.active);\r\n        column.sortDirection = event.direction;\r\n        this.sort.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.SORT });\r\n      }\r\n    );\r\n\r\n    this.tableService.emitVisibleButton.subscribe(\r\n      data => {\r\n        if (data != undefined && data != null) {\r\n          this.addRowButton.showButton = data;\r\n        }\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.isCellSelection) {\r\n      this.matTable.renderRows();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set isRemote(w: boolean) {\r\n    this.type = w ? TableHelisaType.REMOTE : TableHelisaType.LOCAL;\r\n    this.tableHelisaConnectComponent = new TableHelisaConnectComponent<T>();\r\n    if (this.type === TableHelisaType.REMOTE) {\r\n      this.goNextPage();\r\n    } else {\r\n      this.tableHelisaConnectComponent.page++;\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set columnConfiguration(columnConfiguration: Array<ColumnConfig>) {\r\n    this.hasSubtitle = false;\r\n    this.columnConfig = columnConfiguration;\r\n    this.displayedColumns.splice(0, this.displayedColumns.length);\r\n    if (columnConfiguration) {\r\n      columnConfiguration.forEach(column => {\r\n        if (column.visible) {\r\n          this.displayedColumns.push(column.name);\r\n        }\r\n        if (!this.hasSubtitle) {\r\n          this.hasSubtitle = column.subtitle != undefined;\r\n        }\r\n      });\r\n      if (this.rawData) {\r\n        this.dataSource = this.rawData;\r\n      }\r\n    }\r\n    this.displayedColumnsWithTitle.splice(0, this.displayedColumnsWithTitle.length);\r\n    this.displayedColumnsWithSubtitle.splice(0, this.displayedColumnsWithSubtitle.length);\r\n    this.displayedColumnsWithFooter.splice(0, this.displayedColumnsWithFooter.length);\r\n    this.getColumnsWithTitle().forEach(col => this.displayedColumnsWithTitle.push(col));\r\n    this.getHeaderSubtitle().forEach(col => this.displayedColumnsWithSubtitle.push(col));\r\n    this.footerDisplayedColumns().forEach(col => this.displayedColumnsWithFooter.push(col));\r\n  }\r\n\r\n  private _dataSource: Array<any> = [];\r\n\r\n  @Input()\r\n  set dataSource(dataSource: Array<any>) {\r\n    this._dataSource = dataSource;\r\n    this.rawData = dataSource;\r\n    if (this.rawData) { this.prepareDataSource(); }\r\n  }\r\n\r\n  get dataSource():Array<any>{\r\n    return this._dataSource;\r\n  }\r\n\r\n  @Input()\r\n  set selectedIndexRow(idRowSelected: number) {\r\n    this.indexRowSelect = idRowSelected;\r\n    if (this.rawData && this.rawData.length) {\r\n      if ((idRowSelected >= this.rawData.length || idRowSelected < 0)) {\r\n        this.indexRowSelect = 0;\r\n      }\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private prepareDataSource() {\r\n    const changeData = Array<RowData>();\r\n    let haveGroup = false;\r\n    let groupFooter: Array<TotalGroup>;\r\n    this.columnConfig.forEach(column => {\r\n      if (column.totalType !== undefined && (this.type === TableHelisaType.LOCAL || this.tableHelisaConnectComponent.page <= 1)) {\r\n        this.totalData = new Array<number>(this.columnConfig.length);\r\n        this.showFooter = true;\r\n        this.total.emit({ column, columnConfigurations: this.columnConfig, type: ChangeColumnConfigurationType.TOTAL });\r\n      }\r\n      this.showSearch = this.showSearch || column.searchable;\r\n      haveGroup = haveGroup || column.groupable;\r\n    });\r\n    if (haveGroup) {\r\n      this.rawData = this.rawData.sort((a, b) => {\r\n        let result = 0;\r\n        this.columnConfig.forEach(column => {\r\n          if (result === 0) {\r\n            result = this.compare(a, b);\r\n          }\r\n        });\r\n        return result;\r\n      });\r\n    }\r\n    this.rawData.forEach(row => {\r\n      if (haveGroup && (changeData.length === 0 || this.compare(changeData[changeData.length - 1].data, row) !== 0)) {\r\n        if (groupFooter) {\r\n          changeData.push({ data: groupFooter, rowType: RowType.GROUP_FOOTER });\r\n        }\r\n        changeData.push({ data: row, rowType: RowType.GROUP_TITLE });\r\n        groupFooter = new Array<TotalGroup>(this.columnConfig.length);\r\n      }\r\n      if (haveGroup) { this.addTotalGroup(groupFooter, row); }\r\n      changeData.push({ data: row, rowType: RowType.ROW });\r\n    });\r\n    this.data = new MatTableDataSource<RowData>(changeData);\r\n    if (this.rawData && this.rawData.length && this.indexRowSelect && !this.selectedObject) {\r\n      if (this.indexRowSelect >= this.rawData.length || this.indexRowSelect < 0)\r\n        this.indexRowSelect = 0;\r\n      this.selectRow({ data: this.rawData[this.indexRowSelect], rowType: RowType.ROW }, false);\r\n    }\r\n  }\r\n\r\n  private addTotalGroup(rowTotal: Array<TotalGroup>, row: any) {\r\n    this.columnConfig.forEach((column, index) => {\r\n      if (column.totalType !== undefined) {\r\n        if (rowTotal[index] === undefined) {\r\n          rowTotal[index] = { sum: ColumnConfigUtil.getValue(row, column), count: 1 };\r\n        } else {\r\n          rowTotal[index].sum += ColumnConfigUtil.getValue(row, column);\r\n          rowTotal[index].count++;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private compare(a: any, b: any): number {\r\n    let ws = 0;\r\n    this.columnConfig.forEach(column => {\r\n      if (ws === 0 && column.groupable) {\r\n        if (ColumnConfigUtil.getValue(a, column) < ColumnConfigUtil.getValue(b, column)) { ws = -1; } else if (ColumnConfigUtil.getValue(a, column) > ColumnConfigUtil.getValue(b, column)) { ws = 1; }\r\n      }\r\n    });\r\n    return ws;\r\n  }\r\n\r\n  getGroupDescription(obj: any): string {\r\n    let result = '';\r\n    this.columnConfig.forEach(column => {\r\n      if (column.groupable) {\r\n        result += (result.length ? ' - ' : '') + ColumnConfigUtil.getValue(obj, column);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  isGroupTitle(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_TITLE;\r\n  }\r\n\r\n  isRow(index, item): boolean {\r\n    return item.rowType === RowType.ROW;\r\n  }\r\n\r\n  isGroupFooter(index, item): boolean {\r\n    return item.rowType === RowType.GROUP_FOOTER;\r\n  }\r\n\r\n  footerDisplayedColumns(): Array<string> {\r\n    return this.displayedColumns.map(name => 'footer-' + name);\r\n  }\r\n\r\n  getGroupValue(column: ColumnConfig, data: TotalGroup): number {\r\n    if (column.totalType === TotalType.SUM) { return data.sum; }\r\n    if (column.totalType === TotalType.COUNT) { return data.count; }\r\n    if (column.totalType === TotalType.AVERAGE) { return 1. * data.sum / data.count; }\r\n    return undefined;\r\n  }\r\n\r\n  getValue(obj: any, column: ColumnConfig) {\r\n    return ColumnConfigUtil.getValue(obj, column);\r\n  }\r\n\r\n  getValueTooltip(obj: any, column: ColumnConfig) {\r\n    if (this.showToolTip) {\r\n      return ColumnConfigUtil.getValue(obj, column);\r\n    } else { return null }\r\n  }\r\n\r\n  searchText(text) {\r\n    this.lastSearch = text;\r\n    this.search.emit({ text, columnConfigurations: this.columnConfig });\r\n  }\r\n\r\n  selectRow(row, isUser) {\r\n    this.selectedObject = row.data;\r\n    this.select.emit(this.selectedObject);\r\n    this.selectObject.emit({ value: this.selectedObject, scope: isUser ? EventScope.USER : EventScope.CODE_CALL });\r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n    if (element.scrollHeight - element.scrollTop < 1000) {\r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  private goNextPage() {\r\n    if (!this.tableHelisaConnectComponent.isLastPage && !this.tableHelisaConnectComponent.isUsed) {\r\n      this.tableHelisaConnectComponent.isUsed = true;\r\n      this.nextPage.emit({\r\n        page: this.tableHelisaConnectComponent.nextPage(),\r\n        body: this.tableHelisaConnectComponent.getBody(this.columnConfig, this.lastSearch)\r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: T[]) {\r\n    if (!this.rawData) {\r\n      this.rawData = new Array<T>();\r\n    }\r\n    this.rawData = this.rawData.concat(data);\r\n    this.dataSource = this.rawData;\r\n    this.tableHelisaConnectComponent.isLastPage = data.length === 0;\r\n    this.tableHelisaConnectComponent.isUsed = false;\r\n  }\r\n\r\n  dblClickCell() {\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  selectedCell(element, column: ColumnConfig) {\r\n    this.selectedCells = { column: column, row: element };\r\n    this.selectCell.emit(this.selectedCells);\r\n  }\r\n\r\n  isSelectedCell(row, column: ColumnConfig): boolean {\r\n    if (this.isCellSelection) {\r\n      if (this.selectedCells != null) {\r\n        if (this.selectedCells.column.name === column.name &&\r\n          this.selectedCells.row.data === row.data) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getClassToCell(row, column: ColumnConfig) {\r\n    let classToCell = new Array<string>();\r\n    if (this.configCellStyles) {\r\n      let found = this.configCellStyles.find(c => {\r\n        return c.cellData === this.getValue(row, column);\r\n      });\r\n      if (found) {\r\n        classToCell.push(found.classCell);\r\n      }\r\n    }\r\n    if (column.columnStyle)\r\n      classToCell.push(column.columnStyle);\r\n    return classToCell;\r\n  }\r\n\r\n  getClassToRow(row) {\r\n    const classToRow = new Array<string>();\r\n    if(row === this.selectedObject && !this.isCellSelection)\r\n      classToRow.push('');\r\n    if (this.configRowStylesFromColumn) {\r\n      let found = this.configRowStylesFromColumn.find(c => {\r\n        return c.data === this.getValue(row, c.column);\r\n      });\r\n      if (found) {\r\n        classToRow.push(found.classRow);\r\n      }\r\n    }\r\n    return classToRow;\r\n  }\r\n\r\n  onDrop(event) {\r\n    if(this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex = this.getRowIndex(event.pageY);\r\n      const array: RowData[] = this.dataBeforeDrag.data;\r\n      const rawData = this.rawData;\r\n      moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n      moveItemInArray(rawData, this.indexRowStartDrag, rowIndex);\r\n      this.drop.emit({ value: array[rowIndex].data, order: rowIndex });\r\n      this.rawData = rawData;\r\n      this.data = new MatTableDataSource(array);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  tableKeydown(event: KeyboardEvent) {\r\n    if (!this.isCellSelection) {\r\n      let currentIndex = this.data.data.findIndex(row => row.data === this.selectedObject);\r\n      let newSelection = -10;\r\n      if (event.key === 'ArrowDown') {\r\n        this.scrollCount++;\r\n        this.data.data.forEach((row, index) => {\r\n          if (newSelection == -10 && index > currentIndex && row.rowType == RowType.ROW)\r\n            newSelection = index;\r\n        });\r\n      }\r\n      if (event.key === 'ArrowUp') {\r\n        this.scrollCount--;\r\n        currentIndex = this.data.data.length - currentIndex - 1;\r\n        this.data.data.reverse().forEach((row, index) => {\r\n          if (newSelection == -10 && index > currentIndex && row.rowType == RowType.ROW)\r\n            newSelection = index;\r\n        });\r\n        this.data.data.reverse();\r\n        if (newSelection != -10) {\r\n          newSelection = this.data.data.length - newSelection - 1;\r\n        }\r\n      }\r\n      if (newSelection != -10) {\r\n        this.selectRow(this.data.data[newSelection], true);\r\n      }\r\n      if (Math.abs(this.scrollCount) >= 2)\r\n        this.scrollCount = 0;\r\n      else\r\n        event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emite el evento cuando se da click al boton AddRow\r\n   */\r\n  onAddRow() {\r\n    this.addRow.emit();\r\n  }\r\n\r\n  onBookClicked(selectedObject) {\r\n    this.bookClicked.emit(selectedObject);\r\n  }\r\n\r\n  getHeaderSubtitle(): string[] {\r\n    let x = this.columnConfig.map((column, index) => {\r\n      if (column.visible && column.subtitle != undefined)\r\n        return 'subtitle' + index;\r\n      else\r\n        return null;\r\n    }).filter(data => data != null);\r\n    return x;\r\n  }\r\n\r\n  getColumnsWithTitle(){\r\n    return this.columnConfig.filter(column => \r\n        column.visible && column.title != undefined\r\n    ).map(col => col.name);\r\n  }\r\n\r\n  dragger(event) {\r\n    if (this.isDragged && this.indexRowStartDrag >= 0) {\r\n      const rowIndex = this.getRowIndex(event.pageY);\r\n      if (rowIndex != this.lastIndexRowDrag) {\r\n        this.lastIndexRowDrag = rowIndex;\r\n        //This can have a memory problem with big data\r\n        const array: RowData[] = [...this.dataBeforeDrag.data];\r\n        moveItemInArray(array, this.indexRowStartDrag, rowIndex);\r\n        this.data = new MatTableDataSource(array);\r\n      }\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  startDrag(event) {\r\n    this.indexRowStartDrag = this.getRowIndex(event.pageY);\r\n    this.lastIndexRowDrag = this.indexRowStartDrag;\r\n    this.dataBeforeDrag = this.data;\r\n  }\r\n\r\n  private getRowIndex(pageY) {\r\n    let offsetTop = 0;\r\n    let container = this.containerTable.nativeElement;\r\n    while ((container != null) && (offsetTop == 0)) {\r\n      offsetTop = container.offsetTop;\r\n      container = container.parentElement;\r\n    }\r\n    let rowIndex = -1;\r\n    const rows: HTMLCollection = this.matTableElement.nativeElement.children[1].children;\r\n    for (let i = 0; i < rows.length; i++){\r\n      const row: HTMLElement = (rows[i] as HTMLElement);\r\n      if (pageY - offsetTop > row.offsetTop - this.containerTable.nativeElement.scrollTop)\r\n        rowIndex = i;\r\n    }\r\n    if (rowIndex < 0) rowIndex = 0;\r\n    return rowIndex;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\nimport * as moment_ from 'moment';\r\nconst moment = moment_;\r\n\r\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material';\r\nimport { filter, tap } from 'rxjs/operators';\r\n\r\n\r\nexport enum TypeCalendarEnum{\r\n  NORMAL = 'norma',\r\n  MONTH_YEAR = 'mounth-year'\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'hel-date-helisa',\r\n  templateUrl: './date-helisa.component.html',\r\n  styleUrls: ['./date-helisa.component.css'],\r\n})\r\nexport class DateHelisaComponent implements OnInit {\r\n  \r\n\r\n  @Input() floatLabel: 'never' | 'always' | 'auto' = 'never';\r\n  @Input() dateFormControl: FormControl = new FormControl('');\r\n  private date:Date = new Date();\r\n\r\n  /**\r\n   * Formato de fecha.\r\n   * Los formatos validos son aquellos que maneja la libreria momentjs  \r\n   * https://momentjs.com/docs/#/parsing/string-format/\r\n   */\r\n  @Input() dateFormat = 'DD/MM/YYYY';\r\n  @Input() errorMessage = 'La fecha no concuerda con el formato ';\r\n  @Input() placeholder = this.dateFormat;\r\n\r\n  /**\r\n   * Si este valor es diferente a TypeCalendarEnum.NORMAL no\r\n   * serÃ¡ tomado en cuenta\r\n   */\r\n  @Input() typeCalendar:TypeCalendarEnum = TypeCalendarEnum.NORMAL;\r\n  \r\n\r\n  dateToVisualize:FormControl;\r\n\r\n  /**\r\n   * Para evitar nuevos eventos miestras se realiza el parseo\r\n   */\r\n  private isFromInputEvent:boolean= false;\r\n\r\n  /**\r\n   * Verificar si el formato es valido\r\n   */\r\n  invalidFormat:boolean = false;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {            \r\n    this.dateToVisualize= new FormControl('',this.dateFormControl.validator)\r\n    this.formHandler();\r\n    \r\n    if(this.typeCalendar == TypeCalendarEnum.MONTH_YEAR){\r\n      this.dateFormat = 'MM/YYYY'\r\n      this.placeholder = this.dateFormat;\r\n    }        \r\n    \r\n    /**\r\n     * establecer valor por defecto de la fecha\r\n     */\r\n    let incommingDate = moment(this.dateFormControl.value,this.dateFormat).format(this.dateFormat);\r\n    if(this.dateFormControl.value != '' && incommingDate != 'Invalid date'){\r\n      this.dateToVisualize.setValue(incommingDate);\r\n    }\r\n    \r\n  }\r\n\r\n  get typeCalendarEnum(){\r\n    return TypeCalendarEnum;\r\n  }\r\n\r\n  /**\r\n   * Determina como se debe inicializar la visualizacion del calendar\r\n   */\r\n  getStartView():string{\r\n    //multi-year\r\n    if(this.typeCalendar == this.typeCalendarEnum.MONTH_YEAR){\r\n      return 'multi-year';\r\n    }else{\r\n      return 'month';\r\n    }    \r\n  }\r\n\r\n  private formHandler(){   \r\n    this.dateToVisualize.valueChanges\r\n    .pipe(\r\n      tap(date => {        \r\n        if(date.length > this.dateFormat.length){\r\n          this.invalidFormat = true\r\n        }else{this.invalidFormat = false}\r\n      }),\r\n      filter(date => date.length == this.dateFormat.length)\r\n    )    \r\n    .subscribe(date=>{         \r\n      this.invalidFormat = false;\r\n      let isValid = moment(date,this.dateFormat,true).isValid()\r\n      let result = moment(date,this.dateFormat).format('YYYY-MM-DD');\r\n      \r\n      \r\n      if(!!result && (result == 'Invalid date' || !isValid)){\r\n        this.invalidFormat = true;\r\n        return\r\n      }\r\n\r\n      if(!!result ){        \r\n        if(!this.isFromInputEvent){          \r\n          this.isFromInputEvent = true;\r\n          let subString:string[] = result.split('-');\r\n\r\n          let year = parseFloat(subString[0])\r\n          let month = parseFloat(subString[1])\r\n          let day = parseFloat(subString[2])\r\n\r\n          this.date.setFullYear(year)\r\n          this.date.setDate(day)\r\n          this.date.setMonth(month - 1) // -1 por que los meses se toman como los indices en un array\r\n          \r\n          /** cuando es de tipo MOUNTH_YEAR retorna el ultimo dia del mes seleccionado */\r\n          if(this.typeCalendar == TypeCalendarEnum.MONTH_YEAR){\r\n            this.date = moment(this.date).endOf('month').toDate();\r\n          }\r\n\r\n          this.dateToVisualize.setValue(moment(this.date,'YYYY-MM-DD').format(this.dateFormat))\r\n          this.dateFormControl.setValue(this.date)          \r\n          \r\n          this.isFromInputEvent = false;\r\n        }else{\r\n          setTimeout(() => {\r\n            this.isFromInputEvent = false\r\n          }, 1500);\r\n        }\r\n        \r\n      }\r\n    })\r\n\r\n\r\n    this.dateFormControl.valueChanges\r\n    .subscribe(date=>{\r\n      let incommingDate = moment(date,this.dateFormat).format(this.dateFormat);\r\n      if(this.dateFormControl.value != '' && incommingDate != 'Invalid date'){\r\n        this.dateToVisualize.setValue(incommingDate);\r\n      }      \r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Evento que se dispara luego seleccionar un mes\r\n   * @param chosenMonthDate \r\n   * @param datepicker \r\n   */\r\n  monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>){    \r\n    \r\n    if(this.typeCalendar == TypeCalendarEnum.MONTH_YEAR){\r\n      datepicker.close();\r\n      let date = moment(chosenMonthDate).endOf('month').toDate();\r\n  \r\n      this.dateToVisualize.setValue(moment(date,'YYYY-MM-DD').format(this.dateFormat))\r\n      this.dateFormControl.setValue(date);\r\n    }   \r\n  }\r\n\r\n  /**\r\n   * Evento desde el control touch del calendar\r\n   * @param type \r\n   * @param event \r\n   */\r\n  dateChange(type: string, event: MatDatepickerInputEvent<Date>) {\r\n        \r\n    this.dateToVisualize.setValue(moment(event.value,'YYYY-MM-DD').format(this.dateFormat))\r\n    this.dateFormControl.setValue(event.value);\r\n  }\r\n\r\n  getErrorMessage():string{\r\n    return this.errorMessage+ this.dateFormat\r\n  }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Subscriber } from 'rxjs';\r\nimport { Node } from './node';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeHelisaService {\r\n\r\n    // Observable string sources\r\n    private emitNodeSelected = new BehaviorSubject<number | string>(1);\r\n    // Observable string streams\r\n    nodeSelected = this.emitNodeSelected.asObservable();\r\n    // Service message commands\r\n    changeNodeSelected(idResidentialArea: number | string) {\r\n        this.emitNodeSelected.next(idResidentialArea);\r\n    }\r\n\r\n\r\n\r\n    // Observable string sources\r\n    private emitDataSource = new BehaviorSubject<Node>(undefined);    \r\n    // Observable string streams\r\n    dataSourceObservable = this.emitDataSource.asObservable();\r\n    // Service message commands\r\n    changeDataSource(data:Node) {\r\n        this.emitDataSource.next(data);\r\n    }\r\n\r\n\r\n      \r\n    // Expand node observable\r\n      private emitExpandAllNodes = new BehaviorSubject<boolean>(null);          \r\n      nodeExpand = this.emitExpandAllNodes.asObservable();      \r\n      expandAllNodes(expand:boolean) {\r\n          this.emitExpandAllNodes.next(expand);\r\n      }\r\n\r\n\r\n      // Collapse node observable\r\n      private emitCollapseAllNodes = new BehaviorSubject<boolean>(null);          \r\n      nodeCollapse = this.emitCollapseAllNodes.asObservable();      \r\n      collapseAllNodes(collapse:boolean) {\r\n          this.emitCollapseAllNodes.next(collapse);\r\n      }\r\n\r\n\r\n      private emitRefreshTree = new Subject<void>();\r\n      refreshTreeObservable = this.emitRefreshTree.asObservable();\r\n      refreshTree(){\r\n          this.emitRefreshTree.next();\r\n      }\r\n\r\n      private emitRefreshTreeWithPagination = new Subject<void>();\r\n      refreshTreeWithPaginationObservable = this.emitRefreshTreeWithPagination.asObservable();\r\n      refreshTreeWithPagination(){\r\n          this.emitRefreshTreeWithPagination.next();\r\n      }\r\n\r\n\r\n\r\n      private emitExpandOneNode = new Subject<Node>();\r\n      expandOneNodeObservable = this.emitExpandOneNode.asObservable();\r\n      expandOneNode(node:Node){\r\n        this.emitExpandOneNode.next(node);\r\n      }\r\n\r\n      private emitCollapseOneNode = new Subject<Node>();\r\n      collapseOneNodeObservable = this.emitCollapseOneNode.asObservable();\r\n      collapseOneNode(node:Node){\r\n        this.emitCollapseOneNode.next(node);\r\n      }\r\n\r\n    constructor(){\r\n        \r\n    }\r\n  \r\n}\r\n","export class TreeHelisaConnect<T> {\r\n    page: number;\r\n    isLastPage: boolean;\r\n    isUsed: boolean;\r\n  \r\n    constructor() {\r\n      this.page = 0;\r\n      this.isLastPage = false;\r\n      this.isUsed = false;\r\n    }          \r\n  \r\n    nextPage() {\r\n      return this.page = this.page + 1;\r\n    }\r\n  }","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef } from '@angular/core';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource, MatTree } from '@angular/material';\r\nimport { Node } from './node';\r\nimport { TreeHelisaService } from './tree-helisa.service';\r\nimport { Router } from '@angular/router';\r\nimport * as _ from 'lodash';\r\nimport { TreeHelisaConnect } from './tree-helisa-connect';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n\r\n\r\nexport interface RequestTreeHelisa {\r\n  page: number;  \r\n}\r\n\r\n@Component({\r\n  selector: 'hel-tree',\r\n  templateUrl: './tree-helisa.component.html',\r\n  styleUrls: ['./tree-helisa.component.sass'],\r\n  host:{\r\n    '(document:keyup)': 'onKeyDown($event)'\r\n  }\r\n})\r\nexport class TreeHelisaComponent implements OnInit,AfterViewInit {\r\n\r\n  //#region  ====== Variables =============\r\n  private treeHelisaConnect: TreeHelisaConnect<Node>;\r\n  formEdit:FormControl;\r\n  @ViewChild('tree') tree:MatTree<any>;\r\n  private selectedOptions = new Map<any, any>();\r\n  /**\r\n   * Datos del Arbol\r\n   */\r\n  @Input() data:Node;\r\n\r\n  \r\n  /**\r\n   * Establece si se mostraran las opciones de \r\n   * Creacion, ediciÃ³n y eliminacion del nodo\r\n   */\r\n  @Input() showOptionsNode:boolean = true; \r\n  \r\n\r\n  /**\r\n   * Retorna el id del nodo removido\r\n   */\r\n  @Output() removed = new EventEmitter<number | string>();\r\n\r\n  /**\r\n   * Retorna un nodo editado\r\n   */\r\n  @Output() edited = new EventEmitter<Node>();\r\n\r\n  /**\r\n   * Retorna un nodo sin id del nodo , pero si con el parent\r\n   * para conocer a cual fue aÃ±adido\r\n   */\r\n  @Output() added = new EventEmitter<Node>();\r\n  @Output() collapseParent = new EventEmitter<boolean>();\r\n  @Output() rangeScrolled = new EventEmitter<RequestTreeHelisa>();\r\n  @Output() nodeSelected = new EventEmitter<number | string>();\r\n  @Output() dobleClick = new EventEmitter<number | string>();\r\n  @Output() keypressDelete = new EventEmitter<number | string | null>();\r\n  @Output() keypressInsert = new EventEmitter<number | string | null>();\r\n  @Output() checkedOptionNode = new EventEmitter<number | string | null>();\r\n  @Output() uncheckedOptionNode = new EventEmitter<number | string | null>();\r\n  \r\n  treeControl = new NestedTreeControl<Node>(node => node.children);\r\n  dataSource = new MatTreeNestedDataSource<Node>();\r\n\r\n\r\n  isSingleClick: Boolean = true;  \r\n  currentNode: Node = null;\r\n\r\n  //#endregion ====== Variables ========\r\n\r\n  constructor(private treeHelisaService:TreeHelisaService,\r\n    private router:Router,\r\n    private elementRef:ElementRef) {    \r\n    //cargar datos pasados por el @Input\r\n    if (!!this.data) {      \r\n      let data = this.data;\r\n      this.data = null;\r\n      this.receivePage(data.children);\r\n    } else {\r\n      this.dataSource.data = [];     \r\n      this.treeControl.dataNodes = []; \r\n    }\r\n    \r\n  }\r\n\r\n  \r\n\r\n  ngOnInit() {     \r\n    // si se cargan datos por medio del servicio\r\n    this.treeHelisaService.dataSourceObservable    \r\n    .subscribe((res) => {         \r\n      if(!!res && !!res.children){              \r\n        this.receivePage(res.children)\r\n      }else{\r\n        this.dataSource.data = [];\r\n        this.treeControl.dataNodes = [];\r\n      }    \r\n    });\r\n\r\n    // Observable, si cambia el nodo seleccionado por medio del servicio\r\n    this.treeHelisaService.nodeSelected\r\n      .subscribe((res)=>{\r\n        if(!!this.data && !!this.data.children)\r\n        this.selectNode(this.data,res);\r\n      })\r\n\r\n    \r\n      this.treeHelisaService.refreshTreeObservable\r\n      .subscribe(res=>{\r\n        this.refreshTree();\r\n      })\r\n      \r\n      this.treeHelisaService.refreshTreeWithPaginationObservable\r\n      .subscribe(res=>{\r\n        this.refreshTreeWithPagination();\r\n      })    \r\n  }\r\n\r\n  ngAfterViewInit() {     \r\n    this.treeHelisaService.nodeExpand.subscribe(res=>{\r\n      if(res != null){\r\n        if(res){\r\n          this.tree.treeControl.expandAll();\r\n        }\r\n      }\r\n    })\r\n\r\n    this.treeHelisaService.nodeCollapse.subscribe(res=>{\r\n      if(res != null){\r\n        if(res){\r\n          this.tree.treeControl.collapseAll();\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n    this.treeHelisaService.expandOneNodeObservable\r\n      .subscribe(res => {        \r\n        if (res != undefined) {          \r\n          this.treeControl.expand(res);          \r\n        }\r\n      })\r\n\r\n      this.treeHelisaService.collapseOneNodeObservable\r\n      .subscribe(res => {        \r\n        if (res != undefined) {\r\n          this.treeControl.collapse(res);\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n  //#region  ====== Events ===========\r\n  onRedirect(node:Node){\r\n\r\n    this.isSingleClick = true;\r\n        setTimeout(()=>{\r\n            if(this.isSingleClick){\r\n              \r\n              this.selectNode(this.data,node.id);    \r\n\r\n              // if(!!node && !node.children){\r\n              if(!!node){\r\n                this.nodeSelected.emit(node.id);\r\n                this.currentNode = node;\r\n              }\r\n            }\r\n         },350)   \r\n  }\r\n\r\n  onScroll(event) {\r\n    const element: HTMLDivElement = event.target;\r\n\r\n    if ((element.offsetHeight + element.scrollTop) >= element.scrollHeight) {      \r\n      this.goNextPage();\r\n    }\r\n  }\r\n\r\n  onEdit(node:Node){  \r\n    node.isEditable = true;\r\n  }\r\n\r\n  onAdd(node:Node){\r\n    // si no tiene hijos instanciar el array\r\n    if(!node.children){\r\n      node.children = [];\r\n    }\r\n    node.children.push(\r\n      {\r\n        id: null,\r\n        name: \"\",       \r\n        isSelected: false,\r\n        parent : node,\r\n        isEditable : true\r\n      }\r\n    );     \r\n    this.refreshTree();\r\n  }\r\n\r\n  onDelete(node:Node){ \r\n    // Remueve el nodo utilizando la libreria de lodash   \r\n    _.remove(node.parent.children, node);\r\n    \r\n    this.refreshTree();\r\n    this.removed.emit(node.id);\r\n  }\r\n\r\n  onEdited(node:Node,value:any){\r\n    \r\n      node.name = value;\r\n\r\n      if(node.id == null && node.name == \"\"){              \r\n        _.remove(node.parent.children, node);\r\n        this.refreshTree();\r\n      }\r\n      else if(node.id && node.id != null && node.name.trim() !== \"\"){\r\n        this.edited.emit(node);\r\n        node.isEditable = false;\r\n      }else if(!!node.id && node.id == null && node.name.trim() !== \"\"){\r\n        this.added.emit(node);\r\n        node.isEditable = false;\r\n      }         \r\n  }\r\n\r\n  onCancel(node:Node,value:string){\r\n    // Si no tiene id por ser un nuevo item, lo elimina\r\n    if(node.id == null){\r\n      _.remove(node.parent.children, node);\r\n      this.refreshTree();  \r\n    }\r\n\r\n    node.isEditable = false; \r\n  }\r\n\r\n  onDblClick(node:Node){\r\n    this.isSingleClick = false;\r\n    this.dobleClick.emit(node.id);\r\n  }\r\n\r\n  onKeyDown(event:KeyboardEvent){      \r\n    switch (event.key) {\r\n      case 'Delete':\r\n        this.keypressDelete.emit((!!this.currentNode && this.currentNode.id)?this.currentNode.id:null)\r\n        break;\r\n      case 'Insert':\r\n        this.keypressInsert.emit((!!this.currentNode && this.currentNode.id)?this.currentNode.id:null)\r\n        break;\r\n      case 'ArrowDown':        \r\n        this.moveDownIntoTree();\r\n        break;\r\n      case 'ArrowUp':          \r\n          this.moveUpIntoTree();\r\n        break;     \r\n    }\r\n    \r\n  }\r\n\r\n  //#endregion ======= Events ========\r\n\r\n\r\n\r\n  //#region  ======== Metodos =============\r\n\r\n  private moveUpIntoTree(){\r\n    if(!!this.data){\r\n      // si aun no hay ningun node seleccionado selecciona el primero\r\n      if(this.currentNode == null){\r\n        this.selectNode(this.data,this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      }else{\r\n        if(!!this.currentNode.parent && this.currentNode.id != null){\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          let index = this.currentNode.parent.children.indexOf(this.currentNode);\r\n          \r\n          if(this.currentNode.parent.id == null && index == 0){ \r\n            return 0;\r\n          }else{// si tiene nodos al mismo nivel salta al nodo anterior\r\n            if (index != undefined && index == 0) {\r\n              this.currentNode = this.currentNode.parent;\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } else { // si no tiene nodos al mismo nivel salta al nodo padre\r\n              this.currentNode = this.currentNode.parent.children[index - 1];\r\n              this.selectNode(this.data, this.currentNode.id);\r\n              if (!!this.currentNode.children && this.currentNode.children.length > 0) {\r\n                this.treeHelisaService.expandOneNode(this.currentNode);\r\n              }\r\n            } \r\n          }         \r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveDownIntoTree(){      \r\n    if(!!this.data){\r\n      if(this.currentNode == null){\r\n        this.selectNode(this.data,this.data.children[0].id);\r\n        this.currentNode = this.data.children[0];\r\n        if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n          this.treeHelisaService.expandOneNode(this.currentNode);\r\n        }\r\n      }else{\r\n        if(!!this.currentNode){\r\n          // obtiene el indice del nodo seleccionado actualmente\r\n          let index = (!!this.currentNode && !!this.currentNode.parent)?this.currentNode.parent.children.indexOf(this.currentNode): null;\r\n          \r\n          // si tiene childrens pasa al primer children\r\n          if(!!this.currentNode.children  &&\r\n            this.currentNode.children.length > 0){\r\n\r\n            this.currentNode = this.currentNode.children[0];\r\n            this.selectNode(this.data,this.currentNode.id);\r\n            if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n          // Si es el ultimo nodo del array pasa al nodo hermano del padre (tio) hacia abajo\r\n          else if(index != undefined &&  \r\n            index == this.currentNode.parent.children.length - 1 &&\r\n            this.currentNode.parent.parent != null &&\r\n            this.currentNode.parent.parent.children != null &&\r\n            this.currentNode.parent.parent.children.length > 0){\r\n\r\n            let indexOfParent = this.currentNode.parent.parent.children.indexOf(this.currentNode.parent); \r\n            this.currentNode = (this.currentNode.parent.parent.children[indexOfParent + 1] == undefined)? this.currentNode : this.currentNode.parent.parent.children[indexOfParent + 1];\r\n\r\n            this.selectNode(this.data,this.currentNode.id);\r\n            if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }else{ // si no tiene nodos al mismo nivel salta al siguiente hacia abajo\r\n            this.currentNode = this.currentNode.parent.children[index + 1];\r\n            this.selectNode(this.data,this.currentNode.id);\r\n            if(!!this.currentNode.children && this.currentNode.children.length > 0){\r\n              this.treeHelisaService.expandOneNode(this.currentNode);\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el nodo tiene hijos\r\n   */\r\n  hasChild = (_: number, node: Node) => !!node.children && node.children.length > 0;\r\n\r\n  /**\r\n   * Obtiene la descripcion completa del nodo\r\n   * @example Nodo padre,nodo hijo,nodo nieto\r\n   * @param node Debe tener todos los parent llenos hacia arriba\r\n   */\r\n  public static getDescription(node:Node):string{\r\n      let result:string[]=[node.name];        \r\n      let concat:string=\"\";\r\n\r\n      if(node.parent){          \r\n        result.push(this.getDescription(node.parent))\r\n      }                \r\n\r\n\r\n      if(result.length == 1)\r\n          return node.name;\r\n\r\n      result = result.reverse();\r\n\r\n      for (let i = 0; i < result.length; i++) {            \r\n          let element = result[i];\r\n          concat = concat + element + ((i == result.length-1)?\"\":\",\");                \r\n      }\r\n              \r\n      return concat;\r\n  }\r\n\r\n\r\n  /**\r\n   * Actualiza el arbol borrando toda la data , solo cuando no se utiliza paginacion\r\n   */\r\n  private refreshTree(){\r\n    this.data = null;\r\n    let _data = this.dataSource.data; \r\n    this.dataSource.data = null;\r\n    this.dataSource.data = _data;\r\n    this.treeControl.dataNodes = _data;\r\n  }\r\n\r\n  /**\r\n   * Actualiza el arbol cuando se utiliza la paginacion (Cuando no , utilice el metodo refreshTree())    \r\n   */\r\n  private refreshTreeWithPagination(){    \r\n    let _data = this.dataSource.data; \r\n    this.dataSource.data = null;\r\n    this.dataSource.data = _data;\r\n    this.treeControl.dataNodes = _data;\r\n  }\r\n\r\n\r\n\r\n\r\n  private goNextPage() {\r\n    if (!this.treeHelisaConnect.isLastPage && !this.treeHelisaConnect.isUsed) {\r\n      this.treeHelisaConnect.isUsed = true;\r\n      this.rangeScrolled.emit({\r\n        page: this.treeHelisaConnect.nextPage()              \r\n      });\r\n    }\r\n  }\r\n\r\n  private receivePage(data: Node[]) {    \r\n    if(!this.data){ this.data = {id:null,name:\"root\",isSelected:false}}\r\n    if (!this.data.children) { this.data.children = new Array<Node>(); this.treeHelisaConnect = new TreeHelisaConnect<Node>(); }    \r\n    this.data.children = this.data.children.concat(data);\r\n    this.data.children.forEach(node=>{\r\n      this.fillParent(node,this.data);\r\n    })\r\n\r\n    \r\n    this.data.children = this.reorderByOrderIndex(this.data.children);\r\n    \r\n    this.dataSource.data = this.data.children;    \r\n    this.treeControl.dataNodes = this.data.children;\r\n    this.treeHelisaConnect.isLastPage = data.length === 0;\r\n    this.treeHelisaConnect.isUsed = false;\r\n  }\r\n\r\n  /**\r\n   * Llenan el campo parent de todos los nodos hijos\r\n   * @param node \r\n   * @param parent \r\n   */\r\n  private fillParent(node:Node,parent:Node){\r\n\r\n    node.parent = parent;\r\n    if(node.children && node.children.length > 0){\r\n      node.children.forEach(item=>{\r\n        this.fillParent(item,node);   \r\n      })      \r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * coloca como true del isSelected del nodo que concuerde con el id\r\n   * @param node \r\n   * @param id \r\n   */\r\n  private selectNode(node:Node,id:number|string){ \r\n      \r\n      this.upSelectNode(node)\r\n   \r\n      if(node == undefined || node.id == undefined){\r\n        return null;\r\n      }\r\n      if(node.id == id){\r\n        node.isSelected = true\r\n        this.expandAllParents(node);\r\n        return node;\r\n      }else if (node.children != null){\r\n           var i;\r\n           var result = null;\r\n           for(i=0; result == null && i < node.children.length; i++){\r\n                result = this.selectNode(node.children[i], id);                \r\n           }\r\n           return result;\r\n      }\r\n      return null; \r\n  }\r\n\r\n  private expandAllParents(node:Node){\r\n    if(!!node && !!node.parent){\r\n      this.treeHelisaService.expandOneNode(node.parent);\r\n      this.expandAllParents(node.parent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina el isSelected de todos los nodos\r\n   * @param node \r\n   */\r\n  private upSelectNode(node: Node) {\r\n    if (!!node && node.isSelected != undefined) {\r\n      node.isSelected = false;\r\n      if (!!node.children)\r\n        for (var i = 0; i < node.children.length; i++) {\r\n          this.upSelectNode(node.children[i]);\r\n        }\r\n    }\r\n  }\r\n\r\n  getClassNode(node: Node): string[]{\r\n    let classNode = [];\r\n    if(node.isSelected) {\r\n      classNode.push(\"isSelected\");\r\n    }\r\n    if(node.classNode){\r\n      classNode.push(node.classNode);\r\n    }\r\n    return classNode;\r\n  }\r\n\r\n  onEditMode(node, editMode) {\r\n    this.getSelectedOptions(node).editMode = editMode;\r\n  }\r\n\r\n  onSelectOption(event, node) {\r\n    node.isCheckedOption = event.source.selected;\r\n    if (node.isCheckedOption)\r\n      this.checkedOptionNode.emit(node.id);\r\n    else\r\n      this.uncheckedOptionNode.emit(node.id);\r\n  }\r\n\r\n  getSelectedOptions(node: Node): any {\r\n    if (this.selectedOptions.has(node.id))\r\n      this.reloadSelectedOptions(node, this.selectedOptions.get(node.id).editMode);\r\n    else\r\n      this.reloadSelectedOptions(node, false);\r\n    return this.selectedOptions.get(node.id);\r\n  }\r\n\r\n  private reloadSelectedOptions(node: Node, editMode: boolean) {\r\n    const array = new Array();\r\n    node.options.forEach(option => {\r\n      if (option.isCheckedOption)\r\n        array.push(option.id);\r\n    });\r\n    const obj = {formControl: new FormControl(array), editMode: editMode};\r\n    this.selectedOptions.set(node.id, obj);\r\n  }\r\n\r\n  /**\r\n   * Retorna el primer Node que encuentre segun el id enviado o null si no hay ninguno\r\n   * @param id  number | string \r\n   * @returns Node o null si no hay un nodo con ese id\r\n   */\r\n  getNodeById(id: number | string) : Node{\r\n    let queue: Node[] = [...this.dataSource.data];\r\n    while(queue.length > 0){\r\n      let curr = queue.shift();\r\n      if(curr.id === id){\r\n        return curr;\r\n      } else {\r\n        if(!!curr.children)\r\n          queue.push(...curr.children)\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  reorderByOrderIndex(node:Node[]):Node[]{\r\n    if(!!node && node.length > 0){\r\n      \r\n      try {\r\n        node = _.orderBy(node, x=> x.orderIndex ,['asc'])        \r\n        node.forEach(element => {\r\n          if(!!element.children && element != null){\r\n            element.children = this.reorderByOrderIndex(element.children)\r\n          }\r\n        });\r\n        return node;\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    \r\n    \r\n  }\r\n\r\n  //#endregion ====== Metodos ============\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { OptionAutocompleteHelisa } from './autocomplete-helisa.component';\r\n\r\n@Injectable()\r\nexport class AutocompleteHelisaService<T> {\r\n\r\n  private emitChangeSource = new BehaviorSubject<Array<OptionAutocompleteHelisa<T>>>([]);\r\n  public dataSource$ = this.emitChangeSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  setDataSource(options: Array<OptionAutocompleteHelisa<T>>) {\r\n    this.emitChangeSource.next(options);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { map, startWith, throttleTime,debounceTime } from 'rxjs/operators';\r\nimport { AutocompleteHelisaService } from './autocomplete-helisa.component.service';\r\n\r\nexport interface OptionAutocompleteHelisa<T> {\r\n  value: T;\r\n  displayText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'hel-autocomplete',\r\n  templateUrl: './autocomplete-helisa.component.html',\r\n  styleUrls: ['./autocomplete-helisa.component.css'],\r\n  providers: [AutocompleteHelisaService]\r\n})\r\nexport class AutocompleteHelisaComponent<T> implements OnInit {\r\n\r\n  @Input() myControl = new FormControl();\r\n  @Input() options = new Array<OptionAutocompleteHelisa<T>>();\r\n  filteredOptions: Observable<OptionAutocompleteHelisa<T>[]>;\r\n  selectedValue: OptionAutocompleteHelisa<T>;\r\n  @Output() onSelectedValue: EventEmitter<T> = new EventEmitter<T>();\r\n  @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\r\n  @Input() isRemote = false;\r\n  isLoading = false;\r\n\r\n    \r\n  onScrollObservable:Subject<any> = new Subject<any>();\r\n\r\n  constructor(private autocompleteHelisaService: AutocompleteHelisaService<T>) {\r\n  }\r\n\r\n  ngOnInit() {  \r\n\r\n    this.onScrollObservable.asObservable()\r\n    .pipe(\r\n      debounceTime(500),\r\n      throttleTime(500)          \r\n    )\r\n    .subscribe((data)=>{\r\n      this.nextPage.emit()\r\n    })\r\n\r\n    if (this.isRemote) {\r\n      this.autocompleteHelisaService.dataSource$.subscribe(data => {\r\n        setTimeout(() => {\r\n          this.options = data;\r\n          this.filteredOptions = of<OptionAutocompleteHelisa<T>[]>(this.options);  \r\n        });        \r\n      });\r\n    }\r\n\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map(x => this._checkRegex(x)),\r\n      map(value => this._filter(value))\r\n    );\r\n\r\n  }\r\n\r\n  displayFn(option?: OptionAutocompleteHelisa<T>): string | undefined {    \r\n    return option ? option.displayText : undefined;\r\n  }\r\n\r\n  getService(): AutocompleteHelisaService<T> {\r\n    return this.autocompleteHelisaService;\r\n  }\r\n\r\n\r\n  /** Elimina caracteres extraÃ±os */\r\n  private _checkRegex(value:string): string{    \r\n    value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g,'')\r\n    return value;\r\n  }\r\n\r\n  private _filter(value): OptionAutocompleteHelisa<T>[] {    \r\n    if (!(value instanceof Object)) {      \r\n      if (!this.isRemote) {\r\n        const filterValue = value.toLowerCase().split(' ');\r\n        return this.options.filter(option => {\r\n          let ws = true;\r\n          filterValue.forEach(text => ws = ws && option.displayText.toLowerCase().indexOf(text) >= 0);\r\n          return ws;\r\n        }).splice(0, 5);\r\n      } else {        \r\n        return this.options;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onSelected(event) {    \r\n    this.selectedValue = event.option.value;\r\n    this.onSelectedValue.emit(this.selectedValue.value);\r\n  }\r\n\r\n  getNextPage(event){\r\n    this.onScrollObservable.next(event)        \r\n  }  \r\n}\r\n","import { Directive, EventEmitter, Input, Output} from '@angular/core';\r\nimport { MatAutocomplete} from '@angular/material';\r\nimport { takeUntil, tap} from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\nexport interface IAutoCompleteScrollEvent {\r\n  autoComplete: MatAutocomplete;\r\n  scrollEvent: Event;\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'mat-autocomplete[optionsScroll]'\r\n})\r\nexport class OptionsScrollDirective  {\r\n\r\n  /**\r\n   * This value would different depends of styles\r\n   */\r\n  @Input() thresholdPercent = .9;\r\n  @Output('optionsScroll') scroll = new EventEmitter<IAutoCompleteScrollEvent>();\r\n  _onDestroy = new Subject();\r\n    \r\n\r\n  constructor(public autoComplete: MatAutocomplete) {\r\n    this.autoComplete.opened.pipe(\r\n      tap(() => {\r\n        // Note: When autocomplete raises opened, panel is not yet created (by Overlay)\r\n        // Note: The panel will be available on next tick\r\n        // Note: The panel wil NOT open if there are no options to display\r\n        setTimeout(() => {\r\n          // Note: remove listner just for safety, in case the close event is skipped.\r\n          this.removeScrollEventListener();\r\n          if(!!this.autoComplete &&\r\n            !!this.autoComplete.panel &&\r\n            !!this.autoComplete.panel.nativeElement){\r\n              this.autoComplete.panel.nativeElement\r\n                .addEventListener('scroll', this.onScroll.bind(this),false)\r\n            }\r\n        });\r\n      }),\r\n      takeUntil(this._onDestroy)).subscribe();\r\n\r\n    this.autoComplete.closed.pipe(\r\n      tap(() => this.removeScrollEventListener()),\r\n      takeUntil(this._onDestroy)).subscribe();\r\n  }\r\n\r\n  private removeScrollEventListener() {\r\n    if(!!this.autoComplete &&\r\n      !!this.autoComplete.panel &&\r\n      !!this.autoComplete.panel.nativeElement){\r\n    this.autoComplete.panel.nativeElement\r\n      .removeEventListener('scroll', this.onScroll);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    this.removeScrollEventListener();\r\n  }\r\n\r\n  lastScrollTop  = 0;\r\n  onScroll(event: any) {\r\n\r\n    var st = event.target.pageYOffset || event.target.scrollTop; // Credits: how to know if it's down or up scroll \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\r\n    if (st > this.lastScrollTop){\r\n       // downscroll code       \r\n       if (this.thresholdPercent === undefined) {\r\n        this.scroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n      } else {                    \r\n        \r\n        const threshold = this.thresholdPercent * 100 * event.target.scrollHeight / 100;\r\n        const current = event.target.scrollTop + event.target.clientHeight;\r\n        //console.log(`scroll ${current}, threshold: ${threshold}`)     \r\n        if (current > threshold) { \r\n          //console.log('load next page');        \r\n          this.scroll.next({ autoComplete: this.autoComplete, scrollEvent: event });\r\n        }                  \r\n      }\r\n    } else {\r\n       // upscroll code       \r\n    }\r\n    this.lastScrollTop = st <= 0 ? 0 : st;  \r\n  }\r\n  \r\n}","import { Directive, Input, HostListener, ElementRef } from '@angular/core';\r\nimport { MatTooltip } from '@angular/material';\r\n\r\n@Directive({\r\n    selector: '[helTooltip]',\r\n    providers: [MatTooltip]\r\n})\r\nexport class HelTooltipDirective { \r\n\r\n    tooltip: MatTooltip;\r\n\r\n    /**\r\n     * Mensaje a mostrar\r\n     *  */    \r\n    @Input('helTooltip') message: string;\r\n\r\n    /**\r\n     * Tiempo antes de ocultarla el mensaje\r\n     */\r\n    @Input('hideDelay') hideDelay: number = 600;\r\n\r\n    /**\r\n     * Tiempo antes de mostra el mensaje\r\n     */\r\n    @Input('showDelay') showDelay: number = 500;\r\n    \r\n\r\n  \r\n    constructor(tooltip: MatTooltip,private _elemRef: ElementRef) {\r\n      this.tooltip = tooltip;\r\n    }\r\n  \r\n    @HostListener('mouseover') mouseover() {           \r\n      let currentContent:string = this._elemRef.nativeElement.innerText;      \r\n    \r\n      if(!!currentContent && !!this.message){\r\n        if((currentContent.toUpperCase() != this.message.toString().toUpperCase()) || this.isEllipsisActive(this._elemRef.nativeElement)){\r\n          this.tooltip.message = this.message;\r\n        }\r\n      }\r\n                        \r\n      this.tooltip.showDelay =  this.showDelay;\r\n      this.tooltip.hideDelay = this.hideDelay;   \r\n    }\r\n\r\n\r\n    private isEllipsisActive(e) {\r\n      return (e.offsetWidth < e.scrollWidth);\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { InputWithButtonComponent } from './components/input-with-button/input-with-button.component';\r\nimport { ToastHelisaComponent } from './components/toast-helisa/toast-helisa.component';\r\n\r\n\r\nimport {MatAutocompleteModule} from '@angular/material';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatSidenavModule, MatGridListModule,  MatMenuModule, MatRadioModule, MatButtonModule, MatCheckboxModule, MatInputModule, MatOptionModule, MatSnackBarModule, MatTableModule, MatPaginatorModule, MatSortModule } from '@angular/material';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from \"@angular/material\";\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AlertHelisaComponent } from './components/alert-helisa/alert-helisa.component';\r\nimport { DependencyTableHelisaComponent } from './components/dependency-table-helisa/dependency-table-helisa.component';\r\nimport { InputHelisaComponent } from './components/input-helisa/input-helisa.component';\r\nimport { TableHelisaComponent } from './components/table-helisa/table-helisa.component';\r\nimport {TableHelisaService} from \"./components/table-helisa/table-helisa.service\";\r\nimport {\r\n  ChangeColumnConfigurationType,\r\n  ColumnConfig,\r\n  EventColumn, TotalType\r\n} from \"./components/table-helisa/table-helisa.interface\";\r\nimport { TreeHelisaComponent } from './components/tree-helisa/tree-helisa.component';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { DateHelisaComponent } from './components/date-helisa/date-helisa.component';\r\nimport {TreeHelisaService} from \"./components/tree-helisa/tree-helisa.service\";\r\nimport { AutocompleteHelisaComponent } from './components/autocomplete-helisa/autocomplete-helisa.component';\r\nimport { OptionsScrollDirective } from './directives/options-scroll.directive';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport { HelTooltipDirective } from './directives/tooltip.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ \r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,    \r\n\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  exports: [\r\n    InputWithButtonComponent, \r\n    ToastHelisaComponent, \r\n    AlertHelisaComponent, \r\n    DependencyTableHelisaComponent, \r\n    InputHelisaComponent, \r\n    TableHelisaComponent,\r\n    TreeHelisaComponent,\r\n    DateHelisaComponent,\r\n    AutocompleteHelisaComponent,\r\n    OptionsScrollDirective,\r\n    HelTooltipDirective,\r\n\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatListModule, \r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatCardModule,\r\n    LayoutModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,    \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatStepperModule,\r\n    MatChipsModule,\r\n    DragDropModule,\r\n    MatTreeModule\r\n  ],\r\n  providers: [\r\n    TableHelisaService,\r\n    TreeHelisaService\r\n  ]\r\n})\r\nexport class HelisaLibModule { }\r\n","export enum ToastType {\r\n    DONE = \"done\",\r\n    ERROR = \"error\",\r\n    INFO = \"info\"\r\n}\r\n"]}