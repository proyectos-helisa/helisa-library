{"version":3,"file":"table-helisa.component.d.ts","sources":["table-helisa.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, EventEmitter, OnInit, ElementRef } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\nimport { AddRowButton, Cell, ColumnConfig, ConfigCellStyles, ConfigRowStyles, DropElement, EventColumn, EventSearch, RequestTableHelisa, SelectObject, TableHelisaType, TotalGroup, ColumnType } from './table-helisa.interface';\nimport { TableHelisaService } from './table-helisa.service';\nexport interface RowData<T> {\n    data: {} | T;\n    rowType: RowType;\n}\ndeclare enum RowType {\n    GROUP_TITLE = 0,\n    GROUP_FOOTER = 1,\n    ROW = 2\n}\nexport declare class TableHelisaComponent<T> implements OnInit, AfterViewInit {\n    private tableService;\n    private tableHelisaConnectComponent;\n    totalData: Array<number>;\n    rawData: Array<T>;\n    data: MatTableDataSource<RowData<T>>;\n    displayedColumns: string[];\n    displayedColumnsWithTitle: string[];\n    displayedColumnsWithSubtitle: string[];\n    displayedColumnsWithFooter: string[];\n    columnConfig: Array<ColumnConfig>;\n    selectedObject: T;\n    lastSearch: string;\n    type: TableHelisaType;\n    indexRowSelect: number;\n    private scrollCount;\n    hasSubtitle: boolean;\n    private indexRowStartDrag;\n    private lastIndexRowDrag;\n    private dataBeforeDrag;\n    private dataSource$;\n    private scrollX;\n    private scrollY;\n    matSort: MatSort;\n    matTable: MatTable<T>;\n    matTableElement: ElementRef;\n    containerTable: ElementRef;\n    sort: EventEmitter<EventColumn>;\n    total: EventEmitter<EventColumn>;\n    search: EventEmitter<EventSearch>;\n    /**\n     * Deprecado, cambiar por electObject\n     */\n    select: EventEmitter<T>;\n    selectCell: EventEmitter<Cell<T>>;\n    selectObject: EventEmitter<SelectObject<T>>;\n    nextPage: EventEmitter<RequestTableHelisa<T>>;\n    showTitle: boolean;\n    isCellSelection: boolean;\n    count: number;\n    configCellStyles: Array<ConfigCellStyles<T>>;\n    configRowStylesFromColumn: Array<ConfigRowStyles<T>>;\n    configColumnClass: Array<string>;\n    selectedCells: Cell<T>;\n    drop: EventEmitter<DropElement<T>>;\n    isDragged: boolean;\n    addRowButton: AddRowButton;\n    addRow: EventEmitter<void>;\n    bookClicked: EventEmitter<T>;\n    addBookButton: boolean;\n    showToolTip: boolean;\n    showFooter: boolean;\n    showSearch: boolean;\n    /**\n     * Tiempo antes de ocultarla el mensaje del tooltip\n     */\n    hideDelay: number;\n    /**\n     * Tiempo antes de mostra el mensaje del tooltip\n     */\n    showDelay: number;\n    constructor(tableService: TableHelisaService<T>);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    set isRemote(w: boolean);\n    set columnConfiguration(columnConfiguration: Array<ColumnConfig>);\n    set dataSource(dataSource: Array<T>);\n    get dataSource(): Array<T>;\n    set selectedIndexRow(idRowSelected: number);\n    private reloadColumnConfig;\n    reload(): void;\n    private addTotalGroup;\n    private compare;\n    getGroupDescription(obj: T): string;\n    isGroupTitle(index: number, item: RowData<T>): boolean;\n    isRow(index: number, item: RowData<T>): boolean;\n    isGroupFooter(index: number, item: RowData<T>): boolean;\n    footerDisplayedColumns(): Array<string>;\n    getGroupValue(column: ColumnConfig, data: TotalGroup): number;\n    getValue(obj: T, column: ColumnConfig): T;\n    getValueTooltip(obj: T, column: ColumnConfig): string;\n    searchText(text: string): void;\n    selectRow(row: RowData<T>, isUser: boolean, column?: ColumnConfig): void;\n    onScroll(event: Event): void;\n    private goNextPage;\n    private receivePage;\n    dblClickCell(): void;\n    selectedCell(element: RowData<T>, column: ColumnConfig): void;\n    isSelectedCell(row: RowData<T>, column: ColumnConfig): boolean;\n    getClassToCell(row: T, column: ColumnConfig): string[];\n    getClassToColumn(): string[];\n    getClassToRow(row: T): string[];\n    onDrop(event: MouseEvent): void;\n    tableKeydown(event: KeyboardEvent): void;\n    /**\n     * Emite el evento cuando se da click al boton AddRow\n     */\n    onAddRow(): void;\n    getHeaderSubtitle(): string[];\n    getColumnsWithTitle(): string[];\n    dragger(event: MouseEvent): boolean;\n    startDrag(event: MouseEvent): void;\n    private getRowIndex;\n    get columnType(): typeof ColumnType;\n}\nexport {};\n"]}