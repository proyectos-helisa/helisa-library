{"version":3,"file":"dependency-table-helisa.service.d.ts","sources":["dependency-table-helisa.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { ColumnConfig, AddRowButton, ConfigRowStyles, TotalTableHelisa } from '../table-helisa/table-helisa.interface';\nimport { EventDependency } from './dependency-table-helisa.component';\nexport interface ConfigTable<T> {\n    columns: Array<ColumnConfig>;\n    isRemote: boolean;\n    dataSource?: Array<T>;\n    count?: number;\n    order?: number;\n    showTitle?: boolean;\n    indexRowSelect?: number;\n    isDragged?: boolean;\n    addRowButton?: AddRowButton;\n    configRowStylesFromColumn?: Array<ConfigRowStyles<T>>;\n    configColumnClass?: Array<string>;\n    isCellSelection?: boolean;\n    addBookButton?: boolean;\n}\nexport declare class DependencyTableHelisaService<T> {\n    tables: Subject<ConfigTable<T>[]>;\n    infoTables: Array<ConfigTable<T>>;\n    private emitVisibilityButton$;\n    emitVisibilityButton: Observable<EventDependency<boolean>>;\n    private emitVisibilityAllButtons$;\n    emitVisibilityAllButtons: Observable<boolean>;\n    private emitIsCellSelection$;\n    emitIsCellSelection: Observable<EventDependency<boolean>>;\n    private emitChangeColumns$;\n    emitChangeColumns: Observable<EventDependency<ColumnConfig[]>>;\n    emitTotal: Subject<EventDependency<TotalTableHelisa>>;\n    emitNextPage: Subject<EventDependency<T[]>>;\n    constructor();\n    /**\n     * retorna un Observable<ConfigTable[]>\n     */\n    getTables(): Observable<ConfigTable<T>[]>;\n    /**\n     * Actualiza las dependencias, agrendo la tabla que envian en el orden correspondiente o al final.\n     * También remueve las dependecias que hay apartir de la tabla segun se indique en el parametro.\n     * @param configTable Objeto que contiene la configuración para la tabla.\n     * @param withRemoveDependency boolean por defecto es false, si es 'true' indica que remueva las dependencias apartir de el.\n     */\n    updateDependency(configTable: ConfigTable<T>, withRemoveDependency?: boolean): void;\n    /**\n     * Emite un evento de total con la información para la tabla correspondiente\n     * @param event wrapper que contiene el indice de la tabla y la información de la pagina\n     */\n    setTotal(event: EventDependency<TotalTableHelisa>): void;\n    /**\n     * Emite un evento de agregar pagina con la pagina para la tabla correspondiente\n     * @param event wrapper que contiene el indice de la tabla y la información de la pagina\n     */\n    addPage(event: EventDependency<T[]>): void;\n    selectIndexRow(config: ConfigTable<T>): void;\n    /**\n     * Muestra o esconde el boton una tabla en especifico\n     * @param event para indicar el index de la tabla y en \"data\" true o false\n     */\n    changeVisibilityButton(event: EventDependency<boolean>): void;\n    /**\n     * Esconde los botones de todas las tablas\n     * @param show indicar si se muestran o no todos los botones de las tablas\n     */\n    changeVisibilityAllButtons(show: boolean): void;\n    /**\n     * Para habilitar el manejo de selección de celda\n     * @param event para indicar el index de la tabla y en \"data\" true o false\n     */\n    changeisCellSelection(event: EventDependency<boolean>): void;\n    /**\n     * Para habilitar el cambio de columnas\n     * @param event para indicar el index de la tabla y en \"data\" columnas\n     */\n    changeColumnsByTable(event: EventDependency<ColumnConfig[]>): void;\n}\n"]}