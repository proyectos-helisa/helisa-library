{"version":3,"file":"dependency-table-helisa.component.d.ts","sources":["dependency-table-helisa.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, EventEmitter, QueryList } from '@angular/core';\nimport { DependencyTableHelisaService, ConfigTable } from './dependency-table-helisa.service';\nimport { Cell, EventColumn, RequestTableHelisa, SelectObject } from '../table-helisa/table-helisa.interface';\nimport { TableHelisaService } from '../table-helisa/table-helisa.service';\nimport { TableHelisaComponent } from '../table-helisa/table-helisa.component';\nexport interface EventDependency<T> {\n    index: number;\n    data: T;\n}\nexport declare class DependencyTableHelisaComponent<T> implements OnInit {\n    private dependencyTableHelisaService;\n    private tableService;\n    tables: Array<ConfigTable<T>>;\n    viewTables: QueryList<TableHelisaComponent<T>>;\n    showToolTip: boolean;\n    /**\n     * deprecated, use selectObject\n     */\n    selected: EventEmitter<EventDependency<T>>;\n    selectObject: EventEmitter<EventDependency<{} | T>>;\n    nextPage: EventEmitter<EventDependency<{} | T>>;\n    total: EventEmitter<EventDependency<{} | T>>;\n    sort: EventEmitter<EventDependency<{} | T>>;\n    drop: EventEmitter<EventDependency<{} | T>>;\n    addRow: EventEmitter<number>;\n    selectCell: EventEmitter<EventDependency<{} | T>>;\n    bookClicked: EventEmitter<EventDependency<{} | T>>;\n    selectedObject: EventDependency<{}>;\n    /**\n     * Tiempo antes de ocultarla el mensaje del tooltip\n     */\n    hideDelay: number;\n    /**\n     * Tiempo antes de mostra el mensaje del tooltip\n     */\n    showDelay: number;\n    constructor(dependencyTableHelisaService: DependencyTableHelisaService<T>, tableService: TableHelisaService<T>);\n    ngOnInit(): void;\n    /**\n     * retorna el servicio que gestiona el componente.\n     */\n    getService(): DependencyTableHelisaService<T>;\n    /**\n     * Obtiene un observable con las tablas dependientes desde el servicio.\n     */\n    getTables(): void;\n    /**\n     * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n     * @param index indica el indice de la tabla seleccionada\n     * @param data retorna la fila que fue seleccionada\n     */\n    onSelectedDependency(index: number, event: SelectObject<T>): void;\n    /**\n     * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n     * @param index indica el indice de la tabla que genera el evento\n     * @param event evento generado desde la tabla\n     */\n    onNextPage(index: number, event: RequestTableHelisa<T>): void;\n    /**\n     * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n     * @param index indica el indice de la tabla que genera el evento\n     * @param event evento generado desde la tabla\n     */\n    onTotal(index: number, event: EventColumn): void;\n    /**\n     * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n     * @param index indica el indice de la tabla que genera el evento\n     * @param event evento generado desde la tabla\n     */\n    onSort(index: number, event: EventColumn): void;\n    /**\n     * Evento que se dispara desde una tabla, emitiendo un nuevo evento con el inidice de la tabla que dispara el evento y el evento generado.\n     * @param index indica el indice de la tabla que genera el evento\n     * @param event evento generado desde la tabla\n     */\n    onDrop(index: number, event: EventDependency<T>): void;\n    /**\n     * Evento que se dispara desde una tabla, emite el indice de la tabla al cual se le debe a√±adir una nueva fila\n     * @param index indica el indice de la tabla de la cual se dispara el evento\n     */\n    onAddRow(index: number): void;\n    selectedCell(index: number, event: Cell<T>): void;\n    onBookClicked(index: number, event: EventDependency<T>): void;\n}\n"]}