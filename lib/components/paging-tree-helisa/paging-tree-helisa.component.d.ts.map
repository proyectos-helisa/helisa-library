{"version":3,"file":"paging-tree-helisa.component.d.ts","sources":["paging-tree-helisa.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { AfterViewInit, EventEmitter, OnInit, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport declare enum PagingTreeInitialMode {\n    COLLAPSE = 0,\n    EXPAND = 1\n}\nexport interface PagingTreeHelisaListable<T> {\n    get(lastChildOrder: number, size: number): Observable<T[]>;\n    getIdField(): string;\n    getIdParentField(): string;\n    compare(a: T, b: T): number;\n}\ninterface HelisaNode<T> {\n    object: T;\n    level: number;\n    haveChildren: boolean;\n    expanded: boolean;\n    visible: boolean;\n    preorder: number;\n}\nexport interface HelisaNodeData<T> {\n    readonly object: T;\n    readonly level: number;\n    readonly haveChildren: boolean;\n    readonly expanded: boolean;\n    readonly visible: boolean;\n    readonly preorder: number;\n}\nexport declare class PagingTreeHelisaComponent<T> implements OnInit, AfterViewInit {\n    private pageSize;\n    private visibleLimit;\n    private visibleSize;\n    private treeMode;\n    private visibleObjects;\n    private service;\n    private searchNode;\n    private allNode;\n    afterLoadData: EventEmitter<void>;\n    nodeComponent: TemplateRef<{\n        data: T;\n        node: HelisaNodeData<T>;\n    }>;\n    nodeTitle: TemplateRef<any>;\n    constructor();\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    set mode(paramMode: PagingTreeInitialMode);\n    set pagingTreeHelisaListable(paramService: PagingTreeHelisaListable<T>);\n    reset(): void;\n    private loadData;\n    private sortItems;\n    private createNode;\n    getNodeInformationById(id: string): HelisaNode<T>;\n    getNodeInformation(item: T): HelisaNode<T>;\n    getLevelClass(item: T): string;\n    private loadNextVisibleObjects;\n    collapseNode(item: T): void;\n    expandNode(item: T): void;\n    showNextPage(): void;\n    get visibleData(): ReadonlyArray<T>;\n    removeItem(item: T): void;\n    removeById(id: string): void;\n    addItem(item: T): void;\n    updateItem(item: T): void;\n    private reSort;\n}\nexport {};\n"]}