{"version":3,"file":"date-helisa.component.d.ts","sources":["date-helisa.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport * as moment_ from 'moment';\nimport { MatDatepickerInputEvent, MatDatepicker } from '@angular/material/datepicker';\nexport declare enum TypeCalendarEnum {\n    NORMAL = \"norma\",\n    MONTH_YEAR = \"mounth-year\",\n    STRICT = \"strict\"\n}\nexport declare class DateHelisaComponent implements OnInit {\n    datePickerShow: MatDatepicker<Date>;\n    floatLabel: 'never' | 'always' | 'auto';\n    dateFormControl: FormControl;\n    private date;\n    /**\n     * Formato de fecha.\n     * Los formatos validos son aquellos que maneja la libreria momentjs y este: 'DD [de] MMMM [de] YYYY'\n     * https://momentjs.com/docs/#/parsing/string-format/\n     */\n    dateFormat: string;\n    locale: string;\n    errorMessage: string;\n    placeholder: string;\n    showDatePicker: boolean;\n    minDate: Date;\n    maxDate: Date;\n    change: EventEmitter<Date>;\n    isClosed: boolean;\n    timeout: any;\n    isDisabled: boolean;\n    /**\n     * Si este valor es diferente a TypeCalendarEnum.NORMAL no\n     * ser√° tomado en cuenta\n     */\n    typeCalendar: TypeCalendarEnum;\n    dateToVisualize: FormControl;\n    /**\n     * Para evitar nuevos eventos miestras se realiza el parseo\n     */\n    private isFromInputEvent;\n    /**\n     * Verificar si el formato es valido\n     */\n    invalidFormat: boolean;\n    private inputFormReal;\n    constructor();\n    ngOnInit(): void;\n    get typeCalendarEnum(): typeof TypeCalendarEnum;\n    openDatePicker(): void;\n    onKey(event: KeyboardEvent): void;\n    onBlur(): void;\n    /**\n     * Determina como se debe inicializar la visualizacion del calendar\n     */\n    getStartView(): string;\n    private formHandler;\n    /**\n     * Evento que se dispara luego seleccionar un mes\n     */\n    monthSelectedHandler(chosenMonthDate: moment_.Moment, datepicker: MatDatepicker<moment_.Moment>): void;\n    /**\n     * Evento desde el control touch del calendar\n     */\n    dateChange(type: string, event: MatDatepickerInputEvent<Date>): void;\n    getErrorMessage(): string;\n}\n"]}