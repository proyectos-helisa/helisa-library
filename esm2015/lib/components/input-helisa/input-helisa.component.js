import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
export var InputHelisaType;
(function (InputHelisaType) {
    InputHelisaType[InputHelisaType["DEFAULT"] = 0] = "DEFAULT";
    InputHelisaType[InputHelisaType["IDENTITY"] = 1] = "IDENTITY";
    InputHelisaType[InputHelisaType["NUMERIC"] = 2] = "NUMERIC";
    InputHelisaType[InputHelisaType["DOUBLE"] = 3] = "DOUBLE";
    InputHelisaType[InputHelisaType["POSITIVEORNEGATIVEDOUBLE"] = 4] = "POSITIVEORNEGATIVEDOUBLE";
    InputHelisaType[InputHelisaType["PHONE"] = 5] = "PHONE";
})(InputHelisaType || (InputHelisaType = {}));
export class InputHelisaComponent {
    constructor() {
        this.DECIMAL_SEPARATOR = '.';
        this.THOUSAND_SEPARATOR = ',';
        this.NEGATIVE_SIGN = '-';
        this.placeholder = '';
        this.floatLabel = 'never';
        /** Activar o desactivar el autocompletado
         * (Caracteristica de los navegadores para campos comunes como
         * Direccion , Usuario, Password ... etc)
         */
        this.autocompleteMode = false;
        // Mostrar o no el icono de buscar
        this.isSearch = false;
        // @Input() inputFormControl: FormControl = new FormControl('');
        this.isFocused = false;
        // Esto agrega en el tipo DOUBLE, NUMERIC y POSITIVEORNEGATIVEDOUBLE  dos ceros al final si no los tiene y es true
        this._showCurrencyZerosDecimal = false;
        /**
         * Deprecated
         */
        this.disabled = false;
        this._type = InputHelisaType.DEFAULT;
        /**
         * Deprecated
         */
        this.setValue = new EventEmitter();
        // tslint:disable-next-line:no-any
        this.blur = new EventEmitter();
        this.formControlMask = new FormControl('');
        this.realValue = '';
        this.inputFormReal = new FormControl('');
        this.isUserChange = false;
    }
    set showCurrencyZerosDecimal(newShowCurrencyZerosDecimal) {
        this._showCurrencyZerosDecimal = newShowCurrencyZerosDecimal;
        this.changeValue(this.inputFormReal.value, true);
    }
    set type(newType) {
        this._type = newType;
        this.changeValue(this.inputFormReal.value, true);
    }
    set inputFormControl(formControl) {
        this.inputFormReal = formControl;
        this.inputFormReal.registerOnDisabledChange(((isDisabled) => {
            if (isDisabled) {
                this.formControlMask.disable();
            }
            else {
                this.formControlMask.enable();
            }
        }));
        this.inputFormReal.valueChanges.subscribe((data) => {
            this.statusChange(this.inputFormReal.status);
            if (this.getMaskedValue(data, !this.isUserChange) !== this.formControlMask.value) {
                this.changeValue(data, !this.isUserChange);
                if (this.isFocused) {
                    this.onFocus(null);
                }
            }
            this.isUserChange = false;
        });
        this.formControlMask.setValidators(this.inputFormReal.validator);
        this.changeValue(this.inputFormReal.value, true);
        // disable control
        if (formControl.disabled) {
            this.formControlMask.disable({ onlySelf: true });
        }
        this.inputFormReal.statusChanges.subscribe((data) => {
            this.statusChange(data);
            if (this.isFocused) {
                this.onFocus(null);
            }
        });
    }
    statusChange(data) {
        if (data === 'INVALID') {
            this.formControlMask.setErrors({ key: 'Error de validaciÃ³n.' });
            this.formControlMask.markAsTouched();
        }
        else {
            this.formControlMask.setErrors(null);
        }
    }
    ngOnInit() {
        if (this.isFocused) {
            this.inputText.nativeElement.focus();
        }
    }
    ngAfterViewInit() {
        // this.isParentDisabled();
    }
    /*isParentDisabled(): void {
      setTimeout(() => {
        if (this.nameInput.nativeElement.closest('.hw-disabled-mode')) {
          this.disabled = true;
        } else {
          this.disabled = false;
        }
      });
    }*/
    search() {
        this.setValue.emit(this.realValue);
    }
    ngModelChange(event) {
        this.isUserChange = true;
        this.changeValue(event, false);
    }
    changeValue(event, isFinishOrStart) {
        if (event != null) {
            event = event + '';
        }
        let position = this.inputText.nativeElement.selectionStart;
        const length = event ? event.length : 0;
        this.realValue = this.getRealValue(event);
        if (this.getMaskedValue(this.realValue, isFinishOrStart) !== this.formControlMask.value) {
            this.formControlMask.setValue(this.getMaskedValue(this.realValue, isFinishOrStart));
            position += this.inputText.nativeElement.value.length - length;
            this.inputText.nativeElement.selectionStart = position;
            this.inputText.nativeElement.selectionEnd = position;
        }
        if (this.inputFormReal.value !== this.realValue) {
            this.inputFormReal.setValue(this.realValue);
        }
    }
    getMaskedValue(str, isFinish) {
        if (str == null) {
            return str;
        }
        str = str + '';
        if (this._type === InputHelisaType.DEFAULT || this._type === InputHelisaType.PHONE) {
            return str;
        }
        let maskedStr = '';
        if (this._type === InputHelisaType.IDENTITY) {
            for (let i = str.length - 1, j = 0; i >= 0; i--, j++) {
                if (j > 0 && j % 3 === 0) {
                    maskedStr = this.DECIMAL_SEPARATOR + maskedStr;
                }
                maskedStr = str[i] + maskedStr;
            }
        }
        if (this._type === InputHelisaType.NUMERIC) {
            for (let i = str.length - 1, j = 0; i >= 0; i--, j++) {
                if (j > 0 && j % 3 === 0) {
                    maskedStr = this.THOUSAND_SEPARATOR + maskedStr;
                }
                maskedStr = str[i] + maskedStr;
            }
            maskedStr = this.addZeroDecimals(maskedStr, isFinish);
        }
        if (this._type === InputHelisaType.DOUBLE) {
            maskedStr = this.getMaskedValueDouble(str);
            maskedStr = this.addZeroDecimals(maskedStr, isFinish);
        }
        if (this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {
            const isNegativeValue = str.indexOf(this.NEGATIVE_SIGN) === 0;
            const newStr = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;
            maskedStr = this.getMaskedValueDouble(newStr);
            if (isNegativeValue) {
                maskedStr = this.NEGATIVE_SIGN + maskedStr;
            }
            maskedStr = this.addZeroDecimals(maskedStr, isFinish);
        }
        return maskedStr;
    }
    addZeroDecimals(maskedStr, isFinish) {
        if (this._showCurrencyZerosDecimal && isFinish) {
            const indexDecimalSeparator = maskedStr.indexOf(this.DECIMAL_SEPARATOR);
            if (indexDecimalSeparator < 0) {
                maskedStr += '.00';
            }
            else {
                let decimals = maskedStr.substring(indexDecimalSeparator);
                while (decimals.length < 3) {
                    decimals += '0';
                }
                maskedStr = maskedStr.substring(0, indexDecimalSeparator) + decimals;
            }
        }
        return maskedStr;
    }
    getMaskedValueDouble(str) {
        let maskedStr = '';
        if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {
            for (let i = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {
                maskedStr += str[i];
            }
        }
        for (let i = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1, j = 0; i >= 0; i--, j++) {
            if (j > 0 && j % 3 === 0) {
                maskedStr = this.THOUSAND_SEPARATOR + maskedStr;
            }
            maskedStr = str[i] + maskedStr;
        }
        return maskedStr;
    }
    getRealValue(str) {
        if (str == null) {
            return str;
        }
        str = str + '';
        let realStr = '';
        if (this._type === InputHelisaType.DEFAULT) {
            return str;
        }
        if (this._type === InputHelisaType.IDENTITY || this._type === InputHelisaType.NUMERIC || this._type === InputHelisaType.PHONE) {
            for (const strItem of str) {
                if (strItem.match('[0-9]')) {
                    realStr += strItem;
                }
            }
        }
        if (this._type === InputHelisaType.DOUBLE) {
            realStr = this.getRealValueDouble(str);
        }
        if (this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {
            const isNegativeValue = str.indexOf(this.NEGATIVE_SIGN) === 0;
            const newStr = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;
            realStr = this.getRealValueDouble(newStr);
            if (isNegativeValue) {
                realStr = this.NEGATIVE_SIGN + realStr;
            }
        }
        return realStr;
    }
    getRealValueDouble(str) {
        let realStr = '';
        let haveDot = false;
        for (const strItem of str) {
            if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {
                realStr += strItem;
            }
            haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);
        }
        return realStr;
    }
    onFocus($event) {
        if ((this._type === InputHelisaType.NUMERIC || this._type === InputHelisaType.DOUBLE || this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) &&
            Number(this.getRealValue(this.inputText.nativeElement.value)) === 0) {
            this.inputText.nativeElement.select();
        }
    }
    change(event) {
        this.changeValue(event.target.value, true);
    }
}
InputHelisaComponent.decorators = [
    { type: Component, args: [{
                selector: 'hel-input',
                template: "<mat-form-field [floatLabel]=\"floatLabel\">\r\n  <input #inputText matInput placeholder=\"{{placeholder}}\"\r\n  (keyup.enter)=\"search()\" [formControl]= \"formControlMask\"\r\n  [attr.disabled]=\"disabled ? 'disabled' : null\" (ngModelChange)=\"ngModelChange($event)\"\r\n  (change)=\"change($event)\"\r\n  [autocomplete]=\"(autocompleteMode) ? 'on' : 'off'\" (blur)=\"blur.emit($event)\" [minlength]=\"minlength\" [maxlength]=\"maxlength\" (focus)=\"onFocus($event)\">\r\n  <mat-icon matSuffix (click)=\"search()\" *ngIf=\"isSearch\">search</mat-icon>\r\n</mat-form-field>\r\n",
                styles: ["::ng-deep hel-autocomplete .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-infix input{text-overflow:ellipsis}"]
            },] }
];
InputHelisaComponent.ctorParameters = () => [];
InputHelisaComponent.propDecorators = {
    placeholder: [{ type: Input }],
    floatLabel: [{ type: Input }],
    minlength: [{ type: Input }],
    maxlength: [{ type: Input }],
    autocompleteMode: [{ type: Input }],
    isSearch: [{ type: Input }],
    isFocused: [{ type: Input }],
    disabled: [{ type: Input }],
    setValue: [{ type: Output }],
    blur: [{ type: Output }],
    inputText: [{ type: ViewChild, args: ['inputText', { static: true },] }],
    showCurrencyZerosDecimal: [{ type: Input }],
    type: [{ type: Input }],
    inputFormControl: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,