import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
export var InputHelisaType;
(function (InputHelisaType) {
    InputHelisaType[InputHelisaType["DEFAULT"] = 0] = "DEFAULT";
    InputHelisaType[InputHelisaType["IDENTITY"] = 1] = "IDENTITY";
    InputHelisaType[InputHelisaType["NUMERIC"] = 2] = "NUMERIC";
    InputHelisaType[InputHelisaType["DOUBLE"] = 3] = "DOUBLE";
    InputHelisaType[InputHelisaType["POSITIVEORNEGATIVEDOUBLE"] = 4] = "POSITIVEORNEGATIVEDOUBLE";
    InputHelisaType[InputHelisaType["PHONE"] = 5] = "PHONE";
})(InputHelisaType || (InputHelisaType = {}));
export class InputHelisaComponent {
    constructor() {
        this.DECIMAL_SEPARATOR = '.';
        this.THOUSAND_SEPARATOR = ',';
        this.NEGATIVE_SIGN = '-';
        this.placeholder = '';
        this.floatLabel = 'never';
        /** Activar o desactivar el autocompletado
         * (Caracteristica de los navegadores para campos comunes como
         * Direccion , Usuario, Password ... etc)
         */
        this.autocompleteMode = false;
        // Mostrar o no el icono de buscar
        this.isSearch = false;
        // @Input() inputFormControl: FormControl = new FormControl('');
        this.isFocused = false;
        // Esto agrega en el tipo DOUBLE, NUMERIC y POSITIVEORNEGATIVEDOUBLE  dos ceros al final si no los tiene y es true
        this._showCurrencyZerosDecimal = false;
        /**
         * Deprecated
         */
        this.disabled = false;
        this._type = InputHelisaType.DEFAULT;
        /**
         * Deprecated
         */
        this.setValue = new EventEmitter();
        // tslint:disable-next-line:no-any
        this.blur = new EventEmitter();
        this.formControlMask = new FormControl('');
        this.realValue = '';
        this.inputFormReal = new FormControl('');
        this.isUserChange = false;
    }
    set showCurrencyZerosDecimal(newShowCurrencyZerosDecimal) {
        this._showCurrencyZerosDecimal = newShowCurrencyZerosDecimal;
        this.changeValue(this.inputFormReal.value, true);
    }
    set type(newType) {
        this._type = newType;
        this.changeValue(this.inputFormReal.value, true);
    }
    set inputFormControl(formControl) {
        this.inputFormReal = formControl;
        this.inputFormReal.registerOnDisabledChange(((isDisabled) => {
            if (isDisabled) {
                this.formControlMask.disable();
            }
            else {
                this.formControlMask.enable();
            }
        }));
        this.inputFormReal.valueChanges.subscribe((data) => {
            this.statusChange(this.inputFormReal.status);
            if (this.getMaskedValue(data, !this.isUserChange) !== this.formControlMask.value) {
                this.changeValue(data, !this.isUserChange);
                if (this.isFocused) {
                    this.onFocus(null);
                }
            }
            this.isUserChange = false;
        });
        this.formControlMask.setValidators(this.inputFormReal.validator);
        this.changeValue(this.inputFormReal.value, true);
        // disable control
        if (formControl.disabled) {
            this.formControlMask.disable({ onlySelf: true });
        }
        this.inputFormReal.statusChanges.subscribe((data) => {
            this.statusChange(data);
            if (this.isFocused) {
                this.onFocus(null);
            }
        });
    }
    statusChange(data) {
        if (data === 'INVALID') {
            this.formControlMask.setErrors({ key: 'Error de validaciÃ³n.' });
            this.formControlMask.markAsTouched();
        }
        else {
            this.formControlMask.setErrors(null);
        }
    }
    ngOnInit() {
        if (this.isFocused) {
            this.inputText.nativeElement.focus();
        }
    }
    ngAfterViewInit() {
        // this.isParentDisabled();
    }
    /*isParentDisabled(): void {
      setTimeout(() => {
        if (this.nameInput.nativeElement.closest('.hw-disabled-mode')) {
          this.disabled = true;
        } else {
          this.disabled = false;
        }
      });
    }*/
    search() {
        this.setValue.emit(this.realValue);
    }
    ngModelChange(event) {
        this.isUserChange = true;
        this.changeValue(event, false);
    }
    changeValue(event, isFinishOrStart) {
        if (event != null) {
            event = event + '';
        }
        let position = this.inputText.nativeElement.selectionStart;
        const length = event ? event.length : 0;
        this.realValue = this.getRealValue(event);
        if (this.getMaskedValue(this.realValue, isFinishOrStart) !== this.formControlMask.value) {
            this.formControlMask.setValue(this.getMaskedValue(this.realValue, isFinishOrStart));
            position += this.inputText.nativeElement.value.length - length;
            this.inputText.nativeElement.selectionStart = position;
            this.inputText.nativeElement.selectionEnd = position;
        }
        if (this.inputFormReal.value !== this.realValue) {
            this.inputFormReal.setValue(this.realValue);
        }
    }
    getMaskedValue(str, isFinish) {
        if (str == null) {
            return str;
        }
        str = str + '';
        if (this._type === InputHelisaType.DEFAULT || this._type === InputHelisaType.PHONE) {
            return str;
        }
        let maskedStr = '';
        if (this._type === InputHelisaType.IDENTITY) {
            for (let i = str.length - 1, j = 0; i >= 0; i--, j++) {
                if (j > 0 && j % 3 === 0) {
                    maskedStr = this.DECIMAL_SEPARATOR + maskedStr;
                }
                maskedStr = str[i] + maskedStr;
            }
        }
        if (this._type === InputHelisaType.NUMERIC) {
            for (let i = str.length - 1, j = 0; i >= 0; i--, j++) {
                if (j > 0 && j % 3 === 0) {
                    maskedStr = this.THOUSAND_SEPARATOR + maskedStr;
                }
                maskedStr = str[i] + maskedStr;
            }
            maskedStr = this.addZeroDecimals(maskedStr, isFinish);
        }
        if (this._type === InputHelisaType.DOUBLE) {
            maskedStr = this.getMaskedValueDouble(str);
            maskedStr = this.addZeroDecimals(maskedStr, isFinish);
        }
        if (this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {
            const isNegativeValue = str.indexOf(this.NEGATIVE_SIGN) === 0;
            const newStr = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;
            maskedStr = this.getMaskedValueDouble(newStr);
            if (isNegativeValue) {
                maskedStr = this.NEGATIVE_SIGN + maskedStr;
            }
            maskedStr = this.addZeroDecimals(maskedStr, isFinish);
        }
        return maskedStr;
    }
    addZeroDecimals(maskedStr, isFinish) {
        if (this._showCurrencyZerosDecimal && isFinish) {
            const indexDecimalSeparator = maskedStr.indexOf(this.DECIMAL_SEPARATOR);
            if (indexDecimalSeparator < 0) {
                maskedStr += '.00';
            }
            else {
                let decimals = maskedStr.substring(indexDecimalSeparator);
                while (decimals.length < 3) {
                    decimals += '0';
                }
                maskedStr = maskedStr.substring(0, indexDecimalSeparator) + decimals;
            }
        }
        return maskedStr;
    }
    getMaskedValueDouble(str) {
        let maskedStr = '';
        if (str.indexOf(this.DECIMAL_SEPARATOR) >= 0) {
            for (let i = str.indexOf(this.DECIMAL_SEPARATOR); i < str.length; i++) {
                maskedStr += str[i];
            }
        }
        for (let i = (str.indexOf(this.DECIMAL_SEPARATOR) >= 0 ? str.indexOf(this.DECIMAL_SEPARATOR) : str.length) - 1, j = 0; i >= 0; i--, j++) {
            if (j > 0 && j % 3 === 0) {
                maskedStr = this.THOUSAND_SEPARATOR + maskedStr;
            }
            maskedStr = str[i] + maskedStr;
        }
        return maskedStr;
    }
    getRealValue(str) {
        if (str == null) {
            return str;
        }
        str = str + '';
        let realStr = '';
        if (this._type === InputHelisaType.DEFAULT) {
            return str;
        }
        if (this._type === InputHelisaType.IDENTITY || this._type === InputHelisaType.NUMERIC || this._type === InputHelisaType.PHONE) {
            for (const strItem of str) {
                if (strItem.match('[0-9]')) {
                    realStr += strItem;
                }
            }
        }
        if (this._type === InputHelisaType.DOUBLE) {
            realStr = this.getRealValueDouble(str);
        }
        if (this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) {
            const isNegativeValue = str.indexOf(this.NEGATIVE_SIGN) === 0;
            const newStr = isNegativeValue ? str.replace(this.NEGATIVE_SIGN, '') : str;
            realStr = this.getRealValueDouble(newStr);
            if (isNegativeValue) {
                realStr = this.NEGATIVE_SIGN + realStr;
            }
        }
        return realStr;
    }
    getRealValueDouble(str) {
        let realStr = '';
        let haveDot = false;
        for (const strItem of str) {
            if (strItem.match('[0-9]') || ((strItem === this.DECIMAL_SEPARATOR) && !haveDot)) {
                realStr += strItem;
            }
            haveDot = haveDot || (strItem === this.DECIMAL_SEPARATOR);
        }
        return realStr;
    }
    onFocus($event) {
        if ((this._type === InputHelisaType.NUMERIC || this._type === InputHelisaType.DOUBLE || this._type === InputHelisaType.POSITIVEORNEGATIVEDOUBLE) &&
            Number(this.getRealValue(this.inputText.nativeElement.value)) === 0) {
            this.inputText.nativeElement.select();
        }
    }
    change(event) {
        this.changeValue(event.target.value, true);
    }
}
InputHelisaComponent.decorators = [
    { type: Component, args: [{
                selector: 'hel-input',
                template: "<mat-form-field [floatLabel]=\"floatLabel\">\n  <input #inputText matInput placeholder=\"{{placeholder}}\"\n  (keyup.enter)=\"search()\" [formControl]= \"formControlMask\"\n  [attr.disabled]=\"disabled ? 'disabled' : null\" (ngModelChange)=\"ngModelChange($event)\"\n  (change)=\"change($event)\"\n  [autocomplete]=\"(autocompleteMode) ? 'on' : 'off'\" (blur)=\"blur.emit($event)\" [minlength]=\"minlength\" [maxlength]=\"maxlength\" (focus)=\"onFocus($event)\">\n  <mat-icon matSuffix (click)=\"search()\" *ngIf=\"isSearch\">search</mat-icon>\n</mat-form-field>\n",
                styles: ["::ng-deep hel-autocomplete .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-infix input{text-overflow:ellipsis}"]
            },] }
];
InputHelisaComponent.ctorParameters = () => [];
InputHelisaComponent.propDecorators = {
    placeholder: [{ type: Input }],
    floatLabel: [{ type: Input }],
    minlength: [{ type: Input }],
    maxlength: [{ type: Input }],
    autocompleteMode: [{ type: Input }],
    isSearch: [{ type: Input }],
    isFocused: [{ type: Input }],
    disabled: [{ type: Input }],
    setValue: [{ type: Output }],
    blur: [{ type: Output }],
    inputText: [{ type: ViewChild, args: ['inputText', { static: true },] }],
    showCurrencyZerosDecimal: [{ type: Input }],
    type: [{ type: Input }],
    inputFormControl: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtaGVsaXNhLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9oZWxpc2EtbGliL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2lucHV0LWhlbGlzYS9pbnB1dC1oZWxpc2EuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsU0FBUyxFQUE2QixNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsTUFBTSxDQUFOLElBQVksZUFFWDtBQUZELFdBQVksZUFBZTtJQUN6QiwyREFBTyxDQUFBO0lBQUUsNkRBQVEsQ0FBQTtJQUFFLDJEQUFPLENBQUE7SUFBRSx5REFBTSxDQUFBO0lBQUUsNkZBQXdCLENBQUE7SUFBRSx1REFBSyxDQUFBO0FBQ3JFLENBQUMsRUFGVyxlQUFlLEtBQWYsZUFBZSxRQUUxQjtBQU9ELE1BQU0sT0FBTyxvQkFBb0I7SUE2Qy9CO1FBM0NpQixzQkFBaUIsR0FBVyxHQUFHLENBQUM7UUFDaEMsdUJBQWtCLEdBQVcsR0FBRyxDQUFDO1FBQ2pDLGtCQUFhLEdBQVcsR0FBRyxDQUFDO1FBRXBDLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBQ3pCLGVBQVUsR0FBZ0MsT0FBTyxDQUFDO1FBSTNEOzs7V0FHRztRQUNNLHFCQUFnQixHQUFZLEtBQUssQ0FBQztRQUUzQyxrQ0FBa0M7UUFDekIsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUNuQyxnRUFBZ0U7UUFDdkQsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUNwQyxrSEFBa0g7UUFDbEgsOEJBQXlCLEdBQVksS0FBSyxDQUFDO1FBRTNDOztXQUVHO1FBQ00sYUFBUSxHQUFZLEtBQUssQ0FBQztRQUNuQyxVQUFLLEdBQW9CLGVBQWUsQ0FBQyxPQUFPLENBQUM7UUFFakQ7O1dBRUc7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SyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmV4cG9ydCBlbnVtIElucHV0SGVsaXNhVHlwZSB7XG4gIERFRkFVTFQsIElERU5USVRZLCBOVU1FUklDLCBET1VCTEUsIFBPU0lUSVZFT1JORUdBVElWRURPVUJMRSwgUEhPTkVcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaGVsLWlucHV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LWhlbGlzYS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2lucHV0LWhlbGlzYS5jb21wb25lbnQuc2FzcyddXG59KVxuZXhwb3J0IGNsYXNzIElucHV0SGVsaXNhQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcblxuICBwcml2YXRlIHJlYWRvbmx5IERFQ0lNQUxfU0VQQVJBVE9SOiBzdHJpbmcgPSAnLic7XG4gIHByaXZhdGUgcmVhZG9ubHkgVEhPVVNBTkRfU0VQQVJBVE9SOiBzdHJpbmcgPSAnLCc7XG4gIHByaXZhdGUgcmVhZG9ubHkgTkVHQVRJVkVfU0lHTjogc3RyaW5nID0gJy0nO1xuXG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgZmxvYXRMYWJlbDogJ25ldmVyJyB8ICdhbHdheXMnIHwgJ2F1dG8nID0gJ25ldmVyJztcbiAgQElucHV0KCkgbWlubGVuZ3RoOiBudW1iZXI7XG4gIEBJbnB1dCgpIG1heGxlbmd0aDogbnVtYmVyO1xuXG4gIC8qKiBBY3RpdmFyIG8gZGVzYWN0aXZhciBlbCBhdXRvY29tcGxldGFkb1xuICAgKiAoQ2FyYWN0ZXJpc3RpY2EgZGUgbG9zIG5hdmVnYWRvcmVzIHBhcmEgY2FtcG9zIGNvbXVuZXMgY29tb1xuICAgKiBEaXJlY2Npb24gLCBVc3VhcmlvLCBQYXNzd29yZCAuLi4gZXRjKVxuICAgKi9cbiAgQElucHV0KCkgYXV0b2NvbXBsZXRlTW9kZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8vIE1vc3RyYXIgbyBubyBlbCBpY29ubyBkZSBidXNjYXJcbiAgQElucHV0KCkgaXNTZWFyY2g6IGJvb2xlYW4gPSBmYWxzZTtcbiAgLy8gQElucHV0KCkgaW5wdXRGb3JtQ29udHJvbDogRm9ybUNvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woJycpO1xuICBASW5wdXQoKSBpc0ZvY3VzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgLy8gRXN0byBhZ3JlZ2EgZW4gZWwgdGlwbyBET1VCTEUsIE5VTUVSSUMgeSBQT1NJVElWRU9STkVHQVRJVkVET1VCTEUgIGRvcyBjZXJvcyBhbCBmaW5hbCBzaSBubyBsb3MgdGllbmUgeSBlcyB0cnVlXG4gIF9zaG93Q3VycmVuY3laZXJvc0RlY2ltYWw6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogRGVwcmVjYXRlZFxuICAgKi9cbiAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgX3R5cGU6IElucHV0SGVsaXNhVHlwZSA9IElucHV0SGVsaXNhVHlwZS5ERUZBVUxUO1xuXG4gIC8qKlxuICAgKiBEZXByZWNhdGVkXG4gICAqL1xuICBAT3V0cHV0KCkgc2V0VmFsdWU6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBAT3V0cHV0KCkgYmx1cjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZm9ybUNvbnRyb2xNYXNrOiBGb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgnJyk7XG4gIHByaXZhdGUgcmVhbFZhbHVlOiBzdHJpbmcgPSAnJztcbiAgcHJpdmF0ZSBpbnB1dEZvcm1SZWFsOiBGb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgnJyk7XG4gIHByaXZhdGUgaXNVc2VyQ2hhbmdlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQFZpZXdDaGlsZCgnaW5wdXRUZXh0Jywge3N0YXRpYzogdHJ1ZX0pIGlucHV0VGV4dDogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBzaG93Q3VycmVuY3laZXJvc0RlY2ltYWwobmV3U2hvd0N1cnJlbmN5WmVyb3NEZWNpbWFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2hvd0N1cnJlbmN5WmVyb3NEZWNpbWFsID0gbmV3U2hvd0N1cnJlbmN5WmVyb3NEZWNpbWFsO1xuICAgIHRoaXMuY2hhbmdlVmFsdWUodGhpcy5pbnB1dEZvcm1SZWFsLnZhbHVlLCB0cnVlKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCB0eXBlKG5ld1R5cGU6IElucHV0SGVsaXNhVHlwZSkge1xuICAgIHRoaXMuX3R5cGUgPSBuZXdUeXBlO1xuICAgIHRoaXMuY2hhbmdlVmFsdWUodGhpcy5pbnB1dEZvcm1SZWFsLnZhbHVlLCB0cnVlKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBpbnB1dEZvcm1Db250cm9sKGZvcm1Db250cm9sOiBGb3JtQ29udHJvbCkge1xuICAgIHRoaXMuaW5wdXRGb3JtUmVhbCA9IGZvcm1Db250cm9sO1xuICAgIHRoaXMuaW5wdXRGb3JtUmVhbC5yZWdpc3Rlck9uRGlzYWJsZWRDaGFuZ2UoKChpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCA9PiB7XG4gICAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgICB0aGlzLmZvcm1Db250cm9sTWFzay5kaXNhYmxlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZvcm1Db250cm9sTWFzay5lbmFibGUoKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgdGhpcy5pbnB1dEZvcm1SZWFsLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoKGRhdGE6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgdGhpcy5zdGF0dXNDaGFuZ2UodGhpcy5pbnB1dEZvcm1SZWFsLnN0YXR1cyk7XG4gICAgICBpZiAodGhpcy5nZXRNYXNrZWRWYWx1ZShkYXRhLCAhdGhpcy5pc1VzZXJDaGFuZ2UpICE9PSB0aGlzLmZvcm1Db250cm9sTWFzay52YWx1ZSkge1xuICAgICAgICB0aGlzLmNoYW5nZVZhbHVlKGRhdGEsICF0aGlzLmlzVXNlckNoYW5nZSk7XG4gICAgICAgIGlmICh0aGlzLmlzRm9jdXNlZCkge1xuICAgICAgICAgIHRoaXMub25Gb2N1cyhudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5pc1VzZXJDaGFuZ2UgPSBmYWxzZTtcbiAgICB9KTtcbiAgICB0aGlzLmZvcm1Db250cm9sTWFzay5zZXRWYWxpZGF0b3JzKHRoaXMuaW5wdXRGb3JtUmVhbC52YWxpZGF0b3IpO1xuICAgIHRoaXMuY2hhbmdlVmFsdWUodGhpcy5pbnB1dEZvcm1SZWFsLnZhbHVlLCB0cnVlKTtcbiAgICAvLyBkaXNhYmxlIGNvbnRyb2xcbiAgICBpZiAoZm9ybUNvbnRyb2wuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZm9ybUNvbnRyb2xNYXNrLmRpc2FibGUoeyBvbmx5U2VsZjogdHJ1ZSB9KTtcbiAgICB9XG4gICAgdGhpcy5pbnB1dEZvcm1SZWFsLnN0YXR1c0NoYW5nZXMuc3Vic2NyaWJlKFxuICAgICAgKGRhdGE6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnN0YXR1c0NoYW5nZShkYXRhKTtcbiAgICAgICAgaWYgKHRoaXMuaXNGb2N1c2VkKSB7XG4gICAgICAgICAgdGhpcy5vbkZvY3VzKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG5cbiAgcHJpdmF0ZSBzdGF0dXNDaGFuZ2UoZGF0YTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGRhdGEgPT09ICdJTlZBTElEJykge1xuICAgICAgdGhpcy5mb3JtQ29udHJvbE1hc2suc2V0RXJyb3JzKHsga2V5OiAnRXJyb3IgZGUgdmFsaWRhY2nDs24uJyB9KTtcbiAgICAgIHRoaXMuZm9ybUNvbnRyb2xNYXNrLm1hcmtBc1RvdWNoZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3JtQ29udHJvbE1hc2suc2V0RXJyb3JzKG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRm9jdXNlZCkge1xuICAgICAgdGhpcy5pbnB1dFRleHQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAvLyB0aGlzLmlzUGFyZW50RGlzYWJsZWQoKTtcbiAgfVxuXG4gIC8qaXNQYXJlbnREaXNhYmxlZCgpOiB2b2lkIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLm5hbWVJbnB1dC5uYXRpdmVFbGVtZW50LmNsb3Nlc3QoJy5ody1kaXNhYmxlZC1tb2RlJykpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH0qL1xuXG4gIHNlYXJjaCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldFZhbHVlLmVtaXQodGhpcy5yZWFsVmFsdWUpO1xuICB9XG5cbiAgbmdNb2RlbENoYW5nZShldmVudDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5pc1VzZXJDaGFuZ2UgPSB0cnVlO1xuICAgIHRoaXMuY2hhbmdlVmFsdWUoZXZlbnQsIGZhbHNlKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hhbmdlVmFsdWUoZXZlbnQ6IHN0cmluZywgaXNGaW5pc2hPclN0YXJ0OiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGV2ZW50ICE9IG51bGwpIHtcbiAgICAgIGV2ZW50ID0gZXZlbnQgKyAnJztcbiAgICB9XG4gICAgbGV0IHBvc2l0aW9uOiBudW1iZXIgPSB0aGlzLmlucHV0VGV4dC5uYXRpdmVFbGVtZW50LnNlbGVjdGlvblN0YXJ0O1xuICAgIGNvbnN0IGxlbmd0aDogbnVtYmVyID0gZXZlbnQgPyBldmVudC5sZW5ndGggOiAwO1xuICAgIHRoaXMucmVhbFZhbHVlID0gdGhpcy5nZXRSZWFsVmFsdWUoZXZlbnQpO1xuICAgIGlmICh0aGlzLmdldE1hc2tlZFZhbHVlKHRoaXMucmVhbFZhbHVlLCBpc0ZpbmlzaE9yU3RhcnQpICE9PSB0aGlzLmZvcm1Db250cm9sTWFzay52YWx1ZSkge1xuICAgICAgdGhpcy5mb3JtQ29udHJvbE1hc2suc2V0VmFsdWUodGhpcy5nZXRNYXNrZWRWYWx1ZSh0aGlzLnJlYWxWYWx1ZSwgaXNGaW5pc2hPclN0YXJ0KSk7XG4gICAgICBwb3NpdGlvbiArPSB0aGlzLmlucHV0VGV4dC5uYXRpdmVFbGVtZW50LnZhbHVlLmxlbmd0aCAtIGxlbmd0aDtcbiAgICAgIHRoaXMuaW5wdXRUZXh0Lm5hdGl2ZUVsZW1lbnQuc2VsZWN0aW9uU3RhcnQgPSBwb3NpdGlvbjtcbiAgICAgIHRoaXMuaW5wdXRUZXh0Lm5hdGl2ZUVsZW1lbnQuc2VsZWN0aW9uRW5kID0gcG9zaXRpb247XG4gICAgfVxuICAgIGlmICh0aGlzLmlucHV0Rm9ybVJlYWwudmFsdWUgIT09IHRoaXMucmVhbFZhbHVlKSB7XG4gICAgICB0aGlzLmlucHV0Rm9ybVJlYWwuc2V0VmFsdWUodGhpcy5yZWFsVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0TWFza2VkVmFsdWUoc3RyOiBzdHJpbmcsIGlzRmluaXNoOiBib29sZWFuKTogc3RyaW5nIHtcbiAgICBpZiAoc3RyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHN0ciA9IHN0ciArICcnO1xuICAgIGlmICh0aGlzLl90eXBlID09PSBJbnB1dEhlbGlzYVR5cGUuREVGQVVMVCB8fCB0aGlzLl90eXBlID09PSBJbnB1dEhlbGlzYVR5cGUuUEhPTkUpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGxldCBtYXNrZWRTdHI6IHN0cmluZyA9ICcnO1xuICAgIGlmICh0aGlzLl90eXBlID09PSBJbnB1dEhlbGlzYVR5cGUuSURFTlRJVFkpIHtcbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IHN0ci5sZW5ndGggLSAxLCBqOiBudW1iZXIgPSAwOyBpID49IDA7IGktLSwgaisrKSB7XG4gICAgICAgIGlmIChqID4gMCAmJiBqICUgMyA9PT0gMCkge1xuICAgICAgICAgIG1hc2tlZFN0ciA9IHRoaXMuREVDSU1BTF9TRVBBUkFUT1IgKyBtYXNrZWRTdHI7XG4gICAgICAgIH1cbiAgICAgICAgbWFza2VkU3RyID0gc3RyW2ldICsgbWFza2VkU3RyO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5fdHlwZSA9PT0gSW5wdXRIZWxpc2FUeXBlLk5VTUVSSUMpIHtcbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IHN0ci5sZW5ndGggLSAxLCBqOiBudW1iZXIgPSAwOyBpID49IDA7IGktLSwgaisrKSB7XG4gICAgICAgIGlmIChqID4gMCAmJiBqICUgMyA9PT0gMCkge1xuICAgICAgICAgIG1hc2tlZFN0ciA9IHRoaXMuVEhPVVNBTkRfU0VQQVJBVE9SICsgbWFza2VkU3RyO1xuICAgICAgICB9XG4gICAgICAgIG1hc2tlZFN0ciA9IHN0cltpXSArIG1hc2tlZFN0cjtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFN0ciA9IHRoaXMuYWRkWmVyb0RlY2ltYWxzKG1hc2tlZFN0ciwgaXNGaW5pc2gpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdHlwZSA9PT0gSW5wdXRIZWxpc2FUeXBlLkRPVUJMRSkge1xuICAgICAgbWFza2VkU3RyID0gdGhpcy5nZXRNYXNrZWRWYWx1ZURvdWJsZShzdHIpO1xuICAgICAgbWFza2VkU3RyID0gdGhpcy5hZGRaZXJvRGVjaW1hbHMobWFza2VkU3RyLCBpc0ZpbmlzaCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl90eXBlID09PSBJbnB1dEhlbGlzYVR5cGUuUE9TSVRJVkVPUk5FR0FUSVZFRE9VQkxFKSB7XG4gICAgICBjb25zdCBpc05lZ2F0aXZlVmFsdWU6IGJvb2xlYW4gPSBzdHIuaW5kZXhPZih0aGlzLk5FR0FUSVZFX1NJR04pID09PSAwO1xuICAgICAgY29uc3QgbmV3U3RyOiBzdHJpbmcgPSBpc05lZ2F0aXZlVmFsdWUgPyBzdHIucmVwbGFjZSh0aGlzLk5FR0FUSVZFX1NJR04sICcnKSA6IHN0cjtcbiAgICAgIG1hc2tlZFN0ciA9IHRoaXMuZ2V0TWFza2VkVmFsdWVEb3VibGUobmV3U3RyKTtcbiAgICAgIGlmIChpc05lZ2F0aXZlVmFsdWUpIHtcbiAgICAgICAgbWFza2VkU3RyID0gdGhpcy5ORUdBVElWRV9TSUdOICsgbWFza2VkU3RyO1xuICAgICAgfVxuICAgICAgbWFza2VkU3RyID0gdGhpcy5hZGRaZXJvRGVjaW1hbHMobWFza2VkU3RyLCBpc0ZpbmlzaCk7XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRTdHI7XG4gIH1cblxuICBwcml2YXRlIGFkZFplcm9EZWNpbWFscyhtYXNrZWRTdHI6IHN0cmluZywgaXNGaW5pc2g6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLl9zaG93Q3VycmVuY3laZXJvc0RlY2ltYWwgJiYgaXNGaW5pc2gpIHtcbiAgICAgIGNvbnN0IGluZGV4RGVjaW1hbFNlcGFyYXRvcjogbnVtYmVyID0gbWFza2VkU3RyLmluZGV4T2YodGhpcy5ERUNJTUFMX1NFUEFSQVRPUik7XG4gICAgICBpZiAoaW5kZXhEZWNpbWFsU2VwYXJhdG9yIDwgMCkge1xuICAgICAgICBtYXNrZWRTdHIgKz0gJy4wMCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZGVjaW1hbHM6IHN0cmluZyA9IG1hc2tlZFN0ci5zdWJzdHJpbmcoaW5kZXhEZWNpbWFsU2VwYXJhdG9yKTtcbiAgICAgICAgd2hpbGUgKGRlY2ltYWxzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICBkZWNpbWFscyArPSAnMCc7XG4gICAgICAgIH1cbiAgICAgICAgbWFza2VkU3RyID0gbWFza2VkU3RyLnN1YnN0cmluZygwLCBpbmRleERlY2ltYWxTZXBhcmF0b3IpICsgZGVjaW1hbHM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRTdHI7XG4gIH1cblxuICBwcml2YXRlIGdldE1hc2tlZFZhbHVlRG91YmxlKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgbWFza2VkU3RyOiBzdHJpbmcgPSAnJztcbiAgICBpZiAoc3RyLmluZGV4T2YodGhpcy5ERUNJTUFMX1NFUEFSQVRPUikgPj0gMCkge1xuICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gc3RyLmluZGV4T2YodGhpcy5ERUNJTUFMX1NFUEFSQVRPUik7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbWFza2VkU3RyICs9IHN0cltpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gKHN0ci5pbmRleE9mKHRoaXMuREVDSU1BTF9TRVBBUkFUT1IpID49IDAgPyBzdHIuaW5kZXhPZih0aGlzLkRFQ0lNQUxfU0VQQVJBVE9SKSA6IHN0ci5sZW5ndGgpIC0gMSxcbiAgICAgIGo6IG51bWJlciA9IDA7IGkgPj0gMDsgaS0tLCBqKyspIHtcblxuICAgICAgaWYgKGogPiAwICYmIGogJSAzID09PSAwKSB7XG4gICAgICAgIG1hc2tlZFN0ciA9IHRoaXMuVEhPVVNBTkRfU0VQQVJBVE9SICsgbWFza2VkU3RyO1xuICAgICAgfVxuICAgICAgbWFza2VkU3RyID0gc3RyW2ldICsgbWFza2VkU3RyO1xuICAgIH1cbiAgICByZXR1cm4gbWFza2VkU3RyO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSZWFsVmFsdWUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChzdHIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgc3RyID0gc3RyICsgJyc7XG4gICAgbGV0IHJlYWxTdHI6IHN0cmluZyA9ICcnO1xuICAgIGlmICh0aGlzLl90eXBlID09PSBJbnB1dEhlbGlzYVR5cGUuREVGQVVMVCkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3R5cGUgPT09IElucHV0SGVsaXNhVHlwZS5JREVOVElUWSB8fCB0aGlzLl90eXBlID09PSBJbnB1dEhlbGlzYVR5cGUuTlVNRVJJQyB8fCB0aGlzLl90eXBlID09PSBJbnB1dEhlbGlzYVR5cGUuUEhPTkUpIHtcbiAgICAgIGZvciAoY29uc3Qgc3RySXRlbSBvZiBzdHIpIHtcbiAgICAgICAgaWYgKHN0ckl0ZW0ubWF0Y2goJ1swLTldJykpIHtcbiAgICAgICAgICByZWFsU3RyICs9IHN0ckl0ZW07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuX3R5cGUgPT09IElucHV0SGVsaXNhVHlwZS5ET1VCTEUpIHtcbiAgICAgIHJlYWxTdHIgPSB0aGlzLmdldFJlYWxWYWx1ZURvdWJsZShzdHIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdHlwZSA9PT0gSW5wdXRIZWxpc2FUeXBlLlBPU0lUSVZFT1JORUdBVElWRURPVUJMRSkge1xuICAgICAgY29uc3QgaXNOZWdhdGl2ZVZhbHVlOiBib29sZWFuID0gc3RyLmluZGV4T2YodGhpcy5ORUdBVElWRV9TSUdOKSA9PT0gMDtcbiAgICAgIGNvbnN0IG5ld1N0cjogc3RyaW5nID0gaXNOZWdhdGl2ZVZhbHVlID8gc3RyLnJlcGxhY2UodGhpcy5ORUdBVElWRV9TSUdOLCAnJykgOiBzdHI7XG4gICAgICByZWFsU3RyID0gdGhpcy5nZXRSZWFsVmFsdWVEb3VibGUobmV3U3RyKVxuICAgICAgaWYgKGlzTmVnYXRpdmVWYWx1ZSkge1xuICAgICAgICByZWFsU3RyID0gdGhpcy5ORUdBVElWRV9TSUdOICsgcmVhbFN0cjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlYWxTdHI7XG4gIH1cblxuICBnZXRSZWFsVmFsdWVEb3VibGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCByZWFsU3RyOiBzdHJpbmcgPSAnJztcbiAgICBsZXQgaGF2ZURvdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICBmb3IgKGNvbnN0IHN0ckl0ZW0gb2Ygc3RyKSB7XG4gICAgICAgIGlmIChzdHJJdGVtLm1hdGNoKCdbMC05XScpIHx8ICgoc3RySXRlbSA9PT0gdGhpcy5ERUNJTUFMX1NFUEFSQVRPUikgJiYgIWhhdmVEb3QpKSB7XG4gICAgICAgICAgcmVhbFN0ciArPSBzdHJJdGVtO1xuICAgICAgICB9XG4gICAgICAgIGhhdmVEb3QgPSBoYXZlRG90IHx8IChzdHJJdGVtID09PSB0aGlzLkRFQ0lNQUxfU0VQQVJBVE9SKTtcbiAgICAgIH1cbiAgICByZXR1cm4gcmVhbFN0cjtcbiAgfVxuXG4gIG9uRm9jdXMoJGV2ZW50OiBGb2N1c0V2ZW50KTogdm9pZCB7XG4gICAgaWYgKCh0aGlzLl90eXBlID09PSBJbnB1dEhlbGlzYVR5cGUuTlVNRVJJQyB8fCB0aGlzLl90eXBlID09PSBJbnB1dEhlbGlzYVR5cGUuRE9VQkxFIHx8IHRoaXMuX3R5cGUgPT09IElucHV0SGVsaXNhVHlwZS5QT1NJVElWRU9STkVHQVRJVkVET1VCTEUpICYmXG4gICAgICBOdW1iZXIodGhpcy5nZXRSZWFsVmFsdWUodGhpcy5pbnB1dFRleHQubmF0aXZlRWxlbWVudC52YWx1ZSkpID09PSAwKSB7XG4gICAgICB0aGlzLmlucHV0VGV4dC5uYXRpdmVFbGVtZW50LnNlbGVjdCgpO1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZShldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmNoYW5nZVZhbHVlKChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsIHRydWUpO1xuICB9XG59XG4iXX0=