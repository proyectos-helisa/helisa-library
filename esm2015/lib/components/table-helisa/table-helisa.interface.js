export var ColumnType;
(function (ColumnType) {
    ColumnType[ColumnType["NORMAL"] = 0] = "NORMAL";
    ColumnType[ColumnType["URL"] = 1] = "URL";
})(ColumnType || (ColumnType = {}));
export var EventScope;
(function (EventScope) {
    EventScope[EventScope["USER"] = 0] = "USER";
    EventScope[EventScope["CODE_CALL"] = 1] = "CODE_CALL";
})(EventScope || (EventScope = {}));
export var TotalType;
(function (TotalType) {
    TotalType[TotalType["SUM"] = 0] = "SUM";
    TotalType[TotalType["AVERAGE"] = 1] = "AVERAGE";
    TotalType[TotalType["COUNT"] = 2] = "COUNT";
})(TotalType || (TotalType = {}));
export var ChangeColumnConfigurationType;
(function (ChangeColumnConfigurationType) {
    ChangeColumnConfigurationType[ChangeColumnConfigurationType["SORT"] = 0] = "SORT";
    ChangeColumnConfigurationType[ChangeColumnConfigurationType["UNKNOWN"] = 1] = "UNKNOWN";
    ChangeColumnConfigurationType[ChangeColumnConfigurationType["TOTAL"] = 2] = "TOTAL";
})(ChangeColumnConfigurationType || (ChangeColumnConfigurationType = {}));
export var TableHelisaType;
(function (TableHelisaType) {
    TableHelisaType[TableHelisaType["REMOTE"] = 0] = "REMOTE";
    TableHelisaType[TableHelisaType["LOCAL"] = 1] = "LOCAL";
})(TableHelisaType || (TableHelisaType = {}));
// @dynamic
export class ColumnConfigUtil {
    getValue(obj, column) {
        return column.name.split('.').reduce((o, field) => o && o[field], obj);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaGVsaXNhLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9oZWxpc2EtbGliL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhYmxlLWhlbGlzYS90YWJsZS1oZWxpc2EuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLFVBRVg7QUFGRCxXQUFZLFVBQVU7SUFDcEIsK0NBQU0sQ0FBQTtJQUFFLHlDQUFHLENBQUE7QUFDYixDQUFDLEVBRlcsVUFBVSxLQUFWLFVBQVUsUUFFckI7QUFnQ0QsTUFBTSxDQUFOLElBQVksVUFFWDtBQUZELFdBQVksVUFBVTtJQUNwQiwyQ0FBSSxDQUFBO0lBQUUscURBQVMsQ0FBQTtBQUNqQixDQUFDLEVBRlcsVUFBVSxLQUFWLFVBQVUsUUFFckI7QUFFRCxNQUFNLENBQU4sSUFBWSxTQUVYO0FBRkQsV0FBWSxTQUFTO0lBQ25CLHVDQUFHLENBQUE7SUFBRSwrQ0FBTyxDQUFBO0lBQUUsMkNBQUssQ0FBQTtBQUNyQixDQUFDLEVBRlcsU0FBUyxLQUFULFNBQVMsUUFFcEI7QUFFRCxNQUFNLENBQU4sSUFBWSw2QkFFWDtBQUZELFdBQVksNkJBQTZCO0lBQ3ZDLGlGQUFJLENBQUE7SUFBRSx1RkFBTyxDQUFBO0lBQUUsbUZBQUssQ0FBQTtBQUN0QixDQUFDLEVBRlcsNkJBQTZCLEtBQTdCLDZCQUE2QixRQUV4QztBQXVDRCxNQUFNLENBQU4sSUFBWSxlQUVYO0FBRkQsV0FBWSxlQUFlO0lBQ3pCLHlEQUFNLENBQUE7SUFBRSx1REFBSyxDQUFBO0FBQ2YsQ0FBQyxFQUZXLGVBQWUsS0FBZixlQUFlLFFBRTFCO0FBbUJELFdBQVc7QUFDWCxNQUFNLE9BQU8sZ0JBQWdCO0lBRTNCLFFBQVEsQ0FBQyxHQUFNLEVBQUUsTUFBb0I7UUFDbkMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFJLEVBQUUsS0FBYSxFQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvcnREaXJlY3Rpb24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zb3J0JztcbmltcG9ydCB7IFJvd0RhdGEgfSBmcm9tICcuL3RhYmxlLWhlbGlzYS5jb21wb25lbnQnO1xuXG5leHBvcnQgZW51bSBDb2x1bW5UeXBlIHtcbiAgTk9STUFMLCBVUkxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb2x1bW5Db25maWcge1xuICBuYW1lOiBzdHJpbmc7XG4gIHRpdGxlPzogc3RyaW5nO1xuICB2aXNpYmxlPzogYm9vbGVhbjtcbiAgc29ydGFibGU/OiBib29sZWFuO1xuICBncm91cGFibGU/OiBib29sZWFuO1xuICB0b3RhbFR5cGU/OiBUb3RhbFR5cGU7XG4gIHNlYXJjaGFibGU/OiBib29sZWFuO1xuICBzb3J0RGlyZWN0aW9uPzogU29ydERpcmVjdGlvbjtcbiAgc3VidGl0bGU/OiBzdHJpbmc7XG4gIGNvbHNwYW5UaXRsZT86IG51bWJlcjtcbiAgY29sc3BhblN1YnRpdGxlPzogbnVtYmVyO1xuICBjb2x1bW5TdHlsZT86IHN0cmluZztcbiAgY29sdW1uVHlwZT86IENvbHVtblR5cGU7XG4gIGlzU2VsZWN0YWJsZT86IGJvb2xlYW47XG4gIGhlYWRlclN0eWxlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFkZFJvd0J1dHRvbiB7XG4gIHRleHQ6IHN0cmluZztcbiAgc2hvd0J1dHRvbjogYm9vbGVhbjtcbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG4gIHRvb2xUaXBUZXh0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVtcHR5TWVzc2FnZUNvbHVtbiB7XG4gIHRleHQ6IHN0cmluZztcbiAgaXNFbmFibGVkOiBib29sZWFuO1xufVxuXG5leHBvcnQgZW51bSBFdmVudFNjb3BlIHtcbiAgVVNFUiwgQ09ERV9DQUxMXG59XG5cbmV4cG9ydCBlbnVtIFRvdGFsVHlwZSB7XG4gIFNVTSwgQVZFUkFHRSwgQ09VTlRcbn1cblxuZXhwb3J0IGVudW0gQ2hhbmdlQ29sdW1uQ29uZmlndXJhdGlvblR5cGUge1xuICBTT1JULCBVTktOT1dOLCBUT1RBTFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50Q29sdW1uIHtcbiAgY29sdW1uOiBDb2x1bW5Db25maWc7XG4gIGNvbHVtbkNvbmZpZ3VyYXRpb25zOiBBcnJheTxDb2x1bW5Db25maWc+O1xuICB0eXBlOiBDaGFuZ2VDb2x1bW5Db25maWd1cmF0aW9uVHlwZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb3RhbFRhYmxlSGVsaXNhIHtcbiAgY29sdW1uOiBDb2x1bW5Db25maWc7XG4gIHZhbHVlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG90YWxHcm91cCB7XG4gIHN1bTogbnVtYmVyO1xuICBjb3VudDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50U2VhcmNoIHtcbiAgdGV4dDogc3RyaW5nO1xuICBjb2x1bW5Db25maWd1cmF0aW9uczogQXJyYXk8Q29sdW1uQ29uZmlnPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0VGFibGVIZWxpc2E8VD4ge1xuICBwYWdlOiBudW1iZXI7XG4gIGJvZHk6IHt9IHwgVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEcm9wRWxlbWVudDxUPiB7XG4gdmFsdWU6IFQ7XG4gb3JkZXI6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3RPYmplY3Q8VD4ge1xuICB2YWx1ZTogVDtcbiAgc2NvcGU6IEV2ZW50U2NvcGU7XG4gIGtleUFjdGlvbkltcG9ydD86IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gVGFibGVIZWxpc2FUeXBlIHtcbiAgUkVNT1RFLCBMT0NBTFxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2VsbDxUPiB7XG4gIGNvbHVtbjogQ29sdW1uQ29uZmlnO1xuICByb3c6IFJvd0RhdGE8VD4gfCBUO1xuIH1cblxuZXhwb3J0IGludGVyZmFjZSBDb25maWdDZWxsU3R5bGVzPFQ+IHtcbiAgIGNlbGxEYXRhOiBUO1xuICAgY2xhc3NDZWxsOiBzdHJpbmc7XG4gfVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ1Jvd1N0eWxlczxUPiB7XG4gIGNvbHVtbjogQ29sdW1uQ29uZmlnO1xuICBkYXRhOiB7fSB8IFQ7XG4gIGNsYXNzUm93OiBzdHJpbmc7XG59XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgQ29sdW1uQ29uZmlnVXRpbDxUPiB7XG5cbiAgZ2V0VmFsdWUob2JqOiBULCBjb2x1bW46IENvbHVtbkNvbmZpZyk6IFQgfCBudW1iZXIgfCBzdHJpbmcge1xuICAgIHJldHVybiBjb2x1bW4ubmFtZS5zcGxpdCgnLicpLnJlZHVjZSgobzogVCwgZmllbGQ6IHN0cmluZyk6IFQgfCBzdHJpbmcgPT4gbyAmJiBvW2ZpZWxkXSwgb2JqKTtcbiAgfVxufVxuXG4iXX0=