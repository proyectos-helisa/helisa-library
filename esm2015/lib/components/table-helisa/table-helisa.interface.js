export var ColumnType;
(function (ColumnType) {
    ColumnType[ColumnType["NORMAL"] = 0] = "NORMAL";
    ColumnType[ColumnType["URL"] = 1] = "URL";
})(ColumnType || (ColumnType = {}));
export var EventScope;
(function (EventScope) {
    EventScope[EventScope["USER"] = 0] = "USER";
    EventScope[EventScope["CODE_CALL"] = 1] = "CODE_CALL";
})(EventScope || (EventScope = {}));
export var TotalType;
(function (TotalType) {
    TotalType[TotalType["SUM"] = 0] = "SUM";
    TotalType[TotalType["AVERAGE"] = 1] = "AVERAGE";
    TotalType[TotalType["COUNT"] = 2] = "COUNT";
})(TotalType || (TotalType = {}));
export var ChangeColumnConfigurationType;
(function (ChangeColumnConfigurationType) {
    ChangeColumnConfigurationType[ChangeColumnConfigurationType["SORT"] = 0] = "SORT";
    ChangeColumnConfigurationType[ChangeColumnConfigurationType["UNKNOWN"] = 1] = "UNKNOWN";
    ChangeColumnConfigurationType[ChangeColumnConfigurationType["TOTAL"] = 2] = "TOTAL";
})(ChangeColumnConfigurationType || (ChangeColumnConfigurationType = {}));
export var TableHelisaType;
(function (TableHelisaType) {
    TableHelisaType[TableHelisaType["REMOTE"] = 0] = "REMOTE";
    TableHelisaType[TableHelisaType["LOCAL"] = 1] = "LOCAL";
})(TableHelisaType || (TableHelisaType = {}));
// @dynamic
export class ColumnConfigUtil {
    getValue(obj, column) {
        return column.name.split('.').reduce((o, field) => o && o[field], obj);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaGVsaXNhLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2hlbGlzYS1saWIvc3JjL2xpYi9jb21wb25lbnRzL3RhYmxlLWhlbGlzYS90YWJsZS1oZWxpc2EuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBTixJQUFZLFVBRVg7QUFGRCxXQUFZLFVBQVU7SUFDcEIsK0NBQU0sQ0FBQTtJQUFFLHlDQUFHLENBQUE7QUFDYixDQUFDLEVBRlcsVUFBVSxLQUFWLFVBQVUsUUFFckI7QUErQkQsTUFBTSxDQUFOLElBQVksVUFFWDtBQUZELFdBQVksVUFBVTtJQUNwQiwyQ0FBSSxDQUFBO0lBQUUscURBQVMsQ0FBQTtBQUNqQixDQUFDLEVBRlcsVUFBVSxLQUFWLFVBQVUsUUFFckI7QUFFRCxNQUFNLENBQU4sSUFBWSxTQUVYO0FBRkQsV0FBWSxTQUFTO0lBQ25CLHVDQUFHLENBQUE7SUFBRSwrQ0FBTyxDQUFBO0lBQUUsMkNBQUssQ0FBQTtBQUNyQixDQUFDLEVBRlcsU0FBUyxLQUFULFNBQVMsUUFFcEI7QUFFRCxNQUFNLENBQU4sSUFBWSw2QkFFWDtBQUZELFdBQVksNkJBQTZCO0lBQ3ZDLGlGQUFJLENBQUE7SUFBRSx1RkFBTyxDQUFBO0lBQUUsbUZBQUssQ0FBQTtBQUN0QixDQUFDLEVBRlcsNkJBQTZCLEtBQTdCLDZCQUE2QixRQUV4QztBQXNDRCxNQUFNLENBQU4sSUFBWSxlQUVYO0FBRkQsV0FBWSxlQUFlO0lBQ3pCLHlEQUFNLENBQUE7SUFBRSx1REFBSyxDQUFBO0FBQ2YsQ0FBQyxFQUZXLGVBQWUsS0FBZixlQUFlLFFBRTFCO0FBbUJELFdBQVc7QUFDWCxNQUFNLE9BQU8sZ0JBQWdCO0lBRTNCLFFBQVEsQ0FBQyxHQUFNLEVBQUUsTUFBb0I7UUFDbkMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFJLEVBQUUsS0FBYSxFQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvcnREaXJlY3Rpb24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zb3J0JztcclxuaW1wb3J0IHsgUm93RGF0YSB9IGZyb20gJy4vdGFibGUtaGVsaXNhLmNvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZW51bSBDb2x1bW5UeXBlIHtcclxuICBOT1JNQUwsIFVSTFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtbkNvbmZpZyB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG4gIHZpc2libGU/OiBib29sZWFuO1xyXG4gIHNvcnRhYmxlPzogYm9vbGVhbjtcclxuICBncm91cGFibGU/OiBib29sZWFuO1xyXG4gIHRvdGFsVHlwZT86IFRvdGFsVHlwZTtcclxuICBzZWFyY2hhYmxlPzogYm9vbGVhbjtcclxuICBzb3J0RGlyZWN0aW9uPzogU29ydERpcmVjdGlvbjtcclxuICBzdWJ0aXRsZT86IHN0cmluZztcclxuICBjb2xzcGFuVGl0bGU/OiBudW1iZXI7XHJcbiAgY29sc3BhblN1YnRpdGxlPzogbnVtYmVyO1xyXG4gIGNvbHVtblN0eWxlPzogc3RyaW5nO1xyXG4gIGNvbHVtblR5cGU/OiBDb2x1bW5UeXBlO1xyXG4gIGlzU2VsZWN0YWJsZT86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWRkUm93QnV0dG9uIHtcclxuICB0ZXh0OiBzdHJpbmc7XHJcbiAgc2hvd0J1dHRvbjogYm9vbGVhbjtcclxuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcclxuICB0b29sVGlwVGV4dD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFbXB0eU1lc3NhZ2VDb2x1bW4ge1xyXG4gIHRleHQ6IHN0cmluZztcclxuICBpc0VuYWJsZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEV2ZW50U2NvcGUge1xyXG4gIFVTRVIsIENPREVfQ0FMTFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBUb3RhbFR5cGUge1xyXG4gIFNVTSwgQVZFUkFHRSwgQ09VTlRcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQ2hhbmdlQ29sdW1uQ29uZmlndXJhdGlvblR5cGUge1xyXG4gIFNPUlQsIFVOS05PV04sIFRPVEFMXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRDb2x1bW4ge1xyXG4gIGNvbHVtbjogQ29sdW1uQ29uZmlnO1xyXG4gIGNvbHVtbkNvbmZpZ3VyYXRpb25zOiBBcnJheTxDb2x1bW5Db25maWc+O1xyXG4gIHR5cGU6IENoYW5nZUNvbHVtbkNvbmZpZ3VyYXRpb25UeXBlO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRvdGFsVGFibGVIZWxpc2Ege1xyXG4gIGNvbHVtbjogQ29sdW1uQ29uZmlnO1xyXG4gIHZhbHVlOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG90YWxHcm91cCB7XHJcbiAgc3VtOiBudW1iZXI7XHJcbiAgY291bnQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFdmVudFNlYXJjaCB7XHJcbiAgdGV4dDogc3RyaW5nO1xyXG4gIGNvbHVtbkNvbmZpZ3VyYXRpb25zOiBBcnJheTxDb2x1bW5Db25maWc+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RUYWJsZUhlbGlzYTxUPiB7XHJcbiAgcGFnZTogbnVtYmVyO1xyXG4gIGJvZHk6IHt9IHwgVDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEcm9wRWxlbWVudDxUPiB7XHJcbiB2YWx1ZTogVDtcclxuIG9yZGVyOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0T2JqZWN0PFQ+IHtcclxuICB2YWx1ZTogVDtcclxuICBzY29wZTogRXZlbnRTY29wZTtcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVGFibGVIZWxpc2FUeXBlIHtcclxuICBSRU1PVEUsIExPQ0FMXHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENlbGw8VD4ge1xyXG4gIGNvbHVtbjogQ29sdW1uQ29uZmlnO1xyXG4gIHJvdzogUm93RGF0YTxUPiB8IFQ7XHJcbiB9XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ0NlbGxTdHlsZXM8VD4ge1xyXG4gICBjZWxsRGF0YTogVDtcclxuICAgY2xhc3NDZWxsOiBzdHJpbmc7XHJcbiB9XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ1Jvd1N0eWxlczxUPiB7XHJcbiAgY29sdW1uOiBDb2x1bW5Db25maWc7XHJcbiAgZGF0YToge30gfCBUO1xyXG4gIGNsYXNzUm93OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8vIEBkeW5hbWljXHJcbmV4cG9ydCBjbGFzcyBDb2x1bW5Db25maWdVdGlsPFQ+IHtcclxuXHJcbiAgZ2V0VmFsdWUob2JqOiBULCBjb2x1bW46IENvbHVtbkNvbmZpZyk6IFQgfCBudW1iZXIgfCBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGNvbHVtbi5uYW1lLnNwbGl0KCcuJykucmVkdWNlKChvOiBULCBmaWVsZDogc3RyaW5nKTogVCB8IHN0cmluZyA9PiBvICYmIG9bZmllbGRdLCBvYmopO1xyXG4gIH1cclxufVxyXG5cclxuIl19