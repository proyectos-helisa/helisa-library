import { Injectable } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class TreeHelisaService {
    constructor() {
        // Observable string sources
        this.emitNodeSelected = new BehaviorSubject(1);
        // Observable string streams
        this.nodeSelected = this.emitNodeSelected.asObservable();
        // Observable string sources
        this.emitDataSource = new BehaviorSubject(undefined);
        // Observable string streams
        this.dataSourceObservable = this.emitDataSource.asObservable();
        // Expand node observable
        this.emitExpandAllNodes = new BehaviorSubject(null);
        this.nodeExpand = this.emitExpandAllNodes.asObservable();
        // Collapse node observable
        this.emitCollapseAllNodes = new BehaviorSubject(null);
        this.nodeCollapse = this.emitCollapseAllNodes.asObservable();
        this.emitRefreshTree = new Subject();
        this.refreshTreeObservable = this.emitRefreshTree.asObservable();
        this.emitRefreshTreeWithPagination = new Subject();
        this.refreshTreeWithPaginationObservable = this.emitRefreshTreeWithPagination.asObservable();
        this.emitExpandOneNode = new Subject();
        this.expandOneNodeObservable = this.emitExpandOneNode.asObservable();
        this.emitCollapseOneNode = new Subject();
        this.collapseOneNodeObservable = this.emitCollapseOneNode.asObservable();
    }
    // Service message commands
    changeNodeSelected(idResidentialArea) {
        this.emitNodeSelected.next(idResidentialArea);
    }
    // Service message commands
    changeDataSource(data) {
        this.emitDataSource.next(data);
    }
    expandAllNodes(expand) {
        this.emitExpandAllNodes.next(expand);
    }
    collapseAllNodes(collapse) {
        this.emitCollapseAllNodes.next(collapse);
    }
    refreshTree() {
        this.emitRefreshTree.next();
    }
    refreshTreeWithPagination() {
        this.emitRefreshTreeWithPagination.next();
    }
    expandOneNode(node) {
        this.emitExpandOneNode.next(node);
    }
    collapseOneNode(node) {
        this.emitCollapseOneNode.next(node);
    }
}
TreeHelisaService.ɵfac = function TreeHelisaService_Factory(t) { return new (t || TreeHelisaService)(); };
TreeHelisaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TreeHelisaService_Factory() { return new TreeHelisaService(); }, token: TreeHelisaService, providedIn: "root" });
TreeHelisaService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeHelisaService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1oZWxpc2Euc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvaGVsaXNhLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvdHJlZS1oZWxpc2EvdHJlZS1oZWxpc2Euc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUEwQixNQUFNLE1BQU0sQ0FBQztBQUN4RTs7QUFNQSxNQUFNLE9BQU8saUJBQWlCO0FBQzlCLElBcUVJO0FBQ0osUUFyRUksNEJBQTRCO0FBQ2hDLFFBQVkscUJBQWdCLEdBQXFDLElBQUksZUFBZSxDQUFrQixDQUFDLENBQUMsQ0FBQztBQUN6RyxRQUFJLDRCQUE0QjtBQUNoQyxRQUFJLGlCQUFZLEdBQWdDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNyRixRQUNJLDRCQUE0QjtBQUNoQyxRQUFZLG1CQUFjLEdBQTBCLElBQUksZUFBZSxDQUFPLFNBQVMsQ0FBQyxDQUFDO0FBQ3pGLFFBQ0ksNEJBQTRCO0FBQ2hDLFFBQUkseUJBQW9CLEdBQXFCLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDaEYsUUFDSSx5QkFBeUI7QUFDN0IsUUFBWSx1QkFBa0IsR0FBNkIsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLENBQUM7QUFDOUYsUUFBSSxlQUFVLEdBQXdCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM3RSxRQUNLLDJCQUEyQjtBQUNoQyxRQUFhLHlCQUFvQixHQUE2QixJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsQ0FBQztBQUNqRyxRQUFLLGlCQUFZLEdBQXdCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsRixRQUNZLG9CQUFlLEdBQWtCLElBQUksT0FBTyxFQUFRLENBQUM7QUFDakUsUUFBSSwwQkFBcUIsR0FBcUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsRixRQUNZLGtDQUE2QixHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDO0FBQy9FLFFBQUksd0NBQW1DLEdBQXFCLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM5RyxRQUNZLHNCQUFpQixHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDO0FBQ25FLFFBQUksNEJBQXVCLEdBQXFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN0RixRQUNZLHdCQUFtQixHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDO0FBQ3JFLFFBQUksOEJBQXlCLEdBQXFCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUMxRixJQXdDSSxDQUFDO0FBQ0wsSUF4Q0ksMkJBQTJCO0FBQy9CLElBQUksa0JBQWtCLENBQUMsaUJBQWtDO0FBQUksUUFDckQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3RELElBQUksQ0FBQztBQUNMLElBQ0ksMkJBQTJCO0FBQy9CLElBQUksZ0JBQWdCLENBQUMsSUFBVTtBQUFJLFFBQzNCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLElBQUksQ0FBQztBQUNMLElBQ0ksY0FBYyxDQUFDLE1BQWU7QUFBSSxRQUM5QixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLElBQUksQ0FBQztBQUNMLElBQ0ksZ0JBQWdCLENBQUMsUUFBaUI7QUFBSSxRQUNsQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pELElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUFLLFFBQ1osSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNwQyxJQUFJLENBQUM7QUFDTCxJQUVJLHlCQUF5QjtBQUFLLFFBQzFCLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsRCxJQUFJLENBQUM7QUFDTCxJQUVJLGFBQWEsQ0FBQyxJQUFVO0FBQUksUUFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QyxJQUFJLENBQUM7QUFDTCxJQUVJLGVBQWUsQ0FBQyxJQUFVO0FBQUksUUFDMUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxJQUFJLENBQUM7QUFDTDswR0FDQTtBQUFDLHFMQXRFSTtBQUFDO0FBSEwsVUFBVSxTQUFDLGtCQUNSLFVBQVUsRUFBRSxNQUFNLGNBQ3JCOzs7OztnREFHZTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgQmVoYXZpb3JTdWJqZWN0LCBTdWJzY3JpYmVyLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi9ub2RlJztcblxuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRyZWVIZWxpc2FTZXJ2aWNlIHtcblxuICAgIC8vIE9ic2VydmFibGUgc3RyaW5nIHNvdXJjZXNcbiAgICBwcml2YXRlIGVtaXROb2RlU2VsZWN0ZWQ6IEJlaGF2aW9yU3ViamVjdDxudW1iZXIgfCBzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXIgfCBzdHJpbmc+KDEpO1xuICAgIC8vIE9ic2VydmFibGUgc3RyaW5nIHN0cmVhbXNcbiAgICBub2RlU2VsZWN0ZWQ6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVtYmVyPiA9IHRoaXMuZW1pdE5vZGVTZWxlY3RlZC5hc09ic2VydmFibGUoKTtcblxuICAgIC8vIE9ic2VydmFibGUgc3RyaW5nIHNvdXJjZXNcbiAgICBwcml2YXRlIGVtaXREYXRhU291cmNlOiBCZWhhdmlvclN1YmplY3Q8Tm9kZT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE5vZGU+KHVuZGVmaW5lZCk7XG5cbiAgICAvLyBPYnNlcnZhYmxlIHN0cmluZyBzdHJlYW1zXG4gICAgZGF0YVNvdXJjZU9ic2VydmFibGU6IE9ic2VydmFibGU8Tm9kZT4gPSB0aGlzLmVtaXREYXRhU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgLy8gRXhwYW5kIG5vZGUgb2JzZXJ2YWJsZVxuICAgIHByaXZhdGUgZW1pdEV4cGFuZEFsbE5vZGVzOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KG51bGwpO1xuICAgIG5vZGVFeHBhbmQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLmVtaXRFeHBhbmRBbGxOb2Rlcy5hc09ic2VydmFibGUoKTtcblxuICAgICAvLyBDb2xsYXBzZSBub2RlIG9ic2VydmFibGVcbiAgICAgcHJpdmF0ZSBlbWl0Q29sbGFwc2VBbGxOb2RlczogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihudWxsKTtcbiAgICAgbm9kZUNvbGxhcHNlOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy5lbWl0Q29sbGFwc2VBbGxOb2Rlcy5hc09ic2VydmFibGUoKTtcblxuICAgIHByaXZhdGUgZW1pdFJlZnJlc2hUcmVlOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgICByZWZyZXNoVHJlZU9ic2VydmFibGU6IE9ic2VydmFibGU8dm9pZD4gPSB0aGlzLmVtaXRSZWZyZXNoVHJlZS5hc09ic2VydmFibGUoKTtcblxuICAgIHByaXZhdGUgZW1pdFJlZnJlc2hUcmVlV2l0aFBhZ2luYXRpb246IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICAgIHJlZnJlc2hUcmVlV2l0aFBhZ2luYXRpb25PYnNlcnZhYmxlOiBPYnNlcnZhYmxlPHZvaWQ+ID0gdGhpcy5lbWl0UmVmcmVzaFRyZWVXaXRoUGFnaW5hdGlvbi5hc09ic2VydmFibGUoKTtcblxuICAgIHByaXZhdGUgZW1pdEV4cGFuZE9uZU5vZGU6IFN1YmplY3Q8Tm9kZT4gPSBuZXcgU3ViamVjdDxOb2RlPigpO1xuICAgIGV4cGFuZE9uZU5vZGVPYnNlcnZhYmxlOiBPYnNlcnZhYmxlPE5vZGU+ID0gdGhpcy5lbWl0RXhwYW5kT25lTm9kZS5hc09ic2VydmFibGUoKTtcblxuICAgIHByaXZhdGUgZW1pdENvbGxhcHNlT25lTm9kZTogU3ViamVjdDxOb2RlPiA9IG5ldyBTdWJqZWN0PE5vZGU+KCk7XG4gICAgY29sbGFwc2VPbmVOb2RlT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxOb2RlPiA9IHRoaXMuZW1pdENvbGxhcHNlT25lTm9kZS5hc09ic2VydmFibGUoKTtcblxuICAgIC8vIFNlcnZpY2UgbWVzc2FnZSBjb21tYW5kc1xuICAgIGNoYW5nZU5vZGVTZWxlY3RlZChpZFJlc2lkZW50aWFsQXJlYTogbnVtYmVyIHwgc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZW1pdE5vZGVTZWxlY3RlZC5uZXh0KGlkUmVzaWRlbnRpYWxBcmVhKTtcbiAgICB9XG5cbiAgICAvLyBTZXJ2aWNlIG1lc3NhZ2UgY29tbWFuZHNcbiAgICBjaGFuZ2VEYXRhU291cmNlKGRhdGE6IE5vZGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbWl0RGF0YVNvdXJjZS5uZXh0KGRhdGEpO1xuICAgIH1cblxuICAgIGV4cGFuZEFsbE5vZGVzKGV4cGFuZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmVtaXRFeHBhbmRBbGxOb2Rlcy5uZXh0KGV4cGFuZCk7XG4gICAgfVxuXG4gICAgY29sbGFwc2VBbGxOb2Rlcyhjb2xsYXBzZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmVtaXRDb2xsYXBzZUFsbE5vZGVzLm5leHQoY29sbGFwc2UpO1xuICAgIH1cblxuICAgIHJlZnJlc2hUcmVlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVtaXRSZWZyZXNoVHJlZS5uZXh0KCk7XG4gICAgfVxuXG5cbiAgICByZWZyZXNoVHJlZVdpdGhQYWdpbmF0aW9uKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVtaXRSZWZyZXNoVHJlZVdpdGhQYWdpbmF0aW9uLm5leHQoKTtcbiAgICB9XG5cblxuICAgIGV4cGFuZE9uZU5vZGUobm9kZTogTm9kZSk6IHZvaWQge1xuICAgIHRoaXMuZW1pdEV4cGFuZE9uZU5vZGUubmV4dChub2RlKTtcbiAgICB9XG5cblxuICAgIGNvbGxhcHNlT25lTm9kZShub2RlOiBOb2RlKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZW1pdENvbGxhcHNlT25lTm9kZS5uZXh0KG5vZGUpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxuXG59XG4iXX0=