import { Injectable } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export class TreeHelisaService {
    constructor() {
        // Observable string sources
        this.emitNodeSelected = new BehaviorSubject(1);
        // Observable string streams
        this.nodeSelected = this.emitNodeSelected.asObservable();
        // Observable string sources
        this.emitDataSource = new BehaviorSubject(undefined);
        // Observable string streams
        this.dataSourceObservable = this.emitDataSource.asObservable();
        // Expand node observable
        this.emitExpandAllNodes = new BehaviorSubject(null);
        this.nodeExpand = this.emitExpandAllNodes.asObservable();
        // Collapse node observable
        this.emitCollapseAllNodes = new BehaviorSubject(null);
        this.nodeCollapse = this.emitCollapseAllNodes.asObservable();
        this.emitRefreshTree = new Subject();
        this.refreshTreeObservable = this.emitRefreshTree.asObservable();
        this.emitRefreshTreeWithPagination = new Subject();
        this.refreshTreeWithPaginationObservable = this.emitRefreshTreeWithPagination.asObservable();
        this.emitExpandOneNode = new Subject();
        this.expandOneNodeObservable = this.emitExpandOneNode.asObservable();
        this.emitCollapseOneNode = new Subject();
        this.collapseOneNodeObservable = this.emitCollapseOneNode.asObservable();
    }
    // Service message commands
    changeNodeSelected(idResidentialArea) {
        this.emitNodeSelected.next(idResidentialArea);
    }
    // Service message commands
    changeDataSource(data) {
        this.emitDataSource.next(data);
    }
    expandAllNodes(expand) {
        this.emitExpandAllNodes.next(expand);
    }
    collapseAllNodes(collapse) {
        this.emitCollapseAllNodes.next(collapse);
    }
    refreshTree() {
        this.emitRefreshTree.next();
    }
    refreshTreeWithPagination() {
        this.emitRefreshTreeWithPagination.next();
    }
    expandOneNode(node) {
        this.emitExpandOneNode.next(node);
    }
    collapseOneNode(node) {
        this.emitCollapseOneNode.next(node);
    }
}
TreeHelisaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TreeHelisaService_Factory() { return new TreeHelisaService(); }, token: TreeHelisaService, providedIn: "root" });
TreeHelisaService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
TreeHelisaService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1oZWxpc2Euc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2hlbGlzYS1saWIvc3JjL2xpYi9jb21wb25lbnRzL3RyZWUtaGVsaXNhL3RyZWUtaGVsaXNhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBMEIsTUFBTSxNQUFNLENBQUM7O0FBT3hFLE1BQU0sT0FBTyxpQkFBaUI7SUFzRTFCO1FBcEVBLDRCQUE0QjtRQUNwQixxQkFBZ0IsR0FBcUMsSUFBSSxlQUFlLENBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQ3JHLDRCQUE0QjtRQUM1QixpQkFBWSxHQUFnQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFakYsNEJBQTRCO1FBQ3BCLG1CQUFjLEdBQTBCLElBQUksZUFBZSxDQUFPLFNBQVMsQ0FBQyxDQUFDO1FBRXJGLDRCQUE0QjtRQUM1Qix5QkFBb0IsR0FBcUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUU1RSx5QkFBeUI7UUFDakIsdUJBQWtCLEdBQTZCLElBQUksZUFBZSxDQUFVLElBQUksQ0FBQyxDQUFDO1FBQzFGLGVBQVUsR0FBd0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXhFLDJCQUEyQjtRQUNuQix5QkFBb0IsR0FBNkIsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLENBQUM7UUFDNUYsaUJBQVksR0FBd0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXRFLG9CQUFlLEdBQWtCLElBQUksT0FBTyxFQUFRLENBQUM7UUFDN0QsMEJBQXFCLEdBQXFCLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFdEUsa0NBQTZCLEdBQWtCLElBQUksT0FBTyxFQUFRLENBQUM7UUFDM0Usd0NBQW1DLEdBQXFCLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVsRyxzQkFBaUIsR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUMvRCw0QkFBdUIsR0FBcUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBRTFFLHdCQUFtQixHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQ2pFLDhCQUF5QixHQUFxQixJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLENBQUM7SUF5Q3RGLENBQUM7SUF2Q0QsMkJBQTJCO0lBQzNCLGtCQUFrQixDQUFDLGlCQUFrQztRQUNqRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELDJCQUEyQjtJQUMzQixnQkFBZ0IsQ0FBQyxJQUFVO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBZTtRQUMxQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFpQjtRQUM5QixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBR0QseUJBQXlCO1FBQ3JCLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBR0QsYUFBYSxDQUFDLElBQVU7UUFDeEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBR0QsZUFBZSxDQUFDLElBQVU7UUFDdEIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7O1lBdkVKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCwgQmVoYXZpb3JTdWJqZWN0LCBTdWJzY3JpYmVyLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuL25vZGUnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVHJlZUhlbGlzYVNlcnZpY2Uge1xyXG5cclxuICAgIC8vIE9ic2VydmFibGUgc3RyaW5nIHNvdXJjZXNcclxuICAgIHByaXZhdGUgZW1pdE5vZGVTZWxlY3RlZDogQmVoYXZpb3JTdWJqZWN0PG51bWJlciB8IHN0cmluZz4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlciB8IHN0cmluZz4oMSk7XHJcbiAgICAvLyBPYnNlcnZhYmxlIHN0cmluZyBzdHJlYW1zXHJcbiAgICBub2RlU2VsZWN0ZWQ6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVtYmVyPiA9IHRoaXMuZW1pdE5vZGVTZWxlY3RlZC5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgICAvLyBPYnNlcnZhYmxlIHN0cmluZyBzb3VyY2VzXHJcbiAgICBwcml2YXRlIGVtaXREYXRhU291cmNlOiBCZWhhdmlvclN1YmplY3Q8Tm9kZT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE5vZGU+KHVuZGVmaW5lZCk7XHJcblxyXG4gICAgLy8gT2JzZXJ2YWJsZSBzdHJpbmcgc3RyZWFtc1xyXG4gICAgZGF0YVNvdXJjZU9ic2VydmFibGU6IE9ic2VydmFibGU8Tm9kZT4gPSB0aGlzLmVtaXREYXRhU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIC8vIEV4cGFuZCBub2RlIG9ic2VydmFibGVcclxuICAgIHByaXZhdGUgZW1pdEV4cGFuZEFsbE5vZGVzOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KG51bGwpO1xyXG4gICAgbm9kZUV4cGFuZDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuZW1pdEV4cGFuZEFsbE5vZGVzLmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgICAvLyBDb2xsYXBzZSBub2RlIG9ic2VydmFibGVcclxuICAgICBwcml2YXRlIGVtaXRDb2xsYXBzZUFsbE5vZGVzOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KG51bGwpO1xyXG4gICAgIG5vZGVDb2xsYXBzZTogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuZW1pdENvbGxhcHNlQWxsTm9kZXMuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBlbWl0UmVmcmVzaFRyZWU6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG4gICAgcmVmcmVzaFRyZWVPYnNlcnZhYmxlOiBPYnNlcnZhYmxlPHZvaWQ+ID0gdGhpcy5lbWl0UmVmcmVzaFRyZWUuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBlbWl0UmVmcmVzaFRyZWVXaXRoUGFnaW5hdGlvbjogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcbiAgICByZWZyZXNoVHJlZVdpdGhQYWdpbmF0aW9uT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTx2b2lkPiA9IHRoaXMuZW1pdFJlZnJlc2hUcmVlV2l0aFBhZ2luYXRpb24uYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBlbWl0RXhwYW5kT25lTm9kZTogU3ViamVjdDxOb2RlPiA9IG5ldyBTdWJqZWN0PE5vZGU+KCk7XHJcbiAgICBleHBhbmRPbmVOb2RlT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxOb2RlPiA9IHRoaXMuZW1pdEV4cGFuZE9uZU5vZGUuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBlbWl0Q29sbGFwc2VPbmVOb2RlOiBTdWJqZWN0PE5vZGU+ID0gbmV3IFN1YmplY3Q8Tm9kZT4oKTtcclxuICAgIGNvbGxhcHNlT25lTm9kZU9ic2VydmFibGU6IE9ic2VydmFibGU8Tm9kZT4gPSB0aGlzLmVtaXRDb2xsYXBzZU9uZU5vZGUuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgLy8gU2VydmljZSBtZXNzYWdlIGNvbW1hbmRzXHJcbiAgICBjaGFuZ2VOb2RlU2VsZWN0ZWQoaWRSZXNpZGVudGlhbEFyZWE6IG51bWJlciB8IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW1pdE5vZGVTZWxlY3RlZC5uZXh0KGlkUmVzaWRlbnRpYWxBcmVhKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXJ2aWNlIG1lc3NhZ2UgY29tbWFuZHNcclxuICAgIGNoYW5nZURhdGFTb3VyY2UoZGF0YTogTm9kZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW1pdERhdGFTb3VyY2UubmV4dChkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBleHBhbmRBbGxOb2RlcyhleHBhbmQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVtaXRFeHBhbmRBbGxOb2Rlcy5uZXh0KGV4cGFuZCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29sbGFwc2VBbGxOb2Rlcyhjb2xsYXBzZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW1pdENvbGxhcHNlQWxsTm9kZXMubmV4dChjb2xsYXBzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVmcmVzaFRyZWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5lbWl0UmVmcmVzaFRyZWUubmV4dCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZWZyZXNoVHJlZVdpdGhQYWdpbmF0aW9uKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW1pdFJlZnJlc2hUcmVlV2l0aFBhZ2luYXRpb24ubmV4dCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBleHBhbmRPbmVOb2RlKG5vZGU6IE5vZGUpOiB2b2lkIHtcclxuICAgIHRoaXMuZW1pdEV4cGFuZE9uZU5vZGUubmV4dChub2RlKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY29sbGFwc2VPbmVOb2RlKG5vZGU6IE5vZGUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVtaXRDb2xsYXBzZU9uZU5vZGUubmV4dChub2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==